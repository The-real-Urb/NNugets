<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Coherence</name>
    </assembly>
    <members>
        <member name="T:Tangosol.Internal.Util.Processor.CacheProcessors">
            <summary>
            Contains factory methods and entry processor classes that are used to implement
            functionality exposed via different variants of <see cref="T:Tangosol.Net.INamedCache"/> API.
            </summary>
            <author>as 2015.01.17</author>
            <author>lh 2015.04.08</author>
            <since>Coherence 12.2.1</since>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.Nop">
            <summary>
            Return a <b>Null</b> entry processor.
            </summary>
            <returns>
            A <b>Null</b> processor.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.Get">
            <summary>
            Return a <b>Get</b> entry processor.
            </summary>
            <returns>
            A <b>Get</b> processor.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.GetOrDefault">
            <summary>
            Return a <b>GetOrDefault</b> entry processor.
            </summary>
            <returns>
            A <b>GetOrDefault</b> processor.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.Insert(System.Object,System.Int64)">
            <summary>
            Return a <b>Insert</b> entry processor.
            </summary>
            <param name="value">
            The value to insert.
            </param>
            <param name="cMillis">
            The number of milliseconds until the cache entry will expire.
            </param>
            <returns>
            A <b>Insert</b> processor.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertAll(System.Collections.IDictionary)">
            <summary>
            Return a <b>InsertAll</b> entry processor.
            </summary>
            <param name="map">
            The map of entries to insert.
            </param>
            <returns>
            A <b>InsertAll</b> processor.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertIfAbsent(System.Object)">
            <summary>
            Return a <b>InsertIfAbsent</b> entry processor.
            </summary>
            <param name="value">
            The value to insert.
            </param>
            <returns>
            A <b>InsertIfAbsent</b> processor.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.Remove">
            <summary>
            Return a <b>Remove</b> entry processor.
            </summary>
            <returns>
            A <b>Remove</b> processor.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.RemoveBlind">
            <summary>
            Return a <b>RemoveBlind</b> entry processor.
            </summary>
            <returns>
            A <b>RemoveBlind</b> processor.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.Remove(System.Object)">
            <summary>
            Return a <b>Remove</b> entry processor.
            </summary>
            <param name="value">
            The value to remove.
            </param>
            <returns>
            A <b>Remove</b> processor.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.Replace(System.Object)">
            <summary>
            Return a <b>Replace</b> entry processor.
            </summary>
            <param name="value">
            The value to replce.
            </param>
            <returns>
            A <b>Replace</b> processor.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.Replace(System.Object,System.Object)">
            <summary>
            Return a <b>Replace</b> entry processor.
            </summary>
            <param name="oldValue">
            The old value to be replaced.
            </param>
            <param name="newValue">
            The new value to replace the old value.
            </param>
            <returns>
            A <b>Replace</b> processor.
            </returns>
        </member>
        <member name="T:Tangosol.Internal.Util.Processor.CacheProcessors.BaseProcessor">
            <summary>
             Abstract base class for entry processors.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Processor.AbstractProcessor">
            <summary>
            An <b>AbstractProcessor</b> is a partial
            <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> implementation that provides the
            default implementation of the
            <see cref="M:Tangosol.Net.Cache.IEntryProcessor.ProcessAll(System.Collections.ICollection)"/> method.
            </summary>
            <author>Cameron Purdy  2005.07.19</author>
            <author>Jason Howes  2005.07.19</author>
            <author>Ivan Cikic  2005.07.19</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="T:Tangosol.Net.Cache.IEntryProcessor">
            <summary>
            An invocable agent that operates against the entry objects within a
            cache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.IEntryProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.IEntryProcessor.ProcessAll(System.Collections.ICollection)">
            <summary>
            Process a collection of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>
            objects.
            </summary>
            <remarks>
            This method is semantically equivalent to:
            <pre>
            IDictionary results = new Hashtable();
            foreach (IInvocableCacheEntry entry in entries)
            {
                results[entry.Key] = Process(entry);
            }
            return results;
            </pre>
            </remarks>
            <param name="entries">
            A collection of <b>IInvocableCacheEntry</b> objects to process.
            </param>
            <returns>
            A dictionary containing the results of the processing, up to one
            entry for each <b>IInvocableCacheEntry</b> that was processed,
            keyed by the keys of the dictionary that were processed, with a
            corresponding value being the result of the processing for each
            key.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.AbstractProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.AbstractProcessor.ProcessAll(System.Collections.ICollection)">
            <summary>
            Process a collection of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>
            objects.
            </summary>
            <remarks>
            This method is semantically equivalent to:
            <pre>
            IDictionary results = new Hashtable();
            foreach (IInvocableCacheEntry entry in entries)
            {
                results[entry.Key] = Process(entry);
            }
            return results;
            </pre>
            </remarks>
            <param name="entries">
            A read-only collection of <b>IInvocableCacheEntry</b>
            objects to process.
            </param>
            <returns>
            A dictionary containing the results of the processing, up to one
            entry for each <b>IInvocableCacheEntry</b> that was
            processed, keyed by the keys of the dictionary that were
            processed, with a corresponding value being the result of the
            processing for each key.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.IPortableObject">
            <summary>
            The <b>IPortableObject</b> interface is implemented by .NET classes
            that can self-serialize and deserialize their state to and from a POF
            data stream.
            </summary>
            <remarks>
            The <see cref="M:Tangosol.IO.Pof.IPortableObject.ReadExternal(Tangosol.IO.Pof.IPofReader)"/> and <see cref="M:Tangosol.IO.Pof.IPortableObject.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
            methods of the <b>IPortableObject</b> interface are implemented by a
            class to give the class complete control its own POF serialization
            and deserialization.
            </remarks>
            <author>Cameron Purdy, Jason Howes  2006.07.13</author>
            <author>Aleksandar Seovic  2006.08.08</author>
            <seealso cref="T:Tangosol.IO.Pof.IPofReader"/>
            <seealso cref="T:Tangosol.IO.Pof.IPofWriter"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.IPortableObject.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPortableObject.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.BaseProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.BaseProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="T:Tangosol.Internal.Util.Processor.CacheProcessors.NullProcessor">
            <summary>
             Null entry processor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.NullProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            Null.
            </returns>
        </member>
        <member name="T:Tangosol.Internal.Util.Processor.CacheProcessors.GetProcessor">
            <summary>
            Get entry processor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.GetProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an Get entry processor.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing.
            </returns>
        </member>
        <member name="T:Tangosol.Internal.Util.Processor.CacheProcessors.GetOrDefaultProcessor">
            <summary>
            GetOrDefault entry processor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.GetOrDefaultProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an GetOrDefault entry processor.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing.
            </returns>
        </member>
        <member name="T:Tangosol.Internal.Util.Processor.CacheProcessors.InsertProcessor">
            <summary>
            Insert entry processor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertProcessor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertProcessor.#ctor(System.Object,System.Int64)">
            <summary>
            Creates an instance of a <see cref="T:Tangosol.Internal.Util.Processor.CacheProcessors.InsertProcessor"/> entry processor.
            </summary>
            <param name="value">
            The value to insert.
            </param>
            <param name="cMillis">
            The number of milliseconds until the cache entry will expire.
            </param>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an GetOrDefault entry processor.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Internal.Util.Processor.CacheProcessors.InsertProcessor.m_value">
            <summary>
            The value to insert.
            </summary>
        </member>
        <member name="F:Tangosol.Internal.Util.Processor.CacheProcessors.InsertProcessor.m_cMillis">
            <summary>
            The number of milliseconds until the cache entry will expire.
            </summary>
        </member>
        <member name="T:Tangosol.Internal.Util.Processor.CacheProcessors.InsertAllProcessor">
            <summary>
            InsertAll entry processor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertAllProcessor.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertAllProcessor.#ctor(System.Collections.IDictionary)">
            <summary>
            Creates an instance of a <see cref="T:Tangosol.Internal.Util.Processor.CacheProcessors.InsertAllProcessor"/> entry processor.
            </summary>
            <param name="map">
            The map of entries to insert.
            </param>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertAllProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an InsertAll entry processor.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            Null.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertAllProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertAllProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Internal.Util.Processor.CacheProcessors.InsertAllProcessor.m_map">
            <summary>
            The map of entries to insert in.
            </summary>
        </member>
        <member name="T:Tangosol.Internal.Util.Processor.CacheProcessors.InsertIfAbsentProcessor">
            <summary>
            InsertIfAbsent entry processor
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertIfAbsentProcessor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertIfAbsentProcessor.#ctor(System.Object)">
            <summary>
            Creates an instance of a <see cref="T:Tangosol.Internal.Util.Processor.CacheProcessors.InsertIfAbsentProcessor"/> entry processor.
            </summary>
            <param name="value">
            The value to insert.
            </param>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertIfAbsentProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an InsertIfAbsent entry processor.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            If value is present, return the value; otherwise, return null.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertIfAbsentProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.InsertIfAbsentProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Internal.Util.Processor.CacheProcessors.InsertIfAbsentProcessor.m_value">
            <summary>
            The value to insert.
            </summary>
        </member>
        <member name="T:Tangosol.Internal.Util.Processor.CacheProcessors.RemoveProcessor">
            <summary>
            Remove entry processor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.RemoveProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an Remove entry processor.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The value removed.
            </returns>
        </member>
        <member name="T:Tangosol.Internal.Util.Processor.CacheProcessors.RemoveBlindProcessor">
            <summary>
            Remove entry processor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.RemoveBlindProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an RemoveBlind entry processor.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing.
            </returns>
        </member>
        <member name="T:Tangosol.Internal.Util.Processor.CacheProcessors.RemoveValueProcessor">
            <summary>
            RemoveValue entry processor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.RemoveValueProcessor.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.RemoveValueProcessor.#ctor(System.Object)">
            <summary>
            Creates an instance of a <see cref="T:Tangosol.Internal.Util.Processor.CacheProcessors.RemoveValueProcessor"/> entry processor.
            </summary>
            <param name="value">
            The value to remove.
            </param>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.RemoveValueProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an RemoveValue entry processor.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing: true, if the entry is found and
            removed; false otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.RemoveValueProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.RemoveValueProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Internal.Util.Processor.CacheProcessors.RemoveValueProcessor.m_value">
            <summary>
            The value to remove.
            </summary>
        </member>
        <member name="T:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceProcessor">
            <summary>
            Replace entry processor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceProcessor.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceProcessor.#ctor(System.Object)">
            <summary>
            Creates an instance of a <see cref="T:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceProcessor"/> entry processor.
            </summary>
            <param name="value">
            The value to replace.
            </param>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an Replace entry processor.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceProcessor.m_value">
            <summary>
            The value to replace with.
            </summary>
        </member>
        <member name="T:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceValueProcessor">
            <summary>
            ReplaceValue entry processor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceValueProcessor.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceValueProcessor.#ctor(System.Object,System.Object)">
            <summary>
            Creates an instance of a <see cref="T:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceValueProcessor"/> entry processor.
            </summary>
            <param name="oldValue">
            The old value to be replaced.
            </param>
            <param name="newValue">
            The new value to replace the old value.
            </param>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceValueProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <b>ReplaceValue</b> entry processor.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing: true, if the entry is found and
            value is replaced; false, otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceValueProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceValueProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceValueProcessor.m_oldValue">
            <summary>
            The old value to be replaced.
            </summary>
        </member>
        <member name="F:Tangosol.Internal.Util.Processor.CacheProcessors.ReplaceValueProcessor.m_newValue">
            <summary>
            The new value to replace the old value.
            </summary>
        </member>
        <member name="T:Tangosol.IO.BinaryDeltaCompressor">
             <summary>
             An IDeltaCompressor implementation that works with opaque (binary) values.
             </summary>
             <remarks>
             The delta format is composed of a leading byte that indicates the format;
             the format indicator byte is one of the FMT_* field values. If the delta
             value does not begin with one of the FMT_* indicators, then the delta value
             is itself the new value. If the delta is null, then it indicates no change.
             The grammar follows:
             <pre>
             BinaryDelta:
               FMT_EMPTY
               FMT_BINDIFF BinaryChangeList-opt OP_TERM
               FMT_REPLACE-opt Bytes
               null
            
             BinaryChangeList:
               OP_EXTRACT Offset Length BinaryChangeList-opt
               OP_APPEND Length Bytes BinaryChangeList-opt
            
             Offset:
             Length:
               packed-integer
            
             Bytes:
               byte Bytes-opt
             </pre>
             </remarks>
             <author>Cameron Purdy  2009.01.06</author>
             <author>Aleksandar Seovic  2009.03.30</author>
             <since>Coherence 3.5</since>
        </member>
        <member name="T:Tangosol.IO.IDeltaCompressor">
            <summary>
            The IDeltaCompressor interface provides the capability of comparing two
            in-memory buffers containing an old and a new value, and producing a result
            (called a "delta") that can be applied to the old value to create the new
            value.
            </summary>
            <author>Cameron Purdy  2009.01.06</author>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.IO.IDeltaCompressor.ExtractDelta(Tangosol.Util.Binary,Tangosol.Util.Binary)">
            <summary>
            <p>
            Compare an old value to a new value and generate a delta that
            represents the changes that must be made to the old value in order to
            transform it into the new value.  The generated delta must be a Binary
            of non-zero length.</p>
            <p>
            If the old value is null, the generated delta must be a "replace",
            meaning that applying it to any value must produce the specified new
            value.</p>
            </summary>
            <param name="binOld">
            The old value.
            </param>
            <param name="binNew">
            The new value; must not be null.
            </param>
            <returns>
            The changes that must be made to the old value in order to
            transform it into the new value, or null to indicate no change.
            </returns>
        </member>
        <member name="M:Tangosol.IO.IDeltaCompressor.ApplyDelta(Tangosol.Util.Binary,Tangosol.Util.Binary)">
            <summary>
            Apply a delta to an old value in order to create a new value.
            </summary>
            <param name="binOld">
            The old value.
            </param>
            <param name="binDelta">
            The delta information returned from <see cref="M:Tangosol.IO.IDeltaCompressor.ExtractDelta(Tangosol.Util.Binary,Tangosol.Util.Binary)"/>
            to apply to the old value.
            </param>
            <returns>
            The new value.
            </returns>
        </member>
        <member name="F:Tangosol.IO.BinaryDeltaCompressor.FMT_EMPTY">
            <summary>
            A format indicator (the first byte of the binary delta) that indicates
            that the new value is a zero-length binary value.
            </summary>
        </member>
        <member name="F:Tangosol.IO.BinaryDeltaCompressor.FMT_REPLACE">
            <summary>
            A format indicator (the first byte of the binary delta) that indicates
            that the new value is found in its entirety in the delta value. In
            other words, other than the first byte, the delta is itself the new
            value.
            </summary>
        </member>
        <member name="F:Tangosol.IO.BinaryDeltaCompressor.FMT_BINDIFF">
            <summary>
            A format indicator (the first byte of the binary delta) that indicates
            that the new value is formed by applying a series of modifications to
            the old value. The possible modifications are defined by the OP_*
            constants.
            </summary>
        </member>
        <member name="F:Tangosol.IO.BinaryDeltaCompressor.OP_EXTRACT">
            <summary>
            A binary delta operator that instructs the <see cref="M:Tangosol.IO.BinaryDeltaCompressor.ApplyDelta(Tangosol.Util.Binary,Tangosol.Util.Binary)"/> method
            to extract bytes from the old value and append them to the new value.
            The format is the one-byte OP_EXTRACT indicator followed by a packed
            int offset and packed int length. The offset and length indicate the
            region of the old value to extract and append to the new value.
            </summary>
        </member>
        <member name="F:Tangosol.IO.BinaryDeltaCompressor.OP_APPEND">
            <summary>
            A binary delta operator that instructs the {@link #applyDelta} method
            to copy the following bytes from the delta value and append them to the
            new value. The format is the one-byte OP_APPEND indicator followed by a
            packed int length and then a series of bytes. The length indicates the
            length of the series of bytes to copy from the delta value and append
            to the new value.
            </summary>
        </member>
        <member name="F:Tangosol.IO.BinaryDeltaCompressor.OP_TERM">
            <summary>
            A binary delta operator that instructs the {@link #applyDelta} method
            that the delta has been fully applied.
            </summary>
        </member>
        <member name="F:Tangosol.IO.BinaryDeltaCompressor.MIN_BLOCK">
            <summary>
            Minimum length of an "extract" block to encode.
            </summary>
        </member>
        <member name="M:Tangosol.IO.BinaryDeltaCompressor.ExtractDelta(Tangosol.Util.Binary,Tangosol.Util.Binary)">
            <summary>
            Compare an old value to a new value and generate a delta that
            represents the changes that must be made to the old value in order to
            transform it into the new value.
            </summary>
            <param name="binOld">
            The old value.
            </param>
            <param name="binNew">
            The new value.
            </param>
            <returns>
            The changes that must be made to the old value in order to
            transform it into the new value, or null to indicate no change.
            </returns>
        </member>
        <member name="M:Tangosol.IO.BinaryDeltaCompressor.ApplyDelta(Tangosol.Util.Binary,Tangosol.Util.Binary)">
            <summary>
            Apply a delta to an old value in order to create a new value.
            </summary>
            <param name="binOld">
            The old value.
            </param>
            <param name="binDelta">
            The delta information returned from <see cref="M:Tangosol.IO.IDeltaCompressor.ExtractDelta(Tangosol.Util.Binary,Tangosol.Util.Binary)"/>
            to apply to the old value.
            </param>
            <returns>
            The new value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.BinaryDeltaCompressor.CreateDelta(Tangosol.Util.Binary,Tangosol.Util.Binary)">
            <summary>
            Actually create a delta in the binary delta format. This method is
            designed to be overridden by subclasses that have more intimate
            knowledge of the contents of the buffers.
            </summary>
            <param name="binOld">
            The old value.
            </param>
            <param name="binNew">
            The new value.
            </param>
            <returns>
            A delta in the binary delta format.
            </returns>
        </member>
        <member name="M:Tangosol.IO.BinaryDeltaCompressor.EncodeReplace(Tangosol.Util.Binary)">
            <summary>
            Encode the passed buffer into a delta value that will cause the old
            value to be replaced by the value in the passed buffer.
            </summary>
            <param name="bin">
            A non-null, non-zero-length Binary
            </param>
            <returns>
            a Binary that acts as a delta that replaces an old value
            with the contents of <paramref name="bin"/>
            </returns>
        </member>
        <member name="M:Tangosol.IO.BinaryDeltaCompressor.EnsureWriter(Tangosol.IO.DataWriter,System.Int32)">
            <summary>
            Make sure that a DataWriter exists if one doesn't already.
            </summary>
            <param name="writer">
            The existing DataWriter or null.
            </param>
            <param name="cbMax">
            The expected resulting size of the write buffer
            </param>
            <returns>
            A DataWriter, never null
            </returns>
        </member>
        <member name="M:Tangosol.IO.BinaryDeltaCompressor.WriteAppend(Tangosol.IO.DataWriter,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encode a binary diff "append" operator to indicate that bytes should
            be appended from the delta stream to the new value.
            </summary>
            <param name="writer">
            The existing DataWriter for the diff, or null
            </param>
            <param name="cbMax">
            The expected resulting size of the write buffer.
            </param>
            <param name="ab">
            The byte array from which to get the bytes to append.
            </param>
            <param name="of">
            The offset of the old buffer to append.
            </param>
            <param name="cb">
            The length of the old buffer to append.
            </param>
            <returns>
            A DataWriter, never null.
            </returns>
        </member>
        <member name="M:Tangosol.IO.BinaryDeltaCompressor.WriteExtract(Tangosol.IO.DataWriter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encode a binary diff "extract" operator to indicate that bytes should
            be copied from the old value to the new value.
            </summary>
            <param name="writer">
            The existing DataWriter for the diff, or null
            </param>
            <param name="cbMax">
            The expected resulting size of the write buffer.
            </param>
            <param name="of">
            The offset of the old buffer to append.
            </param>
            <param name="cb">
            The length of the old buffer to append.
            </param>
            <returns>
            A DataWriter, never null.
            </returns>
        </member>
        <member name="M:Tangosol.IO.BinaryDeltaCompressor.FinalizeDelta(Tangosol.IO.DataWriter)">
            <summary>
            Convert an open delta output stream into a finalized Binary delta.
            </summary>
            <param name="writer">
            The delta writer.
            </param>
            <returns>
            Finalized Binary delta.
            </returns>
        </member>
        <member name="F:Tangosol.IO.BinaryDeltaCompressor.NO_BINARY">
            <summary>
            An empty Binary object.
            </summary>
        </member>
        <member name="F:Tangosol.IO.BinaryDeltaCompressor.DELTA_TRUNCATE">
            <summary>
            A delta value that indicates an empty new value.
            </summary>
        </member>
        <member name="T:Tangosol.IO.BinarySerializer">
            <summary>
            <see cref="T:Tangosol.IO.ISerializer"/> implementation that uses .NET binary
            serializer.
            </summary>
            <author>Aleksandar Seovic  2009.06.22</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="T:Tangosol.IO.ISerializer">
            <summary>
            Provides the capability of reading and writing a .NET object from and
            to an in-memory buffer.
            </summary>
            <author>Cameron Purdy/Jason Howes  2007.07.21</author>
            <author>Goran Milosavljevic  2006.08.10</author>
            <seealso cref="T:Tangosol.IO.DataReader"/>
            <seealso cref="T:Tangosol.IO.DataWriter"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.ISerializer.Serialize(Tangosol.IO.DataWriter,System.Object)">
            <summary>
            Serialize an object to a stream by writing its state using the
            specified <see cref="T:Tangosol.IO.DataWriter"/> object.
            </summary>
            <param name="writer">
            The <b>DataWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.ISerializer.Deserialize(Tangosol.IO.DataReader)">
            <summary>
            Deserialize an object from a stream by reading its state using
            the specified <see cref="T:Tangosol.IO.DataReader"/> object.
            </summary>
            <param name="reader">
            The <b>DataReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.BinarySerializer.Serialize(Tangosol.IO.DataWriter,System.Object)">
            <summary>
            Serialize an object to a stream by writing its state using the
            specified <see cref="T:Tangosol.IO.DataWriter"/> object.
            </summary>
            <param name="writer">
            The <b>DataWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.BinarySerializer.Deserialize(Tangosol.IO.DataReader)">
            <summary>
            Deserialize an object from a stream by reading its state using
            the specified <see cref="T:Tangosol.IO.DataReader"/> object.
            </summary>
            <param name="reader">
            The <b>DataReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="T:Tangosol.IO.ConfigurableSerializerFactory">
            <summary>
            A <see cref="T:Tangosol.IO.ISerializerFactory"/> implementation that creates instances of a
            Serializer class configured using an XmlElement of the following structure:
            <pre>
              &lt;!ELEMENT instance ((class-name | (class-factory-name, method-name), init-params?)&gt;
              &lt;!ELEMENT init-params (init-param*)&gt;
              &lt;!ELEMENT init-param ((param-name | param-type), param-value, description?)&gt;
            </pre>
            </summary>
            <author>Wei Lin  2011.10.25</author>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="T:Tangosol.IO.ISerializerFactory">
            <summary>
            A factory for <see cref="T:Tangosol.IO.ISerializer"/> objects.
            </summary>
            <author>Wei Lin  2011.10.25</author>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="M:Tangosol.IO.ISerializerFactory.CreateSerializer">
            <summary>
            Create a new <see cref="T:Tangosol.IO.ISerializer"/>.
            </summary>
            <returns>
            The new <see cref="T:Tangosol.IO.ISerializer"/>.
            </returns>
        </member>
        <member name="T:Tangosol.Run.Xml.IXmlConfigurable">
            <summary>
            An interface for XML configuration.
            </summary>
            <author>Cameron Purdy  2002.08.20</author>
            <author>Ana Cikic  2009.08.28</author>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlConfigurable.Config">
            <summary>
            The current configuration of the object.
            </summary>
            <value>
            The XML configuration or <c>null</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            When setting, if the object is not in a state that allows the
            configuration to be set; for example, if the object has already
            been configured and cannot be reconfigured.
            </exception>
        </member>
        <member name="M:Tangosol.IO.ConfigurableSerializerFactory.CreateSerializer">
            <summary>
            Create a new <see cref="T:Tangosol.IO.ISerializer"/>.
            </summary>
            <returns>
            The new <see cref="T:Tangosol.IO.ISerializer"/>.
            </returns>
        </member>
        <member name="M:Tangosol.IO.ConfigurableSerializerFactory.ToString">
            <summary>
            Provide a human-readable representation of this object.
            </summary>
            <returns>
            A string whose contents represent the value of this object.
            </returns>
        </member>
        <member name="P:Tangosol.IO.ConfigurableSerializerFactory.Config">
            <summary>
            <see cref="T:Tangosol.Run.Xml.IXmlElement"/> holding configuration information.
            </summary>
            <remarks>
            Note that the configuration will not be available unless the
            <see cref="T:Tangosol.IO.Pof.ConfigurablePofContext"/> was constructed with the
            configuration, the configuration was specified using the
            <see cref="T:Tangosol.Run.Xml.IXmlConfigurable"/> interface, or the
            <see cref="T:Tangosol.IO.Pof.ConfigurablePofContext"/> has fully initialized itself
            <p>
            Also, note that the configuration cannot be set after the
            <see cref="T:Tangosol.IO.Pof.ConfigurablePofContext"/> is fully initialized.
            </p>
            </remarks>
            <value>
            <see cref="T:Tangosol.Run.Xml.IXmlElement"/> holding configuration information.
            </value>
        </member>
        <member name="P:Tangosol.IO.ConfigurableSerializerFactory.SerializerType">
            <summary>
            Serializer type.
            </summary>
            <value>
            Serializer type.
            </value>
        </member>
        <member name="T:Tangosol.IO.OptimizedBinarySerializer">
            <summary>
            <see cref="T:Tangosol.IO.ISerializer"/> implementation that optimizes serialization 
            of primitive types and falls back to .NET BinaryFormatter for
            custom types.
            </summary>
            <author>Aleksandar Seovic  2010.03.17</author>
            <since>Coherence 3.6</since>
        </member>
        <member name="M:Tangosol.IO.OptimizedBinarySerializer.Serialize(Tangosol.IO.DataWriter,System.Object)">
            <summary>
            Serialize an object to a stream by writing its state using the
            specified <see cref="T:Tangosol.IO.DataWriter"/> object.
            </summary>
            <param name="writer">
            The <b>DataWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.OptimizedBinarySerializer.Deserialize(Tangosol.IO.DataReader)">
            <summary>
            Deserialize an object from a stream by reading its state using
            the specified <see cref="T:Tangosol.IO.DataReader"/> object.
            </summary>
            <param name="reader">
            The <b>DataReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="T:Tangosol.IO.IndentingWriter">
            <summary>
            An IndentingWriter is used to indent line-based output to an
            underlying <b>TextWriter</b>.
            </summary>
            <author>Cameron Purdy  2000.10.17</author>
            <author>Ana Cikic  2009.09.09</author>
        </member>
        <member name="M:Tangosol.IO.IndentingWriter.#ctor(System.IO.TextWriter,System.Int32)">
            <summary>
            Construct an IndentingWriter that indents a certain number of
            spaces.
            </summary>
            <param name="writer">
            The underlying <b>TextWriter</b> to write to.
            </param>
            <param name="spaces">
            The number of spaces to indent each line with.
            </param>
        </member>
        <member name="M:Tangosol.IO.IndentingWriter.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Construct an IndentingWriter that indents using an indention
            string.
            </summary>
            <param name="writer">
            The underlying <b>TextWriter</b> to write to.
            </param>
            <param name="indent">
            The string value to indent each line with.
            </param>
        </member>
        <member name="M:Tangosol.IO.IndentingWriter.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value">
            The character to write to the text stream.
            </param>
        </member>
        <member name="M:Tangosol.IO.IndentingWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the text stream.
            </summary>
            <param name="buffer">
            The character array to write to the text stream.
            </param>
        </member>
        <member name="M:Tangosol.IO.IndentingWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the text stream.
            </summary>
            <param name="buffer">
            The character array to write data from.
            </param>
            <param name="index">
            Starting index in the buffer.
            </param>
            <param name="count">
            The number of characters to write.
            </param>
        </member>
        <member name="M:Tangosol.IO.IndentingWriter.Write(System.String)">
            <summary>
            Writes a string to the text stream.
            </summary>
            <param name="value">
            The string to write.
            </param>
        </member>
        <member name="M:Tangosol.IO.IndentingWriter.WriteLine">
            <summary>
            Writes a line terminator to the text stream.
            </summary>
        </member>
        <member name="M:Tangosol.IO.IndentingWriter.Suspend">
            <summary>
            Suspends indentation.
            </summary>
        </member>
        <member name="M:Tangosol.IO.IndentingWriter.Resume">
            <summary>
            Resumes indentation.
            </summary>
        </member>
        <member name="F:Tangosol.IO.IndentingWriter.m_writer">
            <summary>
            The underlying TextWriter to write to.
            </summary>
        </member>
        <member name="F:Tangosol.IO.IndentingWriter.m_achIndent">
            <summary>
            The characters to use to indent each line.
            </summary>
        </member>
        <member name="F:Tangosol.IO.IndentingWriter.m_isNewline">
            <summary>
            True if the IndentingWriter is on a new line.
            </summary>
        </member>
        <member name="F:Tangosol.IO.IndentingWriter.m_isSuspended">
            <summary>
            True if the indentation feature of the IndentingWriter is
            suspended.
            </summary>
        </member>
        <member name="P:Tangosol.IO.IndentingWriter.Encoding">
            <summary>
            When overridden in a derived class, returns the <b>Encoding</b>
            in which the output is written.
            </summary>
            <returns>
            The Encoding in which the output is written.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.BinaryPofSerializer">
            <summary><see cref="T:Tangosol.IO.Pof.IPofSerializer"/> implementation that supports
            the serialization and deserialization of any serializable .NET type.
            </summary>
            <author>Goran Milosavljevic  2007.08.23</author>
            <since>Coherence 3.4</since>
        </member>
        <member name="T:Tangosol.IO.Pof.IPofSerializer">
            <summary>
            The <b>IPofSerializer</b> interface provides the capability of
            reading and writing a .NET object from and to a POF stream.
            </summary>
            <author>Cameron Purdy, Jason Howes  2006.07.14</author>
            <author>Aleksandar Seovic  2006.08.08</author>
            <seealso cref="T:Tangosol.IO.Pof.IPofReader"/>
            <seealso cref="T:Tangosol.IO.Pof.IPofWriter"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofSerializer.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)">
            <summary>
            Serialize a user type instance to a POF stream by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for writing out an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must set the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may write any combination of the properties of
            the user type by using the "write" methods of the
            <b>IPofWriter</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been written,
            the implementation must terminate the writing of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteRemainder(Tangosol.Util.Binary)"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="writer">
            The <b>IPofWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofSerializer.Deserialize(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize a user type instance from a POF stream by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for reading in an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must get the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofReader.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may read any combination of the
            properties of the user type by using "read" methods of the
            <b>IPofReader</b>, but it must do so in the order of the property
            indexes. Additionally, the implementation must call 
            {@link IPofReader#RegisterIdentity} with the new instance prior
            to reading any properties which are user type instances
            themselves.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been read,
            the implementation must terminate the reading of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofReader.ReadRemainder"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="reader">
            The <b>IPofReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.BinaryPofSerializer.#ctor(System.Int32)">
            <summary>
            Create a new <b>BinaryPofSerializer</b> for the user type with
            the given type identifier.
            </summary>
            <param name="typeId">
            The user type identifier.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.BinaryPofSerializer.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)">
            <summary>
            Serialize a user type instance to a POF stream by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for writing out an object of a
            user type:
            <list type="number">
            <item>
            <description>
            The implementation may write any combination of the properties of
            the user type by using the "write" methods of the
            <b>IPofWriter</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been written,
            the implementation must terminate the writing of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteRemainder(Tangosol.Util.Binary)"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="writer">
            The <b>IPofWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.BinaryPofSerializer.Deserialize(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize a user type instance from a POF stream by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for reading in an object of a
            user type:
            <list type="number">
            <item>
            <description>
            The implementation may read any combination of the
            properties of the user type by using "read" methods of the
            <b>IPofReader</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been read,
            the implementation must terminate the reading of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofReader.ReadRemainder"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="reader">
            The <b>IPofReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.IO.Pof.BinaryPofSerializer.m_typeId">
            <summary>
            The type identifier of the user type to serialize and
            deserialize.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.Annotation.PortableProperty">
            <summary>
            A PortableProperty marks a member variable or method accessor as a
            POF serialized attribute. Whilst the <see cref="P:Tangosol.IO.Pof.Annotation.PortableProperty.Index"/> and
            <see cref="T:Tangosol.IO.Pof.Reflection.ICodec"/> can be explicitly specified they can be
            determined by classes that use this annotation. Hence these 
            attributes serve as hints to the underlying parser. 
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
            <see>PortableProperty</see>
        </member>
        <member name="M:Tangosol.IO.Pof.Annotation.PortableProperty.#ctor">
            <summary>
            Constructs a PortableProperty attribute with a default index
            value of -1.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Annotation.PortableProperty.#ctor(System.Int32)">
            <summary>
            Construct a PortableProperty attribute with a 
            <see cref="T:Tangosol.IO.Pof.Reflection.Codecs.DefaultCodec"/>.
            </summary>
            <param name="index">
            The POF index of this portable property.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Annotation.PortableProperty.#ctor(System.Type)">
            <summary>
            Construct a PortableProperty attribute with the specified
            <see cref="T:Tangosol.IO.Pof.Reflection.ICodec"/> Type. Defaults the index to -1.
            </summary>
            <param name="codec">
            Type of the ICodec used to encode/decode the property.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Annotation.PortableProperty.#ctor(System.Int32,System.Type)">
            <summary>
            Construct a PortableProperty attribute using the specified
            index and <see cref="T:Tangosol.IO.Pof.Reflection.ICodec"/> Type.
            </summary>
            <param name="index">
            The POF index of this portable property.
            </param>
            <param name="codec">
            Type of the ICodec used to encode/decode the property.
            </param>
        </member>
        <member name="F:Tangosol.IO.Pof.Annotation.PortableProperty.m_index">
            <summary>
            The POF index of this PortableProperty.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Annotation.PortableProperty.m_codec">
            <summary>
            Type of the ICodec used to encode/decode the property.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.Annotation.PortableProperty.Index">
            <summary>
            The index of this property.
            </summary>
            <seealso cref="T:Tangosol.IO.Pof.IPofWriter"/>
        </member>
        <member name="P:Tangosol.IO.Pof.Annotation.PortableProperty.Codec">
            <summary>
            A codec to use to short-circuit determining the type via either
            method return type or field type.
            </summary>
            <remarks>
            This could be used to determine concrete implementations of
            interfaces, i.e. when the method return is a 
            <see cref="T:System.Collections.Generic.IList`1"/> this type definition could instruct the 
            code to utilize a <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </remarks>
            <returns>
            A <see cref="T:System.Type"/> that should be assingable to
            <see cref="T:Tangosol.IO.Pof.Reflection.ICodec"/>.
            </returns>
            <seealso cref="T:Tangosol.IO.Pof.Reflection.ICodec"/>
        </member>
        <member name="T:Tangosol.IO.Pof.EnumPofSerializer">
            <summary><see cref="T:Tangosol.IO.Pof.IPofSerializer"/> implementation that supports
            the serialization and deserialization of enum values to and from a 
            POF stream.
            </summary>
            <author>Aleksandar Seovic  2008.10.30</author>
        </member>
        <member name="M:Tangosol.IO.Pof.EnumPofSerializer.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)">
            <summary>
            Serialize an enum instance to a POF stream by writing its
            value using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.EnumPofSerializer.Deserialize(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize an enum instance from a POF stream by reading its
            value using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized enum instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="T:Tangosol.IO.Pof.EvolvableHolder">
            <summary>
            Storage for evolvable classes.
            </summary>
            <author>Aleksandar Seovic  2013.11.04</author>
            <since>Coherence 12.2.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.EvolvableHolder.GetEvolvable(System.Int32)">
            <summary>
            Return <see cref="T:Tangosol.IO.IEvolvable"/> for the specified type id.
            </summary>
            <param name="typeId">Type identifier</param>
            <returns>IEvolvable instance</returns>
        </member>
        <member name="F:Tangosol.IO.Pof.EvolvableHolder.m_evolvableMap">
            <summary>
            Map of evolvables.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.EvolvableHolder.TypeIds">
            <summary>
            Return type identifiers for all the IEvolvables within this holder.
            </summary>
            <returns>
            Type identifiers for all the Evolvables within this holder.
            </returns>
        </member>
        <member name="P:Tangosol.IO.Pof.EvolvableHolder.IsEmpty">
            <summary>
            Return <code>True</code> if this holder is empty.
            </summary>
            <returns>
            <code>True</code> if this holder is empty, <code>False</code> otherwise.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.ExceptionPofSerializer">
            <summary>
            <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> implementation that can serialize and
            deserialize a <see cref="T:System.Exception"/> to/from a POF stream.
            </summary>
            <remarks>
            <p>
            This serializer provides a catch-all mechanism for serializing
            exceptions. Any deserialized exception will loose type information,
            and simply be represented as a <see cref="T:Tangosol.IO.Pof.PortableException"/>. The
            basic detail information of the exception is retained.</p>
            <p>
            <b>PortableException</b> and this class work asymmetrically to
            provide the serialization routines for exceptions.</p>
            </remarks>
            <author>Mark Falco  2008.08.25</author>
            <author>Ana Cikic  2008.08.29</author>
        </member>
        <member name="M:Tangosol.IO.Pof.ExceptionPofSerializer.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)">
            <summary>
            Serialize a user type instance to a POF stream by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for writing out an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must set the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may write any combination of the properties of
            the user type by using the "write" methods of the
            <b>IPofWriter</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been written,
            the implementation must terminate the writing of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteRemainder(Tangosol.Util.Binary)"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="writer">
            The <b>IPofWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ExceptionPofSerializer.Deserialize(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize a user type instance from a POF stream by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for reading in an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must get the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may read any combination of the
            properties of the user type by using "read" methods of the
            <b>IPofReader</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been read,
            the implementation must terminate the reading of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofReader.ReadRemainder"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="reader">
            The <b>IPofReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ExceptionPofSerializer.WriteException(Tangosol.IO.Pof.IPofWriter,System.Exception)">
            <summary>
            Write the exception to the specified stream.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to write to.
            </param>
            <param name="e">
            The <b>Exception</b> to write.
            </param>
        </member>
        <member name="T:Tangosol.IO.Pof.IdentityPofSerializer">
            <summary><see cref="T:Tangosol.IO.Pof.IPofSerializer"/> implementation that supports
            the serialization and deserialization of an <see cref="T:System.Security.Principal.IIdentity"/> 
            to and from a POF stream.
            </summary>
            <remarks>
            The <b>IdentityPofSerializer</b> can serialize any <b>IIdentity</b> 
            implementation to a POF stream; however, the <b>IIdentity</b> returned
            during deserialization is always an unauthenticated instance of 
            <see cref="T:System.Security.Principal.GenericIdentity"/>.
            </remarks>
            <author>Jason Howes  2008.08.12</author>
        </member>
        <member name="M:Tangosol.IO.Pof.IdentityPofSerializer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.IdentityPofSerializer.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)">
            <summary>
            Serialize a user type instance to a POF stream by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for writing out an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must set the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may write any combination of the properties of
            the user type by using the "write" methods of the
            <b>IPofWriter</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been written,
            the implementation must terminate the writing of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteRemainder(Tangosol.Util.Binary)"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="writer">
            The <b>IPofWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IdentityPofSerializer.Deserialize(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize a user type instance from a POF stream by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for reading in an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must get the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may read any combination of the
            properties of the user type by using "read" methods of the
            <b>IPofReader</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been read,
            the implementation must terminate the reading of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofReader.ReadRemainder"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="reader">
            The <b>IPofReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="T:Tangosol.IO.Pof.Annotation.Portable">
             <summary>
             Portable marks a class as being eligible for use by a
             <see cref="T:Tangosol.IO.Pof.PofAnnotationSerializer"/>. This annotation is only permitted at the
             class level and is a marker annotation with no members. The following class
             illustrates how to use <see cref="T:Tangosol.IO.Pof.Annotation.Portable"/> and <see cref="T:Tangosol.IO.Pof.Annotation.PortableProperty"/>
             annotations.
             </summary>
             <remarks>
             <code>
             [Portable]
             public class Person
             {
                 [PortableProperty(0)]
                 public string GetFirstName()
                 {
                     return m_firstName;
                 }
             
                 [PortableProperty(1)]
                 public string LastName
                 {
                     get; set;
                 }
            
                 private String m_firstName;
                 [PortableProperty(2)]
                 private int m_age;
             }
             </code>
             </remarks>
             <author>Harvey Raja  2011.07.25</author>
             <since>Coherence 3.7.1</since>
             <see>PortableProperty</see>
        </member>
        <member name="T:Tangosol.IO.Pof.IEvolvableObject">
            <summary>
            Defines an interface that should be implemented by the classes that want to
            support evolution.
            </summary>
            <author>Aleksandar Seovic  2013.11.04</author>
            <since>Coherence 12.2.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.IEvolvableObject.GetEvolvable(System.Int32)">
             <summary>
             Return <see cref="T:Tangosol.IO.IEvolvable"/> holder object for the specified type id.
             </summary>
             <remarks>
             This method should only return Evolvable instance if the specified type
             id matches its own type id. Otherwise, it should delegate to the parent:
             
             <example>
                 // assuming type ID of this class is 1234
                 private IEvolvable evolvable = new SimpleEvolvable(1234);
                 ...
                 public IEvolvable GetEvolvable(int nTypeId)
                 {
                     if (1234 == nTypeId)
                     {
                         return this.evolvable;
                     }
            
                     return base.GetEvolvable(nTypeId);
                 }
             </example>
             </remarks>
             <param name="nTypeId">
             Type id to get <see cref="T:Tangosol.IO.IEvolvable"/> instance for.
             </param>
             <returns>
             IEvolvable instance for the specified type id.
             </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.IEvolvableObject.GetEvolvableHolder">
            <summary>
            Return <see cref="T:Tangosol.IO.Pof.EvolvableHolder"/> that should be used to store information
            about evolvable objects that are not known during deserialization.
            </summary>
            <remarks>
            For example, it is possible to evolve the class hierarchy by adding new
            classes at any level in the hierarchy. Normally this would cause a problem
            during deserialization on older clients that don't have new classes at all,
            but EvolvableHolder allows us to work around that issue and simply store
            type id to opaque binary value mapping within it.
            </remarks>
            <returns>EvolvableHolder instance.</returns>
        </member>
        <member name="T:Tangosol.IO.Pof.PofAnnotationSerializer">
            <summary>
            A PofAnnotationSerializer provides annotation based
            de/serialization. 
            </summary>
            <remarks>
            This serializer must be instantiated with the intended
            class which is eventually scanned for the presence of the following
            annotations.
            <list type="bullet">
              <item>
                <description>
                <see cref="T:Tangosol.IO.Pof.Annotation.Portable"/>
                </description>
              </item>
              <item>
                <description>
                <see cref="T:Tangosol.IO.Pof.Annotation.PortableProperty"/>
                </description>
              </item>
            </list>
            This serializer supports classes iff they are annotated with the type level
            annotation; <see cref="T:Tangosol.IO.Pof.Annotation.Portable"/>. This annotation is a marker annotation with
            no children.
            <p/>
            All fields annotated with <see cref="T:Tangosol.IO.Pof.Annotation.PortableProperty"/> are explicitly
            deemed POF serializable with the option of specifying overrides to
            provide explicit behaviour such as:
            <list type="bullet">
              <item>
                <description>
                Explicit POF indexes
              </description>
              </item>
              <item>
                <description>
                Custom <see cref="T:Tangosol.IO.Pof.Reflection.ICodec"/> to specify concrete implementations
                / customizations
                </description>
              </item>
            </list>
            <p/>
            The <see cref="P:Tangosol.IO.Pof.Annotation.PortableProperty.Index"/> (POF index) can be omitted 
            iff the auto-indexing feature is enabled. This is enabled by 
            instantiating this class with the <c>autoIndex</c> constructor 
            argument. This feature determines the index based on any explicit 
            indexes specified and the name of the portable properties. Currently 
            objects with multiple versions is not supported. The following 
            illustrates the auto index algorithm:
            <table border="1">
              <tr><td>Name</td><td>Explicit Index</td><td>Determined Index</td></tr>
              <tr><td>c</td><td>1</td><td>1</td></tr>
              <tr><td>a</td><td></td><td>0</td></tr>
              <tr><td>b</td><td></td><td>2</td></tr>
            </table>
            <b>NOTE:</b> This implementation does support objects that implement
            Evolvable
            </remarks>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.PofAnnotationSerializer.#ctor(System.Int32,System.Type)">
            <summary>
            Constructs a PofAnnotationSerializer.
            </summary>
            <param name="typeId">
            The POF type id.
            </param>
            <param name="type">
            Type this serializer is aware of.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofAnnotationSerializer.#ctor(System.Int32,System.Type,System.Boolean)">
            <summary>
            Constructs a PofAnnotationSerializer.
            </summary>
            <param name="typeId">
            The POF type id.
            </param>
            <param name="type">
            Type this serializer is aware of.
            </param>
            <param name="autoIndex">
            Turns on the auto index feature.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofAnnotationSerializer.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)">
            <summary>
            Serialize a user type instance to a POF stream by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for writing out an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must set the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may write any combination of the properties of
            the user type by using the "write" methods of the
            <b>IPofWriter</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been written,
            the implementation must terminate the writing of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteRemainder(Tangosol.Util.Binary)"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="writer">
            The <b>IPofWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofAnnotationSerializer.Deserialize(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize a user type instance from a POF stream by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for reading in an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must get the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may read any combination of the
            properties of the user type by using "read" methods of the
            <b>IPofReader</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been read,
            the implementation must terminate the reading of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofReader.ReadRemainder"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="reader">
            The <b>IPofReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofAnnotationSerializer.Initialize(System.Int32,System.Type,System.Boolean)">
            <summary>
            Initialize this serializer with <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> pertaining to the
            specified class.
            </summary>
            <param name="typeId">
            POF type id that uniquely identifies this type.
            </param>
            <param name="type">
            Type this serializer is aware of.
            </param>
            <param name="autoIndex">
            Turns on the auto index feature.
            </param>
            <exception cref="T:System.ArgumentException">
            If annotation is not present on <c>type</c>.
            </exception>
        </member>
        <member name="F:Tangosol.IO.Pof.PofAnnotationSerializer.m_tmd">
            ITypeMetadata representing type information for this serializer instance.
        </member>
        <member name="T:Tangosol.IO.Pof.PortableTypeSerializer">
            <summary>
            A <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> implementation that serializes classes 
            that implement <see cref="T:Tangosol.IO.Pof.IPortableObject"/> interface (and optionally 
            <see cref="T:Tangosol.IO.Pof.IEvolvableObject"/> interface).
            </summary>
            <remarks>
            Unlike legacy <see cref="T:Tangosol.IO.Pof.PortableObjectSerializer"/>, this class serializes attributes
            of each class in the object's hierarchy into a separate nested POF stream,
            which allows for independent evolution of each class in the hierarchy, as well
            as the evolution of the hierarchy itself (addition of new classes at any level
            in the hierarchy).
            </remarks>
            <author>Aleksandar Seovic  2013.11.04</author>
            <since>Coherence 12.2.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableTypeSerializer.#ctor(System.Int32,System.Type)">
            <summary>
            Create a new PortableTypeSerializer for the user type with the given type
            identifier and class.
            </summary>
            <param name="nTypeId">
            The type identifier of the user type to serialize and deserialize.
            </param>
            <param name="type">
            The type of the user type to serialize and deserialize
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableTypeSerializer.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)">
            <summary>
            Serialize a user type instance to a POF stream by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for writing out an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must set the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may write any combination of the properties of
            the user type by using the "write" methods of the
            <b>IPofWriter</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been written,
            the implementation must terminate the writing of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteRemainder(Tangosol.Util.Binary)"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="pofWriter">
            The <b>IPofWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableTypeSerializer.Deserialize(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize a user type instance from a POF stream by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for reading in an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must get the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofReader.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may read any combination of the
            properties of the user type by using "read" methods of the
            <b>IPofReader</b>, but it must do so in the order of the property
            indexes. Additionally, the implementation must call 
            {@link IPofReader#RegisterIdentity} with the new instance prior
            to reading any properties which are user type instances
            themselves.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been read,
            the implementation must terminate the reading of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofReader.ReadRemainder"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="pofReader">
            The <b>IPofReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableTypeSerializer.GetTypeIds(System.Object,Tangosol.IO.Pof.IPofContext)">
            <summary>
            Return a sorted set of type identifiers for all user types 
            in a class hierarchy.
            </summary>
            <param name="o">The object to return type identifiers for</param>
            <param name="ctx">The POF context</param>
            <returns>
            A sorted enumeration of type identifiers for all user types 
            in a class hierarchy.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableTypeSerializer.GetTypeForTypeId(Tangosol.IO.Pof.IPofContext,System.Int32)">
            <summary>
            Return the class associated with a specified type identifier, or null
            if the identifier is not defined in the current POF context.
            </summary>
            <param name="ctx">The POF context</param>
            <param name="nTypeId">The type identifier to lookup</param>
            <returns>
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.PortableTypeSerializer.m_nTypeId">
            <summary>
            The type identifier of the user type to serialize and deserialize.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.RawDateTime">
            <summary>
            An immutable POF date-time value.
            </summary>
            <author>Cameron Purdy  2006.07.17</author>
            <author>Ana Cikic  2009.08.25</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.RawDateTime.#ctor(System.DateTime,Tangosol.IO.Pof.RawTime)">
            <summary>
            Construct a date-time value.
            </summary>
            <param name="date">
            The date portion of the raw date-time value.
            </param>
            <param name="time">
            The time portion of the raw date-time value.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.RawDateTime.ToDateTime">
            <summary>
            Converts this instance into a <b>DateTime</b> representation,
            ignoring any time zone information if present.
            </summary>
            <returns>
            A <b>DateTime</b> object based on this instance.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawDateTime.ToUniversalTime">
            <summary>
            Converts this instance into a Coordinated Universal Time (UTC)
            <b>DateTime</b> representation.
            </summary>
            <returns>
            A UTC <b>DateTime</b> object based on this instance.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawDateTime.ToLocalTime">
            <summary>
            Converts this instance into a local <b>DateTime</b> 
            representation.
            </summary>
            <returns>
            A local <b>DateTime</b> object based on this instance.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawDateTime.Equals(System.Object)">
            <summary>
            Compare this object with another for equality.
            </summary>
            <param name="o">
            Another object to compare to for equality.
            </param>
            <returns>
            <b>true</b> iff this object is equal to the other object.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawDateTime.GetHashCode">
            <summary>
            Obtain the hashcode for this object.
            </summary>
            <returns>
            An integer hashcode.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawDateTime.ToString">
            <summary>
            Format this object's data as a human-readable string.
            </summary>
            <returns>
            A string description of this object.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.RawDateTime.m_date">
            <summary>
            The date portion of the raw date-time value.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.RawDateTime.m_time">
            <summary>
            The time portion of the raw date-time value.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.RawDateTime.Date">
            <summary>
            The date portion of the raw date-time value.
            </summary>
            <value>
            The date portion of the raw date-time value.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.RawDateTime.Time">
            <summary>
            The time portion of the raw date-time value.
            </summary>
            <value>
            The time portion of the raw date-time value.
            </value>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.AbstractPofPath">
            <summary>
            Abstract base class for static, path-based implementations of
            <see cref="T:Tangosol.IO.Pof.Reflection.IPofNavigator"/> interface.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.IPofNavigator">
            <summary>
            The IPofNavigator interface represents an algorithm for navigating a 
            IPofValue hierarchy in order to locate a contained IPofValue for 
            extraction, modification and/or removal purposes.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofNavigator.Navigate(Tangosol.IO.Pof.Reflection.IPofValue)">
            <summary>
            Locate the <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> designated by this IPofNavigator 
            within the passed IPofValue.
            </summary>
            <param name="valueOrigin">
            The origin from which navigation starts.
            </param>
            <returns>
            The resulting IPofValue.
            </returns>
            <exception cref="T:Tangosol.IO.Pof.Reflection.PofNavigationException">
            If the navigation fails; for example one of the intermediate nodes 
            in this path is a "terminal" IPofValue.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofPath.GetPathElements">
            <summary>
            Return a collection of path elements.
            </summary>
            <returns>
            A collection of path elements.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofPath.Navigate(Tangosol.IO.Pof.Reflection.IPofValue)">
            <summary>
            Locate the <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> designated by this IPofNavigator 
            within the passed IPofValue.
            </summary>
            <param name="valueOrigin">
            The origin from which navigation starts.
            </param>
            <returns>
            The resulting IPofValue.
            </returns>
            <exception cref="T:Tangosol.IO.Pof.Reflection.PofNavigationException">
            If the navigation fails; for example one of the intermediate nodes 
            in this path is a "terminal" IPofValue.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofPath.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofPath.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.AbstractPofValue">
            <summary>
            An abstract base class that implements common functionality for all
            IPofValue types.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.IPofValue">
            <summary>
            IPofValue represents the POF data structure in a POF stream, or any
            sub-structure or value thereof.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetChild(System.Int32)">
            <summary>
            Locate a child IPofValue contained within this IPofValue.
            </summary>
            <remarks>
            The returned IPofValue could represent a non-existent (null)
            value.
            </remarks>
            <param name="nIndex">
            Index of the child value to get.
            </param>
            <returns>
            The the child IPofValue.
            </returns>
            <exception cref="T:Tangosol.IO.Pof.Reflection.PofNavigationException">
            If this value is a "terminal" or the child value cannot be
            located for any other reason.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetValue">
            <summary>
            Return the deserialized value which this IPofValue represents.
            </summary>
            <remarks>
            For primitive types such as int or bool, the POF type is not
            stored in the POF stream. Therefore, for primitive types, the POF
            type or .NET type must be explicitly specified via
            <see cref="M:Tangosol.IO.Pof.Reflection.IPofValue.GetValue(System.Int32)"/> or <see cref="M:Tangosol.IO.Pof.Reflection.IPofValue.GetValue(System.Type)"/>.
            </remarks>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetValue(System.Type)">
            <summary>
            Return the deserialized value which this IPofValue represents.
            </summary>
            <remarks>
            For primitive types such as int or bool, the POF type is not
            stored in the POF stream. Therefore, for primitive types,
            the type parameter must be non-null.
            </remarks>
            <param name="type">
            The required type of the returned value or <c>null</c> if the
            type is to be inferred from the serialized state.
            </param>
            <returns>
            The deserialized value.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the value is incompatible with the specified type.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetValue(System.Int32)">
            <summary>
            Return the deserialized value which this IPofValue represents.
            </summary>
            <remarks>
            For primitive types such as int or bool, the POF type is not
            stored in the POF stream. Therefore, for primitive types, the type
            must be explicitly specified with the typeId parameter.
            </remarks>
            <param name="typeId">
            The required POF type of the returned value or
            <see cref="F:Tangosol.IO.Pof.PofConstants.T_UNKNOWN"/> if the type is to be
            inferred from the serialized state.
            </param>
            <returns>
            The deserialized value.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the value is incompatible with the specified type.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.SetValue(System.Object)">
            <summary>
            Update this IPofValue.
            </summary>
            <remarks>
            The changes made using this method will be immediately reflected
            in the result of <see cref="M:Tangosol.IO.Pof.Reflection.IPofValue.GetValue"/> method, but will not be
            applied to the underlying POF stream until the
            <see cref="M:Tangosol.IO.Pof.Reflection.IPofValue.ApplyChanges"/> method is invoked on the root
            IPofValue.
            </remarks>
            <param name="oValue">
            New deserialized value for this IPofValue.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.ApplyChanges">
            <summary>
            Apply all the changes that were made to this value and return a
            binary representation of the new value.
            </summary>
            <remarks>
            Any format prefixes and/or decorations that were present in the
            original buffer this value orginated from will be preserved.
            <p/>
            <b>Note:</b> This method can only be called on the root
            IPofValue.
            </remarks>
            <returns>
            New Binary object that contains modified IPofValue.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If called on a non-root IPofValue.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetChanges">
            <summary>
            Return a binary containing changes made to this IPofValue in the
            format defined by the <see cref="T:Tangosol.IO.BinaryDeltaCompressor"/>.
            </summary>
            <remarks>
            <b>Note:</b> This method can only be called on the root
            IPofValue.
            </remarks>
            <returns>
            A binary containing changes made to this IPofValue.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If called on a non-root IPofValue.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetBoolean">
            <summary>
            Return the <b>Boolean</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Boolean</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetByte">
            <summary>
            Return the <b>Byte</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Byte</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetChar">
            <summary>
            Return the <b>Char</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Char</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetInt16">
            <summary>
            Return the <b>Int16</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Int16</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetInt32">
            <summary>
            Return the <b>Int32</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Int32</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetInt64">
            <summary>
            Return the <b>Int64</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Int64</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetSingle">
            <summary>
            Return the <b>Single</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Single</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetDouble">
            <summary>
            Return the <b>Double</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Double</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetBooleanArray">
            <summary>
            Return the <b>Boolean[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Boolean[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetByteArray">
            <summary>
            Return the <b>Byte[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Byte[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetCharArray">
            <summary>
            Return the <b>Char[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Char[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetInt16Array">
            <summary>
            Return the <b>Int16[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Int16[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetInt32Array">
            <summary>
            Return the <b>Int32[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Int32[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetInt64Array">
            <summary>
            Return the <b>Int64[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Int64[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetSingleArray">
            <summary>
            Return the <b>Single[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Single[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetDoubleArray">
            <summary>
            Return the <b>Double[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Double[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetDecimal">
            <summary>
            Return the <b>Decimal</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Decimal</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetString">
            <summary>
            Return the <b>String</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>String</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetDateTime">
            <summary>
            Return the <b>DateTime</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>DateTime</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetDate">
            <summary>
            Return the <b>DateTime</b> which this IPofValue represents.
            </summary>
            <remarks>
            This method will return only the date component. It will ignore the
            time component if present and initialize the time-related fields of
            the return value to their default values.
            </remarks>
            <returns>
            The <b>DateTime</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetDayTimeInterval">
            <summary>
            Return the <b>TimeSpan</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>TimeSpan</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetCollection(System.Collections.ICollection)">
            <summary>
            Return an <b>ICollection</b> of object values which this IPofValue
            represents.
            </summary>
            <param name="coll">
            The optional <b>ICollection</b> to use to store the values.
            </param>
            <returns>
            An <b>ICollection</b> of object values.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetCollection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Return an <b>ICollection&lt;T&gt;</b> of object values which this
            IPofValue represents.
            </summary>
            <typeparam name="T">
            The type of the elements in the collection.
            </typeparam>
            <param name="coll">
            The optional <b>ICollection&lt;T&gt;</b> to use to store the values.
            </param>
            <returns>
            An <b>ICollection&lt;T&gt;</b> of object values.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetDictionary(System.Collections.IDictionary)">
            <summary>
            Return an <b>IDictionary</b> of key/value pairs which this
            IPofValue represents.
            </summary>
            <param name="dict">
            The optional <b>IDictionary</b> to use to store the key/value pairs.
            </param>
            <returns>
            An <b>IDictionary</b> of key/value pairs.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.IPofValue.GetDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Read an <b>IDictionar&lt;TKey, TValue&gt;y</b> of key/value pairs
            which this IPofValue represents.
            </summary>
            <typeparam name="TKey">
            The key type of the <b>IDictionary&lt;TKey, TValue&gt;</b>.
            </typeparam>
            <typeparam name="TValue">
            The value type of the <b>IDictionary&lt;TKey, TValue&gt;</b>.
            </typeparam>
            <param name="dict">
            The optional <b>IDictionary&lt;TKey, TValue&gt;</b> use to store
            the key/value pairs.
            </param>
            <returns>
            An <b>IDictionary&lt;TKey, TValue&gt;</b> of key/value pairs.
            </returns>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.IPofValue.TypeId">
            <summary>
            Obtain the POF type identifier for this value.
            </summary>
            <value>
            POF type identifier for this value.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.IPofValue.Root">
            <summary>
            Return the root of the hierarchy this value belongs to.
            </summary>
            <value>
            The root value.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.IPofValue.Parent">
            <summary>
            Return the parent of this value.
            </summary>
            <value>
            The parent value, or <c>null</c> if this is the root value.
            </value>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.REPLACE_THRESHOLD">
            <summary>
            Threshold that determines if the delta generated when applying
            changes should be in FMT_REPLACE or FMT_BINDIFF format. If more
            than a specified percentage of bytes are "dirty", the FMT_REPLACE
            will be used. Otherwise, FMT_BINDIFF format will be used to
            capture the changes.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.#ctor(Tangosol.IO.Pof.Reflection.IPofValue,Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32)">
            <summary>
            Construct a PofValue instance wrapping the supplied binary.
            </summary>
            <param name="valueParent">
            Parent value within the POF stream.
            </param>
            <param name="binValue">
            Binary representation of this value.
            </param>
            <param name="ctx">
            POF context to use when reading or writing properties.
            </param>
            <param name="of">
            Offset of this value from the beginning of POF stream.
            </param>
            <param name="nType">
            POF type identifier for this value.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetChild(System.Int32)">
            <summary>
            Locate a child IPofValue contained within this IPofValue.
            </summary>
            <remarks>
            The returned IPofValue could represent a non-existent (null)
            value.
            </remarks>
            <param name="nIndex">
            The index of the child value.
            </param>
            <returns>
            The child IPofValue.
            </returns>
            <exception cref="T:Tangosol.IO.Pof.Reflection.PofNavigationException">
            If this value is a "terminal" or the child value cannot be
            located 
            for any other reason.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetValue">
            <summary>
            Return the deserialized value which this IPofValue represents.
            </summary>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetValue(System.Type)">
            <summary>
            Return the deserialized value which this IPofValue represents.
            </summary>
            <param name="type">
            The required type of the returned value or <c>null</c> if the
            type is to be inferred from the serialized state.
            </param>
            <returns>
            The deserialized value.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the value is incompatible with the specified type.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetValue(System.Int32)">
            <summary>
            Return the deserialized value which this IPofValue represents.
            </summary>
            <param name="typeId">
            The required Pof type of the returned value or
            <see cref="F:Tangosol.IO.Pof.PofConstants.T_UNKNOWN"/> if the type is to be
            inferred from the serialized state.
            </param>
            <returns>
            The deserialized value.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the value is incompatible with the specified type.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.SetValue(System.Object)">
            <summary>
            Update this PofValue.
            </summary>
            <remarks>
            The changes made using this method will be immediately reflected
            in the result of <see cref="M:Tangosol.IO.Pof.Reflection.IPofValue.GetValue"/> method, but
            will not be applied to the underlying POF stream until the
            <see cref="M:Tangosol.IO.Pof.Reflection.IPofValue.ApplyChanges"/> method is invoked on the
            root IPofValue.
            </remarks>
            <param name="oValue">
            New deserialized value for this IPofValue.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.ApplyChanges">
            <summary>
            Apply all the changes that were made to this value and return a 
            binary representation of the new value.
            </summary>
            <remarks>
            Any format prefixes and/or decorations that were present in the original
            buffer this value orginated from will be preserved.
            <p/>
            <b>Note:</b> This method can only be called on the root PofValue.
            </remarks>
            <returns>
            New Binary object that contains modified PofValue.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If called on a non-root PofValue.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetChanges">
            <summary>
            Return a binary containing changes made to this IPofValue in the
            format defined by the <see cref="T:Tangosol.IO.BinaryDeltaCompressor"/>.
            </summary>
            <remarks>
            <b>Note:</b> This method can only be called on the root
            IPofValue.
            </remarks>
            <returns>
            A binary containing changes made to this IPofValue.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If called on a non-root IPofValue.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetBoolean">
            <summary>
            Return the <b>Boolean</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Boolean</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetByte">
            <summary>
            Return the <b>Byte</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Byte</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetChar">
            <summary>
            Return the <b>Char</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Char</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetInt16">
            <summary>
            Return the <b>Int16</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Int16</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetInt32">
            <summary>
            Return the <b>Int32</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Int32</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetInt64">
            <summary>
            Return the <b>Int64</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Int64</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetSingle">
            <summary>
            Return the <b>Single</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Single</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetDouble">
            <summary>
            Return the <b>Double</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Double</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetBooleanArray">
            <summary>
            Return the <b>Boolean[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Boolean[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetByteArray">
            <summary>
            Return the <b>Byte[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Byte[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetCharArray">
            <summary>
            Return the <b>Char[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Char[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetInt16Array">
            <summary>
            Return the <b>Int16[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Int16[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetInt32Array">
            <summary>
            Return the <b>Int32[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Int32[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetInt64Array">
            <summary>
            Return the <b>Int64[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Int64[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetSingleArray">
            <summary>
            Return the <b>Single[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Single[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetDoubleArray">
            <summary>
            Return the <b>Double[]</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Double[]</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetDecimal">
            <summary>
            Return the <b>Decimal</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>Decimal</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetString">
            <summary>
            Return the <b>String</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>String</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetDateTime">
            <summary>
            Return the <b>DateTime</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>DateTime</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetDate">
            <summary>
            Return the <b>DateTime</b> which this IPofValue represents.
            </summary>
            <remarks>
            This method will return only the date component. It will ignore the 
            time component if present and initialize the time-related fields of
            the return value to their default values.
            </remarks>
            <returns>
            The <b>DateTime</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetDayTimeInterval">
            <summary>
            Return the <b>TimeSpan</b> which this IPofValue represents.
            </summary>
            <returns>
            The <b>TimeSpan</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetCollection(System.Collections.ICollection)">
            <summary>
            Return an <b>ICollection</b> of object values which this IPofValue
            represents.
            </summary>
            <param name="coll">
            The optional <b>ICollection</b> to use to store the values.
            </param>
            <returns>
            An <b>ICollection</b> of object values.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetCollection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Return an <b>ICollection&lt;T&gt;</b> of object values which this
            IPofValue represents.
            </summary>
            <typeparam name="T">
            The type of the elements in the collection.
            </typeparam>
            <param name="coll">
            The optional <b>ICollection&lt;T&gt;</b> to use to store the values.
            </param>
            <returns>
            An <b>ICollection&lt;T&gt;</b> of object values.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetDictionary(System.Collections.IDictionary)">
            <summary>
            Return an <b>IDictionary</b> of key/value pairs which this
            IPofValue represents.
            </summary>
            <param name="dict">
            The optional <b>IDictionary</b> to use to store the key/value pairs.
            </param>
            <returns>
            An <b>IDictionary</b> of key/value pairs.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Read an <b>IDictionar&lt;TKey, TValue&gt;y</b> of key/value pairs
            which this IPofValue represents.
            </summary>
            <typeparam name="TKey">
            The key type of the <b>IDictionary&lt;TKey, TValue&gt;</b>.
            </typeparam>
            <typeparam name="TValue">
            The value type of the <b>IDictionary&lt;TKey, TValue&gt;</b>.
            </typeparam>
            <param name="dict">
            The optional <b>IDictionary&lt;TKey, TValue&gt;</b> use to store
            the key/value pairs.
            </param>
            <returns>
            An <b>IDictionary&lt;TKey, TValue&gt;</b> of key/value pairs.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.SetDirty">
            <summary>
            Set the dirty flag for this value.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.GetSerializedValue">
            <summary>
            Return this value's serialized form.
            </summary>
            <returns>
            This value's serialized form.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.EnsureReferenceRegistry">
            <summary>
            Obtain the registry for identity-reference pairs, creating it if
            necessary.
            </summary>
            <returns>
            The identity-reference registry, never <c>null</c>.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.RegisterIdentity(System.Int32,System.Object)">
            <summary>
            Register the passed value with the passed identity.
            </summary>
            <param name="id">
            The identity.
            </param>
            <param name="value">
            The object registerd under the passed identity.
            </param>
            <exception cref="T:System.ArgumentException">
            If the specified identity is already registered with a different object. 
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.LookupIdentity(System.Int32)">
            <summary>
            Look up the specified identity and return the object to which it
            refers.
            </summary>
            <param name="id">
            The identity.
            </param>
            <returns>
            The object registered under that identity.
            </returns>
            <exception cref="T:System.IO.IOException">
            If the requested identity is not registered.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.SetUniformEncoded">
            <summary>
            Specifies that the buffer contains only a value, without a type
            identifier.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.IncrementDirtyValuesCount">
            <summary>
            Increment the counter representing the number of values within
            this POF hierarchy that have been modified.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.IncrementDirtyBytesCount(System.Int32)">
            <summary>
            Increment the counter representing the estimated number of bytes
            in the original buffer that have been modified.
            </summary>
            <param name="cb">
            The number of bytes to increment counter for.
            </param>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.m_valueParent">
            <summary>
            Parent value.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.m_ctx">
            <summary>
            POF context to use for serialization and deserialization.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.m_arrayRefs">
            <summary>
            Lazily-constructed mapping of identities to references.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.m_binValue">
            <summary>
            Binary representation of this value.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.m_of">
            <summary>
            Offset of this value from the beginning of POF stream.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.m_nType">
            <summary>
            POF type identifer of this value.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.m_oValue">
            <summary>
            Deserialized representation of this value.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.m_fUniformEncoded">
            <summary>
            True if the this IPofValue represents a uniform value without the
            type id; false for a complete POF value that includes the type
            id.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.m_fDirty">
            <summary>
            True iff this value has been changed.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.m_cDirty">
            <summary>
            The number of "dirty" values within this POF hierarchy.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.m_cbDirty">
            <summary>
            The number of "dirty" bytes within this POF hierarchy.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.TypeId">
            <summary>
            Obtain the POF type identifier for this value.
            </summary>
            <value>
            POF type identifier for this value.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.Root">
            <summary>
            Return the root of the hierarchy this value belongs to.
            </summary>
            <value>
            The root value.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.Parent">
            <summary>
            Return the parent of this value.
            </summary>
            <value>
            The parent value, or <c>null</c> if this is the root value.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.PofContext">
            <summary>
            Return the POF context to use for serialization and
            deserialization.
            </summary>
            <value>
            The POF context.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.Offset">
            <summary>
            Return the offset of this value from the beginning of POF stream.
            </summary>
            <value>
            The offset of this value from the beginning of POF stream.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.Size">
            <summary>
            Return the size of the encoded value in bytes.
            </summary>
            <value>
            The size of the encoded value.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.IsDirty">
            <summary>
            Return <c>true</c> if this value has been modified,
            <c>false</c> otherwise.
            </summary>
            <value>
            <c>true</c> if this value has been modified,
            <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.BinaryValue">
            <summary>
            Return binary representation of this value.
            </summary>
            <value>
            Binary representation of this value.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.IsRoot">
            <summary>
            Return <c>true</c> if this instance is the root of the IPofValue
            hierarchy.
            </summary>
            <value>
            <c>true</c> if this is the root value.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.IsUniformEncoded">
            <summary>
            Return <c>true</c> if the buffer contains only the value, without
            the type identifier.
            </summary>
            <value>
            <c>true</c> if the buffer contains only the value.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.DirtyBytesCount">
            <summary>
            Get the estimated number of dirty bytes in this POF value
            hierarchy.
            </summary>
            <value>
            The number of dirty bytes.
            </value>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.AbstractPofValue.PofValueReader">
            <summary>
            PofStreamReader that allows reading of both complete and uniform
            encoded values.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.PofStreamReader">
            <summary>
            <see cref="T:Tangosol.IO.Pof.IPofReader"/> implementation that reads POF-encoded data
            from a <see cref="T:Tangosol.IO.DataReader"/>.
            </summary>
            <author>Cameron Purdy  2006.07.14</author>
            <author>Aleksandar Seovic  2006.08.08</author>
            <author>Ivan Cikic  2006.08.09</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="T:Tangosol.IO.Pof.IPofReader">
            <summary>
            The <b>IPofReader</b> interface provides the capability of reading a
            set of non-primitive .NET types ("user types") from a POF stream as an
            ordered sequence of indexed properties.
            </summary>
            <remarks>
            See <see cref="T:Tangosol.IO.Pof.IPofWriter"/> for a complete description of the POF
            user type serialization format.
            </remarks>
            <author>Cameron Purdy, Jason Howes  2006.07.13</author>
            <author>Aleksandar Seovic  2006.08.08</author>
            <seealso cref="T:Tangosol.IO.Pof.IPofContext"/>
            <seealso cref="T:Tangosol.IO.Pof.IPofWriter"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadBoolean(System.Int32)">
            <summary>
            Read a <b>Boolean</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Boolean</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadByte(System.Int32)">
            <summary>
            Read a <b>Byte</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Byte</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadChar(System.Int32)">
            <summary>
            Read a <b>Char</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Char</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadInt16(System.Int32)">
            <summary>
            Read an <b>Int16</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Int16</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadInt32(System.Int32)">
            <summary>
            Read an <b>Int32</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Int32</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadInt64(System.Int32)">
            <summary>
            Read an <b>Int64</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Int64</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadRawInt128(System.Int32)">
            <summary>
            Read an <b>RawInt128</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>RawInt128</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadSingle(System.Int32)">
            <summary>
            Read a <b>Single</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Single</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadDouble(System.Int32)">
            <summary>
            Read a <b>Double</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Double</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadBooleanArray(System.Int32)">
            <summary>
            Read a <b>Boolean[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Boolean[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadByteArray(System.Int32)">
            <summary>
            Read a <b>Byte[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Byte[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadCharArray(System.Int32)">
            <summary>
            Read a <b>Char[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Char[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadInt16Array(System.Int32)">
            <summary>
            Read an <b>Int16[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Int16[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadInt32Array(System.Int32)">
            <summary>
            Read an <b>Int32[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Int32[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadInt64Array(System.Int32)">
            <summary>
            Read an <b>Int64[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Int64[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadSingleArray(System.Int32)">
            <summary>
            Read a <b>Single[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Single[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadDoubleArray(System.Int32)">
            <summary>
            Read a <b>Double[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Double[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadDecimal(System.Int32)">
            <summary>
            Read a <b>Decimal</b> from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Decimal</b> property value, or zero if no value was
            available in the POF stream
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadString(System.Int32)">
            <summary>
            Read a <b>String</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>String</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadDateTime(System.Int32)">
            <summary>
            Read a <b>DateTime</b> property from the POF stream.
            </summary>
            <remarks>
            <p>
            This method will attempt to read both the date and time component
            from the POF stream. If the value in the stream does not contain
            both components, the corresponding values in the returned
            <b>DateTime</b> instance will be set to default values.</p>
            <p>
            If the encoded value in the POF stream contains time zone
            information, this method will ignore time zone information
            and return a literal <b>DateTime</b> value, as read from the
            stream.</p>
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>DateTime</b> property value.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadLocalDateTime(System.Int32)">
            <summary>
            Read a <b>DateTime</b> property from the POF stream.
            </summary>
            <remarks>
            <p>
            This method will attempt to read both the date and time component
            from the POF stream. If the value in the stream does not contain
            both components, the corresponding values in the returned
            <b>DateTime</b> instance will be set to default values.</p>
            <p>
            If the encoded value in the POF stream contains time zone
            information, this method will use it to determine and return
            the local time <b>for the reading thread</b>.</p>
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>DateTime</b> property value.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadUniversalDateTime(System.Int32)">
            <summary>
            Read a <b>DateTime</b> property from the POF stream.
            </summary>
            <remarks>
            <p>
            This method will attempt to read both the date and time components
            from the POF stream. If the value in the stream does not contain
            both components, the corresponding values in the returned
            <b>DateTime</b> instance will be set to default values.</p>
            <p>
            If the encoded value in the POF stream contains time zone
            information, this method will use it to determine and return
            a Coordinated Universal Time (UTC) value.</p>
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>DateTime</b> property value.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadDate(System.Int32)">
            <summary>
            Read a <b>DateTime</b> property from the POF stream.
            </summary>
            <remarks>
            This method will read only the date component of a date-time value
            from the POF stream. It will ignore the time component if present
            and initialize the time-related fields of the return value to their
            default values.
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>DateTime</b> property value.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadRawTime(System.Int32)">
            <summary>
            Read a <b>RawTime</b> property from the POF stream.
            </summary>
            <remarks>
            The <see cref="T:Tangosol.IO.Pof.RawTime"/> class contains the raw time information
            that was carried in the POF stream, including raw timezone
            information.
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>RawTime</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadRawDateTime(System.Int32)">
            <summary>
            Read a <b>RawDateTime</b> from the POF stream.
            </summary>
            <remarks>
            The <see cref="T:Tangosol.IO.Pof.RawDateTime"/> class contains the raw date and
            time information that was carried in the POF stream, including
            raw timezone information.
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>RawDateTime</b> property value, or <c>null</c> if no value
            was available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadRawYearMonthInterval(System.Int32)">
            <summary>
            Read a <b>RawYearMonthInterval</b> from the POF stream.
            </summary>
            <remarks>
            The <see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/> struct contains the raw
            year-month interval information that was carried in the POF
            stream.
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>RawYearMonthInterval</b> property value, or <c>null</c> if no
            value was available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadTimeInterval(System.Int32)">
            <summary>
            Reads a <b>TimeSpan</b> from the POF stream.
            </summary>
            <remarks>
            This method will read only the time component of a day-time-interval
            value from the POF stream. It will ignore the day component if present
            and initialize day-related fields of the return value to their default
            values.
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>TimeSpan</b> property value, or <c>null</c> if no value
            was available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadDayTimeInterval(System.Int32)">
            <summary>
            Reads a <b>TimeSpan</b> from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>TimeSpan</b> property value, or <c>null</c> if no value
            was available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadObject(System.Int32)">
            <summary>
            Read a property of any type, including a user type,
            from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The object value; may be <c>null</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadBinary(System.Int32)">
            <summary>
            Read a <see cref="T:Tangosol.Util.Binary"/> from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Binary</b> property value, or <c>null</c> if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadArray(System.Int32)">
            <summary>
            Read an array of object values.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            An array of object values, or <c>null</c> if
            there is no array data in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadArray(System.Int32,System.Array)">
            <summary>
            Read an array of object values.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <param name="array">
            The optional array to use to store the values, or to use as a
            typed template for creating an array to store the values,
            following the documentation for <b>ArrayList.ToArray(Type)</b>.
            </param>
            <returns>
            An array of object values, or <c>null</c> if no array is passed
            and there is no array data in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadLongArray(System.Int32,Tangosol.Util.ILongArray)">
            <summary>
            Read an <b>ILongArray</b> of object values.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <param name="array">
            The optional <b>ILongArray</b> object to use to store the values.
            </param>
            <returns>
            An <b>ILongArray</b> of object values, or <c>null</c> if no
            <b>ILongArray</b> is passed and there is no array data in the
            POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadCollection(System.Int32,System.Collections.ICollection)">
            <summary>
            Read an <b>ICollection</b> of object values from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <param name="coll">
            The optional <b>ICollection</b> to use to store the values.
            </param>
            <returns>
            A collection of object values, or <c>null</c> if no collection is
            passed and there is no collection data in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadDictionary(System.Int32,System.Collections.IDictionary)">
            <summary>
            Read an <b>IDictionary</b> of key/value pairs from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <param name="dict">
            The optional <b>IDictionary</b> to initialize.
            </param>
            <returns>
            An <b>IDictionary</b> of key/value pairs object values, or
            <c>null</c> if no dictionary is passed and there is no key/value
            data in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="dict"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadCollection``1(System.Int32,System.Collections.Generic.ICollection{``0})">
            <summary>
            Read a generic <b>ICollection&lt;T&gt;</b> of object values from
            the POF stream.
            </summary>
            <typeparam name="T">
            The type of the elements it the collection.
            </typeparam>
            <param name="index">
            The property index to read.
            </param>
            <param name="coll">
            The optional <b>ICollection&lt;T&gt;</b> to use to store the
            values.
            </param>
            <returns>
            A generic collection of object values, or <c>null</c> if no
            collection is passed and there is no collection data in the POF
            stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadDictionary``2(System.Int32,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Read a generic <b>IDictionary&lt;TKey, TValue&gt;</b> of
            key/value pairs from the POF stream.
            </summary>
            <typeparam name="TKey">
            The type of the keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of the values in the dictionary.
            </typeparam>
            <param name="index">
            The property index to read.
            </param>
            <param name="dictionary">
            The optional <b>IDictionary&lt;TKey, TValue&gt;</b> to initialize.
            </param>
            <returns>
            An <b>IDictionary&lt;TKey, TValue&gt;</b> of key/value pairs
            object values, or <c>null</c> if no dictionary is passed and
            there is no key/value data in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="dictionary"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.RegisterIdentity(System.Object)">
            <summary>
            Register an identity for a newly created user type instance.
            </summary>
            <remarks>
            If identity/reference types are enabled, an identity is used to
            uniquely identify a user type instance within a POF stream. The
            identity immediately proceeds the instance value in the POF stream
            and can be used later in the stream to reference the instance.
            <p/>
            IPofSerializer implementations must call this method with each
            user type instance instantiated during deserialization prior to 
            reading any properties of the instance which are user type
            instances themselves.
            </remarks>
            <param name="o">
            The object to register the identity for.
            </param>
            <see>IPofSerializer#Deserialize(IPofReader)</see>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.CreateNestedPofReader(System.Int32)">
            <summary>
            Obtain an IPofReader that can be used to read a set of properties 
            from a single property of the current user type. The returned 
            IPofReader is only valid from the time that it is returned until
            the next call is made to this IPofReader.
            </summary>
            <param name="iProp">
            The property index to read from. </param>
            <returns>
            An IPofReader that reads its contents from  a single property of
            this IPofReader.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property, or if no user type is being parsed.
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occurs
            </exception>
            <since> Coherence 3.6 </since>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofReader.ReadRemainder">
            <summary>
            Read all remaining indexed properties of the current user type
            from the POF stream.
            </summary>
            <remarks>
            <p>
            As part of reading in a user type, this method must be called by
            the <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> that is reading the user type,
            or the read position within the POF stream will be corrupted.</p>
            <p>
            Subsequent calls to the various <b>ReadXYZ</b> methods of this
            interface will fail after this method is called.</p>
            </remarks>
            <returns>
            A <b>Binary</b> object containing zero or more indexed properties
            in binary POF encoded form, or null if no value was available
            in the POF stream
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If no user type is being parsed.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="P:Tangosol.IO.Pof.IPofReader.PofContext">
             <summary>
             Gets or sets the <see cref="T:Tangosol.IO.Pof.IPofContext"/> object used by this
             <b>IPofReader</b> to deserialize user types from a POF stream.
             </summary>
             <remarks>
             This is an advanced method that should be used with care.
             For example, if this method is being used to switch to another
             <b>IPofContext</b> mid-POF stream, it is important to eventually
             restore the original <b>IPofContext</b>. For example:
             <pre>
             IPofContext ctxOrig = reader.PofContext;
             try
             {
                 // switch to another IPofContext
                 reader.PofContext = ...;
            
                 // read POF data using the reader
             }
             finally
             {
                 // restore the original PofContext
                 reader.PofContext = ctxOrig;
             }
             </pre>
             </remarks>
             <value>
             The <b>IPofContext</b> object that contains user type meta-data.
             </value>
        </member>
        <member name="P:Tangosol.IO.Pof.IPofReader.UserTypeId">
            <summary>
            Gets the user type that is currently being parsed.
            </summary>
            <value>
            The user type information, or -1 if the <b>IPofReader</b> is not
            currently parsing a user type.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.IPofReader.VersionId">
            <summary>
            Gets the version identifier of the user type that is currently
            being parsed.
            </summary>
            <value>
            The integer version ID read from the POF stream; always
            non-negative.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If no user type is being parsed.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.#ctor(Tangosol.IO.DataReader,Tangosol.IO.Pof.IPofContext)">
            <summary>
            Construct a POF parser that will pull values from the specified
            stream.
            </summary>
            <param name="reader">
            A <see cref="T:Tangosol.IO.DataReader"/> object.
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.#ctor">
            <summary>
            Construct a POF parser.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadBoolean(System.Int32)">
            <summary>
            Read a <b>Boolean</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Boolean</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadByte(System.Int32)">
            <summary>
            Read a <b>Byte</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Byte</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadChar(System.Int32)">
            <summary>
            Read a <b>Char</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Char</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadInt16(System.Int32)">
            <summary>
            Read an <b>Int16</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Int16</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadInt32(System.Int32)">
            <summary>
            Read an <b>Int32</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Int32</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadInt64(System.Int32)">
            <summary>
            Read an <b>Int64</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Int64</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadRawInt128(System.Int32)">
            <summary>
            Read an <b>RawInt128</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>RawInt128</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadSingle(System.Int32)">
            <summary>
            Read a <b>Single</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Single</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadDouble(System.Int32)">
            <summary>
            Read a <b>Double</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Double</b> property value, or zero if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadBooleanArray(System.Int32)">
            <summary>
            Read a <b>Boolean[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Boolean[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadByteArray(System.Int32)">
            <summary>
            Read a <b>Byte[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Byte[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadCharArray(System.Int32)">
            <summary>
            Read a <b>Char[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Char[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadInt16Array(System.Int32)">
            <summary>
            Read an <b>Int16[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Int16[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadInt32Array(System.Int32)">
            <summary>
            Read an <b>Int32[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Int32[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadInt64Array(System.Int32)">
            <summary>
            Read an <b>Int64[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Int64[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadSingleArray(System.Int32)">
            <summary>
            Read a <b>Single[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Single[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadDoubleArray(System.Int32)">
            <summary>
            Read a <b>Double[]</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Double[]</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadDecimal(System.Int32)">
            <summary>
            Read a <b>Decimal</b> from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Decimal</b> property value, or null if no value was
            available in the POF stream
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadString(System.Int32)">
            <summary>
            Read a <b>String</b> property from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>String</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadDateTime(System.Int32)">
            <summary>
            Read a <b>DateTime</b> property from the POF stream.
            </summary>
            <remarks>
            <p>
            This method will attempt to read both the date and time component
            from the POF stream. If the value in the stream does not contain
            both components, the corresponding values in the returned
            <b>DateTime</b> instance will be set to default values.</p>
            <p>
            If the encoded value in the POF stream contains time zone
            information, this method will ignore time zone information
            and return a literal <b>DateTime</b> value, as read from the
            stream.</p>
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>DateTime</b> property value.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadLocalDateTime(System.Int32)">
            <summary>
            Read a <b>DateTime</b> property from the POF stream.
            </summary>
            <remarks>
            <p>
            This method will attempt to read both the date and time component
            from the POF stream. If the value in the stream does not contain
            both components, the corresponding values in the returned
            <b>DateTime</b> instance will be set to default values.</p>
            <p>
            If the encoded value in the POF stream contains time zone
            information, this method will use it to determine and return
            the local time <b>for the reading thread</b>.</p>
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>DateTime</b> property value.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadUniversalDateTime(System.Int32)">
            <summary>
            Read a <b>DateTime</b> property from the POF stream.
            </summary>
            <remarks>
            <p>
            This method will attempt to read both the date and time components
            from the POF stream. If the value in the stream does not contain
            both components, the corresponding values in the returned
            <b>DateTime</b> instance will be set to default values.</p>
            <p>
            If the encoded value in the POF stream contains time zone
            information, this method will use it to determine and return
            a Coordinated Universal Time (UTC) value.</p>
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>DateTime</b> property value.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadRawDateTime(System.Int32)">
            <summary>
            Read a <b>RawDateTime</b> from the POF stream.
            </summary>
            <remarks>
            The <see cref="T:Tangosol.IO.Pof.RawDateTime"/> class contains the raw date and
            time information that was carried in the POF stream, including
            raw timezone information.
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>RawDateTime</b> property value, or <c>null</c> if no value
            was available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadDate(System.Int32)">
            <summary>
            Read a <b>DateTime</b> property from the POF stream.
            </summary>
            <remarks>
            This method will read only the date component of a date-time value
            from the POF stream. It will ignore the time component if present
            and initialize the time-related fields of the return value to their
            default values.
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>DateTime</b> property value.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadRawTime(System.Int32)">
            <summary>
            Read a <b>RawTime</b> property from the POF stream.
            </summary>
            <remarks>
            The <see cref="T:Tangosol.IO.Pof.RawTime"/> class contains the raw time information
            that was carried in the POF stream, including raw timezone
            information.
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>RawTime</b> property value, or null if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadRawYearMonthInterval(System.Int32)">
            <summary>
            Read a year-month interval from the POF stream.
            </summary>
            <remarks>
            The <see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/> struct contains the raw
            year-month interval information that was carried in the POF
            stream.
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>YearMonthInterval</b> property value, or <c>null</c> if no
            value was available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadTimeInterval(System.Int32)">
            <summary>
            Reads a <b>TimeSpan</b> from the POF stream.
            </summary>
            <remarks>
            This method will read only the time component of a day-time-interval
            value from the POF stream. It will ignore the day component if present
            and initialize day-related fields of the return value to their default
            values.
            </remarks>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>TimeSpan</b> property value, or <c>null</c> if no value
            was available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadDayTimeInterval(System.Int32)">
            <summary>
            Reads a <b>TimeSpan</b> from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>TimeSpan</b> property value, or <c>null</c> if no value
            was available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadObject(System.Int32)">
            <summary>
            Read a property of any type, including a user type, from the POF
            stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The object value; may be <c>null</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadBinary(System.Int32)">
            <summary>
            Read a <see cref="T:Tangosol.Util.Binary"/> from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            The <b>Binary</b> property value, or <c>null</c> if no value was
            available in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadArray(System.Int32)">
            <summary>
            Read an array of object values.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <returns>
            An array of object values, or <c>null</c> if
            there is no array data in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadArray(System.Int32,System.Array)">
            <summary>
            Read an array of object values.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <param name="array">
            The optional array to use to store the values, or to use as a
            typed template for creating an array to store the values,
            following the documentation for <b>ArrayList.ToArray</b>.
            </param>
            <returns>
            An array of object values, or <c>null</c> if no array is passed
            and there is no array data in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadLongArray(System.Int32,Tangosol.Util.ILongArray)">
            <summary>
            Read an <b>ILongArray</b> of object values.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <param name="array">
            The optional <b>ILongArray</b> object to use to store the values.
            </param>
            <returns>
            An <b>ILongArray</b> of object values, or <c>null</c> if no
            <b>ILongArray</b> is passed and there is no array data in the
            POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadCollection(System.Int32,System.Collections.ICollection)">
            <summary>
            Read an <b>ICollection</b> of object values from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <param name="coll">
            The optional <b>ICollection</b> to use to store the values.
            </param>
            <returns>
            A collection of object values, or <c>null</c> if no collection is
            passed and there is no collection data in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadDictionary(System.Int32,System.Collections.IDictionary)">
            <summary>
            Read an <b>IDictionary</b> of key/value pairs from the POF stream.
            </summary>
            <param name="index">
            The property index to read.
            </param>
            <param name="dict">
            The optional <b>IDictionary</b> to initialize.
            </param>
            <returns>
            An <b>IDictionary</b> of key/value pairs object values, or
            <c>null</c> if no dictionary is passed and there is no key/value
            data in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="dict"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadCollection``1(System.Int32,System.Collections.Generic.ICollection{``0})">
            <summary>
            Read a generic <b>ICollection&lt;T&gt;</b> of object values from
            the POF stream.
            </summary>
            <typeparam name="T">
            The type of the elements in the collection.
            </typeparam>
            <param name="index">
            The property index to read.
            </param>
            <param name="coll">
            The optional <b>ICollection&lt;T&gt;</b> to use to store the
            values.
            </param>
            <returns>
            A generic collection of object values, or <c>null</c> if no
            collection is passed and there is no collection data in the POF
            stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadDictionary``2(System.Int32,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Read a generic <b>IDictionary&lt;TKey, TValue&gt;</b> of
            key/value pairs from the POF stream.
            </summary>
            <typeparam name="TKey">
            The type of the keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of the values in the dictionary.
            </typeparam>
            <param name="index">
            The property index to read.
            </param>
            <param name="dictionary">
            The optional <b>IDictionary&lt;TKey, TValue&gt;</b> to initialize.
            </param>
            <returns>
            An <b>IDictionary&lt;TKey, TValue&gt;</b> of key/value pairs
            object values, or <c>null</c> if no dictionary is passed and
            there is no key/value data in the POF stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="dictionary"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.RegisterIdentity(System.Object)">
            <summary>
            Register an identity for a newly created user type instance.
            </summary>
            <remarks>
            If identity/reference types are enabled, an identity is used to
            uniquely identify a user type instance within a POF stream. The
            identity immediately proceeds the instance value in the POF stream
            and can be used later in the stream to reference the instance.
            <p/>
            IPofSerializer implementations must call this method with each
            user type instance instantiated during deserialization prior to 
            reading any properties of the instance which are user type
            instances themselves.
            </remarks>
            <param name="o">
            The object to register the identity for.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If no user type is being parsed.
            </exception>
            <see>IPofSerializer#Deserialize(IPofReader)</see>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.CreateNestedPofReader(System.Int32)">
            <summary>
            Obtain a PofReader that can be used to read a set of properties from a
            single property of the current user type. The returned PofReader is
            only valid from the time that it is returned until the next call is
            made to this PofReader.
            </summary>
            <param name="iProp">
            the property index to read from </param>
            <returns>
            a PofReader that reads its contents from  a single property of
            this PofReader
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property, or if no user type is being parsed.
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occurs
            </exception>
            <since> Coherence 3.6 </since>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadRemainder">
            <summary>
            Read all remaining indexed properties of the current user type
            from the POF stream.
            </summary>
            <remarks>
            As part of reading in a user type, this method must be called by
            the <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> that is reading the user type,
            or the read position within the POF stream will be corrupted.
            Subsequent calls to the various <b>ReadXYZ</b> methods of this
            interface will fail after this method is called.
            </remarks>
            <returns>
            A <b>Byte[]</b> containing zero or more indexed properties in
            binary POF encoded form.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If no user type is being parsed.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.AdvanceTo(System.Int32)">
            <summary>
            Advance through the POF stream until the specified property is
            found.
            </summary>
            <remarks>
            If the property is found, return <b>true</b>, otherwise return
            <b>false</b> and advance to the first property that follows the
            specified property.
            </remarks>
            <param name="index">
            The index of the property to advance to.
            </param>
            <returns>
            <b>true</b> if the property is found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            if the POF stream has already advanced past the desired property.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.Complete(System.Int32)">
            <summary>
            Register the completion of the parsing of a value.
            </summary>
            <param name="index">
            The property index.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.EnsureReferenceRegistry">
            <summary>
            Obtain the registry for identity-reference pairs, creating it if
            necessary.
            </summary>
            <returns>
            The identity-reference registry, never <c>null</c>.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.RegisterIdentity(System.Int32,System.Object)">
            <summary>
            Register the passed value with the passed identity.
            </summary>
            <param name="id">
            The identity.
            </param>
            <param name="value">
            The object registerd under the passed identity.
            </param>
            <exception cref="T:System.ArgumentException">
            If the specified identity is already registered with a different object. 
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.LookupIdentity(System.Int32)">
            <summary>
            Look up the specified identity and return the object to which it
            refers.
            </summary>
            <param name="id">
            The identity.
            </param>
            <returns>
            The object registered under that identity.
            </returns>
            <exception cref="T:System.IO.IOException">
            If the requested identity is not registered.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadAsObject(System.Int32)">
            <summary>
            Read a POF value as an Object.
            </summary>
            <param name="typeId">
            The type identifier of the value.
            </param>
            <returns>
            An Object value.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadAsUniformObject(System.Int32)">
            <summary>
            Read a POF value in a uniform array/map as an Object.
            </summary>
            <param name="typeId">
            The type identifier of the value.
            </param>
            <returns>
            An Object value.
            </returns>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadAsArray(System.Int32,System.Array)">
            <summary>
            Read a POF value as a typed object array.
            </summary>
            <param name="typeId">
            The type identifier of the value.
            </param>
            <param name="array">
            The optional array to use to store the values, or to use as a
            typed template for creating an array to store the values.
            </param>
            <returns>
            A typed object array.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.ReadBinary(Tangosol.IO.DataReader)">
            <summary>
            Read a <see cref="T:Tangosol.Util.Binary"/> object from the specified
            <see cref="T:Tangosol.IO.DataReader"/> in an optimal way.
            </summary>
            <param name="reader">
            A <b>DataReader</b> to read from.
            </param>
            <returns>
            The Binary data.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamReader.m_reader">
            <summary>
            The <see cref="T:Tangosol.IO.DataReader"/> containing the POF stream.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamReader.m_ctx">
            <summary>
             The <see cref="T:Tangosol.IO.Pof.IPofContext"/> to use to realize user data types
            as .NET objects.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamReader.m_referenceMap">
            <summary>
            Lazily-constructed mapping of identities to references.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamReader.PofContext">
             <summary>
             Gets or sets the <see cref="T:Tangosol.IO.Pof.IPofContext"/> object used by this
             <b>PofStreamReader</b> to deserialize user types from a POF
             stream.
             </summary>
             <remarks>
             This is an advanced propertie that should be used with
             care.
             For example, if this method is being used to switch to another
             <b>IPofContext</b> mid-POF stream, it is important to eventually
             restore the original <b>IPofContext</b>. For example:
             <pre>
             IPofContext ctxOrig = reader.PofContext;
             try
             {
                 // switch to another IPofContext
                 reader.PofContext = ...;
            
                 // read POF data using the reader
             }
             finally
             {
                 // restore the original PofContext
                 reader.PofContext = ctxOrig;
             }
             </pre>
             </remarks>
             <value>
             The <b>IPofContext</b> object that contains user type meta-data.
             </value>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamReader.UserTypeId">
            <summary>
            Gets the user type that is currently being parsed.
            </summary>
            <value>
            The user type information, or -1 if the <b>PofStreamReader</b> is
            not currently parsing a user type.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamReader.VersionId">
            <summary>
            Gets the version identifier of the user type that is currently
            being parsed.
            </summary>
            <value>
            The integer version ID read from the POF stream; always
            non-negative.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If no user type is being parsed.
            </exception>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamReader.ParentParser">
            <summary>
            If this parser is contextually within a user type, obtain the
            parser which created this parser in order to parse the user type.
            </summary>
            <value>
            The parser for the context within which this parser is operating.
            </value>
        </member>
        <member name="T:Tangosol.IO.Pof.PofStreamReader.UserTypeReader">
            <summary>
            The <b>UserTypeReader</b> implementation is a contextually-aware
            <see cref="T:Tangosol.IO.Pof.IPofReader"/> whose purpose is to advance through the
            properties of a value of a specified user type.
            </summary>
            <remarks>
            The "contextual awareness" refers to the fact that the
            <b>UserTypeReader</b> maintains state about the type identifier
            and version of the user type, the parser's property index
            position within the user type value, and a
            <see cref="T:Tangosol.IO.Pof.IPofContext"/> that may differ from the
            <b>IPofContext</b> that provided the <see cref="T:Tangosol.IO.Pof.IPofSerializer"/>
            which is using this <b>UserTypeReader</b> to parse a user type.
            </remarks>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.EOPS">
            <summary>
            Fake End-Of-Property-Stream indicator.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.#ctor(Tangosol.IO.DataReader,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32)">
            <summary>
            Construct a parser for parsing the property values of a user
            type.
            </summary>
            <param name="reader">
            The <see cref="T:Tangosol.IO.DataReader"/> that contains the user type
            data, except for the user type id itself (which is passed as
            a constructor argument).
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/> to use for parsing the user
            type property values within the user type that this parser
            will be parsing.
            </param>
            <param name="typeId">
            The type id of the user type.
            </param>
            <param name="versionId">
            The version id of the user type.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.#ctor(Tangosol.IO.Pof.PofStreamReader,Tangosol.IO.DataReader,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32)">
            <summary>
            Construct a parser for parsing the property values of a user
            type.
            </summary>
            <param name="parent">
            The parent <see cref="T:Tangosol.IO.Pof.PofStreamReader"/> (ie the containing) PofBufferReader
            </param>
            <param name="reader">
            The <see cref="T:Tangosol.IO.DataReader"/> that contains the user type
            data, except for the user type id itself (which is passed as
            a constructor argument).
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/> to use for parsing the user
            type property values within the user type that this parser
            will be parsing.
            </param>
            <param name="typeId">
            The type id of the user type.
            </param>
            <param name="versionId">
            The version id of the user type.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.#ctor(Tangosol.IO.Pof.PofStreamReader,Tangosol.IO.DataReader,Tangosol.IO.Pof.IPofContext)">
            <summary>
            Construct a parser for parsing the property values of a user
            type.
            </summary>
            <param name="parent">
            The parent <see cref="T:Tangosol.IO.Pof.PofStreamReader"/> (ie the containing) PofBufferReader
            </param>
            <param name="reader">
            The <see cref="T:Tangosol.IO.DataReader"/> that contains the user type
            data, except for the user type id itself (which is passed as
            a constructor argument).
            </param>
            <param name="context">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/> to use for parsing the user
            type property values within the user type that this parser
            will be parsing.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.RegisterIdentity(System.Object)">
            <summary>
            <p>
            Register an identity for a newly created user type instance.</p>
            If identity/reference types are enabled, an identity is used to
            uniquely identify a user type instance within a POF stream. The
            identity immediately proceeds the instance value in the POF stream
            and can be used later in the stream to reference the instance.<p/>
            IPofSerializer implementations must call this method with each
            user type instance instantiated during deserialization prior to 
            reading any properties of the instance which are user type
            instances themselves.
            </summary>
            <param name="o">
            The object to register the identity for.
            </param>
            <see> IPofSerializer#Deserialize(IPofReader) </see>
            <since> Coherence 3.7.1 </since>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.CreateNestedPofReader(System.Int32)">
            <summary>
            Obtain a PofReader that can be used to read a set of properties from a
            single property of the current user type. The returned PofReader is
            only valid from the time that it is returned until the next call is
            made to this PofReader.
            </summary>
            <param name="iProp">
            the property index to read from </param>
            <returns>
            a PofReader that reads its contents from a single property of
            this PofReader
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the
            desired property, or if no user type is being parsed.
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occurs
            </exception>
            <since> Coherence 3.6 </since>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.ReadRemainder">
            <summary>
            Read all remaining indexed properties of the current user
            type from the POF stream.
            </summary>
            <remarks>
            As part of reading in a user type, this method must be called
            by the <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> that is reading the user
            type, or the read position within the POF stream will be
            corrupted. Subsequent calls to the various <b>ReadXYZ</b>
            methods of this interface will fail after this method is
            called.
            </remarks>
            <returns>
            A <b>Binary</b> containing zero or more indexed properties in
            binary POF encoded form.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If no user type is being parsed.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.AdvanceTo(System.Int32)">
            <summary>
            Advance through the POF stream until the specified property
            is found.
            </summary>
            <remarks>
            If the property is found, return <b>true</b>, otherwise
            return <b>false</b> and advance to the first property that
            follows the specified property.
            </remarks>
            <param name="index">
            The index of the property to advance to.
            </param>
            <returns>
            <b>true</b> if the property is found.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the POF stream has already advanced past the desired
            property.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.Complete(System.Int32)">
            <summary>
            Register the completion of the parsing of a value.
            </summary>
            <param name="index">
            The property index.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.CloseNested">
            <summary>
            Notify the UserTypeReader that it is being "closed".
            </summary>
            <exception cref="T:System.NotSupportedException">    
            throws IOException  if an I/O error occurs
            </exception>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.m_parent">
            <summary>
             The parent (ie containing) PofBufferReader.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.m_typeId">
            <summary>
            The type identifier of the user type that is being parsed.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.m_versionId">
            <summary>
            The version identifier of the user type that is being parsed.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.m_prevProp">
            <summary>
            Most recent property read or (if it were missing) requested.
            </summary>
            <remarks>
            This is used to determine if the client is attempting to read
            properties in the wrong order.
            </remarks>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.m_nextProp">
            <summary>
            The index of the next property in the POF stream.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.m_ofNextProp">
            <summary>
            The offset of the index of the next property to read.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.m_readerNested">
            <summary>
            The currently open nested reader, if any.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.m_iNestedProp">
            <summary>
            The property index of the property from which the currently open
            nested reader is reading from.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.UserTypeId">
            <summary>
            Gets the user type that is currently being parsed.
            </summary>
            <value>
            The user type information, or -1 if the
            <see cref="T:Tangosol.IO.Pof.PofStreamReader"/> is not currently parsing a user
            type.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.VersionId">
            <summary>
            Gets the version identifier of the user type that is
            currently being parsed.
            </summary>
            <value>
            The integer version ID read from the POF stream; always
            non-negative.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If no user type is being parsed.
            </exception>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.ParentParser">
            <summary>
            If this parser is contextually within a user type, obtain the
            parser which created this parser in order to parse the user type.
            </summary>
            <value>
            The parser for the context within which this parser is operating.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.PreviousPropertyIndex">
            <summary>
            Return the index of the most recent property read or 
            (if it were missing) requested.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamReader.UserTypeReader.NextPropertyIndex">
            <summary>
            Return the index of the next property in the POF stream.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.PofStreamReader.IdentityHolder">
            <summary>
            Store the identity of an object read by a POF reader.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.IdentityHolder.Set(Tangosol.IO.Pof.PofStreamReader,System.Int32)">
            <summary>
            store the identity info
            </summary>
            <param name="reader">stream reader</param>
            <param name="id">type Id</param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamReader.IdentityHolder.Reset(Tangosol.IO.Pof.PofStreamReader,System.Int32,System.Object)">
            <summary>
            reset the identity info
            </summary>
            <param name="reader">stream reader</param>
            <param name="id">object Id</param>
            <param name="o">object to reset</param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.PofValueReader.#ctor(Tangosol.IO.Pof.Reflection.AbstractPofValue)">
            <summary>
            Construct a PofValueReader instance.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.PofValueReader.ReadValue">
            <summary>
            Return the deserialized value of this POF value.
            </summary>
            <returns>
            The deserialized value of this POF value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.PofValueReader.ReadValue(System.Int32)">
            <summary>
            Return the deserialized value which this IPofValue
            represents.
            </summary>
            <param name="typeId">
            PofType expected as a result.
            </param>
            <returns>
            The deserialized value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.PofValueReader.LookupIdentity(System.Int32)">
            <summary>
            Look up the specified identity and return the object to which it
            refers.
            </summary>
            <param name="id">
            The identity.
            </param>
            <returns>
            The object registered under that identity.
            </returns>
            <exception cref="T:System.IO.IOException">
            If the requested identity is not registered.
            </exception>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.PofValueReader.m_value">
            <summary>
            Containing IPofValue
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.PofValueReader.PofValue">
            <summary>
            Containing IPofValue
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.BinaryDiffEncoder.#ctor(Tangosol.IO.Pof.Reflection.AbstractPofValue)">
            <summary>
            Construct a BinaryDiffEncoder instance.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.BinaryDiffEncoder.Encode">
            <summary>
            Encode changes made to this POF value in FMT_BINDIFF delta format, 
            as defined by the <see cref="T:Tangosol.IO.BinaryDeltaCompressor"/> class.
            </summary>
            <returns>
            A binary delta containing the changes that can be applied to
            the original buffer to reflect the current state of this 
            POF value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.BinaryDiffEncoder.EncodeValue(Tangosol.IO.DataWriter,Tangosol.IO.Pof.Reflection.AbstractPofValue,System.Int32)">
            <summary>
            Encode the changes in the IPofValue hierarchy recursively.
            </summary>
            <param name="writer">
            DataWriter to write changes into.
            </param>
            <param name="value">
            POF value to encode.
            </param>
            <param name="pos">
            Current position in the original POF stream.
            </param>
            <returns>
            Current position in the original POF stream.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.BinaryDiffEncoder.m_value">
            <summary>
            Containing IPofValue
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.BinaryDiffEncoder.PofValue">
            <summary>
            Containing IPofValue
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.ReplacementEncoder.#ctor(Tangosol.IO.Pof.Reflection.AbstractPofValue)">
            <summary>
            Construct a ReplacementEncoder instance.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.ReplacementEncoder.Encode">
            <summary>
            Encode changes made to this POF value in FMT_REPLACE delta
            format, as defined by the <see cref="T:Tangosol.IO.BinaryDeltaCompressor"/>
            class.
            </summary>
            <returns>
            A binary delta containing the changes that can be applied to
            the original buffer to reflect the current state of this 
            POF value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.ReplacementEncoder.EncodeValue(Tangosol.IO.DataWriter,Tangosol.IO.Pof.Reflection.AbstractPofValue,System.Int32)">
            <summary>
            Encode the changes in the IPofValue hierarchy recursively.
            </summary>
            <param name="writer">
            DataWriter to write changes into.
            </param>
            <param name="value">
            POF value to encode.
            </param>
            <param name="pos">
            Current position in the original POF stream.
            </param>
            <returns>
            Current position in the original POF stream.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.AbstractPofValue.ReplacementEncoder.CopyFromOriginal(Tangosol.IO.DataWriter,System.Int32,System.Int32)">
            <summary>
            Copy region from the original value into the delta.
            </summary>
            <param name="writer">
            DataWriter to write bytes into.
            </param>
            <param name="of">
            Offset of the region to copy within the original value.
            </param>
            <param name="cb">
            Number of bytes to copy.
            </param>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.AbstractPofValue.ReplacementEncoder.m_value">
            <summary>
            Containing IPofValue
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.AbstractPofValue.ReplacementEncoder.PofValue">
            <summary>
            Containing IPofValue
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.ComplexPofValue">
            <summary>
            An abstract base class for complex POF types, such as collections, arrays, 
            dictionaries and user types.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.ComplexPofValue.#ctor(Tangosol.IO.Pof.Reflection.IPofValue,Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a ComplexPofValue instance wrapping the supplied binary.
            </summary>
            <param name="valueParent">
            Parent value within the POF stream.
            </param>
            <param name="binValue">
            Binary representation of this value.
            </param>
            <param name="ctx">
            POF context to use when reading or writing properties.
            </param>
            <param name="of">
            Offset of this value from the beginning of POF stream.
            </param>
            <param name="nType">
            POF type identifier for this value.
            </param>
            <param name="ofChildren">
            Offset of the first child element within this value.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.ComplexPofValue.FindChildInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Find the child value with the specified index.
            </summary>
            <param name="nIndex">
            Index of the child value to find.
            </param>
            <param name="ofStart">
            Offset within the parent buffer to start search from.
            </param>
            <param name="iStart">
            Index of the child value to start search from.
            </param>
            <returns>
            The child value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.ComplexPofValue.GetChild(System.Int32)">
            <summary>
            Locate a child IPofValue contained within this IPofValue.
            </summary>
            <remarks>
            The returned IPofValue could represent a non-existent (null) value.
            </remarks>
            <param name="nIndex">
            Index of the child value to get.
            </param>
            <returns>
            The the child IPofValue.
            </returns>
            <exception cref="T:Tangosol.IO.Pof.Reflection.PofNavigationException">
            If this value is a "terminal" or the child value cannot be located 
            for any other reason.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.ComplexPofValue.GetChildrenEnumerator">
            <summary>
            Return an enumerator over all parsed child values.
            </summary>
            <returns>
            A children enumerator.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.ComplexPofValue.FindChild(System.Int32)">
            <summary>
            Find the child value with the specified index.
            </summary>
            <param name="nIndex">
            Index of the child value to find.
            </param>
            <returns>
            The child value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.ComplexPofValue.GetLastChildIndex(System.Int32)">
            <summary>
            Return index of the last parsed child with an index lower than the
            specified one.
            </summary>
            <param name="nIndex">
            Index to find the preceding child index for.
            </param>
            <returns>
            Index of the last parsed child, or -1 if one does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.ComplexPofValue.SkipChild(Tangosol.IO.DataReader)">
            <summary>
            Skip a single child value.
            </summary>
            <param name="reader">
            Reader used to read child values.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.ComplexPofValue.ExtractChild(System.Int32,System.Int32)">
            <summary>
            Extract child IPofValue from this value.
            </summary>
            <param name="of">
            Offset of the child within this value.
            </param>
            <param name="cb">
            Length of the child in bytes.
            </param>
            <returns>
            The child value.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.ComplexPofValue.m_aChildren">
            <summary>
            Sparse array of child values.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.ComplexPofValue.m_ofChildren">
            <summary>
            Offset of the first child element within this value.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.ComplexPofValue.m_nElementType">
            <summary>
            Type of the child values, if this is a uniform collection.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.ComplexPofValue.UniformElementType">
            <summary>
            Gets or sets element type if this is a uniform collection.
            </summary>
            <value>
            Type of elements if this is a uniform collection; 
            <see cref="F:Tangosol.IO.Pof.PofConstants.T_UNKNOWN"/> otherwise.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.ComplexPofValue.IsUniformCollection">
            <summary>
            Return <c>true</c> if this complex value is encoded as one of 
            uniform collection types.
            </summary>
            <value>
            <c>true</c> if this is a uniform collection
            </value>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.AnnotationVisitor`2">
            <summary>
            An AnnotationVisitor is a <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IVisitor`1"/> implementation 
            that injects information obtained by inspecting a provided type into
            a <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1"/>. The modified builder will 
            then realize a <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> instance with this 
            injected information.
            </summary>
            <remarks>
            This implementation is responsible purely for injecting explicitly 
            defined information in the form of annotations. It depends upon, and
            hence is aware of, only the following annotations:
            <list type="bullet">
                 <item><see cref="T:Tangosol.IO.Pof.Annotation.Portable"/></item> 
                 <item><see cref="T:Tangosol.IO.Pof.Annotation.PortableProperty"/></item> 
            </list>
            <p/>
            This class has three strategies of metadata discovery - property, 
            field and accessor - inspected respectively. Duplication is deemed by
            the same name derived by <see cref="T:Tangosol.IO.Pof.Reflection.Internal.INameMangler"/> implementations.
            </remarks>
            <author>Harvey Raja  2011.07.25</author>
            <typeparam name="T">A <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1"/> type with
             type <c>TB</c>.</typeparam>
            <typeparam name="TB">The Class type being visited.</typeparam>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.IVisitor`1">
            <summary>
            Visitor pattern description. This pattern implementation is targeted 
            at builders that require <see cref="T:System.Type"/> information.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <typeparam name="B">The type to pass to the visitor.</typeparam>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.IVisitor`1.Visit(`0,System.Type)">
            <summary>
            Visit the given builder <c>B</c> and optionally mutate it using
            information contained within the given Type.
            </summary>
            <param name="builder">
            The builder being visited.
            </param>
            <param name="type">
            The Type used to enrich the builder.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.AnnotationVisitor`2.#ctor">
            <summary>
            Construct an AnnotationVisitor instance with the auto index 
            feature off.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.AnnotationVisitor`2.#ctor(System.Boolean)">
            <summary>
            Construct an AnnotationVisitor instance with auto indexing enable
            or disabled based on <c>autoIndex</c>.
            </summary>
            <param name="autoIndex">
            Whether to enable auto-indexing.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.AnnotationVisitor`2.Visit(`0,System.Type)">
            <summary>
            Visit the given builder <c>T</c> and optionally mutate it using
            information contained within the given Type.
            </summary>
            <param name="builder">
            The builder being visited.
            </param>
            <param name="type">
            The Type used to enrich the builder.
            </param>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Internal.AnnotationVisitor`2.m_autoIndex">
            <summary>
            Whether to use the auto-indexing feature to derive indexes.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1">
            <summary>
            A <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> implementation coupled to the .NET 
            type metadata definition language: <see cref="T:System.Type"/>,
            <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.FieldInfo"/>, 
            and <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <typeparam name="T">The Type being visited.</typeparam>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1">
            <summary>
            ITypeMetadata represents the definition of a type including 
            uniqueness <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeKey"/> and all structural properties. 
            This definition is used to uniformly define types and their internal 
            structures. Uniformity in this context is in relation to the 
            supported languages.
            </summary>
            <remarks>
            This interface defines the contract required by users of 
            TypeMetadata. This includes the ability to have a predictable order 
            for both getter and setter methods, the ability to retrieve a method,
            and to create a new instance of a type this metadata describes. 
            </remarks>
            <author>Harvey Raja  2011.07.25</author>
            <typeparam name="T">The user type this metadata instance describes.</typeparam>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1.NewInstance">
            <summary>
            Create a new instance of the object represented by this type.
            </summary>
            <returns>
            New object instance represented by this metadata.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1.GetAttributes">
            <summary>
            Provides a predictable <see cref="T:System.Collections.IEnumerator"/> over 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/> for the attributes of the 
            type represented by this TypeMetadata.
            </summary>
            <returns>
            <see cref="T:System.Collections.IEnumerator"/> of <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/> instances.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1.GetAttribute(System.String)">
            <summary>
            Provides a <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/> encapsulating 
            either the field or property accessor requested.
            </summary>
            <param name="name">
            Name of the attribute.
            </param>
            <returns>
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/> representing the annotated 
            method or field.
            </returns>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1.Key">
            <summary>
            Return a unique key for this TypeMetaData.
            </summary>
            <returns>
            TypeKey uniquely identifying an instance of TypeMetadata.
            </returns> 
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.NewInstance">
            <summary>
            Create a new instance of the object represented by this type.
            </summary>
            <returns>
            New object instance represented by this metadata.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.GetAttributes">
            <summary>
            Provides a predictable <see cref="T:System.Collections.IEnumerator"/> over 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/>
            for the attributes of the type represented by this TypeMetadata.
            </summary>
            <returns>
            <see cref="T:System.Collections.IEnumerator"/> of <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/> 
            instances.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.GetAttribute(System.String)">
            <summary>
            Provides a <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/> encapsulating 
            either the property, field or method requested.
            </summary>
            <param name="name">
            Name of the attribute.
            </param>
            <returns>
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/> representing the annotated 
            method or field.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.SetAttributes(System.Collections.Generic.ICollection{Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata{`0}})">
             <summary>
             Specify all <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/> instances that 
             represent this type.
            </summary>
             <param name="attributes">
             Attribute metadata information to enrich this metadata.
             </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.AddAttribute(Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata{`0})">
            <summary>
            Add an attribute to this TypeMetadata.
            </summary>
            <param name="attribute">
            Attribute metadata definition to add.
            </param>
            <returns>
            Whether the attribute metadata was added.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.Equals(Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata{`0})">
            <summary>
            Compare the TypeMetadata with another TypeMetadata object to 
            determine equality.
            </summary>
            <remarks>
            Two TypeMetadata objects are considered equal iff their 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeKey"/> values and 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/>s are equal.
            </remarks>
            <param name="that">
            ITypeMetadata instance to compare this instance to.
            </param>
            <returns>
            <c>true</c> iff this TypeMetadata and the passed object are 
            equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.GetHashCode">
            <summary>
            Determine a hash value for the TypeMetadata object according to
            the general <see cref="M:System.Object.GetHashCode"/> contract.
            </summary>
            <returns>
            An integer hash value for this TypeMetadata instance.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.Equals(System.Object)">
            <summary>
            Compare the TypeMetadata with another object to determine 
            equality.
            </summary>
            <remarks>
            Two TypeMetadata objects are considered equal iff their 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeKey"/> values and 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/>s are equal.
            </remarks>
            <param name="that">
            Object to compare this TypeMetadata to.
            </param>
            <returns>
            <c>true</c> iff this TypeMetadata and the passed object are equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.ToString">
            <summary>
            Return a human-readable description for this TypeMetadata.
            </summary>
            <returns>
            A string description of the TypeMetadata.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.m_attributes">
            All attributes within this typeIterator.
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.m_attributesByName">
            A reference store for efficient lookup from attribute name to metadata.
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.Key">
            <summary>
            Return a unique key for this ITypeMetaData.
            </summary>
            <value>
            ITypeKey uniquely identifying an instance of ITypeMetadata.
            </value> 
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TyepInfo">
            <summary>
            Specify the <see cref="T:System.Type"/> that uniquely identifies this metadata.
            </summary>
            <value>
            Type that defines this type.
            </value>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeKey">
            <summary>
            A TypeKey contains information to uniquely identify this  
            type instance. Specifically unique identification is a product of
            <code>typeId + version + type-hash</code>.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.ITypeKey">
            <summary>
            A type key embodies contributors to the uniqueness representing an
            ITypeMetadata instance. This is the sum of typeId, versionId and a
            hash.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.ITypeKey.TypeId">
            <summary>
            An integer identifying a unique pof user type providing the 
            ability to distinguish between types using a compact form.
            </summary>
            <value>
            POF user type identifier.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.ITypeKey.VersionId">
            <summary>
            The version specified by the serializer when this object was
            serialized.
            </summary>
            <value>
            Integer representing the version of this POF type.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.ITypeKey.Hash">
            <summary>
            A unique hash representing the ITypeMetadata structure.
            </summary>
            <value>
            Hash of ITypeMetadata.
            </value>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeKey.Equals(Tangosol.IO.Pof.Reflection.Internal.ITypeKey)">
            <summary>
            Compare this TypeKey with another object to determine 
            equality.
            </summary>
            <remarks>
            Two TypeKey objects are considered equal iff their 
            <see cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeKey.TypeId"/> and <see cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeKey.VersionId"/> are equal.
            </remarks>
            <param name="that">
            ITypeKey instance to compare this instance to.
            </param>
            <returns>
            <c>true</c> iff this TypeKey and the passed object are 
            equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeKey.Equals(System.Object)">
            <summary>
            Compare this TypeKey with another object to determine 
            equality.
            </summary>
            <remarks>
            Two TypeKey objects are considered equal iff their 
            <see cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeKey.TypeId"/>
            and <see cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeKey.VersionId"/> are equal.
            </remarks>
            <param name="that">
            Object instance to compare this instance to.
            </param>
            <returns>
            <c>true</c> iff this TypeKey and the passed object are 
            equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeKey.GetHashCode">
            <summary>
            Serves as a hash function for TypeKey.
            </summary>
            <returns>
            A hash code for this instance of TypeKey.
            </returns>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeKey.TypeId">
            <summary>
            An integer identifying a unique pof user type providing the
            ability to distinguish between types using a compact form.
            </summary>
            <value>
            POF user type identifier.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeKey.VersionId">
            <summary>
            The version specified by the serializer when this object was
            serialized.
            </summary>
            <value>
            Integer representing the version of this POF type.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeKey.Hash">
            <summary>
            A unique hash representing the TypeMetadata structure.
            </summary>
            <value>
            Hash of TypeMetadata.
            </value>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute">
            <summary>
            An <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/> implementation acting as 
            a container for attribute inspection and invocation.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
            <seealso cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1">
            <summary>
            IAttributeMetadata represents all appropriate information relating to
            an attribute within a type. This contract has similar forms in all
            supported languages providing a language agnostic mechanism to
            describe elements within a structure and an invocation mechanism for
            setting or retrieving the value for an attribute.
            </summary>
            <typeparam name="T">The container type of which this attribute is a 
            member.</typeparam>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1.Get(`0)">
            <summary>
            Returns the value of the attribute contained within the given
            object.
            </summary>
            <param name="container">
            The containing object.
            </param>
            <returns>
            The attribute value stored on the object passed in.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1.Set(`0,System.Object)">
             <summary>
             Sets the <c>value</c> of this attribute within the given object.
            </summary>
             <param name="container">
             The containing object.
             </param >
             <param name="attribute">
             The value to set this attribute to.
             </param>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1.Name">
            <summary>
            Name of the attribute this metadata describes.
            </summary>
            <value>
            Attribute name.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1.VersionId">
            <summary>
            The versionId assigned to this attributes metadata
            instance. This versionId is not required however is used as an
            indicator to determine the version this attribute was introduced
            in.
            </summary>
            <value>
            Integer representing the version of this attribute metadata.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1.Index">
            <summary>
            The index used to order the attributes when iterated by the 
            containing <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> class.
            </summary>
            <value>
            Index to identify this attribute's position in a sequence.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1.Codec">
            <summary>
            The codec ass;igned to this attribute which will perform type safe
            (de)serialization.
            </summary>
            <value>
            The <see cref="T:Tangosol.IO.Pof.Reflection.ICodec"/> used to (de)serialize this attribute.
            </value>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Get(`0)">
            <summary>
            Returns the value of the attribute contained within the given
            object.
            </summary>
            <param name="container">
            The containing object.
            </param>
            <returns>
            The attribute value stored on the object passed in.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Set(`0,System.Object)">
             <summary>
             Sets the <c>value</c> of this attribute within the given object.
            </summary>
             <param name="container">
             The containing object.
             </param>
             <param name="o">
             The value to set this attribute to.
             </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same
            type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of 
            the objects being compared. The return value has these 
            meanings: Value Meaning Less than zero This instance is less 
            than <paramref name="o"/>. Zero This instance is equal to 
            <paramref name="o"/>. Greater than zero This instance is 
            greater than <paramref name="o"/>. 
            </returns>
            <param name="o">
            An object to compare with this instance. 
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="o"/> is not the same type as this 
            instance.
            </exception>
            <filterpriority>
            2
            </filterpriority>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.CompareTo(Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata{`0})">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <remarks>
            Sorting of attributes is determined by:
            <list type="number">
                <item>version</item>
                <item>index</item>
                <item>name</item>
            </list>
            </remarks>
            <returns>
            A 32-bit signed integer that indicates the relative order of 
            the objects being compared. The return value has the 
            following meanings: Value Meaning Less than zero This object 
            is less than the <paramref name="that"/> parameter.Zero This 
            object is equal to <paramref name="that"/>. Greater than 
            zero This object is greater than <paramref name="that"/>. 
            </returns>
            <param name="that">
            An object to compare with this object.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Equals(Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata{`0})">
            <summary>
            Compare this TypeAttribute with another object to determine 
            equality.
            </summary>
            <remarks>
            Two TypeAttribute objects are considered equal iff their 
            <see cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Name"/>, <see cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Index"/> and 
            <see cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.VersionId"/> are equal.
            </remarks>
            <param name="that">
            IAttributeMetadata instance to compare this instance to.
            </param>
            <returns>
            <c>true</c> iff this TypeAttribute and the passed object are equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Equals(System.Object)">
            <summary>
            Compare this TypeAttribute with another object to determine 
            equality.
            </summary>
            <remarks>
            Two TypeAttribute objects are considered equal iff their 
            <see cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Name"/>, <see cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Index"/> and 
            <see cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.VersionId"/> are equal.
            </remarks>
            <param name="o">
            IAttributeMetadata instance to compare this instance to.
            </param>
            <returns>
            <c>true</c> iff this TypeAttribute and the passed object are equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.GetHashCode">
            <summary>
            Serves as a hash function for TypeAttribute.
            </summary>
            <returns>
            A hash code for this instance of TypeAttribute.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.ToString">
            <summary>
            Return a human-readable description for this TypeAttribute.
            </summary>
            <returns>
            A string description of the TypeAttribute.
            </returns>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Name">
            <summary>
            Name of the attribute this metadata describes.
            </summary>
            <value>
            The normalized name of the attribute.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.VersionId">
            <summary>
            Returns the versionId assigned to this attributes metadata
            instance. This versionId is not required however is used as 
            an indicator to determine the version this attribute was 
            introduced in.
            </summary>
            <value>
            Integer representing the version of this attribute metadata.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Index">
            <summary>
            The index used to order the attributes when iterated by the
            containing <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> class.
            </summary>
            <value>
            Index to identify this attribute's position in a sequence.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Codec">
            <summary>
            The codec assigned to this attribute which will perform type
            safe (de)serialization.
            </summary>
            <value>
            The <see cref="T:Tangosol.IO.Pof.Reflection.ICodec"/> used to (de)serialize this attribute.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.InvocationStrategy">
            <summary>
            Specify an <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IInvocationStrategy`1"/>.
            </summary>
            <value>
            The invocation strategy to use to get and set values.
            </value>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1">
            <summary>
            TypeMetadataBuilder provides a simple mechanism to
            instantiate and inject state into a <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> 
            instance. Parsers that read a source will use this builder to derive
            a <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> destination.
            </summary>
            <remarks>
            The general usage of this class is to perform multiple chained set
            calls with a final build call which will realize a 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> instance.
            </remarks>
            <author>Harvey Raja  2011.07.25</author>
            <typeparam name="T">The type the TypeMetadataBuilder will be 
            enriched using.</typeparam>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.IRecipient`1">
            <summary>
            A recipient informs a visitor of it's willingness to be visited.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <typeparam name="B">The type to pass to the visitor.</typeparam>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.IRecipient`1.Accept(Tangosol.IO.Pof.Reflection.Internal.IVisitor{`0},System.Type)">
            <summary>
            Accept the given visitor.
            </summary>
            <param name="visitor">
            IVisitor that is requesting to visit this recipient.
            </param>
            <param name="type">
            The Type that can be used by the visitor.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.#ctor">
            <summary>
            Constructs a new TypeMetadataBuilder.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.SetType(System.Type)">
            <summary>
            Specify the class type this <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> is 
            assigned to.
            </summary>
            <param name="type">
            Type that the resulting <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> instance 
            describes.
            </param>
            <returns>
            A reference to this for chained set calls.
            </returns>
            <seealso cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TyepInfo"/>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.AddAttribute(Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata{`0})">
            <summary>
            Add an <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/> instance that is a 
            child of the <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> instance.
            </summary>
            <param name="attribute">
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/> implementation to add to the
            enclosing <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> instance.
            </param>
            <returns>
            A reference to this for chained set calls.
            </returns>
            <seealso cref="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.AddAttribute(Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata{`0})"/>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.NewAttribute">
            <summary>
            Creates a new attribute builder for populating an
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/> instance. 
            </summary>
            <returns>
            A ClassAttributeBuilder that builds an attribute.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.SetTypeId(System.Int32)">
            <summary>
            Specify the unique type id for the <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeKey"/>.
            </summary>
            <param name="typeId">
            Type id used in uniquely identifying a 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> instance.
            </param>
            <returns>
            A reference to this for chained set calls.
            </returns>
            <seealso cref="P:Tangosol.IO.Pof.Reflection.Internal.ITypeKey.TypeId"/>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.SetVersionId(System.Int32)">
            <summary>
            Specify the version for this <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> 
            instance.
            </summary>
            <param name="versionId">
            The version of this <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> instance.
            </param>
            <returns>
            A reference to this for chained set calls.
            </returns>
            <seealso cref="P:Tangosol.IO.Pof.Reflection.Internal.ITypeKey.VersionId"/>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.SetHash(System.Int32)">
            <summary>
            Specify the hash for this <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> 
            instance.
            </summary>
            <param name="hash">
            A hash value of the <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> instance.
            </param>
            <returns>
            A reference to this for chained set calls.
            </returns>
            <seealso cref="P:Tangosol.IO.Pof.Reflection.Internal.ITypeKey.Hash"/>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.Build">
            <summary>
            Based on the state that the builder has been informed of create 
            and return a <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> instance.
            </summary>
            <returns>
            The built <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> instance.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.Accept(Tangosol.IO.Pof.Reflection.Internal.IVisitor{Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder{`0}},System.Type)">
            <summary>
            Accept the given visitor.
            </summary>
            <param name="visitor">
            IVisitor that is requesting to visit this recipient.
            </param>
            <param name="type">
            The Type that can be used by the visitor.
            </param>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.m_cmd">
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1"/>
            that is built across the duration 
            of TypeMetadataBuilder calls until it is returned via the
            <see cref="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.Build"/> method.
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.m_key">
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeKey"/> 
            that is built across the 
            duration of TypeMetadataBuilder calls until it is returned via 
            the <see cref="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.Build"/> method.
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.TypeMetadata">
            <summary>
            Returns the <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> in its current form, 
            i.e. prior to <see cref="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.Build"/>.
            </summary>
            <returns>
            The <see cref="T:Tangosol.IO.Pof.Reflection.Internal.ITypeMetadata`1"/> instance being enriched.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.ClassAttributeBuilder">
            <summary>
            The ClassAttributeBuilder provide the ability to build a
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IAttributeMetadata`1"/> implementation.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.ClassAttributeBuilder.#ctor">
            <summary>
            Construct a ClassAttributeBuilder instance.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.ClassAttributeBuilder.SetName(System.String)">
            <summary>
            Specify the normalized name of the 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute"/>
            instance.
            </summary>
            <param name="name">
            The normalized name of the 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute"/>
            instance.
            </param>
            <returns>
            A reference to this for chained set calls.
            </returns>
            <seealso cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Name"/>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.ClassAttributeBuilder.SetVersion(System.Int32)">
            <summary>
            Specify the versionId of this 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute"/> 
            instance.
            </summary>
            <param name="version">
            Version of the 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute"/>
            instance.
            </param>
            <returns>
            A reference to this for chained set calls.
            </returns>
            <seealso cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.VersionId"/>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.ClassAttributeBuilder.SetIndex(System.Int32)">
            <summary>
            Specify the index of this 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute"/>
            instance used to sequence many 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute"/>
            instances.
            </summary>
            <param name="index">
            Index to specify this attributes sequence number.
            </param>
            <returns>
            A reference to this for chained set calls.
            </returns>
            <seealso cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Index"/>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.ClassAttributeBuilder.SetCodec(Tangosol.IO.Pof.Reflection.ICodec)">
            <summary>
            Specify the <see cref="T:Tangosol.IO.Pof.Reflection.ICodec"/> to use for this 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute"/>
            instance.
            </summary>
            <param name="codec">
            The codec to use for this 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute"/>
            instance.
            </param>
            <returns>
            A reference to this for chained set calls.
            </returns>
            <seealso cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.Codec"/>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.ClassAttributeBuilder.SetInvocationStrategy(Tangosol.IO.Pof.Reflection.Internal.IInvocationStrategy{`0})">
            <summary>
            Specify the <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IInvocationStrategy`1"/> 
            implementation that allows values to be written and received 
            to the attribute.
            </summary>
            <param name="strategy">
            The strategy provides an implementation to write and receive 
            values.
            </param>
            <returns>
            A reference to this for chained set calls.
            </returns>
            <seealso cref="P:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute.InvocationStrategy"/>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.ClassAttributeBuilder.Build">
            <summary>
            Create a 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute"/> 
            instance based on the values set during the lifetime of this 
            builder.
            </summary>
            <returns>
            An enriched 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute"/> 
            instance.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.ClassAttributeBuilder.m_attribute">
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.TypeMetadata`1.TypeAttribute"/> 
            that is built 
            across the duration of  ClassAttributeBuilder calls until it 
            is returned via the <see cref="M:Tangosol.IO.Pof.Reflection.Internal.TypeMetadataBuilder`1.ClassAttributeBuilder.Build"/> method.
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Codecs">
            <summary>
            Codecs is a container for accessing default ICodec implementations.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Codecs.GetCodec(System.Type)">
            <summary>
            Based on the <see cref="T:System.Type"/> <c>type</c> provided either
            instantiate if it is unknown or use a default codec.
            </summary>
            <param name="type">
            The class defining the codec to use.
            </param>
            <returns>
            ICodec that supports encoding and decoding of objects of the 
            specified type.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Codecs.DEFAULT_CODEC">
            <summary>
            A singleton instance of a <see cref="T:Tangosol.IO.Pof.Reflection.Codecs.DefaultCodec"/>.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Codecs.AbstractCodec">
            <summary>
            Abstract <see cref="T:Tangosol.IO.Pof.Reflection.ICodec"/> implementations that encodes 
            objects by simply delegating to 
            <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteObject(System.Int32,System.Object)"/>. Generally the default 
            <c>WriteObject</c> implementation does not need to be modified as
            the current accommodation of types and conversion to POF is 
            generally accepted, with the deserialization being more likely 
            to be specific.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.ICodec">
            <summary>
            An ICodec provides an interception point for any specific code that 
            needs to be executed pre or post (de)serialization. In the case of 
            deserialization this could be to return a concrete implementation 
            and with serialization this could be to explicitly call a specific 
            method on <see cref="T:Tangosol.IO.Pof.IPofWriter"/> that is not carried out by 
            <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteObject(System.Int32,System.Object)"/>.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.ICodec.Decode(Tangosol.IO.Pof.IPofReader,System.Int32)">
            <summary>
            Deserialize an object from the provided 
            <see cref="T:Tangosol.IO.Pof.IPofReader"/>. Implementing this interface allows 
            introducing specific return implementations. 
            </summary>
            <param name="reader">
            The <see cref="T:Tangosol.IO.Pof.IPofReader"/> to read from.
            </param>    
            <param name="index">
            The index of the POF property to deserialize.
            </param>
            <returns>
            A specific implementation of the POF property.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.ICodec.Encode(Tangosol.IO.Pof.IPofWriter,System.Int32,System.Object)">
            <summary>
            Serialize an object using the provided 
            <see cref="T:Tangosol.IO.Pof.IPofWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:Tangosol.IO.Pof.IPofWriter"/>to read from.
            </param>
            <param name="index">
            The index of the POF property to serialize.
            </param>
            <param name="value">
            The value to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Codecs.AbstractCodec.Encode(Tangosol.IO.Pof.IPofWriter,System.Int32,System.Object)">
            <summary>
            Serialize an object using the provided 
            <see cref="T:Tangosol.IO.Pof.IPofWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:Tangosol.IO.Pof.IPofWriter"/>to read from.
            </param>
            <param name="index">
            The index of the POF property to serialize.
            </param>
            <param name="value">
            The value to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Codecs.AbstractCodec.Decode(Tangosol.IO.Pof.IPofReader,System.Int32)">
            <summary>
            Deserialize an object from the provided 
            <see cref="T:Tangosol.IO.Pof.IPofReader"/>. Implementing this interface allows 
            introducing specific return implementations. 
            </summary>
            <param name="reader">
            The <see cref="T:Tangosol.IO.Pof.IPofReader"/> to read from.
            </param>    
            <param name="index">
            The index of the POF property to deserialize.
            </param>
            <returns>
            A specific implementation of the POF property.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Codecs.DefaultCodec">
            <summary>
            Implementation of <see cref="T:Tangosol.IO.Pof.Reflection.ICodec"/> that simply delegates to
            <see cref="M:Tangosol.IO.Pof.IPofReader.ReadObject(System.Int32)"/> and
            <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteObject(System.Int32,System.Object)"/> to deserialize and serialize
            an object.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Codecs.DefaultCodec.Decode(Tangosol.IO.Pof.IPofReader,System.Int32)">
            <summary>
            Deserialize an object from the provided 
            <see cref="T:Tangosol.IO.Pof.IPofReader"/>. Implementing this interface allows 
            introducing specific return implementations. 
            </summary>
            <param name="reader">
            The <see cref="T:Tangosol.IO.Pof.IPofReader"/> to read from.
            </param>    
            <param name="index">
            The index of the POF property to deserialize.
            </param>
            <returns>
            A specific implementation of the POF property.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.IInvocationStrategy`1">
            <summary>
            An IInvocationStrategy provides an abstraction of the underlying
            mechanisms used to retrieve and set a property's value.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <typeparam name="T">The containing type.</typeparam>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.IInvocationStrategy`1.Get(`0)">
            <summary>
            Returns the value of the property.
            </summary>
            <param name="container">
            Container of this and all other properties.
            </param>
            <returns>
            Property value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.IInvocationStrategy`1.Set(`0,System.Object)">
            <summary>
            Sets the parameter value to the property.
            </summary>
            <param name="container">
            Container of this and all other sibling properties.
            </param>
            <param name="value">
            New value to assign to the property.
            </param>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.INameMangler">
            <summary>
            INameMangler implementations provide the ability to transform a
            string to the string convention employed by the mangler 
            implementation. An example of this would be to convert a non-camel
            case string to a camel case string.
            </summary> 
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.INameMangler.Mangle(System.String)">
            <summary>
            Convert the given string to a new string using a convention 
            determined by the implementer.
            </summary>
            <param name="name">
            Original string.
            </param>
            <returns>
            Mangled string.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies">
            <summary>
            InvocationStrategies contains two 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.IInvocationStrategy`1"/> implementations that abstract 
            the underlying mechanisms to retrieve and set a property's value. 
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.PropertyInvcationStrategy`1">
            <summary>
            A PropertyInvcationStrategy uses a <see cref="T:System.Reflection.PropertyInfo"/> to
            dynamically invoke gets and sets on the property.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <typeparam name="T">The containing type.</typeparam>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.PropertyInvcationStrategy`1.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Construct a PropertyInvcationStrategy with the supplied 
            PropertyInfo object.
            </summary>
            <param name="propInfo">
            The property that will be used to get and set values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Iff propInfo is null.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.PropertyInvcationStrategy`1.Get(`0)">
            <summary>
            Returns the value of the property.
            </summary>
            <param name="container">
            Container of this and all other properties.
            </param>
            <returns>
            Property value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.PropertyInvcationStrategy`1.Set(`0,System.Object)">
            <summary>
            Sets the parameter value to the property.
            </summary>
            <param name="container">
            Container of this and all other sibling properties.
            </param>
            <param name="value">
            New value to assign to the property.
            </param>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.PropertyInvcationStrategy`1.m_propInfo">
            The PropertyInfo this strategy will use to get and set values.
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.FieldInvcationStrategy`1">
            <summary>
            A FieldInvocationStrategy uses a <see cref="T:System.Reflection.FieldInfo"/> to 
            dynamically invoke gets and sets on the field.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <typeparam name="T">The containing type.</typeparam>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.FieldInvcationStrategy`1.#ctor(System.Reflection.FieldInfo)">
            <summary>
            FieldInvocationStrategy must be initialized with an 
            appropriate <see cref="T:System.Reflection.FieldInfo"/> object.
            </summary>
            <param name="fieldInfo">
            The fieldInfo that will be used to get and set values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Iff fieldInfo is null.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.FieldInvcationStrategy`1.Get(`0)">
            <summary>
            Returns the value of the property.
            </summary>
            <param name="container">
            Container of this and all other properties.
            </param>
            <returns>
            Property value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.FieldInvcationStrategy`1.Set(`0,System.Object)">
            <summary>
            Sets the parameter value to the property.
            </summary>
            <param name="container">
            Container of this and all other sibling properties.
            </param>
            <param name="value">
            New value to assign to the property.
            </param>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.FieldInvcationStrategy`1.m_fieldInfo">
            The FieldInfo this strategy will use to get and set values.
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.MethodInvocationStrategy`1">
            <summary>
            A MethodInvocationStrategy uses <see cref="T:System.Reflection.MethodInfo"/>s to 
            dynamically invoke getter and setter methods to retrieve and set 
            property values.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <typeparam name="T">The containing type.</typeparam>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.MethodInvocationStrategy`1.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Based on either the getter or setter derive the missing/
            complimenting accessor from the class provided.
            </summary>
            <param name="method">
            Getter or Setter.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.MethodInvocationStrategy`1.#ctor(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Construct with the get and set methods.
            </summary>
            <param name="getter">
            <c>T GetX()</c> method
            </param>
            <param name="setter">
            Void <c>>SetX(T a)</c>
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.MethodInvocationStrategy`1.Get(`0)">
            <summary>
            Returns the value of the property.
            </summary>
            <param name="container">
            Container of this and all other properties.
            </param>
            <returns>
            Property value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.MethodInvocationStrategy`1.Set(`0,System.Object)">
            <summary>
            Sets the parameter value to the property.
            </summary>
            <param name="container">
            Container of this and all other sibling properties.
            </param>
            <param name="value">
            New value to assign to the property.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.MethodInvocationStrategy`1.GetCompliment(System.Reflection.MethodInfo)">
            <summary>
            Determine the complement of the provided method in terms of
            accessors, i.e. if a set method return the corresponding get 
            or is and vice versa.
            </summary>
            <param name="method">
            The method to determine the compliment of.
            </param>
            <returns>
            The method that compliments the method passed.
            </returns>
            <exception cref="T:System.MissingMethodException">
            Iff the method could not be found.
            </exception>
            <exception cref="T:System.SystemException">
            Iff the compliment method could not be determined by
            <see cref="M:System.Type.GetMethod(System.String,System.Type[])"/>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.MethodInvocationStrategy`1.Initialize(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Initialize ensures both accessors are not null.
            </summary>
            <param name="getter">
            The get accessor.
            </param>
            <param name="setter">
            The set accessor.
            </param>
            <exception cref="T:System.ArgumentException">
            Iff getter or setter are null or not accessible.
            </exception>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.MethodInvocationStrategy`1.m_getter">
            The MethodInfo this strategy will use to get the value.
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Internal.InvocationStrategies.MethodInvocationStrategy`1.m_setter">
            The MethodInfo this strategy will use to set a value.
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.NameManglers">
            <summary>
            NameManglers contain singleton access to both a
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.NameManglers.FieldMangler"/> and <see cref="T:Tangosol.IO.Pof.Reflection.Internal.NameManglers.MethodMangler"/>. 
            NameManglers provide the ability to derive the same name of a 
            property regardless of their access or inspection methodology.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.NameManglers.#cctor">
            <summary>
            Static initialization of <see cref="T:Tangosol.IO.Pof.Reflection.Internal.NameManglers.FieldMangler"/> and 
            <see cref="T:Tangosol.IO.Pof.Reflection.Internal.NameManglers.MethodMangler"/>.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Internal.NameManglers.PROPERTY_MANGLER">
            <summary>
            Singleton PropertyMangler reference.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Internal.NameManglers.FIELD_MANGLER">
            <summary>
            Singleton FieldMangler reference.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.Internal.NameManglers.METHOD_MANGLER">
            <summary>
            Singleton MethodMangler reference.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.NameManglers.PropertyMangler">
            <summary>
            A <see cref="T:Tangosol.IO.Pof.Reflection.Internal.INameMangler"/> implementation that is aware of 
            property naming conventions and is able to convert from a method 
            name to a generic name.
            </summary>
            <remarks>
            The convention this mangler is aware of is property names being
            equivalent to the required name except with the first character 
            being in upper case, e.g. <c>Foo</c> will be converted to 
            <c>foo</c>.
            </remarks>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.NameManglers.PropertyMangler.Mangle(System.String)">
            <summary>
            Convert the given string to a new string using a convention 
            determined by the implementer.
            </summary>
            <param name="name">
            Original string.
            </param>
            <returns>
            Mangled string.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.NameManglers.FieldMangler">
            <summary>
            A <see cref="T:Tangosol.IO.Pof.Reflection.Internal.INameMangler"/> implementation that is aware of 
            field naming conventions and is able to convert from a field name
            to a generic name.
            </summary>
            <remarks>
            The conventions this mangler is aware of are prefixing variables 
            with <c>m_</c>. For example <c>m_bar</c> and 
            would be converted to a mangled name of <c>bar</c>.
            </remarks>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.NameManglers.FieldMangler.Mangle(System.String)">
            <summary>
            Convert the given string to a new string using a convention 
            determined by the implementer.
            </summary>
            <param name="name">
            Original string.
            </param>
            <returns>
            Mangled string.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.Internal.NameManglers.MethodMangler">
            <summary>
            A <see cref="T:Tangosol.IO.Pof.Reflection.Internal.INameMangler"/> implementation that is aware of 
            method naming conventions and is able to convert from a method 
            name to a generic name.
            </summary>
            <remarks>
            The conventions this mangler is aware of are the getter and 
            setter style methods, e.g. <c>getBar</c> or <c>setBar</c> which 
            are both converted to a mangled name of <c>bar</c>.
            </remarks>
            <author>Harvey Raja  2011.07.25</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.Internal.NameManglers.MethodMangler.Mangle(System.String)">
            <summary>
            Convert the given string to a new string using a convention 
            determined by the implementer.
            </summary>
            <param name="name">
            Original string.
            </param>
            <returns>
            Mangled string.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.PofReflectionHelper">
            <summary>
            Collection of helper methods for POF reflection.
            </summary>
            <author>David Guy  2009.09.14</author>
            <author>Ana Cikic  2009.09.25</author>
            <since>Coherence 3.5.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofReflectionHelper.GetType(System.Int32,Tangosol.IO.Pof.IPofContext)">
            <summary>
            Determine the type associated with the given type identifier.
            </summary>
            <param name="typeId">
            The Pof type identifier; includes Pof intrinsics, Pof compact
            values, and user types.
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/>.
            </param>
            <returns>
            The type associated with the specified type identifier or
            <c>null</c> for types with no mapping.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified type is a user type that is unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofReflectionHelper.EnsureType(System.Object,System.Int32,Tangosol.IO.Pof.IPofContext)">
            <summary>
            Validate that the supplied object is compatible with the
            specified type.
            </summary>
            <param name="o">
            The object.
            </param>
            <param name="typeId">
            The Pof type identifier; includes Pof intrinsics, Pof compact
            values, and user types.
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/>.
            </param>
            <returns>
            The original object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified type is a user type that is unknown to this
            <b>IPofContext</b> or there is no type mapping.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If the specified object is not assignable to the specified type.
            </exception>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.PofUserType">
            <summary>
            PofUserType is a <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> implementation for user types.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.PofSparseArray">
            <summary>
            PofSparseArray is a <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> implementation for sparse arrays.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofSparseArray.#ctor(Tangosol.IO.Pof.Reflection.IPofValue,Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a PofSparseArray instance wrapping the supplied binary.
            </summary>
            <param name="valueParent">
            Parent value within the POF stream.
            </param>
            <param name="binValue">
            Binary representation of this value.
            </param>
            <param name="ctx">
            POF context to use when reading or writing properties.
            </param>
            <param name="of">
            Offset of this value from the beginning of POF stream.
            </param>
            <param name="nType">
            POF type identifier for this value.
            </param>
            <param name="ofChildren">
            Offset of the first child element within this value.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofSparseArray.FindChildInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Find the child value with the specified index.
            </summary>
            <param name="nIndex">
            Index of the child value to find.
            </param>
            <param name="ofStart">
            Offset within the parent buffer to start search from.
            </param>
            <param name="iStart">
            Index of the child value to start search from.
            </param>
            <returns>
            The child value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofSparseArray.InstantiateNullValue(System.Int32,System.Int32)">
            <summary>
            Instantiate a <see cref="T:Tangosol.IO.Pof.Reflection.PofSparseArray.NilPofValue"/> (factory method).
            </summary>
            <param name="of">
            Offset this value would be at if it existed.
            </param>
            <param name="nIndex">
            Index of this value within the parent sparse array.
            </param>
            <returns>
            An instance of <see cref="T:Tangosol.IO.Pof.Reflection.PofSparseArray.NilPofValue"/>.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.PofSparseArray.NilPofValue">
            <summary>
            NilPofValue represents a value that does not exist in the 
            original POF stream.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.SimplePofValue">
            <summary>
            SimplePofValue represents POF values which do not contain children 
            (e.g. numeric values, strings, etc.)
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.SimplePofValue.#ctor(Tangosol.IO.Pof.Reflection.IPofValue,Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32)">
            <summary>
            Construct a SimplePofValue instance wrapping the supplied binary.
            </summary>
            <param name="valueParent">
            Parent value within the POF stream.
            </param>
            <param name="binValue">
            Binary representation of this value.
            </param>
            <param name="ctx">
            POF context to use when reading or writing properties.
            </param>
            <param name="of">
            Offset of this value from the beginning of POF stream.
            </param>
            <param name="nType">
            POF type identifier for this value.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.SimplePofValue.GetChild(System.Int32)">
            <summary>
            Locate a child IPofValue contained within this IPofValue.
            </summary>
            <remarks>
            The returned IPofValue could represent a non-existent (null) value.
            </remarks>
            <param name="nIndex">
            Index of the child value.
            </param>
            <returns>
            The the child IPofValue.
            </returns>
            <exception cref="T:Tangosol.IO.Pof.Reflection.PofNavigationException">
            If this value is a "terminal" or the child value cannot be located 
            for any other reason.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofSparseArray.NilPofValue.#ctor(Tangosol.IO.Pof.Reflection.IPofValue,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a SimplePofValue instance wrapping the supplied 
            binary.
            </summary>
            <param name="valueParent">
            Parent value within the POF stream.
            </param>
            <param name="ctx">
            POF context to use when reading or writing properties.
            </param>
            <param name="of">
            Offset of this value from the beginning of POF stream.
            </param>
            <param name="nType">
            POF type identifier for this value.
            </param>
            <param name="nIndex">
            Index of this value within the parent sparse array.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofSparseArray.NilPofValue.GetValue(System.Int32)">
            <summary>
            Return the deserialized value which this IPofValue
            represents.
            </summary>
            <param name="typeId">
            The required Pof type of the returned value or
            <see cref="F:Tangosol.IO.Pof.PofConstants.T_UNKNOWN"/> if the type is to be
            inferred from the serialized state.
            </param>
            <returns>
            The deserialized value.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the value is incompatible with the specified type.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofSparseArray.NilPofValue.SetValue(System.Object)">
            <summary>
            Update this PofValue.
            </summary>
            <remarks>
            The changes made using this method will be immediately reflected 
            in the result of <see cref="M:Tangosol.IO.Pof.Reflection.IPofValue.GetValue"/> method, but will not be 
            applied to the underlying POF stream until the 
            <see cref="M:Tangosol.IO.Pof.Reflection.IPofValue.ApplyChanges"/> method is invoked on the root IPofValue.
            </remarks>
            <param name="oValue">
            New deserialized value for this PofValue.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofSparseArray.NilPofValue.GetSerializedValue">
            <summary>
            Return this value's serialized form.
            </summary>
            <returns>
            This value's serialized form.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.PofSparseArray.NilPofValue.m_nIndex">
            <summary>
            Index of this value within the parent sparse array.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofUserType.#ctor(Tangosol.IO.Pof.Reflection.IPofValue,Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a PofUserType instance wrapping the supplied binary.
            </summary>
            <param name="valueParent">
            Parent value within the POF stream.
            </param>
            <param name="binValue">
            Binary representation of this value.
            </param>
            <param name="ctx">
            POF context to use when reading or writing properties.
            </param>
            <param name="of">
            Offset of this value from the beginning of POF stream.
            </param>
            <param name="nType">
            POF type identifier for this value.
            </param>
            <param name="ofChildren">
            Offset of the first child element within this value.
            </param>
            <param name="nVersion">
            Data version of this value.
            </param>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.PofUserType.m_nVersion">
            <summary>
            The data version of this value.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.PofUserType.Version">
            <summary>
            Return the data version of this value.
            </summary>
            <value>
            The data version of this value.
            </value>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.PofUniformSparseArray">
            <summary>
            PofUniformSparseArray is a <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> implementation for 
            uniform sparse arrays.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofUniformSparseArray.#ctor(Tangosol.IO.Pof.Reflection.IPofValue,Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a PofUniformSparseArray instance wrapping the supplied 
            binary.
            </summary>
            <param name="valueParent">
            Parent value within the POF stream.
            </param>
            <param name="binValue">
            Binary representation of this value.
            </param>
            <param name="ctx">
            POF context to use when reading or writing properties.
            </param>
            <param name="of">
            Offset of this value from the beginning of POF stream.
            </param>
            <param name="nType">
            POF type identifier for this value.
            </param>
            <param name="ofChildren">
            Offset of the first child element within this value.
            </param>
            <param name="nElementType">
            A POF type identifier for this value's elements.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofUniformSparseArray.InstantiateNullValue(System.Int32,System.Int32)">
            <summary>
            Instantiate a <see cref="T:Tangosol.IO.Pof.Reflection.PofSparseArray.NilPofValue"/> (factory method).
            </summary>
            <param name="of">
            Offset this value would be at if it existed.
            </param>
            <param name="nIndex">
            Index of this value within the parent sparse array.
            </param>
            <returns>
            An instance of <see cref="T:Tangosol.IO.Pof.Reflection.PofSparseArray.NilPofValue"/>.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.PofUniformCollection">
            <summary>
            PofUniformCollection is a <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> implementation for uniform collections.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.PofCollection">
            <summary>
            PofCollection is a <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> implementation for collections.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.PofArray">
            <summary>
            PofArray is a <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> implementation for arrays.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofArray.#ctor(Tangosol.IO.Pof.Reflection.IPofValue,Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a PofArray instance wrapping the supplied binary.
            </summary>
            <param name="valueParent">
            Parent value within the POF stream.
            </param>
            <param name="binValue">
            Binary representation of this value.
            </param>
            <param name="ctx">
            POF context to use when reading or writing properties.
            </param>
            <param name="of">
            Offset of this value from the beginning of POF stream.
            </param>
            <param name="nType">
            POF type identifier for this value.
            </param>
            <param name="ofChildren">
            Offset of the first child element within this value.
            </param>
            <param name="cElements">
            The length of this array.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofArray.FindChildInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Find the child value with the specified index.
            </summary>
            <param name="nIndex">
            Index of the child value to find.
            </param>
            <param name="ofStart">
            Offset within the parent buffer to start search from.
            </param>
            <param name="iStart">
            Index of the child value to start search from.
            </param>
            <returns>
            The child value.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.PofArray.m_cElements">
            <summary>
            The length of this array.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.Reflection.PofArray.Length">
            <summary>
            Return the length of this array.
            </summary>
            <value>
            The length of this array.
            </value>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofCollection.#ctor(Tangosol.IO.Pof.Reflection.IPofValue,Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a PofCollection instance wrapping the supplied binary.
            </summary>
            <param name="valueParent">
            Parent value within the POF stream.
            </param>
            <param name="binValue">
            Binary representation of this value.
            </param>
            <param name="ctx">
            POF context to use when reading or writing properties.
            </param>
            <param name="of">
            Offset of this value from the beginning of POF stream.
            </param>
            <param name="nType">
            POF type identifier for this value.
            </param>
            <param name="ofChildren">
            Offset of the first child element within this value.
            </param>
            <param name="cElements">
            The size of this collection.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofUniformCollection.#ctor(Tangosol.IO.Pof.Reflection.IPofValue,Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a PofUniformCollection instance wrapping the supplied binary.
            </summary>
            <param name="valueParent">
            Parent value within the POF stream.
            </param>
            <param name="binValue">
            Binary representation of this value.
            </param>
            <param name="ctx">
            POF context to use when reading or writing properties.
            </param>
            <param name="of">
            Offset of this value from the beginning of POF stream.
            </param>
            <param name="nType">
            POF type identifier for this value.
            </param>
            <param name="ofChildren">
            Offset of the first child element within this value.
            </param>
            <param name="cElements">
            The size of this collection.
            </param>
            <param name="nElementType">
            A POF type identifier for this value's elements.
            </param>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.PofUniformArray">
            <summary>
            PofUniformArray is a <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> implementation for uniform arrays.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofUniformArray.#ctor(Tangosol.IO.Pof.Reflection.IPofValue,Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a PofUniformArray instance wrapping the supplied binary.
            </summary>
            <param name="valueParent">
            Parent value within the POF stream.
            </param>
            <param name="binValue">
            Binary representation of this value.
            </param>
            <param name="ctx">
            POF context to use when reading or writing properties.
            </param>
            <param name="of">
            Offset of this value from the beginning of POF stream.
            </param>
            <param name="nType">
            POF type identifier for this value.
            </param>
            <param name="ofChildren">
            Offset of the first child element within this value.
            </param>
            <param name="cElements">
            The length of this array.
            </param>
            <param name="nElementType">
            A POF type identifier for this value's elements.
            </param>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.PofNavigationException">
            <summary>
            PofNavigationException indicates a failure to navigate a 
            <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> hierarchy.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="T:Tangosol.IO.Pof.PortableException">
            <summary>
            A <b>PortableException</b> is an exception that allows information
            about a remote exception to be serialized and deserialized to/from a
            POF stream.
            </summary>
            <author>Jason Howes  2006.08.04</author>
            <author>Ana Cikic  2006.08.24</author>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableException.#ctor(System.String)">
            <summary>
            Constructs a PortableException with the specified detail message.
            </summary>
            <param name="message">
            The string that contains a detailed message.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableException.#ctor(System.Exception)">
            <summary>
            Construct a PortableException from an Exception object.
            </summary>
            <param name="e">
            The Exception object.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a PortableException from an Exception object and an
            additional description.
            </summary>
            <param name="message">
            The additional description.
            </param>
            <param name="e">
            The Exception object.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct a PortableException class with serialized data.
            </summary>
            <param name="info">
            The <b>SerializationInfo</b> that holds the serialized object
            data about the exception being thrown.
            </param>
            <param name="context">
            The <b>StreamingContext</b> that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <b>SerializationInfo</b> with information about the
            exception.
            </summary>
            <param name="info">
            The <b>SerializationInfo</b> that holds the serialized object
            data about the exception being thrown.
            </param>
            <param name="context">
            The <b>StreamingContext</b> that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableException.ToString">
            <summary>
            Returns a string representation of the current exception.
            </summary>
            <returns>
            A string representation of the current exception.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableException.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableException.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.IO.Pof.PortableException.m_name">
            <summary>
            The exception's name.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PortableException.m_message">
            <summary>
            The exception's message.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PortableException.m_arrStackRemote">
            <summary>
            A raw representation of the remote stack trace for this
            exception.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PortableException.m_innerException">
            <summary>
            An Exception that caused current exception.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.PortableException.Name">
            <summary>
            The name of the exception.
            </summary>
            <value>
            The name of the exception.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.PortableException.FullStackTrace">
            <summary>
            An array of strings containing the full representation of the
            stack trace.
            </summary>
            <remarks>
            The first element of the stack represents the exception's point
            of origin.
            </remarks>
            <value>
            The full stack trace.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.PortableException.InnerException">
            <summary>
            The <b>Exception</b> that caused this exception.
            </summary>
            <value>
            An exception that caused this exception.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.PortableException.Message">
            <summary>
            A message that describes the current exception.
            </summary>
            <value>
            The error message that explains the reason for the exception, or
            an empty string.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.PortableException.StackTrace">
            <summary>
            A string representation of the frames on the call stack at the
            time the current exception was thrown.
            </summary>
            <value>
            A string that describes the contents of the call stack, with the
            most recent method call appearing first.
            </value>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofNavigationException.#ctor">
            <summary>
            Construct a PofNavigationException.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofNavigationException.#ctor(System.String)">
            <summary>
            Construct a PofNavigationException with a specified detail message.
            </summary>
            <param name="message">
            A detailed message.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofNavigationException.#ctor(System.Exception)">
            <summary>
            Construct a PofNavigationException with a specified cause.
            </summary>
            <param name="cause">
            The underlying cause for this exception.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofNavigationException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a PofNavigationException with a specified detail message
            and a cause.
            </summary>
            <param name="message">
            A detailed message.
            </param>
            <param name="cause">
            The underlying cause for this exception.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofNavigationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct a PofNavigationException class with serialized data.
            </summary>
            <param name="info">
            The <b>SerializationInfo</b> that holds the serialized object
            data about the exception being thrown.
            </param>
            <param name="context">
            The <b>StreamingContext</b> that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.PofValueParser">
            <summary>
            Parses POF-encoded binary and returns an instance of a 
            <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> wrapper for it.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofValueParser.Parse(Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext)">
            <summary>
            Parses POF-encoded binary and returns an instance of a 
            <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> wrapper for it.
            </summary>
            <param name="binValue">
            POF-encoded binary value.
            </param>
            <param name="ctx">
            POF context to use.
            </param>
            <returns>
            An IPofValue instance.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofValueParser.ParseValue(Tangosol.IO.Pof.Reflection.IPofValue,Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext,System.Int32)">
            <summary>
            Parses POF-encoded binary and returns an instance of a 
            <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> wrapper for it.
            </summary>
            <param name="valueParent">
            Parent POF value.
            </param>
            <param name="binValue">
            POF-encoded binary value.
            </param>
            <param name="ctx">
            POF context to use.
            </param>
            <param name="of">
            Offset of the parsed value from the beginning of the POF stream.
            </param>
            <returns>
            An IPofValue instance.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofValueParser.ParseUniformValue(Tangosol.IO.Pof.Reflection.IPofValue,System.Int32,Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext,System.Int32)">
            <summary>
            Parses POF-encoded binary and returns an instance of a 
            <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> wrapper for it.
            </summary>
            <param name="valueParent">
            Parent POF value.
            </param>
            <param name="nType">
            Type identifier of this POF value.
            </param>
            <param name="binValue">
            POF-encoded binary value.
            </param>
            <param name="ctx">
            POF context to use.
            </param>
            <param name="of">
            Offset of the parsed value from the beginning of the POF stream.
            </param>
            <returns>
            An IPofValue instance.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.PofValueParser.InstantiatePofValue(Tangosol.IO.Pof.Reflection.IPofValue,System.Int32,Tangosol.Util.Binary,Tangosol.IO.Pof.IPofContext,System.Int32,Tangosol.IO.DataReader)">
            <summary>
            Creates a PofValue instance.
            </summary>
            <param name="valueParent">
            Parent POF value.
            </param>
            <param name="nType">
            Type identifier of this POF value.
            </param>
            <param name="binValue">
            POF-encoded binary value without the type identifier.
            </param>
            <param name="ctx">
            POF context to use.
            </param>
            <param name="of">
            Offset of the parsed value from the beginning of the POF stream.
            </param>
            <param name="reader">
            <see cref="T:Tangosol.IO.DataReader"/> to read the value from.
            </param>
            <returns>
            A <see cref="T:Tangosol.IO.Pof.Reflection.IPofValue"/> instance.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.Reflection.SimplePofPath">
            <summary>
            A static <see cref="T:Tangosol.IO.Pof.Reflection.IPofNavigator"/> implementation which uses 
            an array of integer indices to navigate the IPofValue hierarchy.
            </summary>
            <author>Aleksandar Seovic  2009.03.30</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.SimplePofPath.#ctor">
            <summary>
            Default constructor (necessary for the IPortableObject interface).
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.SimplePofPath.#ctor(System.Int32)">
            <summary>
            Construct a SimplePofPath using a single index as a path.
            </summary>
            <param name="nIndex">
            Index of the child value.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.SimplePofPath.#ctor(System.Int32[])">
            <summary>
            Construct a SimplePofPath using an array of indices as a path.
            </summary>
            <param name="anIndices">
            An array of indices.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.SimplePofPath.GetPathElements">
            <summary>
            Return a collection of path elements.
            </summary>
            <returns>
            A collection of path elements.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.SimplePofPath.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.SimplePofPath.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.SimplePofPath.Equals(System.Object)">
            <summary>
            Compare the SimplePofPath with another object to determine equality.
            </summary>
            <remarks>
            Two SimplePofPath objects are considered equal iff their indices are
            equal.
            </remarks>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <c>true</c> iff this SimplePofPath and the passed object are equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.SimplePofPath.GetHashCode">
            <summary>
            Determine a hash value for the SimplePofPath object according to the
            general <see cref="M:System.Object.GetHashCode"/> contract.
            </summary>
            <returns>
            An integer hash value for this SimplePofPath object.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.Reflection.SimplePofPath.ToString">
            <summary>
            Return a human-readable description for this SimplePofPath.
            </summary>
            <returns>
            A String description of the SimplePofPath.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.Reflection.SimplePofPath.m_aiElements">
            <summary>
            Path elements.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.PrincipalPofSerializer">
            <summary><see cref="T:Tangosol.IO.Pof.IPofSerializer"/> implementation that supports
            the serialization and deserialization of an <see cref="T:System.Security.Principal.IPrincipal"/> 
            to and from a POF stream.
            </summary>
            <remarks>
            <p>
            Only the <b>IIdentity</b> associated with the <b>IPrincipal</b> is
            serialized. All role information encapsulated by the <b>IPrincipal</b>
            is considered transient.</p>
            <p>
            The <b>PrincipalPofSerializer</b> can serialize any <b>IPrincipal</b> 
            implementation to a POF stream; however, the <b>IPrincipal</b> returned
            during deserialization is always an instance of 
            <see cref="T:Tangosol.Net.Security.Impl.SimplePrincipal"/> with an empty role array.</p>
            </remarks>
            <author>Jason Howes  2008.08.12</author>
        </member>
        <member name="M:Tangosol.IO.Pof.PrincipalPofSerializer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.PrincipalPofSerializer.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)">
            <summary>
            Serialize a user type instance to a POF stream by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for writing out an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must set the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may write any combination of the properties of
            the user type by using the "write" methods of the
            <b>IPofWriter</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been written,
            the implementation must terminate the writing of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteRemainder(Tangosol.Util.Binary)"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="writer">
            The <b>IPofWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PrincipalPofSerializer.Deserialize(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize a user type instance from a POF stream by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for reading in an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must get the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may read any combination of the
            properties of the user type by using "read" methods of the
            <b>IPofReader</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been read,
            the implementation must terminate the reading of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofReader.ReadRemainder"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="reader">
            The <b>IPofReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="T:Tangosol.IO.Pof.RawInt128">
            <summary>
            An immutable POF <b>RawInt128</b> value.
            </summary>
            <author>Goran Milosavljevic  2008.01.30</author>
        </member>
        <member name="M:Tangosol.IO.Pof.RawInt128.#ctor(System.Byte[])">
            <summary>
            Constructs an <b>RawInt128</b> value.
            </summary>
            <param name="bytes">
            The array of signed bytes representing <b>RawInt128</b> value.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.RawInt128.#ctor(System.SByte[])">
            <summary>
            Constructs an <b>RawInt128</b> value.
            </summary>
            <param name="bytes">
            The array of signed bytes representing <b>RawInt128</b> value.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.RawInt128.#ctor(System.SByte[],System.Boolean)">
            <summary>
            Constructs an <b>RawInt128</b> value.
            </summary>
            <param name="bytes">
            The array of signed bytes representing <b>RawInt128</b> value.
            </param>
            <param name="isNegative">
            Flag representing whether this <b>RawInt128</b> value is a
            negative number.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.RawInt128.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Constructs an <b>RawInt128</b> value.
            </summary>
            <param name="bytes">
            The array of bytes representing <b>RawInt128</b> value.
            </param>
            <param name="isNegative">
            Flag representing whether this <b>RawInt128</b> value is a
            negative number.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.RawInt128.Equals(System.Object)">
            <summary>
            Compare this object with another for equality.
            </summary>
            <param name="o">
            Another object to compare to for equality.
            </param>
            <returns>
            <b>true</b> if this object is equal to the other object.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawInt128.GetHashCode">
            <summary>
            Obtain the hashcode for this object.
            </summary>
            <returns>
            An integer hashcode.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawInt128.ToDecimal">
            <summary>
            Returns <b>Decimal</b> value of this object.
            </summary>
            <returns>
            <b>Decimal</b> value of this object.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawInt128.ToDecimal(System.Byte)">
            <summary>
            Returns <b>Decimal</b> value of this object with given scale.
            </summary>
            <param name="scale">
            Scale value used for constructing a <b>Decimal</b> result.
            </param>
            <returns>
            <b>Decimal</b> value of this object.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.RawInt128.m_bytes">
            <summary>
            The array of signed bytes representing Int128 value.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.RawInt128.m_isNegative">
            <summary>
            Flag representing whether this byte representation is a negative
            number.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.RawInt128.Value">
            <summary>
            Gets the Int128 value as array of byte values.
            </summary>
            <value>
            Array of signed bytes representing Int128.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.RawInt128.Length">
            <summary>
            Returns the size of <b>RawInt128</b> value.
            </summary>
            <value>
            The size of <b>RawInt128</b>.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.RawInt128.IsNegative">
            <summary>
            Returns if this <b>RawInt128</b> is a negative number.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.RawInt128.IsZero">
            <summary>
            Gets if this is a zero value.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.SafeConfigurablePofContext">
            <summary>
            SafeConfigurablePofContext is an extension of ConfigurablePofContext 
            that can serialize and deserialize any valid POF user type, even those 
            that have not been explicitly configured, as well as any .NET 
            serializable types.
            </summary>
            <remarks>
            <c>Important note:</c> this class is meant to be used only during
            application design time and replaced with the ConfigurablePofContext 
            for production deployments as it has the following limitations:
            <list type="bullet">
              <item>
              SafeConfigurablePofContext is supported only for .NET clients;
              </item>
              <item>
              Its performance is less optimal than of the ConfigurablePofContext;
              </item>
              <item>
              The serialized form produced by the SafeConfigurablePofContext will
              not be recognized by POF aware ValueExtractors.
              </item>
            </list>
            <para>
            For user types that have been explicitly configured, this IPofContext 
            behaves identically to the ConfigurablePofContext.
            </para>
            </remarks>
            <author>Jason Howes  2007.05.03</author>
            <author>Aleksandar Seovic (.NET)  2009.09.25</author>
            <since> Coherence 3.6</since>
        </member>
        <member name="T:Tangosol.IO.Pof.ConfigurablePofContext">
             <summary>
             This class implements the <see cref="T:Tangosol.IO.Pof.IPofContext"/> interface using
             information provided in a configuration file (or in a passed XML
             configuration).
             </summary>
             <remarks>
             <p>
             For each user type supported by this POF context, it must be provided
             with:
             <list type="bullet">
             <item>
             <description>
             A valid user type ID that is unique within this POF context.
             </description>
             </item>
             <item>
             <description>
             A .NET type name that identifies a .NET type or interface that all
             values of the user type are type-assignable to (and that no values of
             other user types are type-assignable to); in other words, all values
             of the user type (and no values of other user types) are instances of
             the specified class, instances of a sub-class of the specified class,
             or (if it is an interface) instances of a class that implements the
             specified interface.
             </description>
             </item>
             <item>
             <description>
             A .NET type name that identifies a non-abstract implementation of
             the <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> interface.
             </description>
             </item>
             </list>
             </p>
             <p>
             The format of the configuration XML is as follows:
             <tt><pre>
             &lt;pof-config&gt;
               &lt;user-type-list&gt;
               ..
                 &lt;user-type&gt;
                   &lt;type-id&gt;53&lt;/type-id&gt;
                   &lt;class-name&gt;My.Example.Data.Trade, MyAssembly&lt;/class-name&gt;
                   &lt;serializer&gt;
                     &lt;class-name&gt;Tangosol.IO.Pof.PortableObjectSerializer, Coherence&lt;/class-name&gt;
                     &lt;init-params&gt;
                       &lt;init-param&gt;
                         &lt;param-type&gt;System.Int32&lt;/param-type&gt;
                         &lt;param-value&gt;{type-id}&lt;/param-value&gt;
                       &lt;/init-param&gt;
                     &lt;/init-params&gt;
                   &lt;/serializer&gt;
                 &lt;/user-type&gt;
            
                 &lt;user-type&gt;
                   &lt;type-id&gt;54&lt;/type-id&gt;
                   &lt;class-name&gt;My.Example.Data.Position, MyAssembly&lt;/class-name&gt;
                 &lt;/user-type&gt;
            
               ..
               &lt;include&gt;file:/my-pof-config.xml&lt;/include&gt;
            
               ..
               &lt;/user-type-list&gt;
            
               &lt;allow-interfaces&gt;false&lt;/allow-interfaces&gt;
               &lt;allow-subclasses&gt;false&lt;/allow-subclasses&gt;
            
               &lt;default-serializer&gt;
                 &lt;class-name&gt;Tangosol.IO.Pof.XmlPofSerializer, Coherence&lt;/class-name&gt;
                 &lt;init-params&gt;
                   &lt;init-param&gt;
                     &lt;param-type&gt;System.Int32&lt;/param-type&gt;
                     &lt;param-value&gt;{type-id}&lt;/param-value&gt;
                   &lt;/init-param&gt;
                 &lt;/init-params&gt;
               &lt;/default-serializer&gt;
             &lt;/pof-config&gt;
             </pre></tt></p>
             <p>
             For each user type, a <tt>user-type</tt> element must exist inside
             the <tt>user-type-list</tt> element. The <tt>user-type-list</tt>
             element contains up to three elements, in the following order:
             <list type="bullet">
             <item>
             <description>
             The <tt>user-type</tt> element should contain a <tt>type-id</tt>
             element whose value specifies the unique integer type ID; if none of
             the <tt>user-type</tt> elements contains a <tt>type-id</tt> element,
             then the type IDs for the user types will be based on the order in
             which they appear in the configuration, with the first user type
             being assigned the type ID 0, the second user type being assigned the
             type ID 1, and so on. (It is strongly recommended that user types IDs
             always be specified, in order to support schema versioning and
             evolution.)
             </description>
             </item>
             <item>
             <description>
             The <tt>class-name</tt> element is required, and specifies the fully
             qualified name of the .NET type or interface that all values of the
             user type are type-assignable to.
             </description>
             </item>
             <item>
             <description>
             The <tt>serializer</tt> element is used to specify an implementation
             of <b>IPofSerializer</b> to use to serialize and deserialize user
             type values to and from a POF stream. Within the <tt>serializer</tt>
             element, the <tt>class-name</tt> element is required, and zero or
             more constructor parameters can be defined within an
             <tt>init-params</tt> block. If no <tt>serializer</tt> is specified,
             then the <tt>default-serializer</tt> is used if one is specified,
             otherwise the user type is assumed to implement the
             <see cref="T:Tangosol.IO.Pof.IPortableObject"/> interface or have a <see cref="T:Tangosol.IO.Pof.Annotation.Portable"/>
             <see cref="T:System.Attribute"/>. If the former, a <see cref="T:Tangosol.IO.Pof.PortableObjectSerializer"/> 
             will be used. If the later, a <see cref="T:Tangosol.IO.Pof.PofAnnotationSerializer"/> 
             will be used.
             </description>
             </item>
             </list></p>
             <p>
             The optional <tt>include</tt> element allows <tt>user-type</tt>
             elements defined in another configuration XML to be added to the user
             type list. The value of this element is a locator string (either a
             valid path or URL) that specifies the location of the target
             <b>IPofContext</b> configuration file. The <tt>user-type</tt>
             elements of the target file are imported verbatum; therefore, if the
             included elements contain explicit type identifiers, each identifier
             must be unique with respect to the the user type identifiers (either
             explicit or generated) defined within the including file. If the
             included user types do not contain explicit type identifiers, then
             the type identifiers will be based on the order in which the user
             types appear in the composite configuration file. Multiple
             <tt>include</tt> elements may be used within a single
             <tt>user-type-list</tt> element.</p>
             <p>
             In order to be used by the <b>ConfigurablePofContext</b>, a
             <b>IPofSerializer</b> implementation must provide a public
             constructor that accepts the parameters detailed by the
             <tt>init-params</tt> element. The parameter values, as specified by
             the <tt>param-value</tt> element, can specify one of the following
             substitutable values:
             <list type="bullet">
             <item>
             <term><tt>{type-id}</tt></term>
             <description>replaced with the Type ID of the User Type</description>
             </item>
             <item>
             <term><tt>{class-name}</tt></term>
             <description>
             replaced with the name of the class for the User Type
             </description>
             </item>
             <item>
             <term><tt>{class}</tt></term>
             <description>replaced with the Type for the User Type</description>
             </item>
             </list></p>
             <p>
             If the <tt>init-params</tt> element is not present, then the
             <b>ConfigurablePofContext</b> attempts to construct the
             <b>IPofSerializer</b> by searching for one of the following
             constructors in the same order as they appear here:
             <list type="bullet">
             <item><description>(int typeId, Type type)</description></item>
             <item><description>(int typeId)</description></item>
             <item><description>()</description></item>
             </list></p>
             <p>
             Once constructed, if the <b>IPofSerializer</b> implements the
             <see cref="T:Tangosol.Run.Xml.IXmlConfigurable"/> interface, the
             <see cref="P:Tangosol.Run.Xml.IXmlConfigurable.Config"/> property is set to the passed
             XML information, transposed as described by
             <see cref="M:Tangosol.Run.Xml.XmlHelper.TransformInitParams(Tangosol.Run.Xml.IXmlElement,Tangosol.Run.Xml.IXmlElement)"/>, and as described in the
             pof-config.xsd file.</p>
             </remarks>
             <author>Jason Howes/Cameron Purdy  2006.07.24</author>
             <author>Ivan Cikic  2006.08.24</author>
             <author>Aleksandar Seovic  2008.10.08</author>
             <since>Coherence 3.2</since>
        </member>
        <member name="T:Tangosol.IO.Pof.IPofContext">
            <summary>
            The <b>IPofContext</b> interface represents a set of user types that
            can be serialized to and deserialized from a POF stream.
            </summary>
            <author>Cameron Purdy/Jason Howes  2006.07.11</author>
            <author>Goran Milosavljevic  2006.08.09</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofContext.GetPofSerializer(System.Int32)">
            <summary>
            Return an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> that can be used to
            serialize and deserialize an object of the specified user type to
            and from a POF stream.
            </summary>
            <param name="typeId">
            The type identifier of the user type that can be serialized and
            deserialized using the returned <b>IPofSerializer</b>; must be
            non-negative.
            </param>
            <returns>
            An <b>IPofSerializer</b> for the specified user type.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofContext.GetUserTypeIdentifier(System.Object)">
            <summary>
            Determine the user type identifier associated with the given
            object.
            </summary>
            <param name="o">
            An instance of a user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given object is unknown to
            this <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofContext.GetUserTypeIdentifier(System.Type)">
            <summary>
            Determine the user type identifier associated with the given
            type.
            </summary>
            <param name="type">
            A user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given type is unknown to
            this <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofContext.GetUserTypeIdentifier(System.String)">
            <summary>
            Determine the user type identifier associated with the given type
            name.
            </summary>
            <param name="typeName">
            The name of a user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type name.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given type name is unknown
            to this <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofContext.GetTypeName(System.Int32)">
            <summary>
            Determine the name of the type associated with a user type
            identifier.
            </summary>
            <param name="typeId">
            The user type identifier; must be non-negative.
            </param>
            <returns>
            The name of the type associated with the specified user type
            identifier.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofContext.GetType(System.Int32)">
            <summary>
            Determine the type associated with the given user type
            identifier.
            </summary>
            <param name="typeId">
            The user type identifier; must be non-negative.
            </param>
            <returns>
            The type associated with the specified user type identifier.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofContext.IsUserType(System.Object)">
            <summary>
            Determine if the given object is of a user type known to this
            <b>IPofContext</b>.
            </summary>
            <param name="o">
            The object to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the specified object is of a valid user type.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofContext.IsUserType(System.Type)">
            <summary>
            Determine if the given type is a user type known to this
            <b>IPofContext</b>.
            </summary>
            <param name="type">
            The type to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the specified type is a valid user type.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofContext.IsUserType(System.String)">
            <summary>
            Determine if the type with the given name is a user type known to
            this <b>IPofContext</b>.
            </summary>
            <param name="typeName">
            The name of the type to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the type with the specified name is a valid user
            type.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.#ctor(System.IO.Stream)">
            <summary>
            Create a <b>ConfigurablePofContext</b> that will use the passed
            configuration information.
            </summary>
            <param name="stream">
            An <b>Stream</b> containing information in the format of a
            configuration file used by <b>ConfigurablePofContext</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            Create a default <b>ConfigurablePofContext</b> that will load
            definitions from the default POF config file.
            </remarks>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.#ctor(System.String)">
            <summary>
            Create a <b>ConfigurablePofContext</b> that will load
            configuration information from the specified locator.
            </summary>
            <param name="locator">
            The locator that specifies the location of the
            <see cref="T:Tangosol.IO.Pof.IPofContext"/> configuration file; the locator is
            either a valid path or a URL.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.#ctor(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Create a <b>ConfigurablePofContext</b> that will use the passed
            configuration information.
            </summary>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/> containing information in the format
            of a configuration file used by <b>ConfigurablePofContext</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.#ctor(Tangosol.IO.Pof.ConfigurablePofContext)">
            <summary>
            Create a copy of <b>ConfigurablePofContext</b> from the given one.
            </summary>
            <param name="that">
            The <b>ConfigurablePofContext</b> to (shallow) copy from.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.Serialize(Tangosol.IO.DataWriter,System.Object)">
            <summary>
            Serialize an object to a stream by writing its state using the
            specified <see cref="T:Tangosol.IO.DataWriter"/> object.
            </summary>
            <param name="writer">
            The <b>DataWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
             <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.Deserialize(Tangosol.IO.DataReader)">
            <summary>
            Deserialize an object from a stream by reading its state using
            the specified <see cref="T:Tangosol.IO.DataReader"/> object.
            </summary>
            <param name="reader">
            The <b>DataReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.GetPofSerializer(System.Int32)">
            <summary>
            Return an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> that can be used to
            serialize and deserialize an object of the specified user type to
            and from a POF stream.
            </summary>
            <param name="typeId">
            The type identifier of the user type that can be serialized and
            deserialized using the returned <b>IPofSerializer</b>; must be
            non-negative.
            </param>
            <returns>
            An <b>IPofSerializer</b> for the specified user type.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.GetUserTypeIdentifier(System.Object)">
            <summary>
            Determine the user type identifier associated with the given
            object.
            </summary>
            <param name="o">
            An instance of a user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given object is unknown to
            this <b>IPofContext</b>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="o"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.GetUserTypeIdentifier(System.Type)">
            <summary>
            Determine the user type identifier associated with the given
            type.
            </summary>
            <param name="type">
            A user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given type is unknown to
            this <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.GetUserTypeIdentifier(System.String)">
            <summary>
            Determine the user type identifier associated with the given type
            name.
            </summary>
            <param name="typeName">
            The assembly-qualified name of a user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type name.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given type name is unknown
            to this <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.GetTypeName(System.Int32)">
            <summary>
            Determine the name of the type associated with a user type
            identifier.
            </summary>
            <param name="typeId">
            The user type identifier; must be non-negative.
            </param>
            <returns>
            The name of the type associated with the specified user type
            identifier.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.GetType(System.Int32)">
            <summary>
            Determine the type associated with the given user type
            identifier.
            </summary>
            <param name="typeId">
            The user type identifier; must be non-negative.
            </param>
            <returns>
            The type associated with the specified user type identifier.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.IsUserType(System.Object)">
            <summary>
            Determine if the given object is of a user type known to this
            <b>IPofContext</b>.
            </summary>
            <param name="o">
            The object to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the specified object is of a valid user type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="o"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.IsUserType(System.Type)">
            <summary>
            Determine if the given type is a user type known to this
            <b>IPofContext</b>.
            </summary>
            <param name="type">
            The type to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the specified type is a valid user type.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.IsUserType(System.String)">
            <summary>
            Determine if the type with the given name is a user type known to
            this <b>IPofContext</b>.
            </summary>
            <param name="typeName">
            The assembly-qualified name of the type to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the type with the specified name is a valid user
            type.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.LoadDefaultPofConfig">
            <summary>
            Load and return the default XML POF configuration.
            </summary>
            <returns>
            The default XML POF configuration.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.GetPofConfig">
            <summary>
            Obtain the <see cref="T:Tangosol.IO.Pof.ConfigurablePofContext.PofConfig"/> that represents the
            initialized state of the <b>ConfigurablePofContext</b>.
            </summary>
            <returns>
            The <b>PofConfig</b> for the <b>ConfigurablePofContext</b>, or
            <c>null</c> if not yet initialized.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.GetUserTypeIdentifierInternal(System.Type)">
            <summary>
            Determine the user type identifier associated with the given
            type.
            </summary>
            <param name="type">
            A user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type or -1 if the user type is unknown to this
            <b>IPofContext</b>.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.GetInheritedUserTypeIdentifier(System.Type)">
            <summary>
            Helper method for determining the user type identifier associated
            with a given class that does not have a direct configured
            association.
            </summary>
            <param name="type">
            A user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type or -1 if the user type and its superclass(es) and implemented
            interface(s) are unknown to this <b>IPofContext</b>.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.GetUserTypeIdentifierInternal(System.String)">
            <summary>
            Determine the user type identifier associated with the given type
            name.
            </summary>
            <param name="typeName">
            The assembly-qualified name of a user type; must not be <c>null</c>
            or empty.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type name or -1 if the user type is unknown to this
            <b>IPofContext</b>.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.CheckNotInitialized">
            <summary>
            Verify that the <b>ConfigurablePofContext</b> has not already
            been initialized.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the <b>ConfigurablePofContext</b> is already fully
            initialized.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.EnsureInitialized">
            <summary>
            Fully initialize the <b>ConfigurablePofContext</b> if it has not
            already been initialized.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.Initialize">
            <summary>
            Bind the <b>ConfigurablePofContext</b> to a URI of the
            configuration file, resolving all type names, etc.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.CreatePofConfig">
            <summary>
            Create a <see cref="T:Tangosol.IO.Pof.ConfigurablePofContext.PofConfig"/> object based on a configuration
            that was either provided as XML, or can be loaded from the
            specified (or default) URI.
            </summary>
            <returns>
            A <b>PofConfig</b> for this <b>ConfigurablePofContext</b>.
            </returns>
            <exception cref="T:System.SystemException">
            If XML configuration file contains bad data.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.ResolveType(Tangosol.Run.Xml.IXmlElement,System.Int32)">
            <summary>
            Returns <b>Type</b> specified by <paramref name="xmlType"/> with
            configuration information.
            </summary>
            <param name="xmlType">
            <b>IXmlElement</b> containing type configuration information.
            </param>
            <param name="typeId">
            Type id to be used for this type.
            </param>
            <returns>
            <b>Type</b> instance specified by configuration xml.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.GetSerializer(Tangosol.Run.Xml.IXmlElement,System.Type,System.Int32)">
            <summary>
            Returns serializer for user type specified by
            <paramref name="xmlType"/>.
            </summary>
            <param name="xmlType">
            <b>IXmlElement</b> with configuration for user type.
            </param>
            <param name="type">
            User type.
            </param>
            <param name="typeId">
            Type id of user type.
            </param>
            <returns>
            <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> instance based on the configuration.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.AppendDefaultSerializerToUserTypes(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Process &lt;default-serializer&gt; element from specified xml
            configuration and appends information about serializer to each
            &lt;user-type&gt; element within &lt;user-type-list&gt; unless
            user type already has serializer specified.
            </summary>
            <param name="xmlConfig">
            <b>IXmlElement</b> containing pof configuration.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.CreateDefaultSerializer(System.Type,System.Type,System.Int32)">
            <summary>
            Tries to create instance of <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> using
            default constructors.
            </summary>
            <remarks>
            <b>ConfigurablePofContext</b> attempts to construct the
            <b>IPofSerializer</b> by searching for one of the following
            constructors in the same order as they appear here:
            <list type="bullet">
            <item>
            <description>(int userTypeId, Type userType)</description>
            </item>
            <item><description>(int userTypeId)</description></item>
            <item><description>()</description></item>
            </list>
            </remarks>
            <param name="serializerType">
            Type of the <b>IPofSerializer</b>.
            </param>
            <param name="userType">
            Type of the object to serialize.
            </param>
            <param name="userTypeId">
            Id of the object to serialize.
            </param>
            <returns>
            An instance of <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> interface.
            </returns>
            <exception cref="T:System.SystemException">
            If for any reason making the instance of the serializer was
            unsucessful.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.ThrowException(System.String,System.Int32,System.String,System.Exception,System.String)">
            <summary>
            Assemble and throw an informative exception based on the passed
            details.
            </summary>
            <param name="uri">
            The URI of the configuration.
            </param>
            <param name="typeId">
            The type ID (if applicable and if known).
            </param>
            <param name="typename">
            The user type type name (if applicable and if known).
            </param>
            <param name="e">
            The underlying exception, if any.
            </param>
            <param name="message">
            The detailed description of the problem.
            </param>
            <returns>
            This method does not return; it always throws an exception.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Always thrown.
            </exception>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.s_configResource">
            <summary>
            The default location of the POF configuration file.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.m_mapConfigByUri">
            <summary>
            Map of configuration information, keyed by URI of the
            configuration file.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.m_configFile">
            <summary>
             The resource that specifies the location of the configuration file.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.m_xml">
            <summary>
            The XML configuration, if supplied by constructor.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.m_isReferenceEnabled">
            <summary>
            <b>true</b> if POF Identity/Reference type support is enabled.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.m_cfg">
            <summary>
            The <see cref="T:Tangosol.IO.Pof.ConfigurablePofContext.PofConfig"/> for this <see cref="T:Tangosol.IO.Pof.IPofContext"/> to
            use.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.ConfigurablePofContext.DefaultPofConfigResource">
            <summary>
            The <see cref="T:Tangosol.IO.Resources.IResource"/> for the default XML configuration used
            when one isn't explicitly passed in the constructor for this class.
            </summary>
            <value>
            The <see cref="T:Tangosol.IO.Resources.IResource"/> for the default XML configuration.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.ConfigurablePofContext.DefaultPofConfig">
            <summary>
            The default XML configuration used when one isn't explicitly passed
            in the constructor for this class.
            </summary>
            <value>
            The default XML configuration.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.ConfigurablePofContext.IsInitialized">
            <summary>
            Determine if the <b>ConfigurablePofContext</b> has completed its
            initialization.
            </summary>
            <value>
            <b>true</b> if the initialization is complete.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.ConfigurablePofContext.ConfigLocation">
            <summary>
            Obtain the location of the configuration that the
            <b>ConfigurablePofContext</b> used to configure itself.
            </summary>
            <value>
            The location information for the configuration for the
            <b>ConfigurablePofContext</b>, or <c>null</c> if not yet
            initialized and no location was specified.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.ConfigurablePofContext.IsInterfaceAllowed">
            <summary>
            Determine if the <b>ConfigurablePofContext</b> supports the
            configuration of user types by specifying an interface (instead
            of a class) for the .NET type.
            </summary>
            <value>
            <b>true</b> if an interface name is acceptable in the
            configuration as the type of a user type.
            </value>
            <exception cref="T:System.ArgumentNullException">
            If the obtained value from the configuration file is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            If the obtained value from the configuration file is not
            equivalent to <b>true</b> or <b>false</b>.
            </exception>
        </member>
        <member name="P:Tangosol.IO.Pof.ConfigurablePofContext.IsSubclassAllowed">
            <summary>
            Determine if the <b>ConfigurablePofContext</b> supports the
            serialization of an object that is an instance of a sub-class of
            a configured type, but not actually an instance of a class of a
            configured type.
            </summary>
            <value>
            <b>true</b> if serialization of sub-classes is explicitly
            enabled.
            </value>
            <exception cref="T:System.ArgumentNullException">
            If the obtained value from the configuration file is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
            If the obtained value from the configuration file is not
            equivalent to <b>true</b> or <b>false</b>.
            </exception>
        </member>
        <member name="P:Tangosol.IO.Pof.ConfigurablePofContext.IsReferenceEnabled">
            <summary>
            Determine if Identity/Reference type support is enabled for this
            ConfigurablePofContext.
            </summary>
            <returns>
            <b>true</b> if Identity/Reference type support is enabled
            </returns>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="P:Tangosol.IO.Pof.ConfigurablePofContext.Config">
            <summary>
            <b>IXmlElement</b> holding configuration information.
            </summary>
            <remarks>
            <p>
            Note that the configuration will not be available unless the
            <b>ConfigurablePofContext</b> was constructed with the
            configuration, the configuration was specified using the
            <see cref="T:Tangosol.Run.Xml.IXmlConfigurable"/> interface, or the
            <b>ConfigurablePofContext</b> has fully initialized itself</p>
            <p>
            Also, note that the configuration cannot be set after the
            <b>ConfigurablePofContext</b> is fully initialized.</p>
            </remarks>
            <value>
            <b>IXmlElement</b> holding configuration information.
            </value>
        </member>
        <member name="T:Tangosol.IO.Pof.ConfigurablePofContext.PofConfig">
            <summary>
            The information related to the configuration of a particular
            <see cref="T:Tangosol.IO.Pof.IPofContext"/> for a specific URI.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.PofConfig.m_xml">
            <summary>
            The XML configuration, if supplied by constructor.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.PofConfig.m_mapTypeIdByType">
            <summary>
            Once initialized, this references a non thread-safe map that
            contains mappings from .NET types to POF type identifiers.
            </summary>
            <remarks>
            The initial contents of the map reflect the configuration,
            but the contents can increase over time as sub-classes of the
            contained classes are resolved to type IDs (and those
            mappings are added).
            </remarks>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.PofConfig.m_mapTypeIdByTypeName">
            <summary>
            Once initialized, this references a non thread-safe map that
            contains mappings from .NET type names to POF type
            identifiers.
            </summary>
            <remarks>
            The initial contents of the map reflect the configuration,
            but the contents can increase over time as the names of
            sub-classes (i.e. of the classes corresponding to the
            contained class names) are resolved to type IDs (and those
            mappings are added).
            </remarks>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.PofConfig.m_typeByTypeId">
            <summary>
            An array of user <b>Type</b>s, indexed by type identifier.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.PofConfig.m_serByTypeId">
            <summary>
            An array of <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> objects, indexed by
            type identifier.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.PofConfig.m_isInterfaceAllowed">
            <summary>
            <b>true</b> iff an interface name is acceptable in the
            configuration as the class of a user type.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.PofConfig.m_isSubclassAllowed">
            <summary>
            <b>true</b> iff serialization of sub-classes is explicitly
            enabled.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.ConfigurablePofContext.PofConfig.m_isReferenceEnabled">
            <summary>
            <b>true</b> iff POF Identity/Reference type support is enabled.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.ConfigurablePofContext.PofConfigParameterResolver">
            <summary>
            An <see cref="T:Tangosol.Run.Xml.XmlHelper.IParameterResolver"/> implementation used
            by ConfigurablePofContext when resolving serializer
            configuration.
            </summary>
            <seealso cref="M:Tangosol.IO.Pof.ConfigurablePofContext.GetSerializer(Tangosol.Run.Xml.IXmlElement,System.Type,System.Int32)"/>
        </member>
        <member name="T:Tangosol.Run.Xml.XmlHelper.IParameterResolver">
            <summary>
            An interface that describes a callback to resolve a substitutable
            parameter value.
            </summary>
        </member>
        <member name="T:Tangosol.Run.Xml.XmlHelper">
            <summary>
            This abstract class contains XML manipulation methods.
            </summary>
            <author>Cameron Purdy  2000.10.25</author>
            <author>Gene Gleyzer  2000.10.25</author>
            <author>Ana Cikic  2009.08.26</author>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlHelper.UNIT_MS">
            <summary>
            A unit of milliseconds.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlHelper.UNIT_S">
            <summary>
            A unit of seconds.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlHelper.UNIT_M">
            <summary>
            A unit of minutes.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlHelper.UNIT_H">
            <summary>
            A unit of hours.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlHelper.UNIT_D">
            <summary>
            A unit of days.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlHelper.POWER_0">
            <summary>
            An exponent of zero.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlHelper.POWER_K">
            <summary>
            An exponent of 10.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlHelper.POWER_M">
            <summary>
            An exponent of 20.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlHelper.POWER_G">
            <summary>
            An exponent of 30.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlHelper.POWER_T">
            <summary>
            An exponent of 40.
            </summary>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.LoadXml(System.String)">
            <summary>
            Load XML from a resource specified by path.
            </summary>
            <param name="path">
            Location of Xml data; an URL or valid path.
            </param>
            <returns>
            The XML content.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.LoadXml(Tangosol.IO.Resources.IResource)">
            <summary>
            Load XML from a given <see cref="T:Tangosol.IO.Resources.IResource"/>.
            </summary>
            <param name="resource">
            The resource.
            </param>
            <returns>
            The XML content.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.LoadXml(System.IO.TextReader)">
            <summary>
            Load XML from a reader.
            </summary>
            <param name="reader">
            The <b>TextReader</b> object.
            </param>
            <returns>
            The XML content.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.LoadXml(System.IO.Stream)">
            <summary>
            Load XML from a stream.
            </summary>
            <param name="stream">
            The <b>Stream</b> object.
            </param>
            <returns>
            The XML content.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.LoadXml(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Load XML from a stream using the specified encoding.
            </summary>
            <param name="stream">
            The <b>Stream</b> object.
            </param>
            <param name="encoding">
            Encoding.
            </param>
            <returns>
            The XML content.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.LoadResource(Tangosol.IO.Resources.IResource,System.String)">
            <summary>
            Load an XML configuration from a resource.
            </summary>
            <param name="resource">
            The resource.
            </param>
            <param name="description">
            A description of the resource being loaded (e.g. "cache
            configuration"). The description is only used in logging and error
            messages related to loading the resource.
            </param>
            <returns>
            The configuration XML.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.ConvertDocument(System.Xml.XmlDocument)">
            <summary>
            Converts specified <b>System.Xml.XmlDocument</b> into
            <see cref="T:Tangosol.Run.Xml.IXmlDocument"/>.
            </summary>
            <param name="xmlDoc">
            Source <b>XmlDocument</b>.
            </param>
            <returns>
            <b>IXmlDocument</b> that is the result of conversion.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.ConvertElement(System.Xml.XmlElement,Tangosol.Run.Xml.IXmlElement,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Converts specified <b>System.Xml.XmlElement</b> into
            <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </summary>
            <param name="source">
            Source <b>XmlDocument</b>; must not be <c>null</c>.
            </param>
            <param name="target">
            <b>IXmlElement</b> that will be the result of conversion. If it
            is <c>null</c>, new instance of <b>IXmlElement</b> will be
            created.
            </param>
            <param name="parent">
            Parent of target <b>IXmlElement</b>; may be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="source"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.IsEncodingValid(System.String)">
            <summary>
            Validate the passed encoding.
            </summary>
            <remarks>
            Encodings are lating strings defined as:
            [A-Za-z] ([A-Za-z0-9._] | '-')*
            </remarks>
            <param name="encoding">
            The document encoding.
            </param>
            <returns>
            <b>true</b> if the encoding is valid, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.IsSystemIdentifierValid(System.String)">
            <summary>
            Validate the passed system identifier.
            </summary>
            <param name="name">
            The system identifier of the XML document.
            </param>
            <returns>
            <b>true</b> if the identifier is valid, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.IsPublicIdentifierValid(System.String)">
            <summary>
            Validate the passed public identifier.
            </summary>
            <param name="name">
            The public identifier of the XML document.
            </param>
            <returns>
            <b>true</b> if the identifier is valid, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.IsCommentValid(System.String)">
            <summary>
            Validate the passed comment.
            </summary>
            <remarks>
            Comments may not contain "--". See the XML specification 1.0 2ed
            section 2.5.
            </remarks>
            <param name="comment">
            The XML comment.
            </param>
            <returns>
            <b>true</b> if the comment is valid, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.IsNameValid(System.String)">
            <summary>
            Validate the passed name.
            </summary>
            <remarks>
            Currently, this does not allow the "CombiningChar" or "Extender"
            characters that are allowed by the XML specification 1.0 2ed
            section 2.3 [4].
            </remarks>
            <param name="name">
            The XML name to validate.
            </param>
            <returns>
            <b>true</b> if the name is valid, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.IsWhitespace(System.Char)">
            <summary>
            Test if the specified character is XML whitespace.
            </summary>
            <param name="ch">
            A character.
            </param>
            <returns>
            <b>true</b> if the passed character is XML whitespace.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.Trim(System.String)">
            <summary>
            Trim XML whitespace.
            </summary>
            <remarks>
            See XML 1.0 2ed section 2.3.
            </remarks>
            <param name="s">
            The original string.
            </param>
            <returns>
            The passed string minus any leading or trailing whitespace.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.Trimf(System.String)">
            <summary>
            Trim leading XML whitespace.
            </summary>
            <remarks>
            See XML 1.0 2ed section 2.3.
            </remarks>
            <param name="s">
            The original string.
            </param>
            <returns>
            The passed string minus any leading whitespace.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.Trimb(System.String)">
            <summary>
            Trim trailing XML whitespace.
            </summary>
            <remarks>
            See XML 1.0 2ed section 2.3.
            </remarks>
            <param name="s">
            The original string.
            </param>
            <returns>
            The passed string minus any trailing whitespace.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.EncodeAttribute(System.String,System.Char)">
            <summary>
            Encode an attribute value so that it can be quoted and made part
            of a valid and well formed XML document.
            </summary>
            <param name="value">
            The attribute value to encode.
            </param>
            <param name="chQuote">
            The character that will be used to quote the attribute.
            </param>
            <returns>
            The attribute value in its encoded form (but not quoted).
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.DecodeAttribute(System.String)">
            <summary>
            Decode an attribute value that was quoted.
            </summary>
            <param name="value">
            The attribute value to decode.
            </param>
            <returns>
            The attribute value in its decoded form.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.EncodeContent(System.String,System.Boolean)">
            <summary>
            Encode an element's content value so that it can be made part of
            a valid and well formed XML document.
            </summary>
            <param name="value">
            The content value to encode.
            </param>
            <param name="preferBlockEscape">
            Pass <b>true</b> to use the CDATA escape if two conditions are
            met: that escaping is required, and that the value does not
            contain the string "]]&gt;".
            </param>
            <returns>
            The attribute value in its encoded form (but not quoted).
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.DecodeContent(System.String)">
            <summary>
            Decode an element's content value.
            </summary>
            <param name="value">
            The content value to decode.
            </param>
            <returns>
            The attribute value in its decoded form.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.EncodeUri(System.String)">
            <summary>
            Encode a System Identifier as per the XML 1.0 Specification
            second edition, section 4.2.2.
            </summary>
            <param name="uri">
            The URI to encode.
            </param>
            <returns>
            The encoded URI.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.DecodeUri(System.String)">
            <summary>
            Decode a System Identifier as per the XML 1.0 Specification 2nd
            ed section 4.2.2.
            </summary>
            <param name="uri">
            The URI to decode.
            </param>
            <returns>
            The decoded URI.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.Quote(System.String)">
            <summary>
            XML quote the passed string.
            </summary>
            <param name="s">
            The string to quote.
            </param>
            <returns>
            The quoted string.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.GetAbsolutePath(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Get the '/'-delimited path of the passed element starting from
            the root element.
            </summary>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </param>
            <returns>
            The path to the passed element in "absolute" format.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.IsEmpty(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Check whether or not this element or any of its children elements
            have any content such as values or attributes.
            </summary>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </param>
            <returns>
            <b>true</b> iff the element itself and all of its children have
            neither values nor attributes.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.GetElement(Tangosol.Run.Xml.IXmlElement,System.String)">
            <summary>
            Get a child element for the specified element.
            </summary>
            <remarks>
            If multiple child elements exist that have the specified name,
            then the behavior of this method is undefined, and it is
            permitted to return any one of the matching elements, to return
            <c>null</c>, or to throw an arbitrary runtime exception.
            </remarks>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </param>
            <param name="name">
            The name of the desired child element.
            </param>
            <returns>
            The specified element as an object implementing
            <b>IXmlElement</b>, or <c>null</c> if the specified child element
            does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.FindElement(Tangosol.Run.Xml.IXmlElement,System.String)">
            <summary>
            Find a child element with the specified '/'-delimited path.
            </summary>
            <remarks>
            The path format is based on a subset of the XPath specification,
            supporting:
            <list type="bullet">
            <item>Leading '/' to specify root</item>
            <item>Use of '/' as a path delimiter</item>
            <item>Use of '..' to specify parent</item>
            </list>
            If multiple child elements exist that have the specified name,
            then the behavior of this method is undefined, and it is
            permitted to return any one of the matching elements, to return
            <c>null</c>, or to throw an arbitrary runtime exception.
            </remarks>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </param>
            <param name="path">
            The path to follow to find the desired XML element.
            </param>
            <returns>
            The child element with the specified path or <c>null</c> if such
            a child element does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.FindElement(Tangosol.Run.Xml.IXmlElement,System.String,System.Object)">
            <summary>
            Find a child element with the specified '/'-delimited path and
            the specified value.
            </summary>
            <remarks>
            The path format is based on a subset of the XPath specification,
            supporting:
            <list type="bullet">
            <item>Leading '/' to specify root</item>
            <item>Use of '/' as a path delimiter</item>
            <item>Use of '..' to specify parent</item>
            </list>
            If multiple child elements exist that have the specified name and
            value, then this method returns any one of the matching elements.
            </remarks>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </param>
            <param name="path">
            The path to follow to find the desired XML element.
            </param>
            <param name="value">
            The value to match.
            </param>
            <returns>
            The child element with the specified path and value or
            <c>null</c> if the such a child element does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.EnsureElement(Tangosol.Run.Xml.IXmlElement,System.String)">
            <summary>
            Ensure that a child element exists.
            </summary>
            <remarks>
            If any part of the path does not exist create new child
            elements to match the path.
            </remarks>
            <param name="xml">
            An XML element.
            </param>
            <param name="path">
            Element path.
            </param>
            <returns>
            The existing or new <see cref="T:Tangosol.Run.Xml.IXmlElement"/> object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the name is <c>null</c> or if any part of the path is not a
            legal XML tag name.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If any element in the path is immutable or otherwise can not add
            a child element.
            </exception>
            <seealso cref="M:Tangosol.Run.Xml.XmlHelper.FindElement(Tangosol.Run.Xml.IXmlElement,System.String)"/>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.AddElements(Tangosol.Run.Xml.IXmlElement,System.Collections.IEnumerator)">
            <summary>
            Add the elements from the <b>IEnumerator</b> to the passed XML.
            </summary>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/> object to add to.
            </param>
            <param name="enumerator">
            An <b>IEnumerator</b> of zero or more <b>IXmlElement</b> objects
            to add.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.RemoveElement(Tangosol.Run.Xml.IXmlElement,System.String)">
            <summary>
            Remove all immediate child elements with the given name.
            </summary>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </param>
            <param name="name">
            Child element name.
            </param>
            <returns>
            The number of removed child elements.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the element is immutable or otherwise cannot remove a child
            element.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.ReplaceElement(Tangosol.Run.Xml.IXmlElement,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Replace a child element with the same name as the specified
            element.
            </summary>
            <remarks>
            If the child element does not exist the specified element is just
            added.
            </remarks>
            <param name="xmlParent">
            Parent <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </param>
            <param name="xmlReplace">
            Element to replace with.
            </param>
            <returns>
            <b>true</b> if matching child element has been found and
            replaced; <b>false</b> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the parent element is immutable or otherwise cannot remove a
            child element.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.OverrideElement(Tangosol.Run.Xml.IXmlElement,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Override the values of the specified base element with values
            from the specified override element.
            </summary>
            <remarks>
            The values are only overriden if there is an exact match between
            the element paths and all attribute values. Empty override values
            are ignored. Override elements that do not match any of the base
            elements are just copied over. No ambiguity is allowed.<br/>
            For example, if the base element has more then one child with the
            same name and attributes then the override is not allowed.
            </remarks>
            <param name="xmlBase">
            Base <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </param>
            <param name="xmlOverride">
            Override <b>IXmlElement</b>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If the base element is immutable or there is ambiguity between
            the override and base elements.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.OverrideElement(Tangosol.Run.Xml.IXmlElement,Tangosol.Run.Xml.IXmlElement,System.String)">
            <summary>
            Override the values of the specified base element with values
            from the specified override element.
            </summary>
            <remarks>
            The values are only overriden if there is an exact match between
            the element paths and an attribute value for the specified
            attribute name. Empty override values are ignored. Override
            elements that do not match any of the base elements are just
            copied over. No ambiguity is allowed.<br/>
            For example, if the base element has more then one child with the
            same name and the specified attribute's value then the override
            is not allowed.
            </remarks>
            <param name="xmlBase">
            Base <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </param>
            <param name="xmlOverride">
            Override <b>IXmlElement</b>.
            </param>
            <param name="idAttrName">
            Attribute name that serves as an identifier allowing to match
            elements with the same name; if not specified all attributes have
            to match for an override.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If the base element is immutable or there is ambiguity between
            the override and base elements.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.GetNamespaceUri(Tangosol.Run.Xml.IXmlElement,System.String)">
            <summary>
            Retrieve the Namespace URI for a given prefix in a context of the
            specified <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </summary>
            <param name="xml">
            The <b>IXmlElement</b>.
            </param>
            <param name="prefix">
            The Namespace prefix.
            </param>
            <returns>
            The Namespace URI corresponding to the prefix.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.GetNamespacePrefix(Tangosol.Run.Xml.IXmlElement,System.String)">
            <summary>
            Retrieve the Namespace prefix for a given URI in a context of the
            specified <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </summary>
            <param name="xml">
            The <b>IXmlElement</b>.
            </param>
            <param name="uri">
            The Namespace URI.
            </param>
            <returns>
            The Namespace prefix corresponding to the URI.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.EnsureNamespace(Tangosol.Run.Xml.IXmlElement,System.String,System.String)">
            <summary>
            Ensure the existence of the Namespace declaration attribute in a
            context of the specified <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </summary>
            <param name="xml">
            The <b>IXmlElement</b>.
            </param>
            <param name="prefix">
            The Namespace prefix.
            </param>
            <param name="uri">
            The Namespace URI.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.GetUniversalName(System.String,System.String)">
            <summary>
            Return a universal XML element name.
            </summary>
            <param name="local">
            The local XML element name.
            </param>
            <param name="prefix">
            The Namespace prefix.
            </param>
            <returns>
            The universal XML element name.
            </returns>
            <seealso href="http://www.jclark.com/xml/xmlns.htm"/>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.IsNameMatch(Tangosol.Run.Xml.IXmlElement,System.String,System.String,System.String)">
            <summary>
            Check whether or not a universal (composite) name matches to the
            specified local name and Namespace URI.
            </summary>
            <param name="xml">
            The (context) <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </param>
            <param name="name">
            The universal name.
            </param>
            <param name="local">
            The local xml name.
            </param>
            <param name="uri">
            The Namespace URI.
            </param>
            <returns>
            <b>true</b> if the specified element matches to the specified
            local name and the specified Namespace URI.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.IsElementMatch(Tangosol.Run.Xml.IXmlElement,System.String,System.String)">
            <summary>
            Check whether or not an element matches to the specified local
            name and Namespace URI.
            </summary>
            <param name="xml">
            The <see cref="T:Tangosol.Run.Xml.IXmlElement"/>
            </param>
            <param name="local">
            The local xml name.
            </param>
            <param name="uri">
            The Namespace URI.
            </param>
            <returns>
            <b>true</b> if the specified element matches to the specified
            local name and the specified Namespace URI.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.GetElement(Tangosol.Run.Xml.IXmlElement,System.String,System.String)">
            <summary>
            Get a child element of the specified <see cref="T:Tangosol.Run.Xml.IXmlElement"/>
            that matches to the specified local name and the specified
            Namespace URI.
            </summary>
            <param name="xml">
            The parent <b>IXmlElement</b>.
            </param>
            <param name="local">
            The local xml name.
            </param>
            <param name="uri">
            The Namespace URI.
            </param>
            <returns>
            An element that matches to the specified local name and the
            specified Namespace URI.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.GetAttribute(Tangosol.Run.Xml.IXmlElement,System.String,System.String)">
            <summary>
            Get an attribute of the specified <see cref="T:Tangosol.Run.Xml.IXmlElement"/> that
            matches to the specified local name and the specified Namespace
            URI.
            </summary>
            <param name="xml">
            The <b>IXmlElement</b>.
            </param>
            <param name="local">
            The local attribute name.
            </param>
            <param name="uri">
            The Namespace URI.
            </param>
            <returns>
            An <see cref="T:Tangosol.Run.Xml.IXmlValue"/> that matches to the specified local
            name and the specified Namespace URI.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.GetElements(Tangosol.Run.Xml.IXmlElement,System.String,System.String)">
            <summary>
            Get an <b>IEnumerator</b> of child elements of the specified
            <see cref="T:Tangosol.Run.Xml.IXmlElement"/> that match to the specified local name
            and the specified Namespace URI.
            </summary>
            <param name="xml">
            The parent <b>IXmlElement</b>.
            </param>
            <param name="local">
            The local xml name.
            </param>
            <param name="uri">
            The Namespace URI.
            </param>
            <returns>
            An <b>IEnumerator</b> containing all matching child elements.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.PurgeNamespace(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            For the specified <see cref="T:Tangosol.Run.Xml.IXmlElement"/> purge the Namespace
            declarations that are declared somewhere up the xml tree.
            </summary>
            <param name="xml">
            The <b>IXmlElement</b>.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.PurgeChildrenNamespace(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            For the children elements of the specified
            <see cref="T:Tangosol.Run.Xml.IXmlElement"/> purge the repetetive Namespace
            declarations.
            </summary>
            <param name="xml">
            The <b>IXmlElement</b>.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.ParseInitParams(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Parse the specified "init-params" element of the following
            structure:
            <pre>
            &lt;!ELEMENT init-params (init-param*)&gt;
            &lt;!ELEMENT init-param ((param-name | param-type), param-value,
            description?)&gt;
            </pre>
            into an object array.
            </summary>
            <remarks>
            For the purpose of this method only the parameters that have the
            "param-type" element specified are processed. The following types
            are supported:
            <list type="bullet">
            <item>string   (a.k.a. System.String)</item>
            <item>bool     (a.k.a. System.Boolean)</item>
            <item>int      (a.k.a. System.Int32)</item>
            <item>long     (a.k.a. System.Int64)</item>
            <item>float    (a.k.a. System.Single)</item>
            <item>double   (a.k.a. System.Double)</item>
            <item>decimal  (a.k.a. System.Decimal)</item>
            <item>file     (a.k.a. System.IO.File)</item>
            <item>date     (a.k.a. System.DateTime)</item>
            <item>time     (a.k.a. System.DateTime</item>
            <item>xml      (a.k.a. Tangosol.Run.Xml.IXmlElement)</item>
            </list>
            For any other [explicitly specified] types the corresponding
            "init-param" IXmlElement itself is placed into the returned
            array.
            </remarks>
            <param name="xmlParams">
            The "init-params" <b>IXmlElement</b> to parse.
            </param>
            <returns>
            An array of parameters.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.ParseInitParams(Tangosol.Run.Xml.IXmlElement,Tangosol.Run.Xml.XmlHelper.IParameterResolver)">
            <summary>
            Parse the specified "init-params" element of the following
            structure:
            <pre>
            &lt;!ELEMENT init-params (init-param*)&gt;
            &lt;!ELEMENT init-param ((param-name | param-type), param-value,
            description?)&gt;
            </pre>
            into an object array.
            </summary>
            <remarks>
            For the purpose of this method only the parameters that have the
            "param-type" element specified are processed. The following types
            are supported:
            <list type="bullet">
            <item>string   (a.k.a. System.String)</item>
            <item>bool     (a.k.a. System.Boolean)</item>
            <item>int      (a.k.a. System.Int32)</item>
            <item>long     (a.k.a. System.Int64)</item>
            <item>double   (a.k.a. System.Double)</item>
            <item>float    (a.k.a. System.Single)</item>
            <item>decimal  (a.k.a. System.Decimal)</item>
            <item>file     (a.k.a. System.IO.File)</item>
            <item>date     (a.k.a. System.DateTime)</item>
            <item>time     (a.k.a. System.DateTime</item>
            <item>xml      (a.k.a. Tangosol.Run.Xml.IXmlElement)</item>
            </list>
            For any other [explicitly specified] types the corresponding
            "init-param" IXmlElement itself is placed into the returned
            array.
            </remarks>
            <param name="xmlParams">
            The "init-params" <b>IXmlElement</b> to parse.
            </param>
            <param name="resolver">
            An <see cref="T:Tangosol.Run.Xml.XmlHelper.IParameterResolver"/> to resolve "{macro}" values
            (optional).
            </param>
            <returns>
            An array of parameters.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.TransformInitParams(Tangosol.Run.Xml.IXmlElement,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Transform the specified "init-params" element of the following
            structure:
            <pre>
            &lt;!ELEMENT init-params (init-param*)&gt;
            &lt;!ELEMENT init-param ((param-name | param-type), param-value,
            description?)&gt;
            </pre>
            into an XML element composed of the corrsponding names. For
            example, the "init-params" element of the following structure:
            <pre>
            &lt;init-param&gt;
                &lt;param-name&gt;NameOne&lt;/param-name&gt;
                &lt;param-value&gt;ValueOne&lt;/param-value&gt;
            &lt;/init-param&gt;
            &lt;init-param&gt;
                &lt;param-name&gt;NameTwo&lt;/param-name&gt;
                &lt;param-value&gt;ValueTwo&lt;/param-value&gt;
            &lt;/init-param&gt;
            </pre>
            will transform into
            <pre>
            &lt;NameOne&gt;ValueOne&lt;/NameOne&gt;
            &lt;NameTwo&gt;ValueTwo&lt;/NameTwo&gt;
            </pre>
            </summary>
            <remarks>
            For the purpose of this method only the parameters that have the
            "param-name" element specified are processed.
            </remarks>
            <param name="xmlParent">
            The XML element to insert the transformed elements into.
            </param>
            <param name="xmlParams">
            The "init-params" <b>IXmlElement</b> to parse.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.IsInstanceConfigEmpty(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Check whether or not the specified configuration defines an
            instance of a class.
            </summary>
            <remarks>
            The specified <see cref="T:Tangosol.Run.Xml.IXmlElement"/> shoud be of the same
            structure as used in the
            <see cref="M:Tangosol.Run.Xml.XmlHelper.CreateInstance(Tangosol.Run.Xml.IXmlElement,Tangosol.Run.Xml.XmlHelper.IParameterResolver)"/>.
            </remarks>
            <param name="xmlClass">
            The XML element that contains the instantiation info.
            </param>
            <returns>
            <b>true</b> iff there is no class configuration information
            available.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.CreateDelegate``1(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Creates a delegate from a given configuration.
            <see cref="T:Tangosol.Run.Xml.IXmlElement"/> of the following structure:
            <pre>
            $lt;delegate&gt;
               &lt;static/&gt; | &lt;instance/&gt;
               &lt;class-name&gt;&lt;/class-name&gt;
               &lt;delegate-type&gt;&lt;/delegate-type&gt;
               &lt;method-name&gt;&lt;/method-name&gt;
            &lt;/delegate&gt;
            </pre>
            </summary>
            <typeparam name="TDel">
            The type of the delegate.
            </typeparam>        
            <param name="xmlDelegate">The XML element that contains the instantiation info. </param>
            <returns>A delegate obtained by the XML configutation</returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.CreateInstance(Tangosol.Run.Xml.IXmlElement,Tangosol.Run.Xml.XmlHelper.IParameterResolver)">
            <summary>
            Create an instance of the class configured using an
            <see cref="T:Tangosol.Run.Xml.IXmlElement"/> of the following structure:
            <pre>
            &lt;!ELEMENT ... (class-name | (class-factory-name, method-name),
            init-params?&gt;
            &lt;!ELEMENT init-params (init-param*)&gt;
            &lt;!ELEMENT init-param ((param-name | param-type), param-value,
            description?)&gt;
            </pre>
            As of Coherence 12.1.2 the supplied element may also be of the 
            following format:
            <pre>
            &lt;!ELEMENT instance&gt;
            </pre>
            where the "instance" format is the same as above.
            </summary>
            <param name="xmlClass">
            The XML element that contains the instantiation info.
            </param>
            <param name="resolver">
            An <see cref="T:Tangosol.Run.Xml.XmlHelper.IParameterResolver"/> to resolve "{macro}" values
            (optional).
            </param>
            <returns>
            An object intantiated or obtained based on the class
            configuration.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.CreateInstance(Tangosol.Run.Xml.IXmlElement,Tangosol.Run.Xml.XmlHelper.IParameterResolver,System.Type)">
            <summary>
            Create an instance of the class configured using an
            <see cref="T:Tangosol.Run.Xml.IXmlElement"/> of the following structure:
            <pre>
            &lt;!ELEMENT ... (class-name | (class-factory-name, method-name),
            init-params?&gt;
            &lt;!ELEMENT init-params (init-param*)&gt;
            &lt;!ELEMENT init-param ((param-name | param-type), param-value,
            description?)&gt;
            </pre>
            As of Coherence 12.1.2 the supplied element may also be of the 
            following format:
            <pre>
            &lt;!ELEMENT instance&gt;
            </pre>
            where the "instance" format is the same as above.
            </summary>
            <param name="xmlClass">
            The XML element that contains the instantiation info.
            </param>
            <param name="resolver">
            An <see cref="T:Tangosol.Run.Xml.XmlHelper.IParameterResolver"/> to resolve "{macro}" values
            (optional).
            </param>
            <param name="typeAssignable">
            if non-null, this method will validate that
            the Type is assignable from the loaded Type
            </param>
            <returns>
            An object intantiated or obtained based on the class
            configuration.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.ParseMemorySize(System.String)">
            <summary>
            Parse the given string representation of a number of bytes.
            </summary>
            <remarks>
            The supplied string must be in the format:
            <p>
            <b>[\d]+[[.][\d]+]?[K|k|M|m|G|g|T|t]?[B|b]?</b></p>
            where the first non-digit (from left to right) indicates the
            factor with which the preceeding decimal value should be
            multiplied:
            <p>
            <list type="bullet">
            <item><b>K</b> or <b>k</b> (kilo, 2<sup>10</sup>)</item>
            <item><b>M</b> or <b>m</b> (mega, 2<sup>20</sup>)</item>
            <item><b>G</b> or <b>g</b> (giga, 2<sup>30</sup>)</item>
            <item><b>T</b> or <b>t</b> (tera, 2<sup>40</sup>)</item>
            </list></p>
            <p>
            If the string value does not contain a factor, a factor of one
            is assumed.</p>
            <p>
            The optional last character <b>B</b> or <b>b</b> indicates
            a unit of bytes.</p>
            </remarks>
            <param name="s">
            A string with the format
            <b>[\d]+[[.][\d]+]?[K|k|M|m|G|g|T|t]?[B|b]?</b>
            </param>
            <returns>
            The number of bytes represented by the given string.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.ParseMemorySize(System.String,System.Int32)">
            <summary>
            Parse the given string representation of a number of bytes.
            </summary>
            <remarks>
            The supplied string must be in the format:
            <p>
            <b>[\d]+[[.][\d]+]?[K|k|M|m|G|g|T|t]?[B|b]?</b></p>
            where the first non-digit (from left to right) indicates the
            factor with which the preceeding decimal value should be
            multiplied:
            <p>
            <list type="bullet">
            <item><b>K</b> or <b>k</b> (kilo, 2<sup>10</sup>)</item>
            <item><b>M</b> or <b>m</b> (mega, 2<sup>20</sup>)</item>
            <item><b>G</b> or <b>g</b> (giga, 2<sup>30</sup>)</item>
            <item><b>T</b> or <b>t</b> (tera, 2<sup>40</sup>)</item>
            </list></p>
            <p>
            If the string value does not contain an explict or implicit
            factor, a factor calculated by raising 2 to the given default
            power is used. The default power can be one of:
            <list type="bullet">
            <item><see cref="F:Tangosol.Run.Xml.XmlHelper.POWER_0"/></item>
            <item><see cref="F:Tangosol.Run.Xml.XmlHelper.POWER_K"/></item>
            <item><see cref="F:Tangosol.Run.Xml.XmlHelper.POWER_M"/></item>
            <item><see cref="F:Tangosol.Run.Xml.XmlHelper.POWER_G"/></item>
            <item><see cref="F:Tangosol.Run.Xml.XmlHelper.POWER_T"/></item>
            </list></p>
            <p>
            The optional last character <b>B</b> or <b>b</b> indicates
            a unit of bytes.</p>
            </remarks>
            <param name="s">
            A string with the format
            <b>[\d]+[[.][\d]+]?[K|k|M|m|G|g|T|t]?[B|b]?</b>
            </param>
            <param name="defaultPower">
            The exponent used to calculate the factor used in the
            conversion if one is not implied by the given string.
            </param>
            <returns>
            The number of bytes represented by the given string.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.ParseTime(System.String)">
            <summary>
            Parse the given string representation of a time duration and
            return its value as a number of milliseconds.
            </summary>
            <remarks>
            The supplied string must be in the format:
            <p>
            <b>[\d]+[[.][\d]+]?[MS|ms|S|s|M|m|H|h|D|d]?</b></p>
            <p>
            where the first non-digits (from left to right) indicate the unit
            of time duration:
            <list type="bullet">
            <item><b>MS</b> or <b>ms</b> (milliseconds)</item>
            <item><b>S</b>  or <b>s</b>  (seconds)</item>
            <item><b>M</b>  or <b>m</b>  (minutes)</item>
            <item><b>H</b>  or <b>h</b>  (hours)</item>
            <item><b>D</b>  or <b>d</b>  (days)</item>
            </list></p>
            <p>
            If the string value does not contain a unit, a unit of
            milliseconds is assumed.</p>
            </remarks>
            <param name="s">
            A string with the format
            <b>[\d]+[[.][\d]+]?[MS|ms|S|s|M|m|H|h|D|d]?</b>
            </param>
            <returns>
            The number of milliseconds represented by the given string.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.ParseTime(System.String,System.Int32)">
            <summary>
            Parse the given string representation of a time duration and
            return its value as a number of milliseconds.
            </summary>
            <remarks>
            The supplied string must be in the format:
            <p>
            <b>[\d]+[[.][\d]+]?[MS|ms|S|s|M|m|H|h|D|d]?</b></p>
            <p>
            where the first non-digits (from left to right) indicate the unit
            of time duration:
            <list type="bullet">
            <item><b>MS</b> or <b>ms</b> (milliseconds)</item>
            <item><b>S</b>  or <b>s</b>  (seconds)</item>
            <item><b>M</b>  or <b>m</b>  (minutes)</item>
            <item><b>H</b>  or <b>h</b>  (hours)</item>
            <item><b>D</b>  or <b>d</b>  (days)</item>
            </list></p>
            <p>
            If the string value does not contain a unit, the specified
            default unit is assumed. The default unit can be one of:
            <list type="bullet">
            <item><see cref="F:Tangosol.Run.Xml.XmlHelper.UNIT_MS"/></item>
            <item><see cref="F:Tangosol.Run.Xml.XmlHelper.UNIT_S"/></item>
            <item><see cref="F:Tangosol.Run.Xml.XmlHelper.UNIT_M"/></item>
            <item><see cref="F:Tangosol.Run.Xml.XmlHelper.UNIT_H"/></item>
            <item><see cref="F:Tangosol.Run.Xml.XmlHelper.UNIT_D"/></item>
            </list></p>
            </remarks>
            <param name="s">
            A string with the format
            <b>[\d]+[[.][\d]+]?[MS|ms|S|s|M|m|H|h|D|d]?</b>
            </param>
            <param name="defaultUnit">
            The unit to use in the conversion to milliseconds if one is not
            specified in the supplied string.
            </param>
            <returns>
            The number of milliseconds represented by the given string.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.HashElement(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Provide a hash value for the XML element and all of its contained
            information.
            </summary>
            <remarks>
            The hash value is defined as a xor of the following:
            <list type="bullet">
            <item>the GetHashCode() from the element's value (i.e.
            base.GetHashCode())</item>
            <item>the GetHashCode() from each attribute name</item>
            <item>the GetHashCode() from each attribute value</item>
            <item>the GetHashCode() from each sub-element</item>
            </list>
            </remarks>
            <param name="xml">
            The <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </param>
            <returns>
            The hash value for the XML element.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.HashValue(Tangosol.Run.Xml.IXmlValue)">
            <summary>
            Provide a hash value for the XML value.
            </summary>
            <remarks>
            The hash value is defined as one of the following:
            <list type="number">
            <item>0 if <see cref="P:Tangosol.Run.Xml.IXmlValue.Value"/> returns <c>null</c>
            </item>
            <item>otherwise the hash value is the GetHashCode() of the string
            representation of the value</item>
            </list>
            </remarks>
            <param name="val">
            The <see cref="T:Tangosol.Run.Xml.IXmlValue"/>.
            </param>
            <returns>
            The hash value for the XML value.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.EqualsElement(Tangosol.Run.Xml.IXmlElement,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Compare one XML element with another XML element for equality.
            </summary>
            <param name="xml1">
            A non-null <b>IXmlElement</b> object.
            </param>
            <param name="xml2">
            A non-null <b>IXmlElement</b> object.
            </param>
            <returns>
            <b>true</b> if the elements are equal, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.EqualsValue(Tangosol.Run.Xml.IXmlValue,Tangosol.Run.Xml.IXmlValue)">
            <summary>
            Compare one XML value with another XML value for equality.
            </summary>
            <param name="val1">
            A non-null <b>IXmlValue</b> object.
            </param>
            <param name="val2">
            A non-null <b>IXmlValue</b> object.
            </param>
            <returns>
            <b>true</b> if the values are equal, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.Convert(System.Object,Tangosol.Run.Xml.XmlValueType)">
            <summary>
            Convert the passed object to the specified type.
            </summary>
            <param name="o">
            The object value or <c>null</c>.
            </param>
            <param name="type">
            The enumerated type to convert to.
            </param>
            <returns>
            An object of the specified type.
            </returns>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlHelper.UNRESOLVED">
            <summary>
            A constant that indicates that the parameter cannot be resolved.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlHelper.HEX">
            <summary>
            Hexidecimal digits.
            </summary>
        </member>
        <member name="T:Tangosol.Run.Xml.XmlHelper.IParameterResolver">
            <summary>
            An interface that describes a callback to resolve a substitutable
            parameter value.
            </summary>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.IParameterResolver.ResolveParameter(System.String,System.String)">
            <summary>
            Resolve the passed substitutable parameter.
            </summary>
            <param name="type">
            The value of the "param-type" element.
            </param>
            <param name="value">
            The value of the "param-value" element, which is enclosed by
            curly braces, indicating its substitutability.
            </param>
            <returns>
            The object value to use or the <see cref="F:Tangosol.Run.Xml.XmlHelper.UNRESOLVED"/>
            constant.
            </returns>
        </member>
        <member name="T:Tangosol.Util.IFilter">
            <summary>
            Provide for "pluggable" conditional behavior.
            </summary>
            <author>Cameron Purdy</author>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Tangosol.Util.IFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.XmlHelper.ElementMatchFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.PofConfigParameterResolver.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Creates PofConfigParameterResolver with parameter values for
            {type-id}, {class-name} and {class} macros.
            </summary>
            <param name="className">
            Type name.
            </param>
            <param name="userTypeId">
            User type id.
            </param>
            <param name="userType">
            User type.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.ConfigurablePofContext.PofConfigParameterResolver.ResolveParameter(System.String,System.String)">
            <summary>
            Resolve the passed substitutable parameter.
            </summary>
            <param name="type">
            The value of the "param-type" element.
            </param>
            <param name="value">
            The value of the "param-value" element, which is enclosed by
            curly braces, indicating its substitutability.
            </param>
            <returns>
            The object value to use or the
            <see cref="F:Tangosol.Run.Xml.XmlHelper.UNRESOLVED"/> constant.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.SafeConfigurablePofContext.TYPE_PORTABLE">
            <summary>
            The type identifier for objects that implement the PortableObject
            interface.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.SafeConfigurablePofContext.TYPE_SERIALIZABLE">
            <summary>
            The type identifier for .NET Serializable objects.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            Create a default <b>ConfigurablePofContext</b> that will load
            definitions from the default POF config file.
            </remarks>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.#ctor(System.IO.Stream)">
            <summary>
            Create a <b>ConfigurablePofContext</b> that will use the passed
            configuration information.
            </summary>
            <param name="stream">
            An <b>Stream</b> containing information in the format of a
            configuration file used by <b>ConfigurablePofContext</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.#ctor(System.String)">
            <summary>
            Create a <b>ConfigurablePofContext</b> that will load
            configuration information from the specified locator.
            </summary>
            <param name="locator">
            The locator that specifies the location of the
            <see cref="T:Tangosol.IO.Pof.IPofContext"/> configuration file; the locator is
            either a valid path or a URL.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.#ctor(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Create a <b>ConfigurablePofContext</b> that will use the passed
            configuration information.
            </summary>
            <param name="xml">
            An <b>IXmlElement</b> containing information in the format of a
            configuration file used by <b>ConfigurablePofContext</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.GetPofSerializer(System.Int32)">
            <summary>
            Return an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> that can be used to
            serialize and deserialize an object of the specified user type to
            and from a POF stream.
            </summary>
            <param name="typeId">
            The type identifier of the user type that can be serialized and
            deserialized using the returned <b>IPofSerializer</b>; must be
            non-negative.
            </param>
            <returns>
            An <b>IPofSerializer</b> for the specified user type.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.GetType(System.Int32)">
            <summary>
            Determine the type associated with the given user type
            identifier.
            </summary>
            <param name="typeId">
            The user type identifier; must be non-negative.
            </param>
            <returns>
            The type associated with the specified user type identifier.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.GetUserTypeIdentifier(System.Type)">
            <summary>
            Determine the user type identifier associated with the given
            type.
            </summary>
            <param name="type">
            A user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given type is unknown to
            this <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.GetUserTypeIdentifier(System.String)">
            <summary>
            Determine the user type identifier associated with the given type
            name.
            </summary>
            <param name="typeName">
            The assembly-qualified name of a user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type name.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given type name is unknown
            to this <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.IsUserType(System.Type)">
            <summary>
            Determine if the given type is a user type known to this
            <b>IPofContext</b>.
            </summary>
            <param name="type">
            The type to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the specified type is a valid user type.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.IsUserType(System.String)">
            <summary>
            Determine if the type with the given name is a user type known to
            this <b>IPofContext</b>.
            </summary>
            <param name="typeName">
            The assembly-qualified name of the type to test; must not be 
            <c>null</c> or empty.
            </param>
            <returns>
            <b>true</b> iff the type with the specified name is a valid user
            type.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.EnsureInitialized">
            <summary>
            Fully initialize the <b>SafeConfigurablePofContext</b> if it has 
            not already been initialized.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.GetGenericTypeId(System.Type)">
            <summary>
            For user types that are not registered in the POF configuration 
            used by this PofContext, determine if the user type can be 
            serialized using POF, otherwise determine if the user type can be 
            serialized using standard .NET BinaryFormatter.
            </summary>
            <param name="type">
            A user type that is not configured in this IPofContext.
            </param>
            <returns>
            A special user type id that indicates that the user type is
            supported by "generic" POF serialization or traditional .NET 
            serialization embedded in a POF stream.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.SafeConfigurablePofContext.m_serializerDotNet">
            <summary>
            Serializer used for Serializable objects.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.SafeConfigurablePofContext.m_serializerPof">
            <summary>
            Serializer used for [not registered] objects implementing 
            IPortableObject interface.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.SafeConfigurablePofContext.DotNetPofSerializer">
            <summary>
            Serializer used for Serializable objects.
            </summary>
        </member>
        <member name="T:Tangosol.Util.SerializationHelper">
            <summary>
            Miscellaneous serialization utilities.
            </summary>
            <author>Aleksandar Seovic  2009.06.22</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.Util.SerializationHelper.ToBinary(System.Object,Tangosol.IO.ISerializer)">
            <summary>
            Serialize an object into its <see cref="T:Tangosol.Util.Binary"/> form.
            </summary>
            <param name="o">Object to serialize.</param>
            <param name="serializer"><see cref="T:Tangosol.IO.ISerializer"/> to use.</param>
            <returns>
            Serialized <see cref="T:Tangosol.Util.Binary"/> representation of the specified object.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.SerializationHelper.FromBinary(Tangosol.Util.Binary,Tangosol.IO.ISerializer)">
            <summary>
            Deserialize an object from its <see cref="T:Tangosol.Util.Binary"/> form.
            </summary>
            <param name="bin"><see cref="T:Tangosol.Util.Binary"/> representation of an object.</param>
            <param name="serializer"><see cref="T:Tangosol.IO.ISerializer"/> to use.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.SerializationHelper.DecorateBinary(Tangosol.Util.Binary,System.Int32)">
            <summary>
            Decorate the specified <see cref="T:Tangosol.Util.Binary"/> with the specified integer decoration.
            </summary>
            <param name="binValue">The <see cref="T:Tangosol.Util.Binary"/> to be decorated.</param>
            <param name="decoration">The integer decoration.</param>
            <returns>The decorated (with integer decoration) <see cref="T:Tangosol.Util.Binary"/> object.</returns>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.Util.SerializationHelper.ExtractIntDecoration(Tangosol.Util.Binary)">
            <summary>
            Extract a decoration value from the specified <see cref="T:Tangosol.Util.Binary"/> that contains an
            integer decoration.
            </summary>
            <param name="bin">The <see cref="T:Tangosol.Util.Binary"/> object.</param>
            <returns>The integer decoration value.</returns>
            <exception cref="T:System.ArgumentException">
            If the <see cref="T:Tangosol.Util.Binary"/> does not have an int decoration.
            </exception>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.Util.SerializationHelper.IsIntDecorated(Tangosol.Util.Binary)">
            <summary>
            Check whether or not the specified <see cref="T:Tangosol.Util.Binary"/> has an integer
            decoration.
            </summary>
            <param name="bin">The <see cref="T:Tangosol.Util.Binary"/> object.</param>
            <returns>True if the <see cref="T:Tangosol.Util.Binary"/> contains (starts with) an integer
            decoration; false otherwise.</returns>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.Util.SerializationHelper.RemoveIntDecoration(Tangosol.Util.Binary)">
            <summary>
            Remove the integer decoration from the specified <see cref="T:Tangosol.Util.Binary"/>.
            </summary>
            <param name="bin">The <see cref="T:Tangosol.Util.Binary"/> object.</param>
            <returns>The undecorated <see cref="T:Tangosol.Util.Binary"/> value.</returns>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="F:Tangosol.Util.SerializationHelper.DECO_VALUE">
            <summary>
            Decoration: The original value (before being decorated).
            </summary>
        </member>
        <member name="M:Tangosol.Util.SerializationHelper.FindStats(System.Object)">
            <summary>
            If statistics are being maintained for the class of the specified
            Object value, then find and return those stats.
            </summary>
            <param name="o">
            The value to search for a Stats object for.
            </param>
            <returns>
            The Stats object for the specified Object value, or null.
            </returns>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.Util.SerializationHelper.UpdateStats(System.Object,Tangosol.Util.SerializationHelper.Stats,System.Int32)">
            <summary>
            If statistics are being maintained for the class of the specified
            Object value, then find and return those stats.
            </summary>
            <param name="o"> 
            The object that has been written.
            </param>
            <param name="stats">
            The statistics that track the serialized sizes of objects.
            </param>
            <param name="cb">
            The size in bytes of the object as it was written.
            </param>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.Util.SerializationHelper.CalculateStatsId(System.Object)">
            <summary>
            Calculate a somewhat unique ID for the type of the passed Object.
            </summary>
            <param name="o">
            A user type value.
            </param>
            <returns>
            An ID that is hopefully unique across the set of user type
            classes in use within this VM at this general point in time.
            </returns>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="F:Tangosol.Util.SerializationHelper.s_astats">
            <summary>
            An array of Stats objects, indexed by the modulo of a swizzled class
            hashcode.
            </summary>
        </member>
        <member name="T:Tangosol.Util.SerializationHelper.SerializationFormat">
            <summary>
            Serialization format.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SerializationHelper.SerializationFormat.FMT_IDO">
            <summary>
            Serialization format: Integer-decorated value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SerializationHelper.SerializationFormat.FMT_BIN_DECO">
            <summary>
            Serialization format: Decorated Binary value.
            </summary>
            <remarks>
            <p>
            Structure is:
            byte 0    : format identifier (18)
            byte 1    : bit mask of decoration identifiers
            byte 2    : packed int specifying the length of the first
            decorator
            byte next : binary data
            ...</p>
            <p>
            For each decorator, there is a packed int for its length,
            followed by its binary data. The first decorator is the
            decorated value itself, if present.
            </p>
            <p>
            Note: FMT_IDO cannot be combined with FMT_BIN_DECO.
            </p>
            </remarks>
        </member>
        <member name="F:Tangosol.Util.SerializationHelper.SerializationFormat.FMT_BIN_EXT_DECO">
            <summary>
            Serialization format: Extended Decorated Binary value.
            </summary>
            <remarks>
            <p>
            Structure is:
            byte 0    : format identifier (19)
            byte 1... : a packed long as bit mask 
            byte next : packed int specifying the length of the first
            decorator
            byte next : binary data
            ...</p>
            <p>
            For each decorator, there is a packed int for its length,
            followed by its binary data. The first decorator is the
            decorated value itself, if present.
            </p>
            <p>
            Note: FMT_IDO cannot be combined with FMT_BIN_EXT_DECO.
            </p>
            </remarks>
        </member>
        <member name="F:Tangosol.Util.SerializationHelper.SerializationFormat.FMT_EXT">
            <summary>
            Serialization format: A default serializer is NOT used.
            </summary>
        </member>
        <member name="T:Tangosol.Util.SerializationHelper.Stats">
            <summary>
            Serialization statistics for a given user type.
            </summary>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.Util.SerializationHelper.Stats.Update(System.Int32)">
            <summary>
            Update the serialization statistics with the size (in bytes) of a
            newly serialized object.
            </summary>
            <param name="cb">  
            The number of bytes used to serialize.
            </param>
        </member>
        <member name="M:Tangosol.Util.SerializationHelper.Stats.InstantiateBuffer">
            <summary>
            Instantiate a WriteBuffer to write a user type for which this
            Stats object maintains serialization statistics.
            </summary>
            <returns>
            A WriteBuffer to write to.
            </returns>
        </member>
        <member name="F:Tangosol.Util.SerializationHelper.Stats.EXPIRY_MILLIS">
            <summary>
            The expiry for statistics (in milliseconds).
            </summary>
        </member>
        <member name="F:Tangosol.Util.SerializationHelper.Stats.m_lAccum">
            <summary>
            <ul>
            <li>high 2 bytes - Number of items that have been submitted for
            statistics keeping.</li>
            <li>low 6 bytes - Total number of bytes of all the items
            submitted.</li>
            </ul>
            </summary>
        </member>
        <member name="F:Tangosol.Util.SerializationHelper.Stats.m_lStats">
            <summary>
            <ul>
            <li>highWord - Largest size in bytes of all the items
            submitted.</li>
            <li>lowWord  - The average size in bytes of all the items
            submitted.</li>
            </ul>
            </summary>
        </member>
        <member name="F:Tangosol.Util.SerializationHelper.Stats.m_ldtCreated">
            <summary>
            Time at which this Stats object was created.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.DotNetPofSerializer.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)">
            <summary>
            Serialize a user type instance to a POF stream by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for writing out an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must set the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may write any combination of the properties of
            the user type by using the "write" methods of the
            <b>IPofWriter</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been written,
            the implementation must terminate the writing of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteRemainder(Tangosol.Util.Binary)"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="writer">
            The <b>IPofWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.DotNetPofSerializer.Deserialize(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize a user type instance from a POF stream by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for reading in an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must get the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may read any combination of the
            properties of the user type by using "read" methods of the
            <b>IPofReader</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been read,
            the implementation must terminate the reading of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofReader.ReadRemainder"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="reader">
            The <b>IPofReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.DotNetPofSerializer.Register(System.Object)">
            <summary>
            Register a class as having been encountered by the serializer.
            </summary>
            <param name="o">
            An object that is being serialized or has been deserialized.
            </param>
        </member>
        <member name="F:Tangosol.IO.Pof.SafeConfigurablePofContext.DotNetPofSerializer.m_serializer">
            <summary>
            Serializer used by this IPofSerializer.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.SafeConfigurablePofContext.DotNetPofSerializer.m_mapRegisteredClasses">
            <summary>
            All classes that have been registered.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.SafeConfigurablePofContext.SafePofSerializer">
            <summary>
            Serializer used for objects implementing the IPortableObject 
            interface.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.SafePofSerializer.#ctor(Tangosol.IO.Pof.ConfigurablePofContext)">
            <summary>
            Construct a new instance of SafePofSerializer.
            </summary>
            <param name="ctx">
            The ConfigurablePofContext to use.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.SafePofSerializer.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)">
            <summary>
            Serialize a user type instance to a POF stream by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for writing out an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must set the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may write any combination of the properties of
            the user type by using the "write" methods of the
            <b>IPofWriter</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been written,
            the implementation must terminate the writing of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteRemainder(Tangosol.Util.Binary)"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="writer">
            The <b>IPofWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.SafePofSerializer.Deserialize(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize a user type instance from a POF stream by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for reading in an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must get the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may read any combination of the
            properties of the user type by using "read" methods of the
            <b>IPofReader</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been read,
            the implementation must terminate the reading of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofReader.ReadRemainder"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="reader">
            The <b>IPofReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SafeConfigurablePofContext.SafePofSerializer.Register(System.String)">
            <summary>
            Register a class as having been encountered by the serializer.
            </summary>
            <param name="typeName">
            The name of a class that is being serialized or deserialized.
            </param>
        </member>
        <member name="F:Tangosol.IO.Pof.SafeConfigurablePofContext.SafePofSerializer.m_pofContext">
            <summary>
            Reference to outer SafeConfigurablePofContext.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.SafeConfigurablePofContext.SafePofSerializer.m_serializer">
            <summary>
            Serializer used by this IPofSerializer.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.SafeConfigurablePofContext.SafePofSerializer.m_mapRegisteredClasses">
            <summary>
            All classes that have been registered.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.Schema.Annotation.PortableType">
            <summary>
            Class-level annotation that marks class as portable and defines type
            identifier (and optionally implementation version) for it.
            </summary>
            <author>Aleksandar Seovic  2013.11.01</author>
            <since>Coherence 12.2.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.Schema.Annotation.PortableType.#ctor(System.Int32)">
            <summary>
            Construct PortableType instance with a default implementation version of 0.
            </summary>
            <param name="id">Type identifier</param>
        </member>
        <member name="M:Tangosol.IO.Pof.Schema.Annotation.PortableType.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct PortableType instance with a specified type id and implementation version.
            </summary>
            <param name="id">Type identifier</param>
            <param name="version">Implementation version</param>
        </member>
        <member name="F:Tangosol.IO.Pof.Schema.Annotation.PortableType.m_id">
            <summary>
            Type identifier
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.Schema.Annotation.PortableType.m_version">
            <summary>
            Implementation version
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.Schema.Annotation.PortableType.Id">
            <summary>
            Return type identifier.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.Schema.Annotation.PortableType.Version">
            <summary>
            Return implementation version.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.XmlPofSerializer">
            <summary>
            <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> implementation that supports
            .NET XML serialization and deserialization.
            </summary>
            <author>Ivan Cikic  2007.08.23</author>
            <since>Coherence 3.4</since>
        </member>
        <member name="M:Tangosol.IO.Pof.XmlPofSerializer.#ctor(System.Int32)">
            <summary>
            Create a new <b>XmlPofSerializer</b> for the user type with the
            given type identifier.
            </summary>
            <param name="typeId">
            The user type identifier.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.XmlPofSerializer.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)">
            <summary>
            Serialize a user type instance to a POF stream by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.XmlPofSerializer.Deserialize(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize a user type instance from a POF stream by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.IO.Pof.XmlPofSerializer.m_typeId">
            <summary>
            The type identifier of the user type to serialize and
            deserialize.
            </summary>
        </member>
        <member name="T:Tangosol.IO.SimpleEvolvable">
            <summary>
            Simple implementation of <see cref="T:Tangosol.IO.IEvolvable"/> interface.
            </summary>
            <author>Aleksandar Seovic  2013.11.04</author>
            <since>Coherence 12.2.1</since>
        </member>
        <member name="T:Tangosol.IO.IEvolvable">
            <summary>
            The <b>IEvolvable</b> interface is implemented by types that require
            forwards- and backwards-compatibility of their serialized form.
            </summary>
            <remarks>
            An <b>IEvolvable</b> class has an integer version identifier <b>n</b>,
            where <b>n >= 0</b>. When the contents and/or semantics of the
            serialized form of the <b>IEvolvable</b> class changes, the version
            identifier is increased. Two versions identifiers, <b>n1</b>
            and <b>n2</b>, indicate the same version if <b>n1 == n2</b>;
            the version indicated by <tt>n2</tt> is newer than the version
            indicated by <b>n1</b> if <b>n2 > n1</b>.
            <p/>
            The <b>IEvolvable</b> interface is designed to support the evolution of
            types by the addition of data. Removal of data cannot be safely
            accomplished as long as a previous version of the type exists that
            relies on that data. Modifications to the structure or semantics of
            data from previous versions likewise cannot be safely accomplished
            as long as a previous version of the type exists that relies on the
            previous structure or semantics of the data.
            <p/>
            When an <b>IEvolvable</b> object is deserialized, it retains any unknown
            data that has been added to newer versions of the type, and the
            version identifier for that data format. When the <b>IEvolvable</b> object
            is subsequently serialized, it includes both that version identifier
            and the unknown future data.
            <p/>
            When an <b>IEvolvable</b> object is deserialized from a data stream whose
            version identifier indicates an older version, it must default and/or
            calculate the values for any data fields and properties that have
            been added since that older version. When the <b>IEvolvable</b> object is
            subsequently serialized, it includes its own version identifier and
            all of its data. Note that there will be no unknown future data in
            this case; future data can only exist when the version of the data
            stream is newer than the version of the <b>IEvolvable</b> type.
            </remarks>
            <author>Cameron Purdy, Jason Howes  2006.07.14</author>
            <author>Aleksandar Seovic  2006.08.12</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="P:Tangosol.IO.IEvolvable.ImplVersion">
            <summary>
            Determine the serialization version supported by the implementing
            type.
            </summary>
            <value>
            The serialization version supported by this object.
            </value>
        </member>
        <member name="P:Tangosol.IO.IEvolvable.DataVersion">
            <summary>
            Gets or sets the version associated with the data stream from
            which this object was deserialized.
            </summary>
            <remarks>
            If the object was constructed (not deserialized), the data
            version is the same as the implementation version.
            </remarks>
            <value>
            The version of the data used to initialize this object, greater
            than or equal to zero.
            </value>
            <exception cref="T:System.ArgumentException">
            If the specified version is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the object is not in a state in which the version can be set,
            for example outside of deserialization.
            </exception>
        </member>
        <member name="P:Tangosol.IO.IEvolvable.FutureData">
            <summary>
            Gets or sets all the unknown remainder of the data stream from
            which this object was deserialized.
            </summary>
            <remarks>
            The remainder is unknown because it is data that was originally
            written by a future version of this object's type.
            </remarks>
            <value>
            Future data in binary form.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If the object is not in a state in which the version can be set,
            for example outside of deserialization.
            </exception>
        </member>
        <member name="M:Tangosol.IO.SimpleEvolvable.#ctor(System.Int32)">
            <summary>
            Construct SimpleEvolvable instance.
            </summary>
            <param name="implVersion">Implementation version</param>
        </member>
        <member name="P:Tangosol.IO.SimpleEvolvable.ImplVersion">
            <summary>
            Implementation version.
            </summary>
        </member>
        <member name="P:Tangosol.IO.SimpleEvolvable.DataVersion">
            <summary>
            Data version.
            </summary>
        </member>
        <member name="P:Tangosol.IO.SimpleEvolvable.FutureData">
            <summary>
            Future data.
            </summary>
        </member>
        <member name="T:Tangosol.Net.AbstractInvocable">
            <summary>
            An abstract base for <see cref="T:Tangosol.Net.IInvocable"/> and 
            <see cref="T:Tangosol.Net.IPriorityTask"/> implementations.
            </summary>
            <author>Gene Gleyzer  2003.03.31, 2007.03.11</author>
            <author>Ivan Cikic  2007.05.18</author>
        </member>
        <member name="T:Tangosol.Net.IInvocable">
            <summary>
            An <b>IInvocable</b> object is a portable object that can be invoked on the
            remote cluster member to which the client is connected and can 
            optionally register a return value for the invocation.
            </summary>
            <remarks>
            When an IInvocable object is received for execution, the order of
            execution is:
            <list type="bullet">
            <item>
            The <b>IInvocable</b> object is deserialized by the
            <see cref="T:Tangosol.Net.IInvocationService"/>.
            </item>
            <item>
            The <b>IInvocationService</b> provides a reference to itself to the
            IInvocable object by calling the init method.
            </item>
            <item>
            The <b>IInvocationService</b> invokes the IInvocable object by calling
            the run method.
            </item>
            <item>
            If the <b>IInvocationService</b> is responsible for returning a value
            from the invocation, it obtains the value from the Result property.
            </item>
            </list>
            </remarks>
            <author>Cameron Purdy  2003.01.05</author>
            <author>Goran Milosavljevic  2006.09.01</author>
            <since>Coherence 2.1</since>
        </member>
        <member name="T:Tangosol.Net.Messaging.IRunnable">
            <summary>
            Defines method Run() that executes action specific to the object in
            which it is implemented.
            </summary>
            <author>Ana Cikic  2006.08.22</author>
        </member>
        <member name="M:Tangosol.Net.Messaging.IRunnable.Run">
            <summary>
            Execute the action specific to the object implementation.
            </summary>
        </member>
        <member name="M:Tangosol.Net.IInvocable.Init(Tangosol.Net.IInvocationService)">
            <summary>
            Called by the <see cref="T:Tangosol.Net.IInvocationService"/> exactly once on
            this IInvocable object as part of its initialization.
            </summary>
            <remarks>
            <b>Note:</b> implementations of the IInvocable interface that
            store the service reference must do so only in a transient field.
            </remarks>
            <param name="service">
            The containing <b>InvocationService</b>.
            </param>
        </member>
        <member name="P:Tangosol.Net.IInvocable.Result">
            <summary>
            The result from the invocation of this object.
            </summary>
            <remarks>
            This property value is read after the <see cref="M:Tangosol.Net.Messaging.IRunnable.Run"/>
            method returns.
            </remarks>
            <value>
            The object representing result from the invocation.
            </value>
        </member>
        <member name="T:Tangosol.Net.IPriorityTask">
            <summary>
            The IPriorityTask interface allows to control the ordering in which a
            service schedules tasks for execution using a thread pool and limit
            their execution times to a specified duration.
            </summary>
            <remarks>
            <p>
            Instances of IPriorityTask typically also implement either
            <see cref="T:Tangosol.Net.IInvocable"/> or <see cref="T:Tangosol.Net.Messaging.IRunnable"/> interface.</p>
            <p>
            Depending on the value of <see cref="P:Tangosol.Net.IPriorityTask.SchedulingPriority"/> property,
            the scheduling order will be one of the following:
            <list type="bullet">
            <item>
            <term><see cref="F:Tangosol.Net.PriorityTaskScheduling.Standard"/></term>
            <description>
            a task will be scheduled for execution in a natural (based on the
            request arrival time) order;
            </description>
            </item>
            <item>
            <term><see cref="F:Tangosol.Net.PriorityTaskScheduling.First"/></term>
            <description>
            a task will be scheduled in front of any equal or lower scheduling
            priority tasks and executed as soon as any of worker threads become
            available;
            </description>
            </item>
            <item>
            <term><see cref="F:Tangosol.Net.PriorityTaskScheduling.Immediate"/></term>
            <description>
            a task will be immediately executed by any idle worker thread; if all
            of them are active, a new thread will be created to execute this
            task.
            </description>
            </item>
            </list></p>
            <p>
            A best effort will be made to limit the task execution time according
            to the value of the <see cref="P:Tangosol.Net.IPriorityTask.ExecutionTimeoutMillis"/> property.
            However,it should be noted that:
            <list type="bullet">
            <item>
            <description>
            for tasks with the scheduling priority of
            <see cref="F:Tangosol.Net.PriorityTaskScheduling.Immediate"/>, factors that could
            make the execution time longer than the timeout value are long GC
            pauses and high network latency;
            </description>
            </item>
            <item>
            <description>
            if the service has a task backlog (when there are more tasks
            scheduled for execution than the number of available worker threads),
            the request execution time (measured from the client's perspective)
            for tasks with the scheduling priorities of
            <see cref="F:Tangosol.Net.PriorityTaskScheduling.Standard"/> or
            <see cref="F:Tangosol.Net.PriorityTaskScheduling.First"/> could be longer and
            include the time those tasks were kept in a queue before invocation;
            </description>
            </item>
            <item>
            <description>
            the corresponding service is free to cancel the task execution before
            the task is started and call the <see cref="M:Tangosol.Net.IPriorityTask.RunCanceled(System.Boolean)"/> method if
            it's known that the client is no longer interested in the results
            of the task execution.
            </description>
            </item>
            </list></p>
            <p>
            In addition to allowing control of the task execution (as scheduled
            and measured on the server side), the IPriorityTask interface could
            also be used to control the request time from the calling thread
            perspective (measured on the client). A best effort will be made to
            limit the request time (the time period that the calling thread is
            blocked waiting for a response from the corresponding service) to the
            value of the <see cref="P:Tangosol.Net.IPriorityTask.RequestTimeoutMillis"/> property.</p>
            <p>
            It should be noted that the request timeout value (RT) could be
            grater than, equal to or less than the task execution timeout value
            (ET). The value of RT which is less than ET indicates that even
            though the task execution is allowed to take longer period of time,
            the client thread will not wait for a result of the execution and
            will be able to handle a timeout exception if it arises. Since the
            time spent by the task waiting in the service backlog queue does not
            count toward the task execution time, a value of RT that is equal or
            slightly greater than ET still leaves a possibility that the client
            thread will throw a TimeoutException before the task completes its
            execution normally on a server.</p>
            </remarks>
            <author>Gene Gleyzer  2006.11.02</author>
            <author>Ana Cikic  2007.05.17</author>
            <since>Coherence 3.3</since>
        </member>
        <member name="M:Tangosol.Net.IPriorityTask.RunCanceled(System.Boolean)">
            <summary>
            This method will be called if and only if all attempts to
            interrupt this task were unsuccesful in stopping the execution or
            if the execution was canceled <b>before</b> it had a chance to
            run at all.
            </summary>
            <remarks>
            Since this method is usually called on a service thread,
            implementors must exercise extreme caution since any delay
            introduced by the implementation will cause a delay of the
            corresponding service.
            </remarks>
            <param name="isAbandoned">
            <b>true</b> if the task has timed-out, but all attempts to
            interrupt it were unsuccesful in stopping the execution;
            otherwise the task was never started.
            </param>
        </member>
        <member name="P:Tangosol.Net.IPriorityTask.SchedulingPriority">
            <summary>
            This task's scheduling priority.
            </summary>
            <value>
            One of the <see cref="T:Tangosol.Net.PriorityTaskScheduling"/> constants.
            </value>
        </member>
        <member name="P:Tangosol.Net.IPriorityTask.ExecutionTimeoutMillis">
            <summary>
            The maximum amount of time this task is allowed to run before the
            corresponding service will attempt to stop it.
            </summary>
            <remarks>
            <p>
            The value of <see cref="F:Tangosol.Net.PriorityTaskTimeout.Default"/> indicates
            a default timeout value configured for the corresponding service;
            the value of <see cref="F:Tangosol.Net.PriorityTaskTimeout.None"/> indicates
            that this task can execute indefinitely.</p>
            <p>
            If, by the time the specified amount of time passed, the task has
            not finished, the service will attempt to stop the execution by
            using the <b>Thread.Interrupt()</b> method. In the case that
            interrupting the thread does not result in the task's
            termination, the <see cref="M:Tangosol.Net.IPriorityTask.RunCanceled(System.Boolean)"/> method will be called.
            </p>
            </remarks>
            <value>
            The execution timeout value in millisecods or one of the special
            <see cref="T:Tangosol.Net.PriorityTaskTimeout"/> values.
            </value>
        </member>
        <member name="P:Tangosol.Net.IPriorityTask.RequestTimeoutMillis">
            <summary>
            The maximum amount of time a calling thread is willing to wait
            for a result of the request execution.
            </summary>
            <remarks>
            The request time is measured on the client side as the time
            elapsed from the moment a request is sent for execution to the
            corresponding server node(s) and includes:
            <list type="bullet">
            <item>
            <description>
            the time it takes to deliver the request to the executing
            node(s);
            </description>
            </item>
            <item>
            <description>
            the interval between the time the task is received and placed
            into a service queue until the execution starts;
            </description>
            </item>
            <item>
            <description>
            the task execution time;
            </description>
            </item>
            <item>
            <description>
            the time it takes to deliver a result back to the client.
            </description>
            </item>
            </list>
            <p>
            The value of <see cref="F:Tangosol.Net.PriorityTaskTimeout.Default"/> indicates
            a default timeout value configured for the corresponding service;
            the value of <see cref="F:Tangosol.Net.PriorityTaskTimeout.None"/> indicates
            that the client thread is willing to wait indefinitely until the
            task execution completes or is canceled by the service due to a
            task execution timeout specified by the
            <see cref="P:Tangosol.Net.IPriorityTask.ExecutionTimeoutMillis"/> value.</p>
            <p>
            If the specified amount of time elapsed and the client has not
            received any response from the server, a RequestTimeoutException
            will be thrown to the caller.</p>
            </remarks>
            <value>
            The request timeout value in milliseconds or one of the special
            <see cref="T:Tangosol.Net.PriorityTaskTimeout"/> values.
            </value>
        </member>
        <member name="M:Tangosol.Net.AbstractInvocable.Init(Tangosol.Net.IInvocationService)">
            <summary>
            Called by the <see cref="T:Tangosol.Net.IInvocationService"/> exactly once on
            this <see cref="T:Tangosol.Net.IInvocable"/> object as part of its 
            initialization.
            </summary>
            <remarks>
            <b>Note:</b> implementations of the <b>IInvocable</b> interface
            that store the service reference must do so only in a transient 
            field.
            </remarks>
            <param name="service">
            The containing <b>InvocationService</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.AbstractInvocable.RunCanceled(System.Boolean)">
            <summary>
            This method will be called if and only if all attempts to
            interrupt this task were unsuccesful in stopping the execution or
            if the execution was canceled <b>before</b> it had a chance to
            run at all.
            </summary>
            <remarks>
            <p>
            Since this method is usually called on a service thread,
            implementors must exercise extreme caution since any delay
            introduced by the implementation will cause a delay of the
            corresponding service.</p>
            <p>
            This implementation is a no-op.</p>
            </remarks>
            <param name="isAbandoned">
            <b>true</b> if the task has timed-out, but all attempts to
            interrupt it were unsuccesful in stopping the execution;
            otherwise the task was never started.
            </param>
        </member>
        <member name="M:Tangosol.Net.AbstractInvocable.Run">
            <summary>
            Execute the action specific to the object implementation.
            </summary>
        </member>
        <member name="M:Tangosol.Net.AbstractInvocable.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.AbstractInvocable.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Net.AbstractInvocable.m_service">
            <summary>
            The <see cref="T:Tangosol.Net.IInvocationService"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Net.AbstractInvocable.m_result">
            <summary>
            The result of invocation.
            </summary>
        </member>
        <member name="P:Tangosol.Net.AbstractInvocable.Service">
            <summary>
            Obtain the containing <see cref="T:Tangosol.Net.IInvocationService"/>.
            </summary>
            <value>
            The containing <b>IInvocationService</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.AbstractInvocable.Result">
            <summary>
            Gets or sets the result of the invocation of this object.
            </summary>
            <remarks>
            This property value is read after the <see cref="M:Tangosol.Net.Messaging.IRunnable.Run"/>
            method returns.
            </remarks>
            <value>
            The object representing result from the invocation.
            </value>
        </member>
        <member name="P:Tangosol.Net.AbstractInvocable.SchedulingPriority">
            <summary>
            This task's scheduling priority.
            </summary>
            <remarks>
            This implementation returns 
            <see cref="F:Tangosol.Net.PriorityTaskScheduling.Standard"/>.
            </remarks>
            <value>
            One of the <see cref="T:Tangosol.Net.PriorityTaskScheduling"/> constants.
            </value>
        </member>
        <member name="P:Tangosol.Net.AbstractInvocable.ExecutionTimeoutMillis">
            <summary>
            The maximum amount of time this task is allowed to run before the
            corresponding service will attempt to stop it.
            </summary>
            <remarks>
            <p>
            The value of <see cref="F:Tangosol.Net.PriorityTaskTimeout.Default"/> indicates
            a default timeout value configured for the corresponding service;
            the value of <see cref="F:Tangosol.Net.PriorityTaskTimeout.None"/> indicates
            that this task can execute indefinitely.</p>
            <p>
            If, by the time the specified amount of time passed, the task has
            not finished, the service will attempt to stop the execution by
            using the <b>Thread.Interrupt()</b> method. In the case that
            interrupting the thread does not result in the task's
            termination, the <see cref="M:Tangosol.Net.IPriorityTask.RunCanceled(System.Boolean)"/>
            method will be called.</p>
            <p>
            This implementation returns 
            <see cref="F:Tangosol.Net.PriorityTaskTimeout.Default"/></p>
            </remarks>
            <value>
            The execution timeout value in millisecods or one of the special
            <see cref="T:Tangosol.Net.PriorityTaskTimeout"/> values.
            </value>
        </member>
        <member name="P:Tangosol.Net.AbstractInvocable.RequestTimeoutMillis">
            <summary>
            The maximum amount of time a calling thread is willing to wait
            for a result of the request execution.
            </summary>
            <remarks>
            The request time is measured on the client side as the time
            elapsed from the moment a request is sent for execution to the
            corresponding server node(s) and includes:
            <list type="bullet">
            <item>
            <description>
            the time it takes to deliver the request to the executing
            node(s);
            </description>
            </item>
            <item>
            <description>
            the interval between the time the task is received and placed
            into a service queue until the execution starts;
            </description>
            </item>
            <item>
            <description>
            the task execution time;
            </description>
            </item>
            <item>
            <description>
            the time it takes to deliver a result back to the client.
            </description>
            </item>
            </list>
            <p>
            The value of <see cref="F:Tangosol.Net.PriorityTaskTimeout.Default"/> indicates
            a default timeout value configured for the corresponding service;
            the value of <see cref="F:Tangosol.Net.PriorityTaskTimeout.None"/> indicates
            that the client thread is willing to wait indefinitely until the
            task execution completes or is canceled by the service due to a
            task execution timeout specified by the
            <see cref="P:Tangosol.Net.IPriorityTask.ExecutionTimeoutMillis"/> value.</p>
            <p>
            If the specified amount of time elapsed and the client has not
            received any response from the server, a RequestTimeoutException
            will be thrown to the caller.</p>
            <p>
            This implementation returns 
            <see cref="F:Tangosol.Net.PriorityTaskTimeout.Default"/></p>
            </remarks>
            <value>
            The request timeout value in milliseconds or one of the special
            <see cref="T:Tangosol.Net.PriorityTaskTimeout"/> values.
            </value>
        </member>
        <member name="T:Tangosol.Net.AbstractPriorityTask">
            <summary>
            An abstract base for <see cref="T:Tangosol.Net.IPriorityTask"/> implementations.
            </summary>
            <remarks>
            It implements all <b>IPriorityTask</b> interface methods and is
            intended to be extended for concrete uses.
            </remarks>
            <author>Gene Gleyzer  2007.03.20</author>
            <since>Coherence 3.3</since>
        </member>
        <member name="M:Tangosol.Net.AbstractPriorityTask.RunCanceled(System.Boolean)">
            <summary>
            This method will be called if and only if all attempts to
            interrupt this task were unsuccesful in stopping the execution or
            if the execution was canceled <b>before</b> it had a chance to
            run at all.
            </summary>
            <remarks>
            Since this method is usually called on a service thread,
            implementors must exercise extreme caution since any delay
            introduced by the implementation will cause a delay of the
            corresponding service.
            </remarks>
            <param name="isAbandoned">
            <b>true</b> if the task has timed-out, but all attempts to
            interrupt it were unsuccesful in stopping the execution;
            otherwise the task was never started.
            </param>
        </member>
        <member name="M:Tangosol.Net.AbstractPriorityTask.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            The AbstractPriorityTask implementation reserves property indexes
            0 - 9.
            </remarks>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.AbstractPriorityTask.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            The AbstractPriorityTask implementation reserves property indexes
            0 - 9.
            </remarks>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="P:Tangosol.Net.AbstractPriorityTask.SchedulingPriority">
            <summary>
            This task's scheduling priority.
            </summary>
            <value>
            One of the <see cref="T:Tangosol.Net.PriorityTaskScheduling"/> constants.
            </value>
        </member>
        <member name="P:Tangosol.Net.AbstractPriorityTask.ExecutionTimeoutMillis">
            <summary>
            The maximum amount of time this task is allowed to run before the
            corresponding service will attempt to stop it.
            </summary>
            <remarks>
            <p>
            The value of <see cref="F:Tangosol.Net.PriorityTaskTimeout.Default"/> indicates
            a default timeout value configured for the corresponding service;
            the value of <see cref="F:Tangosol.Net.PriorityTaskTimeout.None"/> indicates
            that this task can execute indefinitely.</p>
            <p>
            If, by the time the specified amount of time passed, the task has
            not finished, the service will attempt to stop the execution by
            using the <b>Thread.Interrupt()</b> method. In the case that
            interrupting the thread does not result in the task's
            termination, the <see cref="M:Tangosol.Net.IPriorityTask.RunCanceled(System.Boolean)"/> method will be called.
            </p>
            </remarks>
            <value>
            The execution timeout value in millisecods or one of the special
            <see cref="T:Tangosol.Net.PriorityTaskTimeout"/> values.
            </value>
        </member>
        <member name="P:Tangosol.Net.AbstractPriorityTask.RequestTimeoutMillis">
            <summary>
            The maximum amount of time a calling thread is willing to wait
            for a result of the request execution.
            </summary>
            <remarks>
            The request time is measured on the client side as the time
            elapsed from the moment a request is sent for execution to the
            corresponding server node(s) and includes:
            <list type="bullet">
            <item>
            <description>
            the time it takes to deliver the request to the executing
            node(s);
            </description>
            </item>
            <item>
            <description>
            the interval between the time the task is received and placed
            into a service queue until the execution starts;
            </description>
            </item>
            <item>
            <description>
            the task execution time;
            </description>
            </item>
            <item>
            <description>
            the time it takes to deliver a result back to the client.
            </description>
            </item>
            </list>
            <p>
            The value of <see cref="F:Tangosol.Net.PriorityTaskTimeout.Default"/> indicates
            a default timeout value configured for the corresponding service;
            the value of <see cref="F:Tangosol.Net.PriorityTaskTimeout.None"/> indicates
            that the client thread is willing to wait indefinitely until the
            task execution completes or is canceled by the service due to a
            task execution timeout specified by the
            <see cref="P:Tangosol.Net.IPriorityTask.ExecutionTimeoutMillis"/> value.</p>
            <p>
            If the specified amount of time elapsed and the client has not
            received any response from the server, a RequestTimeoutException
            will be thrown to the caller.</p>
            </remarks>
            <value>
            The request timeout value in milliseconds or one of the special
            <see cref="T:Tangosol.Net.PriorityTaskTimeout"/> values.
            </value>
        </member>
        <member name="T:Tangosol.Config.CoherenceConfig">
            <summary>
            Value object containing information from the parsed Coherence for
            .NET configuration section (&lt;coherence>).
            </summary>
            <author>Aleksandar Seovic  2006.10.06</author>
        </member>
        <member name="P:Tangosol.Config.CoherenceConfig.OperationalConfig">
            <summary>
            The value of the <b>coherence-config</b> element within the
            Coherence for .NET configuration section.
            </summary>
            <value>
            The value of the <b>coherence-config</b> element within the
            Coherence for .NET configuration section.
            </value>
        </member>
        <member name="P:Tangosol.Config.CoherenceConfig.CacheConfig">
            <summary>
            The value of the <b>cache-config</b> element within the Coherence
            for .NET configuration section.
            </summary>
            <value>
            The value of the <b>cache-config</b> element within the Coherence
            for .NET configuration section.
            </value>
        </member>
        <member name="P:Tangosol.Config.CoherenceConfig.PofConfig">
            <summary>
            The value of the <b>pof-config</b> element within the Coherence
            for .NET configuration section.
            </summary>
            <value>
            The value of the <b>pof-config</b> element within the Coherence
            for .NET configuration section.
            </value>
        </member>
        <member name="P:Tangosol.Config.CoherenceConfig.ConfigProperties">
            <summary>
            A map of miscellaneous configuraion properties within
            the Coherence for .NET configuration section.
            </summary>
            <value>
            A map of name, value pair of configuration properties within the
            Coherence for .NET configuration section.
            </value>
        </member>
        <member name="T:Tangosol.Config.CoherenceConfigHandler">
            <summary>
            Configuration section handler for the Coherence for .NET
            configuration section (&lt;coherence&gt;).
            </summary>
            <seealso cref="T:Tangosol.Config.CoherenceConfig"/>
            <author>Aleksandar Seovic  2006.10.06</author>
            <author>Goran Milosavljevic  2008.10.06</author>
        </member>
        <member name="M:Tangosol.Config.CoherenceConfigHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a <see cref="T:Tangosol.Config.CoherenceConfig"/> with information parsed
            from the Coherence for .NET configuration section.
            </summary>
            <returns>
            The <b>CoherenceConfig</b> object with information from the
            configuration section.
            </returns>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
        </member>
        <member name="T:Tangosol.Config.XmlConfigSchemasRepository">
            <summary>
            Repository of parsed XML schemas that are used for Coherence for .NET
            configuration files validation.
            </summary>
            <author>Aleksandar Seovic  2006.10.13</author>
        </member>
        <member name="M:Tangosol.Config.XmlConfigSchemasRepository.#ctor">
            <summary>
            Creates a singleton instance of the XmlConfigSchemasRepository.
            </summary>
        </member>
        <member name="M:Tangosol.Config.XmlConfigSchemasRepository.RegisterSchema(System.String,System.String)">
            <summary>
            Parses specified schema file and associates it with a given
            namespace.
            </summary>
            <param name="namespaceUri">
            Namespace to associate schema with.
            </param>
            <param name="schemaLocation">
            Location of the physical schema file.
            </param>
        </member>
        <member name="P:Tangosol.Config.XmlConfigSchemasRepository.Schemas">
            <summary>
            Returns a schema collection containing validation schemas for all
            registered parsers.
            </summary>
            <value>
            A schema collection containing validation schemas for all
            registered parsers.
            </value>
        </member>
        <member name="T:Tangosol.IO.AbstractEvolvable">
            <summary>
            An abstract base class for implementing <see cref="T:Tangosol.IO.IEvolvable"/>
            objects.
            </summary>
            <author>Cameron Purdy  2006.07.20</author>
            <author>Jason Howes  2006.07.20</author>
            <author>Marc Falco  2006.07.20</author>
            <author>Ivan Cikic  2007.05.17</author>
        </member>
        <member name="F:Tangosol.IO.AbstractEvolvable.futureData">
            <summary>
            The "unknown future data" from the data stream that this object 
            was deserialized from.
            </summary>
        </member>
        <member name="F:Tangosol.IO.AbstractEvolvable.dataVersion">
            <summary>
            The version of the data stream that this object was deserialized 
            from.
            </summary>
        </member>
        <member name="P:Tangosol.IO.AbstractEvolvable.ImplVersion">
            <summary>
            Determine the serialization version supported by the implementing
            type.
            </summary>
            <value>
            The serialization version supported by this object.
            </value>
        </member>
        <member name="P:Tangosol.IO.AbstractEvolvable.DataVersion">
            <summary>
            Gets or sets the version associated with the data stream from
            which this object was deserialized.
            </summary>
            <remarks>
            If the object was constructed (not deserialized), the data
            version is the same as the implementation version.
            </remarks>
            <value>
            The version of the data used to initialize this object, greater
            than or equal to zero.
            </value>
            <exception cref="T:System.ArgumentException">
            If the specified version is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the object is not in a state in which the version can be set,
            for example outside of deserialization.
            </exception>
        </member>
        <member name="P:Tangosol.IO.AbstractEvolvable.FutureData">
            <summary>
            Gets or sets all the unknown remainder of the data stream from
            which this object was deserialized.
            </summary>
            <remarks>
            The remainder is unknown because it is data that was originally
            written by a future version of this object's type.
            </remarks>
            <value>
            Future data in binary form.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If the object is not in a state in which the version can be set,
            for example outside of deserialization.
            </exception>
        </member>
        <member name="T:Tangosol.IO.DataReader">
            <summary>
            <b>BinaryReader</b> extension that adds methods for reading 32 and
            64-bit integer values in a packed format.
            </summary>
            <remarks>
            <p>
            The "packed" format includes a sign bit (0x40) and a continuation
            bit (0x80) in the first byte, followed by the least 6 significant
            bits of the int value. Subsequent bytes (each appearing only if
            the previous byte had its continuation bit set) include a
            continuation bit (0x80) and the next least 7 significant bits of
            the int value.</p>
            <p>
            In this way, a 32-bit value is encoded into 1-5 bytes, and 64-bit
            value is encoded into 1-10 bytes, depending on the magnitude of the
            value being encoded.</p>
            </remarks>
            <seealso cref="T:Tangosol.IO.DataWriter"/>
            <author>Aleksandar Seovic  2006.08.09</author>
            <author>Ivan Cikic  2006.08.09</author>
        </member>
        <member name="M:Tangosol.IO.DataReader.#ctor(System.IO.Stream)">
            <summary>
            Construct a new <b>DataReader</b> that will read from a passed
            <b>Stream</b> object.
            </summary>
            <param name="input">
            The <b>Stream</b> object to write from; must not be <c>null</c>.
            </param>
        </member>
        <member name="M:Tangosol.IO.DataReader.ReadPackedInt32">
             <summary>
             Reads an <b>Int32</b> value using a variable-length storage
             format.
             </summary>
             <remarks>
             <p>
             The "packed" format includes a sign bit (0x40) and a continuation
             bit (0x80) in the first byte, followed by the least 6 significant
             bits of the int value. Subsequent bytes (each appearing only if
             the previous byte had its continuation bit set) include a
             continuation bit (0x80) and the next least 7 significant bits of
             the int value. In this way, a 32-bit value is encoded into 1-5
             bytes, depending on the magnitude of the value being encoded.</p>
             </remarks>
            <returns>
             An <b>Int32</b> value.
             </returns>
             <exception cref="T:System.IO.IOException">
             If an I/O error occurs.
             </exception>
        </member>
        <member name="M:Tangosol.IO.DataReader.ReadPackedInt64">
            <summary>
            Reads an <b>Int64</b> value using a variable-length storage
            format.
            </summary>
            <remarks>
            <p>
            The "packed" format includes a sign bit (0x40) and a continuation
            bit (0x80) in the first byte, followed by the least 6 significant
            bits of the int value. Subsequent bytes (each appearing only if
            the previous byte had its continuation bit set) include a
            continuation bit (0x80) and the next least 7 significant bits of
            the int value. In this way, a 64-bit value is encoded into 1-10
            bytes, depending on the magnitude of the value being encoded.</p>
            </remarks>
            <returns>
            An <b>Int64</b> value.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.DataReader.ReadPackedRawInt128(Tangosol.IO.DataReader)">
            <summary>
            Reads a <b>RawInt128</b> value from <b>DataReader</b>.
            </summary>
            <param name="reader">
            The <b>DataReader</b> to read from.
            </param>
            <returns>
            <b>RawInt128</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.DataReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream and
            advances the current position of the stream by two bytes.
            </summary>
            <remarks>
            Overrides BinaryReader.ReadInt16 by changing endian of the value
            read from the stream.
            </remarks>
            <returns>
            A 2-byte signed integer read from the current stream.
            </returns>
        </member>
        <member name="M:Tangosol.IO.DataReader.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current stream using
            little endian encoding and advances the position of the stream by
            two bytes.
            </summary>
            <remarks>
            Overrides BinaryReader.ReadUInt16 by changing endian of the value
            read from the stream.
            </remarks>
            <returns>
            A 2-byte unsigned integer read from this stream.
            </returns>
        </member>
        <member name="M:Tangosol.IO.DataReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream and
            advances the current position of the stream by four bytes.
            </summary>
            <remarks>
            Overrides BinaryReader.ReadInt32 by changing endian of the value
            read from the stream.
            </remarks>
            <returns>
            A 4-byte signed integer read from the current stream.
            </returns>
        </member>
        <member name="M:Tangosol.IO.DataReader.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current stream and
            advances the position of the stream by four bytes.
            </summary>
            <remarks>
            Overrides BinaryReader.ReadUInt32 by changing endian of the value
            read from the stream.
            </remarks>
            <returns>
            A 4-byte unsigned integer read from this stream.
            </returns>
        </member>
        <member name="M:Tangosol.IO.DataReader.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream and
            advances the current position of the stream by eight bytes.
            </summary>
            <remarks>
            Overrides BinaryReader.ReadInt64 by changing endian of the value
            read from the stream.
            </remarks>
            <returns>
            An 8-byte signed integer read from the current stream.
            </returns>
        </member>
        <member name="M:Tangosol.IO.DataReader.ReadUInt64">
            <summary>
            Reads an 8-byte unsigned integer from the current stream and
            advances the position of the stream by eight bytes.
            </summary>
            <remarks>
            Overrides BinaryReader.ReadUInt64 by changing endian of the value
            read from the stream.
            </remarks>
            <returns>
            An 8-byte unsigned integer read from this stream.
            </returns>
        </member>
        <member name="M:Tangosol.IO.DataReader.ReadSingle">
            <summary>
            Reads bits which are stored in an <b>Int32</b> instance and
            converts them into the <b>Single</b> object.
            </summary>
            <returns>
            A Single value read from the stream.
            </returns>
        </member>
        <member name="M:Tangosol.IO.DataReader.ReadDouble">
            <summary>
            Reads bits which are stored in an <b>Int64</b> instance and
            converts them into the <b>Double</b> object.
            </summary>
            <returns>
            A Double value read from the stream.
            </returns>
        </member>
        <member name="M:Tangosol.IO.DataReader.ReadString">
            <summary>
            Reads string from the stream.
            </summary>
            <remarks>
            String is prefixed with the string length encoded as "packed"
            Int32.
            </remarks>
            <returns>
            A String value read from the stream.
            </returns>
        </member>
        <member name="T:Tangosol.IO.DataWriter">
            <summary>
            <b>BinaryWriter</b> extension that adds methods for writing 32 and
            64-bit integer values in a packed format.
            </summary>
            <remarks>
            <p>
            The "packed" format includes a sign bit (0x40) and a continuation
            bit (0x80) in the first byte, followed by the least 6 significant
            bits of the int value. Subsequent bytes (each appearing only if
            the previous byte had its continuation bit set) include a
            continuation bit (0x80) and the next least 7 significant bits of
            the int value.</p>
            <p>
            In this way, a 32-bit value is encoded into 1-5 bytes, and 64-bit
            value is encoded into 1-10 bytes, depending on the magnitude of the
            value being encoded.</p>
            </remarks>
            <seealso cref="T:Tangosol.IO.DataReader"/>
            <author>Goran Milosavljevic  2006.08.09</author>
        </member>
        <member name="M:Tangosol.IO.DataWriter.#ctor(System.IO.Stream)">
            <summary>
            Construct a new <b>DataWriter</b> that will write data to the
            specified <b>Stream</b> object.
            </summary>
            <param name="output">
            The <b>Stream</b> object to write to; must not be <c>null</c>.
            </param>
        </member>
        <member name="M:Tangosol.IO.DataWriter.WritePackedInt32(System.Int32)">
            <summary>
            Write an <b>Int32</b> value using a variable-length storage
            format.
            </summary>
            <remarks>
            <p>
            The "packed" format includes a sign bit (0x40) and a continuation
            bit (0x80) in the first byte, followed by the least 6 significant
            bits of the int value. Subsequent bytes (each appearing only if
            the previous byte had its continuation bit set) include a
            continuation bit (0x80) and the next least 7 significant bits of
            the int value. In this way, a 32-bit value is encoded into 1-5
            bytes, depending on the magnitude of the value being encoded.</p>
            </remarks>
            <param name="n">
            An <b>Int32</b> value to write.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.DataWriter.WritePackedInt64(System.Int64)">
            <summary>
            Write an <b>Int64</b> value using a variable-length storage
            format.
            </summary>
            <remarks>
            <p>
            The "packed" format includes a sign bit (0x40) and a continuation
            bit (0x80) in the first byte, followed by the least 6 significant
            bits of the long value. Subsequent bytes (each appearing only if
            the previous byte had its continuation bit set) include a
            continuation bit (0x80) and the next least 7 significant bits of
            the long value. In this way, a 64-bit value is encoded into 1-10
            bytes, depending on the magnitude of the value being encoded.</p>
            </remarks>
            <param name="l">
            An <b>Int64</b> value to write.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.DataWriter.WritePackedRawInt128(Tangosol.IO.DataWriter,Tangosol.IO.Pof.RawInt128)">
            <summary>
            Write a <b>RawInt128</b> value to <b>DataWriter</b>.
            </summary>
            <remarks>
            <b>RawInt128</b> value, which is represented as array of
            signed bytes.
            </remarks>
            <param name="writer">
            The DataWriter to write to.
            </param>
            <param name="rawInt128">
            <b>RawInt128</b> value.
            </param>
        </member>
        <member name="M:Tangosol.IO.DataWriter.Write(System.Int16)">
            <summary>
            Writes a two-byte signed integer to the current stream and
            advances the stream position by two bytes.
            </summary>
            <remarks>
            Overrides BinaryWriter.Write(Int16) by changing endian of the
            value written to the stream.
            </remarks>
            <param name="value">
            The two-byte signed integer to write.
            </param>
        </member>
        <member name="M:Tangosol.IO.DataWriter.Write(System.UInt16)">
            <summary>
            Writes a two-byte unsigned integer to the current stream and
            advances the stream position by two bytes.
            </summary>
            <remarks>
            Overrides BinaryWriter.Write(UInt16) by changing endian of the
            value written to the stream.
            </remarks>
            <param name="value">
            The two-byte unsigned integer to write.
            </param>
        </member>
        <member name="M:Tangosol.IO.DataWriter.Write(System.Int32)">
            <summary>
            Writes a four-byte signed integer to the current stream and
            advances the stream position by four bytes.
            </summary>
            <remarks>
            Overrides BinaryWriter.Write(Int32) by changing endian of the
            value written to the stream.
            </remarks>
            <param name="value">
            The four-byte signed integer to write.
            </param>
        </member>
        <member name="M:Tangosol.IO.DataWriter.Write(System.UInt32)">
            <summary>
            Writes a four-byte unsigned integer to the current stream and
            advances the stream position by four bytes.
            </summary>
            <remarks>
            Overrides BinaryWriter.Write(UInt32) by changing endian of the
            value written to the stream.
            </remarks>
            <param name="value">
            The four-byte unsigned integer to write.
            </param>
        </member>
        <member name="M:Tangosol.IO.DataWriter.Write(System.Int64)">
            <summary>
            Writes a eight-byte signed integer to the current stream and
            advances the stream position by eight bytes.
            </summary>
            <remarks>
            Overrides BinaryWriter.Write(Int64) by changing endian of the
            value written to the stream.
            </remarks>
            <param name="value">
            The eight-byte signed integer to write.
            </param>
        </member>
        <member name="M:Tangosol.IO.DataWriter.Write(System.UInt64)">
            <summary>
            Writes a eight-byte unsigned integer to the current stream and
            advances the stream position by eight bytes.
            </summary>
            <remarks>
            Overrides BinaryWriter.Write(UInt64) by changing endian of the
            value written to the stream.
            </remarks>
            <param name="value">
            The eight-byte unsigned integer to write.
            </param>
        </member>
        <member name="M:Tangosol.IO.DataWriter.Write(System.Single)">
            <summary>
            Converts a Single value to its bits and writes an Int32 instance
            which stores the bits.
            </summary>
            <param name="value">
            A Single value to write.
            </param>
        </member>
        <member name="M:Tangosol.IO.DataWriter.Write(System.Double)">
            <summary>
            Converts a Double value to its bits and writes an Int64 instance
            which stores the bits.
            </summary>
            <param name="value">
            A Double value to write.
            </param>
        </member>
        <member name="M:Tangosol.IO.DataWriter.Write(System.String)">
            <summary>
            Writes string to the stream prefixed by its length in "packed"
            format.
            </summary>
            <param name="text">
            A string to write.
            </param>
        </member>
        <member name="T:Tangosol.IO.IWrapperStreamFactory">
            <summary>
            Provides the means to wrap a <b>Stream</b>, such that functionality
            such as compression and encryption can be implemented in a layered,
            pluggable fashion.
            </summary>
            <author>Cameron Purdy  2002.08.19</author>
            <author>Ivan Cikic  2007.05.03</author>
        </member>
        <member name="M:Tangosol.IO.IWrapperStreamFactory.GetInputStream(System.IO.Stream)">
            <summary>
            Requests an input <b>Stream</b> that wraps the passed
            <b>Stream</b>.
            </summary>
            <param name="stream">
            The <b>Stream</b> to be wrapped.
            </param>
            <returns>
            A <b>Stream</b> that delegates to ("wraps") the passed
            <b>Stream</b>.
            </returns>
        </member>
        <member name="M:Tangosol.IO.IWrapperStreamFactory.GetOutputStream(System.IO.Stream)">
            <summary>
            Requests an output <b>Stream</b> that wraps the passed
            <b>Stream</b>.
            </summary>
            <param name="stream">
            The <b>Stream</b> to be wrapped.
            </param>
            <returns>
            A <b>Stream</b> that delegates to ("wraps") the passed
            <b>Stream</b>.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.IEvolvablePortableObject">
            <summary>
            Extension of the <see cref="T:Tangosol.IO.Pof.IPortableObject"/> interface that
            supports forwards- and backwards-compatibility of POF data streams.
            </summary>
            <author>Cameron Purdy, Jason Howes  2006.07.14</author>
            <author>Aleksandar Seovic  2006.08.12</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="T:Tangosol.IO.Pof.IPofHandler">
            <summary>
            This interface defines the handler for an event-driven approach to
            parsing (or assembling) a POF stream.
            </summary>
            <author>Cameron Purdy  2006.07.10</author>
            <author>Aleksandar Seovic  2006.08.08</author>
            <author>Ivan Cikic  2006.08.08</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.RegisterIdentity(System.Int32)">
            <summary>
            This method is invoked when an identity is encountered in the POF
            stream.
            </summary>
            <remarks>
            The identity is used to uniquely identify the next value in the
            POF stream, and can be later referenced by the
            <see cref="M:Tangosol.IO.Pof.IPofHandler.OnIdentityReference(System.Int32,System.Int32)"/> method.
            </remarks>
            <param name="id">
            If <b>(id &gt;= 0)</b>, then this is the identity encountered in the
            POF stream, otherwise it is an indicator that the following value
            <i>could</i> have been assigned an identifier but was not (i.e.
            that the subsequent value is of a referenceable data type).
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnNullReference(System.Int32)">
            <summary>
            Specifies that a <c>null</c> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnIdentityReference(System.Int32,System.Int32)">
            <summary>
            Specifies that a reference to a previously-identified value has
            been encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="id">
            The identity of the previously encountered value, as was
            specified in a previous call to <see cref="M:Tangosol.IO.Pof.IPofHandler.RegisterIdentity(System.Int32)"/>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnInt16(System.Int32,System.Int16)">
            <summary>
            Report that an <b>Int16</b> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="n">
            The integer value as an <b>Int16</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnInt32(System.Int32,System.Int32)">
            <summary>
            Report that an <b>Int32</b> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="n">
            The integer value as an <b>Int32</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnInt64(System.Int32,System.Int64)">
            <summary>
            Report that an <b>Int64</b> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="n">
            The integer value as an <b>Int64</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnInt128(System.Int32,Tangosol.IO.Pof.RawInt128)">
            <summary>
            Report that an <b>Int128</b> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="n">
            The integer value as an <b>Int128</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnFloat32(System.Int32,System.Single)">
            <summary>
            Report that a base-2 single-precision floating point value has
            been encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="fl">
            The floating point value as a <b>Single</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnFloat64(System.Int32,System.Double)">
            <summary>
            Report that a base-2 double-precision floating point value has
            been encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="dfl">
            The floating point value as a <b>Double</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnDecimal32(System.Int32,System.Decimal)">
            <summary>
            Report that a <b>Decimal</b> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="dec">
            The decimal value as a <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnDecimal64(System.Int32,System.Decimal)">
            <summary>
            Report that a <b>Decimal</b> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="dec">
            The decimal value as a <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnDecimal128(System.Int32,System.Decimal)">
            <summary>
            Report that a <b>Decimal</b> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="dec">
            The decimal value as a <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnBoolean(System.Int32,System.Boolean)">
            <summary>
            Report that a boolean value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="f">
            The boolean value.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnOctet(System.Int32,System.Int32)">
            <summary>
            Report that an octet value (a byte) has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="b">
            The octet value as an int whose value is in the range 0 to 255
            (0x00-0xFF) inclusive.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnOctetString(System.Int32,Tangosol.Util.Binary)">
            <summary>
            Report that a octet string value has been encountered in the POF
            stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="bin">
            The octect string value as a <b>Binary</b> object.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnChar(System.Int32,System.Char)">
            <summary>
            Report that a character value has been encountered in the POF
            stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="ch">
            The character value as a <b>Char</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnCharString(System.Int32,System.String)">
            <summary>
            Report that a character string value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="s">
            The character string value as a <b>String</b> object.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnDate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a date value has been encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="year">
            The year number as defined by ISO8601.
            </param>
            <param name="month">
            The month number between 1 and 12 inclusive as defined by
            ISO8601.
            </param>
            <param name="day">
            The day number between 1 and 31 inclusive as defined by ISO8601.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnYearMonthInterval(System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a year-month interval value has been encountered in
            the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="years">
            The number of years in the year-month interval.
            </param>
            <param name="months">
            The number of months in the year-month interval.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Report that a time value has been encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="hour">
            The hour between 0 and 23 inclusive.
            </param>
            <param name="minute">
            The minute value between 0 and 59 inclusive.
            </param>
            <param name="second">
            The second value between 0 and 59 inclusive (and theoretically 60
            for a leap-second).
            </param>
            <param name="nanosecond">
            The nanosecond value between 0 and 999999999 inclusive.
            </param>
            <param name="isUTC">
            <b>true</b> if the time value is UTC or <b>false</b> if the time
            value does not have an explicit time zone.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Report that a time value (with a timezone offset) has been
            encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="hour">
            The hour between 0 and 23 inclusive.
            </param>
            <param name="minute">
            The minute value between 0 and 59 inclusive.
            </param>
            <param name="second">
            The second value between 0 and 59 inclusive (and theoretically 60
            for a leap-second).
            </param>
            <param name="nano">
            The nanosecond value between 0 and 999999999 inclusive.
            </param>
            <param name="zoneOffset">
            The timezone offset from UTC, for example 0 for BST, -5 for EST
            and +1 for CET.
            </param>
            <seealso href="http://www.worldtimezone.com/faq.html">
            worldtimezone.com
            </seealso>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnTimeInterval(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a time interval value has been encountered in the POF
            stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="hours">
            The number of hours in the time interval.
            </param>
            <param name="minutes">
            The number of minutes in the time interval, from 0 to 59
            inclusive.
            </param>
            <param name="seconds">
            The number of seconds in the time interval, from 0 to 59
            inclusive.
            </param>
            <param name="nanos">
            The number of nanoseconds, from 0 to 999999999 inclusive.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Report that a date-time value has been encountered in the POF
            stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="year">
            The year number as defined by ISO8601; note the difference with
            the Java Date class, whose year is relative to 1900.
            </param>
            <param name="month">
            The month number between 1 and 12 inclusive as defined by ISO8601;
            note the difference from the Java Date class, whose month value
            is 0-based (0-11).
            </param>
            <param name="day">
            The day number between 1 and 31 inclusive as defined by ISO8601.
            </param>
            <param name="hour">
            The hour between 0 and 23 inclusive.
            </param>
            <param name="minute">
            The minute value between 0 and 59 inclusive.
            </param>
            <param name="second">
            The second value between 0 and 59 inclusive (and theoretically 60
            for a leap-second).
            </param>
            <param name="nano">
            The nanosecond value between 0 and 999999999 inclusive.
            </param>
            <param name="isUTC">
            <b>true</b> if the time value is UTC or <b>false</b> if the time
            value does not have an explicit time zone.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Report that a date-time value (with a timezone offset) has been
            encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="year">
            The year number as defined by ISO8601; note the difference with
            the Java Date class, whose year is relative to 1900.
            </param>
            <param name="month">
            The month number between 1 and 12 inclusive as defined by
            ISO8601; note the difference from the Java Date class, whose
            month value is 0-based (0-11).</param>
            <param name="day">
            The day number between 1 and 31 inclusive as defined by ISO8601.
            </param>
            <param name="hour">
            The hour between 0 and 23 inclusive.
            </param>
            <param name="minute">
            The minute value between 0 and 59 inclusive.
            </param>
            <param name="second">
            The second value between 0 and 59 inclusive (and theoretically 60
            for a leap-second).
            </param>
            <param name="nano">
            The nanosecond value between 0 and 999999999 inclusive.
            </param>
            <param name="zoneOffset">
            The timezone offset from UTC, for example 0 for BST, -5 for EST
            and +1 for CET.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.OnDayTimeInterval(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a day-time interval value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="days">
            The number of days in the day-time interval.
            </param>
            <param name="hours">
            The number of hours in the day-time interval, from 0 to 23
            inclusive.
            </param>
            <param name="minutes">
            The number of minutes in the day-time interval, from 0 to 59
            inclusive.
            </param>
            <param name="seconds">
            The number of seconds in the day-time interval, from 0 to 59
            inclusive.
            </param>
            <param name="nanos">
            The number of nanoseconds in the day-time interval, from 0 to
            999999999 inclusive.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.BeginCollection(System.Int32,System.Int32)">
            <summary>
            Report that a collection of values has been encountered in the
            POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>elementCount</tt> elements
            in the collection, and the collection extent will then be
            terminated by a call to <see cref="M:Tangosol.IO.Pof.IPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="elementCount">
            The exact number of values (elements) in the collection.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.BeginUniformCollection(System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a uniform collection of values has been encountered
            in the POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>elementCount</tt> elements
            in the collection, and the collection extent will then be
            terminated by a call to <see cref="M:Tangosol.IO.Pof.IPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="elementCount">
            The exact number of values (elements) in the collection.
            </param>
            <param name="typeId">
            The type identifier for all of the values in the uniform
            collection.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.BeginArray(System.Int32,System.Int32)">
            <summary>
            Report that an array of values has been encountered in the POF
            stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>elementCount</tt> elements
            in the array, and the array extent will then be terminated by a
            call to <see cref="M:Tangosol.IO.Pof.IPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="elementCount">
            The exact number of values (elements) in the array.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.BeginUniformArray(System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a uniform array of values has been encountered in the
            POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>cElements</tt> elements in
            the array, and the array extent will then be terminated by a call
            to <see cref="M:Tangosol.IO.Pof.IPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="elementCount">
            The exact number of values (elements) in the array.
            </param>
            <param name="typeId">
            The type identifier for all of the values in the uniform array.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.BeginSparseArray(System.Int32,System.Int32)">
            <summary>
            Report that a sparse array of values has been encountered in the
            POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for present element in the sparse array (up to
            <tt>elementCount</tt> elements), and the array extent will then
            be terminated by a call to <see cref="M:Tangosol.IO.Pof.IPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="elementCount">
            The exact number of elements in the array, which is greater than
            or equal to the number of values in the sparse POF stream; in
            other words, the number of values that will subsequently be
            reported will not exceed this number.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.BeginUniformSparseArray(System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a uniform sparse array of values has been encountered
            in the POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for present element in the sparse array (up to
            <tt>elementCount</tt> elements), and the array extent will then
            be terminated by a call to <see cref="M:Tangosol.IO.Pof.IPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="elementCount">
            The exact number of elements in the array, which is greater than
            or equal to the number of values in the sparse POF stream; in
            other words, the number of  values that will subsequently be
            reported will not exceed this number.
            </param>
            <param name="typeId">
            The type identifier for all of the values in the uniform sparse
            array.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.BeginMap(System.Int32,System.Int32)">
            <summary>
            Report that a map of key/value pairs has been encountered in the
            POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>elementCount</tt> elements
            in the map, and the map extent will then be terminated by a call
            to <see cref="M:Tangosol.IO.Pof.IPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="elementCount">
            The exact number of key/value pairs (entries) in the map.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.BeginUniformKeysMap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a map of key/value pairs (with the keys being of a
            uniform type) has been encountered in the POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>elementCount</tt> elements
            in the map, and the map extent will then be terminated by a call
            to <see cref="M:Tangosol.IO.Pof.IPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="elementCount">
            The exact number of key/value pairs (entries) in the map.
            </param>
            <param name="typeIdKeys">
            The type identifier for all of the keys in the uniform-keys map.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.BeginUniformMap(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a map of key/value pairs (with the keys being of a
            uniform type and the values being of a uniform type) has been
            encountered in the POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>elementCount</tt> elements
            in the map, and the map extent will then be terminated by a call
            to <see cref="M:Tangosol.IO.Pof.IPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="elementCount">
            The exact number of key/value pairs (entries) in the map.
            </param>
            <param name="typeIdKeys">
            The type identifier for all of the keys in the uniform map.
            </param>
            <param name="typeIdValues">
            The type identifier for all of the values in the uniform map.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.BeginUserType(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a value of a "user type" has been encountered in the
            POF stream. A user type is analogous to a "type", and a value of
            a user type is analogous to an "object".
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the property values in the user
            type, and the user type will then be terminated by a call to
            <see cref="M:Tangosol.IO.Pof.IPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="nId">
            Identity of the object to encode, or -1 if identity
            shouldn't be encoded in the POF stream.
            </param>
            <param name="typeId">
            The user type identifier, <tt>(typeId &gt;= 0)</tt>.
            </param>
            <param name="versionId">
            The version identifier for the user data type data in the POF
            stream, <tt>(versionId &gt;= 0)</tt>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofHandler.EndComplexValue">
            <summary>
            Signifies the termination of the current complex value.
            </summary>
            <remarks>
            Complex values are any of the collection, array, map and user
            types. For each call to one of the "begin" methods, there will be
            a corresponding call to this method, even if there were no
            contents in the complex value.
            </remarks>
        </member>
        <member name="T:Tangosol.IO.Pof.IPofWriter">
            <summary>
            The <b>IPofWriter</b> interface provides the capability of writing a set of
            non-primitive .NET types ("user types") to a POF stream as an ordered
            sequence of indexed properties.
            </summary>
            <remarks>
            <p>
            The serialized format of a POF user type is as follows:
            <list type="bullet">
            <item><description>Type Identifier</description></item>
            <item><description>Version Identifier</description></item>
            <item><description>[Property Index, Property Value]*</description></item>
            <item><description>-1</description></item>
            </list></p>
            <p>
            The type identifier is an integer value greater than or equal to zero
            that identifies the non-primitive .NET type. The type identifier has
            no explicit or self-describing meaning within the POF stream itself;
            in other words, the type identifier does not contain the actual class
            definition. Instead, the <b>IPofWriter</b> and corresponding
            <see cref="T:Tangosol.IO.Pof.IPofReader"/> share an <see cref="T:Tangosol.IO.Pof.IPofContext"/> which
            contains the necessary meta-data, including type identifier to .NET
            type mappings.</p>
            <p>
            The version identifier is used to support both backwards and forwards
            compatibility of serialized POF user types. Versioning of user types
            allows the addition of new properties to a user type, but not the
            replacement or removal of properties that existed in a previous
            version of the user type.</p>
            <p>
            When a version <i>v1</i> of a user type written by a
            <b>IPofWriter</b> is read by an <b>IPofReader</b> that supports
            version <i>v2</i> of the same user type, the <b>IPofReader</b>
            returns default values for the additional properties of the User Type
            that exist in <i>v2</i> but do not exist in <i>v1</i>. Conversely,
            when a version <i>v2</i> of a user type written by a
            <b>IPofWriter</b> is read by an <b>IPofReader</b> that supports
            version <i>v1</i> of the same user type, the instance of user type
            <i>v1</i> must store those additional opaque properties for later
            encoding. The <b>IPofReader</b> enables the user type to store off
            the opaque properties in binary form (see
            <see cref="M:Tangosol.IO.Pof.IPofReader.ReadRemainder"/>).</p>
            <p>
            When the user type is re-encoded, it must be done so using the
            version identifier <i>v2</i>, since it is including the unaltered
            <i>v2</i> properties. The opaque properties are subsequently
            included in the POF stream using the <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteRemainder(Tangosol.Util.Binary)"/>
            method.</p>
            <p>
            Following the version identifier is an ordered sequence of
            index/value pairs, each of which is composed of a property index
            encoded as non-negative integer value whose value is greater than the
            previous property index, and a property value encoded as a POF value.
            The user type is finally terminated with an illegal property index
            of -1.</p>
            <p>
            Note: To read a property that was written using a <b>IPofWriter</b>
            method, the corresponding read method on <see cref="T:Tangosol.IO.Pof.IPofReader"/>
            must be used. For example, if a property was written using
            <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteByteArray(System.Int32,System.Byte[])"/>, <see cref="M:Tangosol.IO.Pof.IPofReader.ReadByteArray(System.Int32)"/>
            must be used to read the property.</p>
            </remarks>
            <author>Cameron Purdy, Jason Howes  2006.07.13</author>
            <author>Aleksandar Seovic  2006.08.08</author>
            <seealso cref="T:Tangosol.IO.Pof.IPofContext"/>
            <seealso cref="T:Tangosol.IO.Pof.IPofReader"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteBoolean(System.Int32,System.Boolean)">
            <summary>
            Write a <b>Boolean</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Boolean</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteByte(System.Int32,System.Byte)">
            <summary>
            Write a <b>Byte</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Byte</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteChar(System.Int32,System.Char)">
            <summary>
            Write a <b>Char</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Char</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteInt16(System.Int32,System.Int16)">
            <summary>
            Write an <b>Int16</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Int16</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteInt32(System.Int32,System.Int32)">
            <summary>
            Write an <b>Int32</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Int32</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteInt64(System.Int32,System.Int64)">
            <summary>
            Write an <b>Int64</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Int64</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteRawInt128(System.Int32,Tangosol.IO.Pof.RawInt128)">
            <summary>
            Write an <b>RawInt128</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>RawInt128</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteSingle(System.Int32,System.Single)">
            <summary>
            Write a <b>Single</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Single</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteDouble(System.Int32,System.Double)">
            <summary>
            Write a <b>Double</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Double</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteBooleanArray(System.Int32,System.Boolean[])">
            <summary>
            Write a <b>Boolean[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Boolean[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteByteArray(System.Int32,System.Byte[])">
            <summary>
            Write a <b>Byte[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Byte[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteCharArray(System.Int32,System.Char[])">
            <summary>
            Write a <b>Char[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Char[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteInt16Array(System.Int32,System.Int16[])">
            <summary>
            Write an <b>Int16[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Int16[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteInt32Array(System.Int32,System.Int32[])">
            <summary>
            Write an <b>Int32[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Int32[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteInt64Array(System.Int32,System.Int64[])">
            <summary>
            Write an <b>Int64[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Int64[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteSingleArray(System.Int32,System.Single[])">
            <summary>
            Write a <b>Single[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Single[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteDoubleArray(System.Int32,System.Double[])">
            <summary>
            Write a <b>Double[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Double[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteDecimal(System.Int32,System.Decimal)">
            <summary>
            Write a <b>Decimal</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Decimal</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property index is invalid, or is less than or equal to the
            index of the previous property written to the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteString(System.Int32,System.String)">
            <summary>
            Write a <b>String</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>String</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteDate(System.Int32,System.DateTime)">
            <summary>
            Write a <b>DateTime</b> property to the POF stream in ISO8601
            format.
            </summary>
            <remarks>
            This method encodes only year, month and day information of the
            specified <b>DateTime</b> object. No time information is encoded.
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteDateTime(System.Int32,System.DateTime)">
            <summary>
            Write a <b>DateTime</b> property to the POF stream in ISO8601
            format.
            </summary>
            <remarks>
            This method encodes the year, month, day, hour, minute, second
            and millisecond information of the specified <b>DateTime</b>
            object. No timezone information is encoded.
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteLocalDateTime(System.Int32,System.DateTime)">
            <summary>
            Write a <b>DateTime</b> property to the POF stream in ISO8601
            format.
            </summary>
            <remarks>
            <p>
            This method encodes the year, month, day, hour, minute, second,
            millisecond and timezone information of the specified
            <b>DateTime</b> object.</p>
            <p>
            Specified <paramref name="value"/> is converted to the local time
            before it is written to the POF stream.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index
            of the previous property written to the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteUniversalDateTime(System.Int32,System.DateTime)">
            <summary>
            Write a <b>DateTime</b> property to the POF stream in ISO8601
            format.
            </summary>
            <remarks>
            <p>
            This method encodes the year, month, day, hour, minute, second,
            millisecond and timezone information of the specified
            <b>DateTime</b> object.</p>
            <p>
            Specified <paramref name="value"/> is converted to UTC time
            before it is written to the POF stream.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteRawTime(System.Int32,Tangosol.IO.Pof.RawTime)">
            <summary>
            Write a <b>RawTime</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>RawTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteRawDateTime(System.Int32,Tangosol.IO.Pof.RawDateTime)">
            <summary>
            Write a <b>RawDateTime</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>RawDateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property index is invalid, or is less than or equal to the
            index of the previous property written to the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteTime(System.Int32,System.DateTime)">
            <summary>
            Write a <b>DateTime</b> property to the POF stream in
            ISO8601 format.
            </summary>
            <remarks>
            This method encodes the hour, minute, second and millisecond
            information of the specified <b>DateTime</b> object. No year,
            month, day or timezone information is encoded.
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteLocalTime(System.Int32,System.DateTime)">
            <summary>
            Write a <b>DateTime</b> property to the POF stream in
            ISO8601 format.
            </summary>
            <remarks>
            <p>
            This method encodes the hour, minute, second, millisecond and
            timezone information of the specified <b>DateTime</b> object. No
            year, month or day information is encoded.</p>
            <p>
            Specified <paramref name="value"/> is converted to the local
            time before it is written to the POF stream.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteUniversalTime(System.Int32,System.DateTime)">
            <summary>
            Write a <b>DateTime</b> property to the POF stream in
            ISO8601 format.
            </summary>
            <remarks>
            This method encodes the hour, minute, second, millisecond and
            timezone information of the specified <b>DateTime</b> object.
            No year, month or day information is encoded.
            <p/>
            Specified <paramref name="value"/> is converted to the UTC time
            before it is written to the POF stream.
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteRawYearMonthInterval(System.Int32,Tangosol.IO.Pof.RawYearMonthInterval)">
            <summary>
            Write a <b>RawYearMonthInterval</b> property to the POF
            stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="interval">
            The <b>RawYearMonthInterval</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteTimeInterval(System.Int32,System.TimeSpan)">
            <summary>
            Write a <b>TimeSpan</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            This method encodes the hour, minute, second, and millisecond
            information of the specified <b>TimeSpan</b> object.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="interval">
            The <b>TimeSpan</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteDayTimeInterval(System.Int32,System.TimeSpan)">
            <summary>
            Write a <b>TimeSpan</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            This method encodes the day, hour, minute, second, and millisecond
            information of the specified <b>TimeSpan</b> object.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="interval">
            The <b>TimeSpan</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteObject(System.Int32,System.Object)">
            <summary>
            Write an <b>Object</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            The given object must be an instance (or an array of instances) of
            one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for the object must be
            obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/> associated with
            this <b>IPofWriter</b>.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="o">
            The <b>Object</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream, or if the given property cannot be encoded into a
            POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteBinary(System.Int32,Tangosol.Util.Binary)">
            <summary>
            Write a <see cref="T:Tangosol.Util.Binary"/> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="bin">
            The <b>Binary</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream, or if the given property cannot be encoded into a
            POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteArray(System.Int32,System.Array)">
            <summary>
            Write an <b>Array</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            Each element of the given array must be an instance (or an array
            of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each element of the
            array must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>IPofWriter</b>.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Object[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream, or if the given property cannot be encoded into a
            POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteArray(System.Int32,System.Array,System.Type)">
            <summary>
            Write a uniform <b>Object[]</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            Each element of the given array must be an instance (or an array
            of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each element of
            the array must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>IPofWriter</b>.</p>
            <p>
            Additionally, the type of each element must be equal to the
            specified type.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Object[]</b> property value to write.
            </param>
            <param name="type">
            The element type.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream; if the given property cannot be encoded into a
            POF stream; or if the type of one or more elements of the array
            is not equal to the specified type.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteCollection(System.Int32,System.Collections.ICollection)">
            <summary>
            Write an <b>ICollection</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            Each element of the given array must be an instance (or an array
            of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each element of the
            array must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>IPofWriter</b>.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="coll">
            The <b>ICollection</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream, or if the given property cannot be encoded into a
            POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteCollection(System.Int32,System.Collections.ICollection,System.Type)">
            <summary>
            Write a uniform <b>ICollection</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            Each element of the given collection must be an instance (or an
            array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each element of the
            collection must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>IPofWriter</b>.</p>
            <p>
            Additionally, the type of each element must be equal to the
            specified type.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="coll">
            The <b>ICollection</b> property value to write.
            </param>
            <param name="type">
            The element type.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream; if the given property cannot be encoded into a
            POF stream; or if the type of one or more elements of the
            collection is not equal to the specified type.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteLongArray(System.Int32,Tangosol.Util.ILongArray)">
            <summary>
            Write an <b>ILongArray</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            Each element of the given <b>ILongArray</b> must be an instance
            (or an array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each element of the
            <b>ILongArray</b> must be obtainable from the
            <see cref="T:Tangosol.IO.Pof.IPofContext"/> associated with this PofWriter.</p>
            </remarks>
            <param name="index">
            The propertie index.
            </param>
            <param name="la">
            The <b>ILongArray</b> property to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property index is invalid, or is less than or equal to the
            index of the previous property written to the POF stream.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given property cannot be encoded into a POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error ocurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteLongArray(System.Int32,Tangosol.Util.ILongArray,System.Type)">
            <summary>
            Write a uniform <b>ILongArray</b> property to the POF
            stream.
            </summary>
            <remarks>
            <p>
            Each element of the given <b>ILongArray</b> must be an instance
            (or an array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p/>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each element of
            the <b>ILongArray</b> must be obtainable from the
            <see cref="T:Tangosol.IO.Pof.IPofContext"/> associated with this
            <b>PofStreamWriter</b>.
            <p/>
            Additionally, the type of each element must be equal to the
            specified class.
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="la">
            The <b>ILongArray</b> property to write.
            </param>
            <param name="type">
            The class of all elements; must not be null.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property index is invalid, or is less than or equal to the
            index of the previous property written to the POF stream.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given property cannot be encoded into a POF stream.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the type of one or more elements of the <b>ILongArray</b> is
            not equal to the specified class.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteDictionary(System.Int32,System.Collections.IDictionary)">
            <summary>
            Write an <b>IDictionary</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            Each key and value of the given dictionary must be an instance
            (or an array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each key and value
            of the dictionary must be obtainable from the
            <see cref="T:Tangosol.IO.Pof.IPofContext"/> associated with this <b>IPofWriter</b>.
            </p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="dict">
            The <b>IDictionary</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream, or if the given property cannot be encoded into
            a POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteDictionary(System.Int32,System.Collections.IDictionary,System.Type)">
            <summary>
            Write a uniform <b>IDictionary</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            Each key and value of the given dictionary must be an instance
            (or an array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each key and value
            of the dictionary must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>IPofWriter</b>.</p>
            <p>
            Additionally, the type of each key must be equal to the specified
            type.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="dict">
            The <b>IDictionary</b> property value to write.
            </param>
            <param name="keyType">
            The type of all keys; must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream; if the given property cannot be encoded into a
            POF stream; or if the type of one or more keys of the dictionary
            is not equal to the specified type.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteDictionary(System.Int32,System.Collections.IDictionary,System.Type,System.Type)">
            <summary>
            Write a uniform <b>IDictionary</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            Each key and value of the given dictionary must be an instance
            (or an array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each key and value
            of the dictionary must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>IPofWriter</b>.</p>
            <p>
            Additionally, the type of each key and value must be equal to the
            specified types.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="dict">
            The <b>IDictionary</b> property value to write.
            </param>
            <param name="keyType">
            The type of all keys; must not be <c>null</c>.
            </param>
            <param name="valueType">
            The type of all values; must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream; if the given property cannot be encoded into a
            POF stream; or if the type of one or more keys or values of the
            dictionary is not equal to the specified types.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteCollection``1(System.Int32,System.Collections.Generic.ICollection{``0})">
            <summary>
            Write a generic <b>ICollection&lt;T&gt;</b> property to the POF
            stream.
            </summary>
            <remarks>
            Each element of the given array must be an instance (or an array
            of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each key and value
            of the array must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>PofStreamWriter</b>.</p>
            </remarks>
            <typeparam name="T">
            The type of the elements in the collection.
            </typeparam>
            <param name="index">
            The property index.
            </param>
            <param name="coll">
            The <b>ICollection&lt;T&gt;</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream, or if the given property cannot be encoded into
            a POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteDictionary``2(System.Int32,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Write a generic <b>IDictionary&lt;TKey, TValue&gt;</b> property
            to the POF stream.
            </summary>
            <remarks>
            Each key and value of the given dictionary must be an instance
            (or an array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each key and value
            of the dictionary must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>PofStreamWriter</b>.</p>
            </remarks>
            <typeparam name="TKey">
            The type of the keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of the values in the dictionary.
            </typeparam>
            <param name="index">
            The property index.
            </param>
            <param name="dict">
            The <b>IDictionary&lt;TKey, TValue&gt;</b> property value to
            write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream, or if the given property cannot be encoded into
            a POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.CreateNestedPofWriter(System.Int32)">
            <summary>
            Obtain a PofWriter that can be used to write a set of properties into
            a single property of the current user type. The returned PofWriter is
            only valid from the time that it is returned until the next call is
            made to this PofWriter.
            </summary>
            <param name="iProp">
            the property index
            </param>
            <returns>
            a PofWriter whose contents are nested into a single property
            of this PofWriter
            </returns>
            <exception cref="T:System.ArgumentException">
            if the property index is invalid, or is less than or equal to the index
            of the previous property written to the POF stream
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if no user type is being written
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occurs
            </exception>
            <since> Coherence 3.6 </since>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.CreateNestedPofWriter(System.Int32,System.Int32)">
            <summary>
            Obtain a PofWriter that can be used to write a set of properties into
            a single property of the current user type. The returned PofWriter is
            only valid from the time that it is returned until the next call is
            made to this PofWriter.
            </summary>
            <param name="iProp">
            the property index
            </param>
            <param name="nTypeId">
            the type identifier of the nested property
            </param>
            <returns>
            a PofWriter whose contents are nested into a single property
            of this PofWriter
            </returns>
            <exception cref="T:System.ArgumentException">
            if the property index is invalid, or is less than or equal to the index
            of the previous property written to the POF stream
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if no user type is being written
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occurs
            </exception>
            <since> Coherence 12.2.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.IPofWriter.WriteRemainder(Tangosol.Util.Binary)">
            <summary>
            Write the remaining properties to the POF stream, terminating the
            writing of the currrent user type.
            </summary>
            <remarks>
            <p>
            As part of writing out a user type, this method must be called by
            the <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> that is writing out the user
            type, or the POF stream will be corrupted.</p>
            <p>
            Calling this method terminates the current user type by writing a
            -1 to the POF stream after the last indexed property. Subsequent
            calls to the various <b>WriteXYZ</b> methods of this interface
            will fail after this method is called.</p>
            </remarks>
            <param name="properties">
            A <b>Binary</b> object containing zero or more indexed
            properties in binary POF encoded form; may be <c>null</c>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If no user type is being written.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="P:Tangosol.IO.Pof.IPofWriter.PofContext">
             <summary>
             Gets or sets the <see cref="T:Tangosol.IO.Pof.IPofContext"/> object used by this
             <b>IPofWriter</b> to serialize user types into a POF stream.
             </summary>
             <remarks>
             This is an advanced method that should be used with care.
             For example, if this method is being used to switch to another
             <b>IPofContext</b> mid-POF stream, it is important to eventually
             restore the original <b>IPofContext</b>. For example:
             <pre>
             IPofContext ctxOrig = writer.PofContext;
             try
             {
                 // switch to another IPofContext
                 writer.PofContext = ...;
            
                 // write POF data using the writer
             }
             finally
             {
                 // restore the original PofContext
                 writer.PofContext = ctxOrig;
             }
             </pre>
             </remarks>
             <value>
             The <b>IPofContext</b> object that contains user type meta-data.
             </value>
        </member>
        <member name="P:Tangosol.IO.Pof.IPofWriter.UserTypeId">
            <summary>
            Gets the user type that is currently being written.
            </summary>
            <value>
            The user type information, or -1 if the <b>IPofWriter</b> is not
            currently writing a user type.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.IPofWriter.VersionId">
            <summary>
            Gets or sets the version identifier of the user type that is
            currently being written.
            </summary>
            <value>
            The integer version ID of the user type; always non-negative.
            </value>
            <exception cref="T:System.ArgumentException">
            If the given version ID is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If no user type is being written.
            </exception>
        </member>
        <member name="T:Tangosol.IO.Pof.PofConstants">
            <summary>
            The constants related to POF streams.
            </summary>
            <author>Cameron Purdy, Jason Howes  2006.07.11</author>
            <author>Aleksandar Seovic  2006.08.08</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="F:Tangosol.IO.Pof.PofConstants.MAX_DECIMAL32_SCALE">
            <summary>
            Maximum scale for the IEEE-754r 32-bit decimal format.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofConstants.MAX_DECIMAL64_SCALE">
            <summary>
            Maximum scale for the IEEE-754r 64-bit decimal format.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofConstants.MAX_DECIMAL128_SCALE">
            <summary>
            Maximum scale for the IEEE-754r 128-bit decimal format.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofConstants.MAX_DECIMAL_SCALE">
            <summary>
            Maximum scale for the .NET 96-bit decimal format.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofConstants.MIN_DECIMAL32_SCALE">
            <summary>
            Minimum scale for the IEEE-754r 32-bit decimal format.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofConstants.MAX_DECIMAL32_UNSCALED">
            <summary>
            Maximum unscaled value for the IEEE-754r 32-bit decimal format.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofConstants.MIN_DECIMAL64_SCALE">
            <summary>
            Minimum scale for the IEEE-754r 64-bit decimal format.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofConstants.MAX_DECIMAL64_UNSCALED">
            <summary>
            Maximum unscaled value for the IEEE-754r 64-bit decimal format.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofConstants.MIN_DECIMAL128_SCALE">
            <summary>
            Minimum scale for the IEEE-754r 128-bit decimal format.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofConstants.MAX_DECIMAL128_UNSCALED">
            <summary>
            Maximum unscaled value for the IEEE-754r 128-bit decimal format.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofConstants.MIN_DECIMAL_SCALE">
            <summary>
            Minimum scale for the .NET 96-bit decimal format.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofConstants.MAX_DECIMAL_UNSCALED">
            <summary>
            Maximum unscaled value for the Decimal 96-bit decimal format.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.PofHelper">
            <summary>
            Collection of helper methods for POF streams.
            </summary>
            <author>Cameron Purdy/Jason Howes  2006.07.17</author>
            <author>Ivan Cikic 2006.08.09</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.GetDotNetTypeId(System.Object,Tangosol.IO.Pof.IPofContext)">
            <summary>
            Returns an identifier that represents the .NET type of the
            specified object.
            </summary>
            <param name="obj">
            An object to determine the type of.
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/> used to determine if the object is
            an instance of a valid user type; must not be <c>null</c>.
            </param>
            <returns>
            One of the <see cref="T:Tangosol.IO.Pof.PofConstants"/> struct <b>N_*</b>
            constants.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.GetPofTypeId(System.Type,Tangosol.IO.Pof.IPofContext)">
            <summary>
            Return an identifier that represents the POF type of the
            specified type.
            </summary>
            <param name="type">
            The type; must not be <c>null</c>.
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/> used to determine the type
            identifier of a user type; must not be <c>null</c>.
            </param>
            <returns>
            One of the <see cref="T:Tangosol.IO.Pof.PofConstants"/> struct <b>T_*</b>
            constants.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given object is unknown to
            the specified <see cref="T:Tangosol.IO.Pof.IPofContext"/>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.GetDotNetType(System.Int32)">
            <summary>
            Returns a .NET Type based on the POF type identifer.
            </summary>
            <param name="pofTypeId">
            POF type identifier.
            </param>
            <returns>
            A .NET Type for the specified POF type identifier.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.IsIntrinsicPofType(System.Type)">
            <summary>
            Determine if the given type can be represented as an intrinsic
            POF type.
            </summary>
            <param name="type">
            The object type; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the given type can be represented as an intrinsic POF 
            type; <b>false</b>, otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ConvertNumber(System.Object,System.Int32)">
            <summary>
            Convert the passed number to the specified type.
            </summary>
            <param name="number">
            The number to convert.
            </param>
            <param name="dotNetTypeId">
            The .NET type ID to convert to, one of the
            <see cref="T:Tangosol.IO.Pof.PofConstants"/> struct <b>T_*</b> constants.
            </param>
            <returns>
            The number converted to the specified type.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ResizeArray(System.Array,System.Int32)">
            <summary>
            Expand the passed array to contain the specified number of
            elements.
            </summary>
            <param name="array">
            The "template" array or <c>null</c>.
            </param>
            <param name="newSize">
            The number of desired elements in the new array.
            </param>
            <returns>
            The old array, if it was big enough, or a new array of the same
            type.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ResizeArray(System.Array,System.Int32,System.Type)">
            <summary>
            Expand the passed array to contain the specified number of
            elements.
            </summary>
            <param name="array">
            The "template" array or <c>null</c>.
            </param>
            <param name="newSize">
            The number of desired elements in the new array.
            </param>
            <param name="elementType">
            Type of the array elements.
            </param>
            <returns>
            The old array, if it was big enough, or a new array of the same
            type.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.DecodeTinyInt(System.Int32)">
            <summary>
            Decode an integer value from one of the reserved single-byte
            combined type and value indicators.
            </summary>
            <param name="n">
            The integer value that the integer is encoded as.
            </param>
            <returns>
            An integer between -1 and 22, inclusive.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadChar(Tangosol.IO.DataReader)">
            <summary>
            Read a <b>Char</b> value from the passed
            <see cref="T:Tangosol.IO.DataReader"/>.
            </summary>
            <param name="reader">
            The <b>DataReader</b> object to read from.
            </param>
            <returns>
            A char value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadDate(Tangosol.IO.DataReader)">
            <summary>
            Read a literal <b>DateTime</b> value from a POF stream.
            </summary>
            <param name="reader">
            The stream containing the POF date value.
            </param>
            <returns>A literal date value.</returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadDecimal(Tangosol.IO.DataReader)">
            <summary>
            Read <b>Decimal</b> value from <b>DataReader</b>.
            </summary>
            <param name="reader">
            DataReader stream to read value from.
            </param>
            <returns>
            Decimal value read from stream.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadDecimal(Tangosol.IO.DataReader,System.Int32)">
            <summary>
            Read <b>Decimal</b> value from <b>DataReader</b>.
            </summary>
            <param name="reader">
            DataReader stream to read value from.
            </param>
            <param name="size">
            Number of bytes to read from the stream.
            </param>
            <returns>
            Decimal value read from stream.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadRawTime(Tangosol.IO.DataReader)">
            <summary>
            Read a <see cref="T:Tangosol.IO.Pof.RawTime"/> value from a POF stream.
            </summary>
            <param name="reader">
            The stream containing the POF time value.
            </param>
            <returns>
            A literal <b>Time</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadDateTime(Tangosol.IO.DataReader)">
            <summary>
            Read a literal <b>DateTime</b> value from a POF stream.
            </summary>
            <remarks>
            This method will ignore any time zone information (if present),
            and return literal date-time value, as encoded in the stream.
            </remarks>
            <param name="reader">
            The stream containing the POF date-time value.
            </param>
            <returns>
            A literal <b>DateTime</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadUniversalDateTime(Tangosol.IO.DataReader)">
            <summary>
            Read a UTC <b>DateTime</b> value from a POF stream.
            </summary>
            <remarks>
            This method will use time zone information (if present) to
            determine a UTC value of the encoded POF date-time value.
            </remarks>
            <param name="reader">
            The stream containing the POF date-time value.
            </param>
            <returns>
            A UTC <b>DateTime</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadAsChar(Tangosol.IO.DataReader,System.Int32)">
            <summary>
            Read a value of the specified encoding from the POF stream and
            convert it to a char.
            </summary>
            <param name="reader">
            The POF stream containing the value.
            </param>
            <param name="typeId">
            The POF type of the value.
            </param>
            <returns>
            The POF value as a char.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs reading the POF stream, or the POF value
            cannot be coerced to a char value.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadAsInt32(Tangosol.IO.DataReader,System.Int32)">
            <summary>
            Read a value of the specified encoding from the POF stream and
            convert it to an <b>Int32</b>.
            </summary>
            <param name="reader">
            The POF stream containing the value.
            </param>
            <param name="typeId">
            The POF type of the value.
            </param>
            <returns>
            The POF value as an <b>Int32</b>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs reading the POF stream, or the POF value
            cannot be coerced to an <b>Int32</b> value.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadAsInt64(Tangosol.IO.DataReader,System.Int32)">
            <summary>
            Read a value of the specified encoding from the POF stream and
            convert it to an <b>Int64</b>.
            </summary>
            <param name="reader">
            The POF stream containing the value.
            </param>
            <param name="typeId">
            The POF type of the value.
            </param>
            <returns>
            The POF value as an <b>Int64</b>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs reading the POF stream, or the POF value
            cannot be coerced to an <b>Int64</b> value.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadAsRawInt128(Tangosol.IO.DataReader,System.Int32)">
            <summary>
            Read a value of the specified encoding from the POF stream and
            convert it to an <b>RawInt128</b>.
            </summary>
            <param name="reader">
            The POF stream containing the value.
            </param>
            <param name="typeId">
            The POF type of the value.
            </param>
            <returns>
            The POF value as an <b>RawInt128</b>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs reading the POF stream, or the POF value
            cannot be coerced to an <b>Int64</b> value.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadAsDecimal(Tangosol.IO.DataReader,System.Int32)">
            <summary>
            Read a value of the specified encoding from the POF stream and
            convert it to a <b>Decimal</b>.
            </summary>
            <param name="reader">
            The POF stream containing the value.
            </param>
            <param name="typeId">
            The POF type of the value.
            </param>
            <returns>
            The POF value as a Decimal.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs reading the POF stream, or the POF value
            cannot be coerced to a Decimal value.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadAsSingle(Tangosol.IO.DataReader,System.Int32)">
            <summary>
            Read a value of the specified encoding from the POF stream and
            convert it to a <b>Single</b>.
            </summary>
            <param name="reader">
            The POF stream containing the value.
            </param>
            <param name="typeId">
            The POF type of the value.
            </param>
            <returns>
            The POF value as a <b>Single</b>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs reading the POF stream, or the POF value
            cannot be coerced to a <b>Single</b> value.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ReadAsDouble(Tangosol.IO.DataReader,System.Int32)">
            <summary>
            Read a value of the specified encoding from the POF stream and
            convert it to a <b>Double</b>.
            </summary>
            <param name="reader">
            The POF stream containing the value.
            </param>
            <param name="typeId">
            The POF type of the value.
            </param>
            <returns>
            The POF value as a <b>Double</b>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs reading the POF stream, or the POF value
            cannot be coerced to a <b>Double</b> value.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.SkipValue(Tangosol.IO.DataReader)">
            <summary>
            Within the POF stream, skip the next POF value.
            </summary>
            <param name="reader">
            The <see cref="T:Tangosol.IO.DataReader"/> containing the POF stream.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.SkipUniformValue(Tangosol.IO.DataReader,System.Int32)">
            <summary>
            Within the POF stream, skip the next POF value of the specified
            type.
            </summary>
            <param name="reader">
            The <see cref="T:Tangosol.IO.DataReader"/> containing the POF stream.
            </param>
            <param name="typeId">
            The type of the value to skip.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.SkipPackedInts(Tangosol.IO.DataReader,System.Int32)">
            <summary>
            Skip the specified number of packed integers in the passed POF
            stream.
            </summary>
            <param name="reader">
            The <see cref="T:Tangosol.IO.DataReader"/> containing the POF stream.
            </param>
            <param name="count">
            The number of packed integers to skip over.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.ContainsPackedInt32(System.Byte[],System.Int32)">
            <summary>
            Determine if the specified byte array contains a packed
            32-bit integer.
            </summary>
            <param name="buffer">
            The byte array that contains the packed 32-bit integer.
            </param>
            <param name="count">
            The total number of bytes that have been written into the
            byte array.
            </param>
            <returns>
            <b>true</b> if the specified byte array contains a packed
            32-bit integer; <b>false</b>, otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.LengthPackedInt32(System.Int32)">
            <summary>
            Determine the number of bytes required to encode the given integer
            using a packed 32-bit format.
            </summary>
            <param name="n">
            The integer to be encoded.
            </param>
            <returns>
            The total number of bytes required to encode the given integer
            (0 - 5).
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.WriteDecimal(Tangosol.IO.DataWriter,System.Decimal)">
            <summary>
            Write a <b>Decimal</b> to the passed <b>DataWriter</b> stream as
            a decimal value.
            </summary>
            <param name="writer">
            The DataWriter to write to.
            </param>
            <param name="value">
            The Decimal value.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.WriteDecimal(Tangosol.IO.DataWriter,System.Decimal,System.Int32)">
            <summary>
            Write a <b>Decimal</b> to the passed <b>DataWriter</b> stream as
            a decimal value.
            </summary>
            <param name="writer">
            The DataWriter to write to.
            </param>
            <param name="value">
            The Decimal value.
            </param>
            <param name="cBytes">
            Number of bytes to write.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.EncodeTinyInt(System.Int32)">
            <summary>
            Encode an integer value into one of the reserved single-byte
            combined type and value indicators.
            </summary>
            <param name="n">
            An integer between -1 and 22, inclusive.
            </param>
            <returns>
            The integer value that the integer is encoded as.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.WriteDate(Tangosol.IO.DataWriter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Write a date value to a <see cref="T:Tangosol.IO.DataWriter"/> object.
            </summary>
            <param name="writer">
            The <see cref="T:Tangosol.IO.DataWriter"/> to write to.
            </param>
            <param name="year">
            The year number as defined by ISO8601.
            </param>
            <param name="month">
            The month number between 1 and 12 inclusive as defined by
            ISO8601.
            </param>
            <param name="day">
            The day number between 1 and 31 inclusive as defined by ISO8601.
            </param>
            <exception cref="T:System.IO.IOException">
            If the passed <b>DataWriter</b> object throws an exception while
            the value is being written to it.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.WriteTime(Tangosol.IO.DataWriter,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Write a time value to a <see cref="T:Tangosol.IO.DataWriter"/> object.
            </summary>
            <param name="writer">
            The <see cref="T:Tangosol.IO.DataWriter"/> to write to.
            </param>
            <param name="hour">
            The hour between 0 and 23, inclusive.
            </param>
            <param name="minute">
            The minute value between 0 and 59, inclusive.
            </param>
            <param name="second">
            The second value between 0 and 59, inclusive (and theoretically
            60 for a leap-second).
            </param>
            <param name="nano">
            The nanosecond value between 0 and 999999999, inclusive.
            </param>
            <param name="timeZoneType">
            0 if the time value does not have an explicit time zone, 1 if the
            time value is UTC and 2 if the time zone has an explicit hour and
            minute offset.
            </param>
            <param name="zoneOffset">
            The timezone offset from UTC, for example 0 for BST, -5 for EST
            and +1 for CET.
            </param>
            <exception cref="T:System.IO.IOException">
            If the passed <b>DataWriter</b> object throws an exception while
            the value is being written to it.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.CheckType(System.Int32)">
            <summary>
            Validate a type identifier.
            </summary>
            <param name="typeId">
            The type identifier.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.CheckElementCount(System.Int32)">
            <summary>
            Verify that the number of elements is valid.
            </summary>
            <param name="elementCount">
            The number of elements in a complex data structure.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.CheckReferenceRange(System.Int32)">
            <summary>
            Validate a reference identifier to make sure it is in a valid
            range.
            </summary>
            <param name="id">
            The reference identity.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.CheckDecimalRange(System.Decimal,System.Int32)">
             <summary>
             Verify that the specified Decimal value will fit in the specified
             number of bytes.
             </summary>
             <param name="dec">
             The Decimal value.
             </param>
             <param name="cBytes">
             The number of bytes (4, 8 or 16).
             </param>
            
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.CalcDecimalSize(System.Decimal)">
            <summary>
            Determine the minimum size (in bytes) of the IEEE754 decimal type
            that would be capable of holding the passed value.
            </summary>
            <param name="value">
            The decimal value.
            </param>
            <returns>
            The number of bytes (4, 8 or 16).
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.CheckDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Validate date information.
            </summary>
            <param name="year">
            The year number.
            </param>
            <param name="month">
            The month number.
            </param>
            <param name="day">
            The day number.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.CheckTime(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Validate time information.
            </summary>
            <param name="hour">
            The hour number.
            </param>
            <param name="minute">
            The minute number.
            </param>
            <param name="second">
            The second number.
            </param>
            <param name="nano">
            The nanosecond number.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.CheckTimeZone(System.Int32,System.Int32)">
            <summary>
            Check the specified timezone offset.
            </summary>
            <param name="hourOffset">
            The hour offset.
            </param>
            <param name="minuteOffset">
            The minute offset.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.CheckYearMonthInterval(System.Int32,System.Int32)">
            <summary>
            Validate a year-month interval.
             </summary>
            <param name="years">
            The number of years.
            </param>
            <param name="months">
            The number of months.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.CheckTimeInterval(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Validate a time interval.
            </summary>
            <param name="hours">
            The number of hours.
            </param>
            <param name="minutes">
            The number of minutes.
            </param>
            <param name="seconds">
            The number of seconds.
            </param>
            <param name="nanos">
            The number of nanoseconds.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.CheckDayTimeInterval(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Validate a day-time interval.
            </summary>
            <param name="days">
            The number of days.
            </param>
            <param name="hours">
            The number of hours.
            </param>
            <param name="minutes">
            The number of minutes.
            </param>
            <param name="seconds">
            The number of seconds.
            </param>
            <param name="nanos">
            The number of nanoseconds.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.FormatDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Format a date in the form YYYY-MM-DD.
            </summary>
            <param name="year">
            The year number.
            </param>
            <param name="month">
            The month number.
            </param>
            <param name="day">
            The day number.
            </param>
            <returns>
            Return the date in the form YYYY-MM-DD.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.FormatTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Format a time.
            </summary>
            <remarks>
            Time format is the simplest applicable of the following formats:
            <list type="bullet">
            <item><tt>HH:MM</tt></item>
            <item><tt>HH:MM:SS</tt></item>
            <item><tt>HH:MM:SS.MMM</tt></item>
            <item><tt>HH:MM:SS.NNNNNNNNN</tt></item>
            </list>
            </remarks>
            <param name="hour">
            The hour number.
            </param>
            <param name="minute">
            The minute number.
            </param>
            <param name="second">
            The second number.
            </param>
            <param name="nano">
            The nanosecond number.
            </param>
            <param name="isUTC">
            <b>true</b> for UTC, <b>false</b> for no time zone.
            </param>
            <returns>
            A time string.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofHelper.FormatTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Format a time.
            </summary>
            <remarks>
            Time format is the simplest applicable of the following formats:
            <list type="bullet">
            <item><tt>HH:MM±HH:MM</tt></item>
            <item><tt>HH:MM:SS±HH:MM</tt></item>
            <item><tt>HH:MM:SS.MMM±HH:MM</tt></item>
            <item><tt>HH:MM:SS.NNNNNNNNN±HH:MM</tt></item>
            </list>
            </remarks>
            <param name="hour">
            The hour number.
            </param>
            <param name="minute">
            The minute number.
            </param>
            <param name="second">
            The second number.
            </param>
            <param name="nano">
            The nanosecond number.
            </param>
            <param name="hourOffset">
            The timezone offset in hours.
            </param>
            <param name="minuteOffset">
            The timezone offset in minutes.
            </param>
            <returns>
            A time string.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.PofHelper.MAX_DAYS_PER_MONTH">
            <summary>
            The maximum number of days in each month.
            </summary>
            <remarks>
            Note February.
            </remarks>
        </member>
        <member name="F:Tangosol.IO.Pof.PofHelper.BIGDECIMAL_ZERO">
            <summary>
            The default BigDecimal value.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofHelper.BOOLEAN_ARRAY_EMPTY">
            <summary>
            An empty array of bytes.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofHelper.BYTE_ARRAY_EMPTY">
            <summary>
            An empty array of bytes.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofHelper.CHAR_ARRAY_EMPTY">
            <summary>
            An empty array of chars.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofHelper.INT16_ARRAY_EMPTY">
            <summary>
            An empty array of shorts.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofHelper.INT32_ARRAY_EMPTY">
            <summary>
            An empty array of ints.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofHelper.INT64_ARRAY_EMPTY">
            <summary>
            An empty array of longs.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofHelper.SINGLE_ARRAY_EMPTY">
            <summary>
            An empty array of floats.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofHelper.DOUBLE_ARRAY_EMPTY">
            <summary>
            An empty array of doubles.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofHelper.OBJECT_ARRAY_EMPTY">
            <summary>
            An empty array of objects.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofHelper.COLLECTION_EMPTY">
            <summary>
            An empty (and immutable) collection.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofHelper.BINARY_EMPTY">
            <summary>
            An empty Binary value.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.PofStreamWriter">
            <summary>
            <see cref="T:Tangosol.IO.Pof.IPofWriter"/> implementation that writes POF-encoded data
            to a POF stream.
            </summary>
            <author>Jason Howes  2006.07.11</author>
            <author>Goran Milosavljevic  2006.08.09</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.EnableReference">
            <summary>
            Ensure that reference support (necessary for cyclic dependencies) is
            enabled.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.IsReferenceEnabled">
            <summary>
            Determine if reference support is enabled.
            </summary>
            <value> <b>true</b> iff reference support is enabled
            </value>
            <returns>
            <b>true</b> if reference support is enabled; <b>false</b>, otherwise.
            </returns>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.#ctor(Tangosol.IO.DataWriter,Tangosol.IO.Pof.IPofContext)">
            <summary>
            Construct a new <b>PofStreamWriter</b> that will write a POF
            stream to the passed <see cref="T:Tangosol.IO.DataWriter"/> object.
            </summary>
            <param name="writer">
            The <b>DataWriter</b> object to write to; must not be
            <c>null</c>.
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/> used by the new
            <b>PofStreamWriter</b> to serialize user types; must not be
            <c>null</c>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.#ctor(Tangosol.IO.Pof.WritingPofHandler,Tangosol.IO.Pof.IPofContext)">
            <summary>
            Construct a new <b>PofStreamWriter</b> that will write a POF
            stream using the passed <see cref="T:Tangosol.IO.Pof.WritingPofHandler"/>.
            </summary>
            <param name="handler">
            The <b>WritingPofHandler</b> used for writing; must not be
            <c>null</c>.
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/> used by the new
            <b>PofStreamWriter</b> to serialize user types; must not be
            <c>null</c>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteBoolean(System.Int32,System.Boolean)">
            <summary>
            Write a <b>Boolean</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Boolean</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteByte(System.Int32,System.Byte)">
            <summary>
            Write a <b>Byte</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Byte</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteChar(System.Int32,System.Char)">
            <summary>
            Write a <b>Char</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Char</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteInt16(System.Int32,System.Int16)">
            <summary>
            Write an <b>Int16</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Int16</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteInt32(System.Int32,System.Int32)">
            <summary>
            Write an <b>Int32</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Int32</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteInt64(System.Int32,System.Int64)">
            <summary>
            Write an <b>Int64</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Int64</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteRawInt128(System.Int32,Tangosol.IO.Pof.RawInt128)">
            <summary>
            Write an <b>RawInt128</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>RawInt128</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteSingle(System.Int32,System.Single)">
            <summary>
            Write a <b>Single</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Single</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteDouble(System.Int32,System.Double)">
            <summary>
            Write a <b>Double</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Double</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteBooleanArray(System.Int32,System.Boolean[])">
            <summary>
            Write a <b>Boolean[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index
            </param>
            <param name="array">
            The <b>Boolean[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteByteArray(System.Int32,System.Byte[])">
            <summary>
            Write a <b>Byte[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Byte[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteCharArray(System.Int32,System.Char[])">
            <summary>
            Write a <b>Char[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Char[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteInt16Array(System.Int32,System.Int16[])">
            <summary>
            Write an <b>Int16[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Int16[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteInt32Array(System.Int32,System.Int32[])">
            <summary>
            Write an <b>Int32[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Int32[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteInt64Array(System.Int32,System.Int64[])">
            <summary>
            Write an <b>Int64[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Int64[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteSingleArray(System.Int32,System.Single[])">
            <summary>
            Write a <b>Single[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Single[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteDoubleArray(System.Int32,System.Double[])">
            <summary>
            Write a <b>Double[]</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Double[]</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteDecimal(System.Int32,System.Decimal)">
            <summary>
            Write a <b>Decimal</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>Decimal</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property index is invalid, or is less than or equal to the
            index of the previous property written to the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteString(System.Int32,System.String)">
            <summary>
            Write a <b>String</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>String</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteDate(System.Int32,System.DateTime)">
            <summary>
            Write a <b>DateTime</b> property to the POF stream in ISO8601
            format.
            </summary>
            <remarks>
            This method encodes only year, month and day information of the
            specified <b>DateTime</b> object. No time information is encoded.
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.</exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteDateTime(System.Int32,System.DateTime)">
            <summary>
            Write a <b>DateTime</b> property to the POF stream in ISO8601
            format.
            </summary>
            <remarks>
            This method encodes the year, month, day, hour, minute, second
            and millisecond information of the specified <b>DateTime</b>
            object. No timezone information is encoded.
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteLocalDateTime(System.Int32,System.DateTime)">
            <summary>
            Write a <b>DateTime</b> property to the POF stream in ISO8601
            format.
            </summary>
            <remarks>
            This method encodes the year, month, day, hour, minute, second,
            millisecond and timezone information of the specified
            <b>DateTime</b> object.
            <p/>
            Specified <paramref name="value"/> is converted to the local
            time before it is written to the POF stream.
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteUniversalDateTime(System.Int32,System.DateTime)">
            <summary>
            Write a <b>DateTime</b> property to the POF stream in ISO8601
            format.
            </summary>
            <remarks>
            <p>
            This method encodes the year, month, day, hour, minute, second,
            millisecond and timezone information of the specified
            <b>DateTime</b> object.</p>
            <p>
            Specified <paramref name="value"/> is converted to UTC time
            before it is written to the POF stream.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteRawDateTime(System.Int32,Tangosol.IO.Pof.RawDateTime)">
            <summary>
            Write a <b>RawDateTime</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>RawDateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property index is invalid, or is less than or equal to the
            index of the previous property written to the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteRawTime(System.Int32,Tangosol.IO.Pof.RawTime)">
            <summary>
            Write a <b>RawTime</b> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="time">
            The <b>RawTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteTime(System.Int32,System.DateTime)">
            <summary>
            Write a <b>DateTime</b> property to the POF stream in
            ISO8601 format.
            </summary>
            <remarks>
            This method encodes the hour, minute, second and millisecond
            information of the specified <b>DateTime</b> object. No year,
            month, day or timezone information is encoded.
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteLocalTime(System.Int32,System.DateTime)">
            <summary>
            Write a <see cref="T:System.DateTime"/> property to the POF stream
            in ISO8601 format.
            </summary>
            <remarks>
            <p>
            This method encodes the hour, minute, second, millisecond and
            timezone information of the specified <b>DateTime</b> object.
            No year, month or day information is encoded.</p>
            <p>
            Specified <paramref name="value"/> is converted to the local time
            before it is written to the POF stream.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteUniversalTime(System.Int32,System.DateTime)">
            <summary>
            Write a <b>DateTime</b> property to the POF stream in
            ISO8601 format.
            </summary>
            <remarks>
            This method encodes the hour, minute, second, millisecond and
            timezone information of the specified <b>DateTime</b> object.
            No year, month or day information is encoded.
            <p/>
            Specified <paramref name="value"/> is converted to the UTC time
            before it is written to the POF stream.
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="value">
            The <b>DateTime</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteRawYearMonthInterval(System.Int32,Tangosol.IO.Pof.RawYearMonthInterval)">
            <summary>
            Write a <b>RawYearMonthInterval</b> property to the POF
            stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="interval">
            The <b>RawYearMonthInterval</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteTimeInterval(System.Int32,System.TimeSpan)">
            <summary>
            Write a <b>TimeSpan</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            This method encodes the hour, minute, second, and millisecond
            information of the specified <b>TimeSpan</b> object.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="interval">
            The <b>TimeSpan</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteDayTimeInterval(System.Int32,System.TimeSpan)">
            <summary>
            Write a <b>TimeSpan</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            This method encodes the day, hour, minute, second, and millisecond
            information of the specified <b>TimeSpan</b> object.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="interval">
            The <b>TimeSpan</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteObject(System.Int32,System.Object)">
            <summary>
            Write an <b>Object</b> property to the POF stream.
            </summary>
            <remarks>
            The given object must be an instance (or an array of instances) of
            one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for the object must be
            obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/> associated with this
            <b>PofStreamWriter</b>.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="o">
            The <b>Object</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream, or if the given property cannot be encoded into
            a POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteUserType(System.Int32,System.Object)">
            <summary>
            Write an instance of a user type to the POF stream at the specified
            index.
            </summary>
            <param name="iProp">The property index.</param>
            <param name="o">The user type instance.</param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteBinary(System.Int32,Tangosol.Util.Binary)">
            <summary>
            Write a <see cref="T:Tangosol.Util.Binary"/> property to the POF stream.
            </summary>
            <param name="index">
            The property index.
            </param>
            <param name="bin">
            The <b>Binary</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream, or if the given property cannot be encoded into a
            POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteArray(System.Int32,System.Array)">
            <summary>
            Write an <tt>Object[]</tt> property to the POF stream.
            </summary>
            <remarks>
            Each element of the given array must be an instance (or an array
            of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for the object must be
            obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/> associated with
            this <b>PofStreamWriter</b>.
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Object</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid; or is less
            than or equal to the index of the previous property written to
            the POF stream; or if the given property cannot be encoded into
            a POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteArray(System.Int32,System.Array,System.Type)">
            <summary>
            Write an uniform <tt>Object[]</tt> property to the POF stream.
            </summary>
            <remarks>
            <p>
            Each element of the given array must be an instance (or an array
            of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for the object must be
            obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/> associated with
            this <b>PofStreamWriter</b>.</p>
            <p>
            Additionally, the type of each element must be equal to the
            specified class.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="array">
            The <b>Object</b> property value to write.
            </param>
            <param name="type">
            The type of all elements; must not be <c>null</c>
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid; or is less
            than or equal to the index of the previous property written to
            the POF stream; or if the given property cannot be encoded into
            a POF stream; or if the type of one or more elements of the array
            is not equal to the specified class.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteCollection(System.Int32,System.Collections.ICollection)">
            <summary>
            Write an <b>ICollection</b> property to the POF stream.
            </summary>
            <remarks>
            Each element of the given array must be an instance (or an array
            of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each element of the
            array must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>PofStreamWriter</b>.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="coll">
            The <b>ICollection</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream, or if the given property cannot be encoded into
            a POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteCollection(System.Int32,System.Collections.ICollection,System.Type)">
            <summary>
            Write a uniform <b>ICollection</b> property to the POF stream.
            </summary>
            <remarks>
            Each element of the given collection must be an instance (or an
            array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each element of the
            collection must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>PofStreamWriter</b>.</p>
            <p>
            Additionally, the type of each element must be equal to the
            specified type.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="coll">
            The <b>ICollection</b> property value to write.
            </param>
            <param name="type">
            The element type.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream; if the given property cannot be encoded into
            a POF stream; or if the type of one or more elements of the
            collection is not equal to the specified type.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteLongArray(System.Int32,Tangosol.Util.ILongArray)">
            <summary>
            Write an <b>ILongArray</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            Each element of the given <b>ILongArray</b> must be an instance
            (or an array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each element of the
            <b>ILongArray</b> must be obtainable from the
            <see cref="T:Tangosol.IO.Pof.IPofContext"/> associated with this PofWriter.</p>
            </remarks>
            <param name="index">
            The propertie index.
            </param>
            <param name="la">
            The <b>ILongArray</b> property to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property index is invalid, or is less than or equal to the
            index of the previous property written to the POF stream.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given property cannot be encoded into a POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error ocurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteLongArray(System.Int32,Tangosol.Util.ILongArray,System.Type)">
            <summary>
            Write a uniform <b>ILongArray</b> property to the POF
            stream.
            </summary>
            <remarks>
            <p>
            Each element of the given <b>ILongArray</b> must be an instance
            (or an array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p/>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each element of
            the <b>ILongArray</b> must be obtainable from the
            <see cref="T:Tangosol.IO.Pof.IPofContext"/> associated with this
            <b>PofStreamWriter</b>.
            <p/>
            Additionally, the type of each element must be equal to the
            specified class.
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="la">
            The <b>ILongArray</b> property to write.
            </param>
            <param name="type">
            The class of all elements; must not be null.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property index is invalid, or is less than or equal to the
            index of the previous property written to the POF stream.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the given property cannot be encoded into a POF stream.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the type of one or more elements of the <b>ILongArray</b> is
            not equal to the specified class.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteDictionary(System.Int32,System.Collections.IDictionary)">
            <summary>
            Write an <b>IDictionary</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            Each key and value of the given dictionary must be an instance
            (or an array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each key and value
            of the dictionary must be obtainable from the
            <see cref="T:Tangosol.IO.Pof.IPofContext"/> associated with this <b>IPofWriter</b>.
            </p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="dict">
            The <b>IDictionary</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream, or if the given property cannot be encoded into
            a POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteDictionary(System.Int32,System.Collections.IDictionary,System.Type)">
            <summary>
            Write a uniform <b>IDictionary</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            Each key and value of the given dictionary must be an instance
            (or an array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each key and value
            of the dictionary must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>IPofWriter</b>.</p>
            <p>
            Additionally, the type of each key must be equal to the specified
            type.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="dict">
            The <b>IDictionary</b> property value to write.
            </param>
            <param name="keyType">
            The type of all keys; must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream; if the given property cannot be encoded into a
            POF stream; or if the type of one or more keys of the dictionary
            is not equal to the specified type.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteDictionary(System.Int32,System.Collections.IDictionary,System.Type,System.Type)">
            <summary>
            Write a uniform <b>IDictionary</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            Each key and value of the given dictionary must be an instance
            (or an array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each key and value
            of the dictionary must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>IPofWriter</b>.</p>
            <p>
            Additionally, the type of each key and value must be equal to the
            specified types.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="dict">
            The <b>IDictionary</b> property value to write.
            </param>
            <param name="keyType">
            The type of all keys; must not be <c>null</c>.
            </param>
            <param name="valueType">
            The type of all values; must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream; if the given property cannot be encoded into a
            POF stream; or if the type of one or more keys or values of the
            dictionary is not equal to the specified types.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteCollection``1(System.Int32,System.Collections.Generic.ICollection{``0})">
            <summary>
            Write a generic <b>ICollection&lt;T&gt;</b> property to the POF
            stream.
            </summary>
            <remarks>
            Each element of the given array must be an instance (or an array
            of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each key and value
            of the array must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>PofStreamWriter</b>.</p>
            </remarks>
            <typeparam name="T">
            The type of the elements in the collection.
            </typeparam>
            <param name="index">
            The property index.
            </param>
            <param name="coll">
            The <b>ICollection&lt;T&gt;</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream, or if the given property cannot be encoded into
            a POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteDictionary``2(System.Int32,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Write a generic <b>IDictionary&lt;TKey, TValue&gt;</b> property
            to the POF stream.
            </summary>
            <remarks>
            Each key and value of the given dictionary must be an instance
            (or an array of instances) of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>Decimal</item>
            <item><see cref="T:Tangosol.Util.Binary"/></item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for each key and value
            of the dictionary must be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/>
            associated with this <b>PofStreamWriter</b>.</p>
            </remarks>
            <typeparam name="TKey">
            The type of the keys in the dictionary.
            </typeparam>
            <typeparam name="TValue">
            The type of the values in the dictionary.
            </typeparam>
            <param name="index">
            The property index.
            </param>
            <param name="dict">
            The <b>IDictionary&lt;TKey, TValue&gt;</b> property value to
            write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is less
            than or equal to the index of the previous property written to
            the POF stream, or if the given property cannot be encoded into
            a POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.CreateNestedPofWriter(System.Int32)">
            <summary>
            Obtain a PofWriter that can be used to write a set of properties into
            a single property of the current user type. The returned PofWriter is
            only valid from the time that it is returned until the next call is
            made to this PofWriter.
            </summary>
            <param name="iProp">
            the property index
            </param>
            <returns>
            a PofWriter whose contents are nested into a single property
            of this PofWriter
            </returns>
            <exception cref="T:System.ArgumentException">
            if the property index is invalid, or is less than or equal to the index
            of the previous property written to the POF stream
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if no user type is being written
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occurs
            </exception>
            <since> Coherence 3.6 </since>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.CreateNestedPofWriter(System.Int32,System.Int32)">
            <summary>
            Obtain a PofWriter that can be used to write a set of properties into
            a single property of the current user type. The returned PofWriter is
            only valid from the time that it is returned until the next call is
            made to this PofWriter.
            </summary>
            <param name="iProp">
            the property index
            </param>
            <param name="nTypeId">
            the type identifier of the nested property
            </param>
            <returns>
            a PofWriter whose contents are nested into a single property
            of this PofWriter
            </returns>
            <exception cref="T:System.ArgumentException">
            if the property index is invalid, or is less than or equal to the index
            of the previous property written to the POF stream
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if no user type is being written
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occurs
            </exception>
            <since> Coherence 12.2.1</since>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.WriteRemainder(Tangosol.Util.Binary)">
            <summary>
            Write the remaining properties to the POF stream, terminating the
            writing of the currrent user type.
            </summary>
            <remarks>
            <p>
            As part of writing out a user type, this method must be called by
            the <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> that is writing out the user
            type, or the POF stream will be corrupted.</p>
            <p>
            Calling this method terminates the current user type by writing a
            -1 to the POF stream after the last indexed property. Subsequent
            calls to the various <b>WriteXYZ</b> methods of this interface
            will fail after this method is called.</p>
            </remarks>
            <param name="properties">
            A <b>Binary</b> object containing zero or more indexed
            properties in binary POF encoded form; may be <c>null</c>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If no user type is being written.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.BeginProperty(System.Int32)">
            <summary>
            Report that a POF property is about to be written to the POF
            stream.
            </summary>
            <remarks>
            This method call will be followed by one or more separate calls
            to a "write" method and the property extent will then be
            terminated by a call to <see cref="M:Tangosol.IO.Pof.PofStreamWriter.EndProperty(System.Int32)"/>.
            </remarks>
            <param name="index">
            The index of the property being written.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid; or is less
            than or equal to the index of the previous property written to
            the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.EndProperty(System.Int32)">
            <summary>
            Signifies the termination of the current POF property.
            </summary>
            <param name="index">
            The index of the current property.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.OnException(System.Exception)">
            <summary>
            Called when an unexpected exception is caught while writing to
            the POF stream.
            </summary>
            <remarks>
            If the given exception wraps an <b>IOException</b>, the
            <b>IOException</b> is unwrapped and rethrown; otherwise the given
            exception is rethrown.
            </remarks>
            <param name="e">
            The exception.
            </param>
            <exception cref="T:System.IO.IOException">
            The wrapped <b>IOException</b>, if the given exception is a
            wrapped <b>IOException</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.AssertEqual(System.Type,System.Type)">
            <summary>
            Assert that a class is equal to another class.
            </summary>
            <param name="type">
            The expected class; must not be <c>null</c>.
            </param>
            <param name="testType">
            The class to test for equality; must not be <c>null</c>
            </param>
            <exception cref="T:System.ArgumentException">
            If the second class is not equal to the first.
            </exception>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.m_writer">
            <summary>
            The <b>Stream</b> object that the <b>PofStreamWriter</b> writes
            to.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.m_ctx">
            <summary>
            The <b>IPofContext</b> used by this <b>PofStreamWriter</b> to
            serialize user types.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.m_evolvable">
            <summary>
            A flag to indicate if the object to be written is either
            evolvable or part of an evolvable object.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.m_handler">
            <summary>
            The <b>WritingPofHandler</b> used to write a POF stream.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.m_refs">
            <summary>If references are used, then this is the ReferenceLibrary
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamWriter.PofContext">
             <summary>
             Gets or sets the <see cref="T:Tangosol.IO.Pof.IPofContext"/> object used by this
             <b>PofStreamWriter</b> to serialize user types into a POF stream.
             </summary>
             <remarks>
             This is an advanced method that should be used with care.
             For example, if this method is being used to switch to another
             <b>IPofContext</b> mid-POF stream, it is important to eventually
             restore the original <b>IPofContext</b>. For example:
             <pre>
             IPofContext ctxOrig = writer.PofContext;
             try
             {
                 // switch to another IPofContext
                 writer.PofContext = ...;
            
                 // write POF data using the writer
             }
             finally
             {
                 // restore the original PofContext
                 writer.PofContext = ctxOrig;
             }
             </pre>
             </remarks>
             <value>
             The <b>IPofContext</b> object that contains user type meta-data.
             </value>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamWriter.UserTypeId">
            <summary>
            Gets the user type that is currently being written.
            </summary>
            <value>
            The user type information, or -1 if the <b>PofStreamWriter</b> is
            not currently writing a user type.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamWriter.VersionId">
            <summary>
            Gets or sets the version identifier of the user type that is
            currently being written.
            </summary>
            <value>
            The integer version ID of the user type; always non-negative.
            </value>
            <exception cref="T:System.ArgumentException">
            If the given version ID is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If no user type is being written.
            </exception>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamWriter.Writer">
            <summary>
            Gets the <see cref="T:Tangosol.IO.DataWriter"/> that this
            <b>PofStreamWriter</b> writes to.
            </summary>
            <value>
            The <b>DataWriter.</b>
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamWriter.PofHandler">
            <summary>
            Gets the <see cref="T:Tangosol.IO.Pof.WritingPofHandler"/> used internally by this
            <b>PofStreamWriter</b> to write the POF stream.
            </summary>
            <value>
            The <b>IPofHandler.</b>
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamWriter.IsEvolvable">
            <summary>
            Gets or sets the flag that indicate if the object to be written
            is either evolvable or part of an evolvable object.
            </summary>
            <value>
            True iff the object to be written is Evolvable.
            </value>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="T:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter">
            <summary>
            The <b>UserTypeWriter</b> implementation is a contextually-aware
            <see cref="T:Tangosol.IO.Pof.IPofWriter"/> whose purpose is to write the properties
            of a value of a specified user type.
            </summary>
            <remarks>
            <p>
            The "contextual awareness" refers to the fact that the
            <b>UserTypeWriter</b> maintains state about the type identifier,
            the PofWriter's property index position within the user type
            value, and an <see cref="T:Tangosol.IO.Pof.IPofContext"/> that may differ from the
            <b>IPofContext</b> that provided the <see cref="T:Tangosol.IO.Pof.IPofSerializer"/>
            which is using this <b>UserTypeWriter</b> to serialize a user
            type.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.#ctor(Tangosol.IO.DataWriter,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32)">
            <summary>
            Construct a <b>UserTypeWriter</b> for writing the property
            values of a user type.
            </summary>
            <param name="writer">
            The <see cref="T:Tangosol.IO.DataWriter"/> object to write to; must not be
            <c>null</c>.
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/> to use for writing the user
            type property values within the user type that this writer
            will be writing.
            </param>
            <param name="typeId">
            The type identifier of the user type; must be non-negative.
            </param>
            <param name="index">
            The index of the user type being written.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.#ctor(Tangosol.IO.Pof.PofStreamWriter,Tangosol.IO.DataWriter,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32)">
            <summary>
            Construct a <b>UserTypeWriter</b> for writing the property
            values of a user type.
            </summary>
            <param name="parent">
            the containing PofBufferWriter
            </param>
            <param name="writer">
            The <see cref="T:Tangosol.IO.DataWriter"/> object to write to; must not be
            <c>null</c>.
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/> to use for writing the user
            type property values within the user type that this writer
            will be writing.
            </param>
            <param name="typeId">
            The type identifier of the user type; must be non-negative.
            </param>
            <param name="index">
            The index of the user type being written.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.#ctor(Tangosol.IO.Pof.WritingPofHandler,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32)">
            <summary>
            Construct a <b>UserTypeWriter</b> for writing the property
            values of a user type.
            </summary>
            <param name="handler">
            The <see cref="T:Tangosol.IO.Pof.WritingPofHandler"/> used to write user type
            data (except for the user type id itself, which is passed as
            a constructor argument).
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/> to use for writing the user
            type property values within the user type that this writer
            will be writing.
            </param>
            <param name="typeId">
            The type identifier of the user type; must be non-negative.
            </param>
            <param name="index">
            The index of the user type being written.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.#ctor(Tangosol.IO.Pof.PofStreamWriter,Tangosol.IO.Pof.WritingPofHandler,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32)">
            <summary>
            Construct a <b>UserTypeWriter</b> for writing the property
            values of a user type.
            </summary>
            <param name="parent">
            the containing PofBufferWriter
            </param>
            <param name="handler">
            The <see cref="T:Tangosol.IO.Pof.WritingPofHandler"/> used to write user type
            data (except for the user type id itself, which is passed as
            a constructor argument).
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/> to use for writing the user
            type property values within the user type that this writer
            will be writing.
            </param>
            <param name="typeId">
            The type identifier of the user type; must be non-negative.
            </param>
            <param name="index">
            The index of the user type being written.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.#ctor(Tangosol.IO.Pof.PofStreamWriter,Tangosol.IO.Pof.WritingPofHandler,Tangosol.IO.Pof.IPofContext,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a <b>UserTypeWriter</b> for writing the property
            values of a user type.
            </summary>
            <param name="parent">
            the containing PofBufferWriter
            </param>
            <param name="handler">
            The <see cref="T:Tangosol.IO.Pof.WritingPofHandler"/> used to write user type
            data (except for the user type id itself, which is passed as
            a constructor argument).
            </param>
            <param name="ctx">
            The <see cref="T:Tangosol.IO.Pof.IPofContext"/> to use for writing the user
            type property values within the user type that this writer
            will be writing.
            </param>
            <param name="typeId">
            The type identifier of the user type; must be non-negative.
            </param>
            <param name="index">
            The index of the user type being written.
            </param>
            <param name="id">
            the identity of the object to encode, or -1 if the identity
            shouldn't be encoded in the POF stream
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.WriteObject(System.Int32,System.Object)">
            <summary>
            Write an <b>Object</b> property to the POF stream.
            </summary>
            <remarks>
            <p>
            The given object must be an instance (or an array of instances)
            of one of the following:
            <list type="bullet">
            <item>Boolean</item>
            <item>Byte</item>
            <item>Char</item>
            <item>Int16</item>
            <item>Int32</item>
            <item>Int64</item>
            <item>Single</item>
            <item>Double</item>
            <item>String</item>
            <item>DateTime</item>
            <item>TimeSpan</item>
            <item>ICollection</item>
            <item><see cref="T:Tangosol.Util.ILongArray"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawDateTime"/></item>
            <item><see cref="T:Tangosol.IO.Pof.RawYearMonthInterval"/></item>
            <item><see cref="T:Tangosol.IO.Pof.IPortableObject"/></item>
            </list></p>
            <p>
            Otherwise, an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> for the object must
            be obtainable from the <see cref="T:Tangosol.IO.Pof.IPofContext"/> associated
            with this <b>IPofWriter</b>.</p>
            </remarks>
            <param name="index">
            The property index.
            </param>
            <param name="o">
            The <b>Object</b> property value to write.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid, or is
            less than or equal to the index of the previous property
            written to the POF stream, or if the given property cannot be
            encoded into a POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.CreateNestedPofWriter(System.Int32)">
            <summary>
            Obtain a PofWriter that can be used to write a set of properties into
            a single property of the current user type. The returned PofWriter is
            only valid from the time that it is returned until the next call is
            made to this PofWriter.
            </summary>
            <param name="iProp">
            the property index
            </param>
            <returns>
            a PofWriter whose contents are nested into a single property
            of this PofWriter
            </returns>
            <exception cref="T:System.ArgumentException">
            if the property index is invalid, or is less than or equal to the index
            of the previous property written to the POF stream
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if no user type is being written
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occurs
            </exception>
            <since> Coherence 3.6 </since>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.CreateNestedPofWriter(System.Int32,System.Int32)">
            <summary>
            Obtain a PofWriter that can be used to write a set of properties into
            a single property of the current user type. The returned PofWriter is
            only valid from the time that it is returned until the next call is
            made to this PofWriter.
            </summary>
            <param name="iProp">
            the property index
            </param>
            <param name="nTypeId">
            the type identifier of the nested property
            </param>
            <returns>
            a PofWriter whose contents are nested into a single property
            of this PofWriter
            </returns>
            <exception cref="T:System.ArgumentException">
            if the property index is invalid, or is less than or equal to the index
            of the previous property written to the POF stream
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if no user type is being written
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occurs
            </exception>
            <since> Coherence 3.6 </since>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.WriteRemainder(Tangosol.Util.Binary)">
            <summary>
            Write the remaining properties to the POF stream, terminating
            the writing of the currrent user type.
            </summary>
            <remarks>
            <p>
            As part of writing out a user type, this method must be
            called by the <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> that is writing
            out the user type, or the POF stream will be corrupted.</p>
            <p>
            Calling this method terminates the current user type by
            writing a -1 to the POF stream after the last indexed
            property. Subsequent calls to the various <b>WriteXYZ</b>
            methods of this interface will fail after this method is
            called.</p>
            </remarks>
            <param name="properties">
            A <b>Byte[]</b> object containing zero or more indexed
            properties in binary POF encoded form; may be <c>null</c>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If no user type is being written.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.BeginProperty(System.Int32)">
            <summary>
            Report that a POF property is about to be written to the POF
            stream.
            </summary>
            <remarks>
            <p>
            This method call will be followed by one or more separate
            calls to a "write" method and the property extent will then
            be terminated by a call to <see cref="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.EndProperty(System.Int32)"/>.</p>
            </remarks>
            <param name="index">
            The index of the property being written.
            </param>
            <exception cref="T:System.ArgumentException">
            If the property <paramref name="index"/> is invalid; or is
            less than or equal to the index of the previous property
            written to the POF stream.
            </exception>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.EndProperty(System.Int32)">
            <summary>
            Signifies the termination of the current POF property.
            </summary>
            <param name="index">
            The index of the current property.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.CloseNested">
            <summary>
            Notify the UserTypeWriter that it is being "closed". This
            notification allows the UserTypeWriter to write any remaining data
            that it has pending to write.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.OnException(System.Exception)">
            <summary>
            Called when an unexpected exception is caught while writing
            to the POF stream.
            </summary>
            <remarks>
            If the given exception wraps an IOException, the IOException
            is unwrapped and rethrown; otherwise the given exception is
            rethrown.
            </remarks>
            <param name="e">
            The exception.
            </param>
            <exception cref="T:System.IO.IOException">
            The wrapped <b>IOException</b>, if the given exception is a
            wrapped <b>IOException.</b></exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.WriteUserTypeInfo">
            <summary>
            Write out the type and version identifiers of the user type
            to the POF stream, if they haven't already been written.
            </summary>
            <exception cref="T:System.IO.IOException">
            On I/O error.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.EnableReference">
            <summary>
            Ensure that reference support (necessary for cyclic dependencies) is
            enabled.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.m_typeId">
            <summary>
            The type identifier of the user type that is being written.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.m_versionId">
            <summary>
            The version identifier of the user type that is being
            written.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.m_prop">
            <summary>
            The index of the user type being written.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.m_id">
            <summary>
            The identity of the object to encode, or -1 if the identity
            shouldn't be encoded in the POF stream
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.m_prevProp">
            <summary>
            The index of the last property written to the POF stream or
            -1 if the first property has yet to be written.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.m_isUserTypeBegin">
            <summary>
            <b>true</b> if the type and version identifier of the user
            type was written to the POF stream.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.m_isUserTypeEnd">
            <summary>
            <b>true</b> if the user type was written to the POF stream.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.m_complex">
            <summary>
            The <b>Complex</b> value that corresponds to the user type
            that is being written.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.m_writerNested">
            <summary>
            The currently open nested writer, if any.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.UserTypeId">
            <summary>
            Gets the user type that is currently being written.
            </summary>
            <value>
            The user type information, or -1 if the
            <b>PofStreamWriter</b> is not currently writing a user type.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.VersionId">
            <summary>
            Gets or sets the version identifier of the user type that is
            currently being written.
            </summary>
            <value>
            The integer version ID of the user type; always non-negative.
            </value>
            <exception cref="T:System.ArgumentException">
            If the given version ID is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If no user type is being written.
            </exception>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.WriterParent">
            <summary>
            If this writer is contextually within a user type, obtain the writer
            which created this writer in order to write the user type.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.PofStreamWriter.UserTypeWriter.IsEvolvable">
            <summary>
            Gets the flag that indicate if the object to be written is
            either evolvable or part of an evolvable object.
            </summary>
            <value>
            True iff the object to be written is IEvolvable.
            </value>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="T:Tangosol.IO.Pof.PofStreamWriter.ReferenceLibrary">
            <summary>
            A "library" of object references and their corresponding identities in
            the POF stream.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.ReferenceLibrary.getIdentity(System.Object)">
            <summary>
            Look up an identity for an object.
            </summary>
            <param name="o">the object</param>
            <returns> the identity, or -1 if the object is not registered
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.PofStreamWriter.ReferenceLibrary.registerReference(System.Object)">
            <summary>
            Register an object.
            </summary>
            <param name="o"> the object </param>
            <returns>
            the assigned identity for the object
            </returns>
            <exception cref="T:System.InvalidOperationException">
            if the object is already registered
            </exception>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.ReferenceLibrary.m_cRefs">
            <summary>
            The reference counter.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.PofStreamWriter.ReferenceLibrary.m_mapIdentities">
            <summary>
            A map from objects that can be referenced to their integer
            identities.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.PortableObjectSerializer">
            <summary><see cref="T:Tangosol.IO.Pof.IPofSerializer"/> implementation that supports
            the serialization and deserialization of any class that implements
            <see cref="T:Tangosol.IO.Pof.IPortableObject"/> to and from a POF stream.
            </summary>
            <author>Jason Howes  2006.07.18</author>
            <author>Aleksandar Seovic  2006.08.12</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableObjectSerializer.#ctor(System.Int32)">
            <summary>
            Create a new PortableObjectSerializer for the user type with the
            given type identifier.
            </summary>
            <param name="typeId">
            The user type identifier.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableObjectSerializer.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)">
            <summary>
            Serialize a user type instance to a POF stream by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for writing out an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must set the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may write any combination of the properties of
            the user type by using the "write" methods of the
            <b>IPofWriter</b>, but it must do so in the order of the property
            indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been written,
            the implementation must terminate the writing of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteRemainder(Tangosol.Util.Binary)"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="writer">
            The <see cref="T:Tangosol.IO.Pof.IPofWriter"/> with which to write the object's
            state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableObjectSerializer.Deserialize(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize a user type instance from a POF stream by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for reading in an object of a
            user type:
            <list type="number">
            <item>
            <description>
            If the object is evolvable, the implementation must get the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.
            </description>
            </item>
            <item>
            <description>
            The implementation may read any combination of the properties of
            the user type by using "read" methods of the <b>IPofReader</b>,
            but it must do so in the order of the property indexes.
            </description>
            </item>
            <item>
            <description>
            After all desired properties of the user type have been read, the
            implementation must terminate the reading of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofReader.ReadRemainder"/>.
            </description>
            </item>
            </list>
            </remarks>
            <param name="reader">
            The <see cref="T:Tangosol.IO.Pof.IPofReader"/> with which to read the object's
            state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.PortableObjectSerializer.Initialize(Tangosol.IO.Pof.IPortableObject,Tangosol.IO.Pof.IPofReader)">
            <summary>
            Initialize the specified (newly instantiated) PortableObject instance
            using the specified reader.
            </summary>
            <param name="portable">The object to initialize.</param>
            <param name="reader">
            The PofReader with which to read the object's state.
            </param>
        </member>
        <member name="F:Tangosol.IO.Pof.PortableObjectSerializer.m_typeId">
            <summary>
            The type identifier of the user type to serialize and
            deserialize.
            </summary>
        </member>
        <member name="T:Tangosol.IO.Pof.RawTime">
            <summary>
            An immutable time value.
            </summary>
            <author>Ivan Cikic  2007.03.14</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.RawTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a raw POF time value.
            </summary>
            <param name="hour">
            The hours (0 through 23).
            </param>
            <param name="minute">
            The minutes (0 through 59).
            </param>
            <param name="second">
            The seconds (0 through 59).
            </param>
            <param name="nanosecond">
            The nanoseconds (0 through 999999999).
            </param>
            <param name="isUTC">
            <b>true</b> if the time value is UTC or <b>false</b> if the time
            value does not have an explicit time zone.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.RawTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a raw POF time value with a timezone.
            </summary>
            <param name="hour">
            The hours (0 through 23).
            </param>
            <param name="minute">
            The minutes (0 through 59).
            </param>
            <param name="second">
            The seconds (0 through 59).
            </param>
            <param name="nanosecond">
            The nanoseconds (0 through 999999999).
            </param>
            <param name="hourOffset">
            The timezone offset in hours from UTC, for example 0 for BST, -5
            for EST and 1 for CET.
            </param>
            <param name="minuteOffset">
            The timezone offset in minutes, for example 0 (in most cases) or
            30.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.RawTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Internal constructor.
            </summary>
            <param name="hour">
            The hours (0 through 23).
            </param>
            <param name="minute">
            The minutes (0 through 59).
            </param>
            <param name="second">
            The seconds (0 through 59).
            </param>
            <param name="nanosecond">
            The nanoseconds (0 through 999999999).
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.RawTime.ToDateTime">
            <summary>
            Converts this instance into a <b>DateTime</b> representation,
            ignoring any time zone information if present.
            </summary>
            <returns>
            A <b>DateTime</b> object based on this instance.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawTime.ToUniversalTime">
            <summary>
            Converts this instance into a Coordinated Universal Time (UTC)
            <b>DateTime</b> representation.
            </summary>
            <returns>
            A UTC <b>DateTime</b> object based on this instance.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawTime.ToLocalTime">
            <summary>
            Converts this instance into a local <b>DateTime</b> 
            representation.
            </summary>
            <returns>
            A local <b>DateTime</b> object based on this instance.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawTime.Equals(System.Object)">
            <summary>
            Compare this object with another for equality.
            </summary>
            <param name="o">
            Another object to compare to for equality.
            </param>
            <returns>
            <b>true</b> iff this object is equal to the other object.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawTime.GetHashCode">
            <summary>
            Obtain the hashcode for this object.
            </summary>
            <returns>
            An integer hashcode.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawTime.ToString">
            <summary>
            Format this object's data as a human-readable string.
            </summary>
            <returns>
            A string description of this object.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.RawTime.TZ_NONE">
            <summary>
            Indicates that the time value does not have an explicit time 
            zone.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.RawTime.TZ_UTC">
            <summary>
            Indicates that the time value is in UTC.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.RawTime.TZ_OFFSET">
            <summary>
            Indicates that the time value has an explicit time zone.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.RawTime.m_hour">
            <summary>
            The hour number.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.RawTime.m_minute">
            <summary>
            The minute number.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.RawTime.m_second">
            <summary>
            The second number.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.RawTime.m_nanosecond">
            <summary>
            The nanosecond number.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.RawTime.m_timeZoneType">
            <summary>
            The timezone indicator, one of the TZ_ enumerated constants.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.RawTime.m_hourOffset">
            <summary>
            The hour offset of the time's timezone.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.RawTime.m_minuteOffset">
            <summary>
            The minute offset of the time's timezone.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.RawTime.Hour">
            <summary>
            Determine the time's hour value.
            </summary>
            <value>
            The hour between 0 and 23 inclusive.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.RawTime.Minute">
            <summary>
            Determine the time's minute value.
            </summary>
            <value>
            The minute between 0 and 23 inclusive.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.RawTime.Second">
            <summary>
            Determine the time's second value.
            </summary>
            <value>
            The second value between 0 and 59 inclusive.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.RawTime.Nanosecond">
            <summary>
            Determine the time's nanosecond value.
            </summary>
            <value>
            The nanosecond value between 0 and 999999999 inclusive.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.RawTime.HasTimezone">
            <summary>
            Determine if the time value has an explicit timezone. 
            </summary>
            <remarks>
            A time value without an explicit timezone is assumed to be in 
            some conventional local timezone, according to ISO8601.
            </remarks>
            <value>
            <b>true</b> iff the time has an explicit timezone.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.RawTime.IsUtc">
            <summary>
            Determine if the time value uses UTC.
            </summary>
            <value>
            <b>true</b> if the time value is a UTC value.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.RawTime.HourOffset">
            <summary>
            Determine the timezone's hour offset value.
            </summary>
            <value>
            The hour offset of the timezeone, or zero if there is no
            explicit timezone or the time is UTC.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.RawTime.MinuteOffset">
            <summary>
            Determine the timezone's minute offset value.
            </summary>
            <value>
            The minute offset of the timezeone, or zero if there is no
            explicit timezone or the time is UTC.
            </value>
        </member>
        <member name="T:Tangosol.IO.Pof.RawYearMonthInterval">
            <summary>
            An immutable POF year-month interval value.
            </summary>
            <author>Cameron Purdy  2006.07.17</author>
            <author>Aleksandar Seovic  2006.08.14</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.RawYearMonthInterval.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a year-month interval value.
            </summary>
            <param name="years">
            The number of years in the year-month interval.
            </param>
            <param name="months">
            The number of months in the year-month interval.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.RawYearMonthInterval.Equals(System.Object)">
            <summary>
            Compare this object with another for equality.
            </summary>
            <param name="o">
            Another object to compare to for equality.
            </param>
            <returns>
            <b>true</b> iff this object is equal to the other object.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawYearMonthInterval.GetHashCode">
            <summary>
            Obtain the hashcode for this object.
            </summary>
            <returns>
            An integer hashcode.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.RawYearMonthInterval.ToString">
            <summary>
            Format this object's data as a human-readable string.
            </summary>
            <returns>
            A string description of this object.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.RawYearMonthInterval.m_years">
            <summary>
            The number of years in the year-month interval.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.RawYearMonthInterval.m_months">
            <summary>
            The number of months in the year-month interval.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.RawYearMonthInterval.Years">
            <summary>
            Gets the number of years in the year-month interval.
            </summary>
            <value>
            The number of years in the year-month interval.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.RawYearMonthInterval.Months">
            <summary>
            Gets the number of months in the year-month interval.
            </summary>
            <returns>
            The number of months in the year-month interval.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.SimplePofContext">
            <summary>
            Basic <see cref="T:Tangosol.IO.Pof.IPofContext"/> implementation.
            </summary>
            <seealso cref="T:Tangosol.IO.Pof.PortableObjectSerializer"/>
            <author>Jason Howes  2006.07.18</author>
            <author>Goran Milosavljevic  2006.08.09</author>
            <author>Aleksandar Seovic  2006.08.14</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.Serialize(Tangosol.IO.DataWriter,System.Object)">
            <summary>
            Serialize an object to a stream by writing its state using the
            specified <see cref="T:Tangosol.IO.DataWriter"/> object.
            </summary>
            <param name="writer">
            The <b>DataWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.Deserialize(Tangosol.IO.DataReader)">
            <summary>
            Deserialize an object from a stream by reading its state using
            the specified <see cref="T:Tangosol.IO.DataReader"/> object.
            </summary>
            <param name="reader">
            The <b>DataReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.GetPofSerializer(System.Int32)">
            <summary>
            Return an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> that can be used to
            serialize and deserialize an object of the specified user type to
            and from a POF stream.
            </summary>
            <param name="typeId">
            The type identifier of the user type that can be serialized and
            deserialized using the returned <b>IPofSerializer</b>; must be
            non-negative.
            </param>
            <returns>
            An <b>IPofSerializer</b> for the specified user type.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.GetUserTypeIdentifier(System.Object)">
            <summary>
            Determine the user type identifier associated with the given
            object.
            </summary>
            <param name="o">
            An instance of a user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given object is unknown to
            this <b>IPofContext</b>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="o"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.GetUserTypeIdentifier(System.Type)">
            <summary>
            Determine the user type identifier associated with the given
            type.
            </summary>
            <param name="type">
            A user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given type is unknown to
            this <b>IPofContext</b>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.GetUserTypeIdentifier(System.String)">
            <summary>
            Determine the user type identifier associated with the given type
            name.
            </summary>
            <param name="typeName">
            The name of a user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type name.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given type name is unknown
            to this <b>IPofContext</b>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="typeName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.GetTypeName(System.Int32)">
            <summary>
            Determine the name of the type associated with a user type
            identifier.
            </summary>
            <param name="typeId">
            The user type identifier; must be non-negative.
            </param>
            <returns>
            The name of the type associated with the specified user type
            identifier.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.GetType(System.Int32)">
            <summary>
            Determine the type associated with the given user type
            identifier.
            </summary>
            <param name="typeId">
            The user type identifier; must be non-negative.
            </param>
            <returns>
            The type associated with the specified user type identifier.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.IsUserType(System.Object)">
            <summary>
            Determine if the given object is of a user type known to this
            <b>IPofContext</b>.
            </summary>
            <param name="o">
            The object to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the specified object is of a valid user type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="o"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.IsUserType(System.Type)">
            <summary>
            Determine if the given type is a user type known to this
            <b>IPofContext</b>.
            </summary>
            <param name="type">
            The type to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the specified type is a valid user type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.IsUserType(System.String)">
            <summary>
            Determine if the type with the given name is a user type known to
            this <b>IPofContext</b>.
            </summary>
            <param name="typeName">
            The name of the type to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the type with the specified name is a valid user
            type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="typeName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.RegisterUserType(System.Int32,System.Type,Tangosol.IO.Pof.IPofSerializer)">
            <summary>
            Associate a user type with a type identifier and
            <see cref="T:Tangosol.IO.Pof.IPofSerializer"/>.
            </summary>
            <param name="typeId">
            The type identifier of the specified user type; must be greater
            or equal to 0.
            </param>
            <param name="type">
            The user type to register with this PofContext; must not be
            <c>null</c>.
            </param>
            <param name="serializer">
            The <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> that will be used to serialize
            and deserialize objects of the specified type.
            </param>
            <exception cref="T:System.ArgumentException">
            On invalid type identifer, type, or <b>IPofSerializer</b>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.UnregisterUserType(System.Int32)">
            <summary>
            Unregister a user type that was previously registered using the
            specified type identifier.
            </summary>
            <param name="typeId">
            The type identifier of the user type to unregister.
            </param>
            <exception cref="T:System.ArgumentException">
            If the specified user type identifier is unknown to this
            IPofContext.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Pof.SimplePofContext.ValidateTypeId(System.Int32)">
            <summary>
            Ensure that the given user type identifier is valid.
            </summary>
            <param name="typeId">
            The user type identifier to validate.
            </param>
            <exception cref="T:System.ArgumentException">
            If the given user type identifier is negative.
            </exception>
        </member>
        <member name="F:Tangosol.IO.Pof.SimplePofContext.m_typeIdMap">
            <summary>
            A map that contains mappings from a registered
            user type into type identifier.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.SimplePofContext.m_typeMap">
            <summary>
            A map of user types, indexed by type identifier.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.SimplePofContext.m_serializerMap">
            <summary>
            A map of POF serializer objects, indexed by type identifier.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.SimplePofContext.m_referenceEnabled">
            <summary>
            <b>true</b> if POF Identity/Reference type support is enabled
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.SimplePofContext.IsReferenceEnabled">
            <summary>
            Determine if Identity/Reference type support is enabled for this
            SimplePofContext.
            </summary>
            <value> <b>true</b> if Identity/Reference type support is enabled
            </value>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="T:Tangosol.IO.Pof.WritingPofHandler">
            <summary>
            An implementation of <see cref="T:Tangosol.IO.Pof.IPofHandler"/> that writes a POF
            stream to a <b>Stream</b> using a <see cref="T:Tangosol.IO.DataWriter"/> object.
            </summary>
            <author>Cameron Purdy  2006.07.11</author>
            <author>Aleksandar Seovic  2006.08.08</author>
            <author>Ivan Cikic  2006.08.09</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.#ctor(Tangosol.IO.DataWriter)">
            <summary>
            Construct a WritingPofHandler that will write a POF stream to
            the passed <see cref="T:Tangosol.IO.DataWriter"/> object.
            </summary>
            <param name="writer">
            The <see cref="T:Tangosol.IO.DataWriter"/> to write to.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.RegisterIdentity(System.Int32)">
            <summary>
            This method is invoked when an identity is encountered in the POF
            stream.
            </summary>
            <remarks>
            The identity is used to uniquely identify the next value in the
            POF stream, and can be later referenced by the
            <see cref="M:Tangosol.IO.Pof.WritingPofHandler.OnIdentityReference(System.Int32,System.Int32)"/> method.
            </remarks>
            <param name="id">
            If <tt>(nId &gt;= 0)</tt>, then this is the identity encountered in
            the POF stream, otherwise it is an indicator that the following
            value <i>could</i> have been assigned an identifier but was not
            (i.e. that the subsequent value is of a referenceable data type).
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnNullReference(System.Int32)">
            <summary>
            Specifies that a <b>null</b> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnIdentityReference(System.Int32,System.Int32)">
            <summary>
            Specifies that a reference to a previously-identified value has
            been encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a dictionary, -1
            otherwise.
            </param>
            <param name="id">
            The identity of the previously encountered value, as was
            specified in a previous call to <see cref="M:Tangosol.IO.Pof.WritingPofHandler.RegisterIdentity(System.Int32)"/>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnInt16(System.Int32,System.Int16)">
             <summary>
             Report that a short integer value has been encountered in the POF
             stream.
             </summary>
            <param name="position">
             Context-sensitive position information: property position within
             a user type, array position within an array, element counter
             within a collection, entry counter within a dictionary, -1
             otherwise.
             </param>
             <param name="n">
             The integer value as a short.
             </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnInt32(System.Int32,System.Int32)">
            <summary>
            Report that an integer value has been encountered in the POF
            stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="n">
            The integer value as an int.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnInt64(System.Int32,System.Int64)">
            <summary>
            Report that a long integer value has been encountered in the POF
            stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="n">
            The integer value as a long.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnInt128(System.Int32,Tangosol.IO.Pof.RawInt128)">
            <summary>
            Report that an <b>Int128</b> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="n">
            The integer value as an <b>Int128</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnFloat32(System.Int32,System.Single)">
            <summary>
            Report that a base-2 single-precision floating point value has
            been encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="fl">
            The floating point value as a float.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnFloat64(System.Int32,System.Double)">
            <summary>
            Report that a base-2 double-precision floating point value has
            been encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="dfl">
            The floating point value as a double.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnDecimal32(System.Int32,System.Decimal)">
            <summary>
            Report that a <b>Decimal32</b> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="dec">
            The decimal value as a <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnDecimal64(System.Int32,System.Decimal)">
            <summary>
            Report that a <b>Decimal64</b> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="dec">
            The decimal value as a <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnDecimal128(System.Int32,System.Decimal)">
            <summary>
            Report that a <b>Decimal128</b> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="dec">
            The decimal value as a <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnDecimal(System.Int32,System.Decimal)">
            <summary>
            Report that a <b>Decimal</b> value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="dec">
            The decimal value as a <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnBoolean(System.Int32,System.Boolean)">
            <summary>
            Report that a boolean value has been encountered in the POF
            stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="f">
            The boolean value.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnOctet(System.Int32,System.Int32)">
            <summary>
            Report that an octet value (a byte) has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="b">
            The octet value as an int whose value is in the range 0 to
            255 (0x00-0xFF) inclusive.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnChar(System.Int32,System.Char)">
            <summary>
            Report that a character value has been encountered in the POF
            stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="ch">
            The character value as a char.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnCharString(System.Int32,System.String)">
            <summary>
            Report that a character string value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="s">
            The character string value as a String object.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnOctetString(System.Int32,Tangosol.Util.Binary)">
            <summary>
            Report that a octet string value has been encountered in the POF
            stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property index within a
            user type, array index within an array, element counter within a
            collection, entry counter within a dictionary, -1 otherwise.
            </param>
            <param name="bin">
            The octect string value as a <b>Binary</b> object.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnDate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a date value has been encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="year">
            The year number as defined by ISO8601; note the difference with
            the Java Date class, whose year is relative to 1900.
            </param>
            <param name="month">
            The month number between 1 and 12 inclusive as defined by
            ISO8601; note the difference from the Java Date class, whose
            month value is 0-based (0-11).
            </param>
            <param name="day">
            The day number between 1 and 31 inclusive as defined by ISO8601.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnYearMonthInterval(System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a year-month interval value has been encountered
            in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="years">
            The number of years in the year-month interval.
            </param>
            <param name="months">
            The number of months in the year-month interval.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Report that a time value has been encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="hour">
            The hour between 0 and 23 inclusive.
            </param>
            <param name="minute">
            The minute value between 0 and 59 inclusive.
            </param>
            <param name="second">
            The second value between 0 and 59 inclusive (and theoretically 60
            for a leap-second).
            </param>
            <param name="nanosecond">
            The nanosecond value between 0 and 999999999 inclusive.
            </param>
            <param name="isUTC">
            <b>true</b> if the time value is UTC or <b>false</b> if the time
            value does not have an explicit time zone.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Report that a time value (with a timezone offset) has been
            encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="hour">
            The hour between 0 and 23 inclusive.
            </param>
            <param name="minute">
            The minute value between 0 and 59 inclusive.
            </param>
            <param name="second">
            The second value between 0 and 59 inclusive (and theoretically 60
            for a leap-second).
            </param>
            <param name="nano">
            The nanosecond value between 0 and 999999999 inclusive.
            </param>
            <param name="zoneOffset">
            The timezone offset from UTC, for example 0 for BST, -5 for EST
            and +1 for CET.
            </param>
            <seealso href="http://www.worldtimezone.com/faq.html">worldtimezone.com</seealso>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnTimeInterval(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a time interval value has been encountered in the POF
            stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="hours">
            The number of hours in the time interval.
            </param>
            <param name="minutes">
            The number of minutes in the time interval, from 0 to 59
            inclusive.
            </param>
            <param name="seconds">
            The number of seconds in the time interval, from 0 to 59
            inclusive.
            </param>
            <param name="nanos">
            The number of nanoseconds, from 0 to 999999999 inclusive.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Report that a date-time value has been encountered in the POF
            stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="year">
            The year number as defined by ISO8601; note the difference with
            the Java Date class, whose year is relative to 1900.
            </param>
            <param name="month">
            The month number between 1 and 12 inclusive as defined by
            ISO8601; note the difference from the Java Date class, whose
            month value is 0-based (0-11).
            </param>
            <param name="day">
            The day number between 1 and 31 inclusive as defined by ISO8601.
            </param>
            <param name="hour">
            The hour between 0 and 23 inclusive.
            </param>
            <param name="minute">
            The minute value between 0 and 59 inclusive.
            </param>
            <param name="second">
            The second value between 0 and 59 inclusive (and theoretically 60
            for a leap-second).
            </param>
            <param name="nano">
            The nanosecond value between 0 and 999999999 inclusive.
            </param>
            <param name="isUTC">
            <b>true</b> if the time value is UTC or <b>false</b> if the time
            value does not have an explicit time zone.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Report that a date-time value (with a timezone offset) has been
            encountered in the POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="year">
            The year number as defined by ISO8601; note the difference with
            the Java Date class, whose year is relative to 1900.
            </param>
            <param name="month">
            The month number between 1 and 12 inclusive as defined by
            ISO8601; note the difference from the Java Date class, whose
            month value is 0-based (0-11).
            </param>
            <param name="day">
            The day number between 1 and 31 inclusive as defined by ISO8601.
            </param>
            <param name="hour">
            The hour between 0 and 23 inclusive.
            </param>
            <param name="minute">
            The minute value between 0 and 59 inclusive.
            </param>
            <param name="second">
            The second value between 0 and 59 inclusive (and theoretically 60
            for a leap-second).
            </param>
            <param name="nano">
            The nanosecond value between 0 and 999999999 inclusive.
            </param>
            <param name="zoneOffset">
            The timezone offset from UTC, for example 0 for BST, -5 for EST
            and +1 for CET.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.OnDayTimeInterval(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a day-time interval value has been encountered in the
            POF stream.
            </summary>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="days">
            The number of days in the day-time interval.
            </param>
            <param name="hours">
            The number of hours in the day-time interval, from 0 to 23
            inclusive.
            </param>
            <param name="minutes">
            The number of minutes in the day-time interval, from 0 to 59
            inclusive.
            </param>
            <param name="seconds">
            The number of seconds in the day-time interval, from 0 to 59
            inclusive.
            </param>
            <param name="nanos">
            The number of nanoseconds in the day-time interval, from 0 to
            999999999 inclusive.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.BeginCollection(System.Int32,System.Int32)">
            <summary>
            Report that a collection of values has been encountered in the
            POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>elements</tt> elements in
            the collection, and the collection extent will then be terminated
            by a call to <see cref="M:Tangosol.IO.Pof.WritingPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="elements">
            The exact number of values (elements) in the collection.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.BeginUniformCollection(System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a uniform collection of values has been encountered
            in the POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>cElements</tt> elements in
            the collection, and the collection extent will then be terminated
            by a call to <see cref="M:Tangosol.IO.Pof.WritingPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="elementCount">
            The exact number of values (elements) in the collection.
            </param>
            <param name="typeId">
            The type identifier for all of the values in the uniform
            collection.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.BeginArray(System.Int32,System.Int32)">
            <summary>
            Report that an array of values has been encountered in the POF
            stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>cElements</tt> elements in
            the array, and the array extent will then be terminated by a call
            to <see cref="M:Tangosol.IO.Pof.WritingPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="elementCount">
            The exact number of values (elements) in the array.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.BeginUniformArray(System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a uniform array of values has been encountered in the
            POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>cElements</tt> elements in
            the array, and the array extent will then be terminated by a call
            to <see cref="M:Tangosol.IO.Pof.WritingPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="elementCount">
            The exact number of values (elements) in the array.
            </param>
            <param name="typeId">
            The type identifier for all of the values in the uniform array.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.BeginSparseArray(System.Int32,System.Int32)">
            <summary>
            Report that a sparse array of values has been encountered in the
            POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for present element in the sparse array (up to
            <paramref name="elementCount"/> elements), and the array extent
            will then be terminated by a call to
            <see cref="M:Tangosol.IO.Pof.WritingPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="elementCount">
            The exact number of elements in the array, which is greater than
            or equal to the number of values in the sparse POF stream; in
            other words, the number of values that will subsequently be
            reported will not exceed this number.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.BeginUniformSparseArray(System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a uniform sparse array of values has been encountered
            in the POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for present element in the sparse array (up to
            <tt>elements</tt> elements), and the array extent will then be
            terminated by a call to <see cref="M:Tangosol.IO.Pof.WritingPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="elements">
            The exact number of elements in the array, which is greater than
            or equal to the number of values in the sparse POF stream; in
            other words, the number of values that will subsequently be
            reported will not exceed this number.
            </param>
            <param name="typeId">
            The type identifier for all of the values in the uniform sparse
            array.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.BeginMap(System.Int32,System.Int32)">
            <summary>
            Report that a map of key/value pairs has been encountered in the
            POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>elements</tt> elements in
            the map, and the map extent will then be terminated by a call to
            <see cref="M:Tangosol.IO.Pof.WritingPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="elements">
            The exact number of key/value pairs (entries) in the map.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.BeginUniformKeysMap(System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a map of key/value pairs (with the keys being of a
            uniform type) has been encountered in the POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>elements</tt> elements in
            the map, and the map extent will then be terminated by a call to
            <see cref="M:Tangosol.IO.Pof.WritingPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="elements">
            The exact number of key/value pairs (entries) in the map.
            </param>
            <param name="keysTypeId">
            The type identifier for all of the keys in the uniform-keys map.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.BeginUniformMap(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a map of key/value pairs (with the keys being of a
            uniform type and the values being of a uniform type) has been
            encountered in the POF stream.
            </summary>
            <remarks>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the <tt>elements</tt> elements in
            the map, and the map extent will then be terminated by a call to
            <see cref="M:Tangosol.IO.Pof.WritingPofHandler.EndComplexValue"/>.
            </remarks>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="elements">
            The exact number of key/value pairs (entries) in the map.
            </param>
            <param name="keysTypeId">
            The type identifier for all of the keys in the uniform map.
            </param>
            <param name="valuesTypeId">
            The type identifier for all of the values in the uniform map.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.BeginUserType(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Report that a value of a "user type" has been encountered in the
            POF stream.
            </summary>
            <remarks>
            <p>
            A user type is analogous to a "class", and a value of a user type
            is analogous to an "object".</p>
            <p>
            This method call will be followed by a separate call to an "on"
            or "begin" method for each of the property values in the user
            type, and the user type will then be terminated by a call to
            <see cref="M:Tangosol.IO.Pof.WritingPofHandler.EndComplexValue"/>.</p>
            </remarks>
            <param name="position">
            Context-sensitive position information: property position within
            a user type, array position within an array, element counter
            within a collection, entry counter within a map, -1 otherwise.
            </param>
            <param name="nId">
            Identity of the object to encode, or -1 if identity
            shouldn't be encoded in the POF stream.
            </param>
            <param name="userTypeId">
            The user type identifier, <tt>(userTypeId &gt;= 0)</tt>.
            </param>
            <param name="versionId">
            The version identifier for the user data type data in the POF
            stream, <tt>(versionId &gt;= 0)</tt>.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.EndComplexValue">
            <summary>
            Signifies the termination of the current complex value.
            </summary>
            <remarks>
            Complex values are any of the collection, array, map and user
            types. For each call to one of the "begin" methods, there will be
            a corresponding call to this method, even if there were no
            contents in the complex value.
            </remarks>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.GetComplex">
            <summary>
            Obtain the current Complex object that represents the complex
            type that is being written to the POF stream.
            </summary>
            <returns>
            The current Complex object.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.EncodePosition(System.Int32)">
            <summary>
            Called for each and every value going into the POF stream, in
            case the value needs its position to be encoded into the stream.
            </summary>
            <param name="position">
            The position (property position, array position, etc.)
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.IsTypeIdEncoded(System.Int32)">
            <summary>
            Determine if the type should be encoded for the current value.
            </summary>
            <param name="typeId">
            The type of the current value.
            </param>
            <returns>
            <b>true</b> if the type ID should be placed into the POF stream,
            and <b>false</b> if only the value itself should be placed into
            the stream.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.WritingPofHandler.m_writer">
            <summary>
            The DataWriter to write to.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.WritingPofHandler.m_complex">
            <summary>
            The current containing Complex value in the POF stream.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.WritingPofHandler.m_hasIdentity">
            <summary>
            Set to true when the next value to write has been tagged with an identity.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.WritingPofHandler.Writer">
            <summary>
            Gets the <see cref="T:Tangosol.IO.DataWriter"/> object that this
            WritingPofHandler is writing to.
            </summary>
            <value>
            The <see cref="T:Tangosol.IO.DataWriter"/> object that this POF handler is
            writing to.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.WritingPofHandler.IsSkippable">
            <summary>
            Determine if the value encoding can be skipped.
            </summary>
            <remarks>
            A value can be skipped if it is a default value and if it does
            not have an identity and if it is in a sparse data structure.
            </remarks>
            <returns>
            <b>true</b> if value encoding of default values can be skipped
            altogether.
            </returns>
        </member>
        <member name="P:Tangosol.IO.Pof.WritingPofHandler.IsCompressable">
            <summary>
            Determine if the value encoding can be compressed by combining
            type and value information in such a way that type information
            could be lost.
            </summary>
            <returns>
            <b>true</b> if values can be encoded without type information.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Pof.WritingPofHandler.Complex">
            <summary>
            A Complex object represents the current complex data structure in
            the POF stream.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.Complex.#ctor(Tangosol.IO.Pof.WritingPofHandler.Complex,System.Boolean)">
            <summary>
            Construct a Complex object for a data collection or user
            type.
            </summary>
            <param name="complexCurrent">
            The current Complex object or <c>null</c>.
            </param>
            <param name="encodePosition">
            <b>true</b> to encode the position information.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.Complex.#ctor(Tangosol.IO.Pof.WritingPofHandler.Complex,System.Boolean,System.Int32)">
            <summary>
            Construct a Complex object for a uniformly-typed data
            collection.
            </summary>
            <param name="complexCurrent">
            The current Complex object or <c>null</c>.
            </param>
            <param name="encodePosition">
            <b>true</b> to encode the position information.
            </param>
            <param name="uniformTypeId">
            The type identifier of the uniform type.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.Complex.OnValue(System.Int32)">
            <summary>
            Notify the Complex object that a value has been encountered.
            </summary>
            <param name="position">
            The position that accomponied the value.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.Complex.Pop">
            <summary>
            Pop this Complex object off the stack, returning the outer
            Complex object or <c>null</c> if there is none.
            </summary>
            <returns>
            The outer Complex object or <c>null</c> if there is none.
            </returns>
        </member>
        <member name="F:Tangosol.IO.Pof.WritingPofHandler.Complex.m_isSparse">
            <summary>
            Whether or not the position information is encoded.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.WritingPofHandler.Complex.m_isUniform">
            <summary>
            Whether or not values within the complex type are uniformly
            encoded.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.WritingPofHandler.Complex.m_typeId">
            <summary>
            The type ID, if uniform encoding is used.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.WritingPofHandler.Complex.m_outerComplex">
            <summary>
            The Complex within which this Complex exists, to support
            nesting.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.WritingPofHandler.Complex.IsUniform">
            <summary>
            Determine if the object encoding within the Complex type is
            uniform.
            </summary>
            <value>
            <b>true</b> if values within the Complex type are of a
            uniform type and are encoded uniformly.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.WritingPofHandler.Complex.UniformType">
            <summary>
            If the object encoding is using uniform encoding, obtain the
            type id of the uniform type.
            </summary>
            <value>
            The type id used for the uniform encoding.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.WritingPofHandler.Complex.IsSparse">
            <summary>
            Determine if the position information is encoded with the
            values of the complex type, and if the Complex type is
            terminated in the POF stream with an illegal position (-1).
            </summary>
            <value>
            <b>true</b> iff the complex value is a sparse type.
            </value>
        </member>
        <member name="T:Tangosol.IO.Pof.WritingPofHandler.ComplexMap">
            <summary>
            A ComplexMap object represents a map data structure (with uniform
            keys or with uniform keys and values) in the POF stream.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.ComplexMap.#ctor(Tangosol.IO.Pof.WritingPofHandler.Complex,System.Int32)">
            <summary>
            Construct a ComplexMap object for maps with uniformly-typed
            keys.
            </summary>
            <param name="complexCurrent">
            The current Complex object or <c>null</c>.
            </param>
            <param name="uniformKeyTypeId">
            The type identifier of the uniform type.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.ComplexMap.#ctor(Tangosol.IO.Pof.WritingPofHandler.Complex,System.Int32,System.Int32)">
            <summary>
            Construct a ComplexMap object for maps with uniformly-typed
            keys and values.
            </summary>
            <param name="complexCurrent">
            The current Complex object or <c>null</c>.
            </param>
            <param name="uniformKeyTypeId">
            The type identifier of the uniform type for keys in the map.
            </param>
            <param name="uniformValTypeId">
            The type identifier of the uniform type for values in the
            map.
            </param>
        </member>
        <member name="M:Tangosol.IO.Pof.WritingPofHandler.ComplexMap.OnValue(System.Int32)">
            <summary>
            Notify the Complex object that a value has been encountered.
            </summary>
            <param name="position">
            The position that accomponied the value.
            </param>
        </member>
        <member name="F:Tangosol.IO.Pof.WritingPofHandler.ComplexMap.m_isKey">
            <summary>
            Toggles between key and value processing every time the
            caller invokes <see cref="M:Tangosol.IO.Pof.WritingPofHandler.ComplexMap.OnValue(System.Int32)"/>.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.WritingPofHandler.ComplexMap.m_isUniformValue">
            <summary>
            Whether or not values within the map are uniformly encoded.
            </summary>
        </member>
        <member name="F:Tangosol.IO.Pof.WritingPofHandler.ComplexMap.m_valueTypeId">
            <summary>
            The value type ID, if uniform encoding is used for values.
            </summary>
        </member>
        <member name="P:Tangosol.IO.Pof.WritingPofHandler.ComplexMap.IsUniform">
            <summary>
            Determine if the object encoding within the Complex type is
            uniform.
            </summary>
            <value>
            <b>true</b> if values within the Complex type are of a
            uniform type and are encoded uniformly.
            </value>
        </member>
        <member name="P:Tangosol.IO.Pof.WritingPofHandler.ComplexMap.UniformType">
            <summary>
            If the object encoding is using uniform encoding, obtain the
            type id of the uniform type.
            </summary>
            <returns>
            The type id used for the uniform encoding.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Resources.AbstractResource">
            <summary>
            Asbtract base class for other <see cref="T:Tangosol.IO.Resources.IResource"/>
            implementations.
            </summary>
            <author>Aleksandar Seovic  2006.10.07</author>
            <seealso cref="T:Tangosol.IO.Resources.IResource"/>
            <seealso cref="T:Tangosol.IO.Resources.ResourceLoader"/>
        </member>
        <member name="T:Tangosol.IO.Resources.IResource">
            <summary>
            Interface for access to different types of resources that can
            provide a <b>System.IO.Stream</b> to read from.
            </summary>
            <remarks>
            This interface encapsulates a resource descriptor that abstracts away
            from the underlying type of resource; possible resource types include
            files, URLs, web resources and assmbly embedded resources.
            </remarks>
            <seealso cref="T:Tangosol.IO.Resources.ResourceLoader"/>
            <author>Aleksandar Seovic  2006.10.07</author>
        </member>
        <member name="M:Tangosol.IO.Resources.IResource.GetStream">
            <summary>
            Opens an input stream for this resource.
            </summary>
            <remarks>
            <note type="caution">
            Clients of this interface must be aware that every call of this
            method will create a <i>fresh</i> <b>System.IO.Stream</b>;
            it is the responsibility of the calling code to close any such
            <b>System.IO.Stream</b>.
            </note>
            </remarks>
            <returns>
            A <b>System.IO.Stream</b>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
        </member>
        <member name="P:Tangosol.IO.Resources.IResource.Uri">
            <summary>
            Gets the fully qualified URI for this <see cref="T:Tangosol.IO.Resources.IResource"/>.
            </summary>
            <remarks>
            Fuly qualified URI for a resource is the name of the resource
            as specified, with a protocol name prepended if necessary.
            </remarks>
            <value>
            The fully qualified resource URI.
            </value>
        </member>
        <member name="P:Tangosol.IO.Resources.IResource.AbsolutePath">
            <summary>
            Gets an absolute path of this resource.
            </summary>
            <remarks>
            The exact value returned will depend on the specific
            resource implementation.
            <p/>
            For example, file system-based resources that support
            relative path resolution, such as <see cref="T:Tangosol.IO.Resources.FileResource"/>
            and <see cref="T:Tangosol.IO.Resources.WebResource"/>, should return an absolute
            path of the resource on the file system. Other resource
            types should return fully qualified URI for the resource,
            which is basically the value of the <see cref="P:Tangosol.IO.Resources.IResource.Uri"/>
            property.
            </remarks>
            <value>The absolute path of this resource.</value>
        </member>
        <member name="M:Tangosol.IO.Resources.AbstractResource.#ctor(System.String)">
            <summary>
            Constructor that takes resource name and creates a new instance 
            of the <b>AbstractResource</b> class.
            </summary>
            <remarks>
            Since this is an <b>abstract</b> class it does not expose
            any public constructors.
            </remarks>
            <param name="resourceName">
            A String representing the resource.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="resourceName"/> is <c>null</c> or
            it contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Tangosol.IO.Resources.AbstractResource.GetStream">
            <summary>
            Opens an input stream for this resource.
            </summary>
            <returns>
            A <b>System.IO.Stream</b>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
            <seealso cref="T:Tangosol.IO.Resources.IResource"/>
        </member>
        <member name="M:Tangosol.IO.Resources.AbstractResource.GetResourceNameWithoutProtocol(System.String)">
            <summary>
            Strips protocol name (if present) from the 
            <paramref name="resourceName"/>.
            </summary>        
            <param name="resourceName">
            Resource name.
            </param>
            <returns>
            Resource name without the protocol name.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Resources.AbstractResource.ToString">
            <summary>
            Returns the textual information about this resource.
            </summary>
            <returns>
            Human readable description of this resource.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Resources.AbstractResource.Equals(System.Object)">
            <summary>
            Compares specified with the current object.
            </summary>
            <remarks>
            This implementation compares <see cref="P:Tangosol.IO.Resources.AbstractResource.AbsolutePath"/> values.
            </remarks>
            <seealso cref="P:Tangosol.IO.Resources.IResource.Uri"/>
            <param name="obj">
            The <b>IResource</b> object to compare to.
            </param>
            <returns>
            <b>true</b> if this resource and the passed object are
            equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Resources.AbstractResource.GetHashCode">
            <summary>
            A hash function that returns the hashcode for this type, that is
            suitable for use in hashing algorithms and data structures like a
            hash table.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="P:Tangosol.IO.Resources.AbstractResource.Uri">
            <summary>
            Gets the fully qualified URI for this <see cref="T:Tangosol.IO.Resources.IResource"/>.
            </summary>
            <remarks>
            Fuly qualified URI for a resource is the name of the resource
            as specified, with a protocol name prepended if necessary.
            </remarks>
            <returns>
            The fully qualified resource URI.
            </returns>
            <seealso cref="P:Tangosol.IO.Resources.IResource.Uri"/>
        </member>
        <member name="P:Tangosol.IO.Resources.AbstractResource.AbsolutePath">
            <summary>
            Gets an absolute path of this resource.
            </summary>
            <remarks>
            The exact value returned will depend on the specific
            resource implementation.
            <p/>
            For example, file system-based resources that support
            relative path resolution, such as <see cref="T:Tangosol.IO.Resources.FileResource"/>
            and <see cref="T:Tangosol.IO.Resources.WebResource"/>, should return an absolute
            path of the resource on the file system. Other resource
            types should return fully qualified URI for the resource,
            which is basically the value of the <see cref="P:Tangosol.IO.Resources.AbstractResource.Uri"/>
            property.
            </remarks>
        </member>
        <member name="T:Tangosol.IO.Resources.EmbeddedResource">
            <summary>
            An <see cref="T:Tangosol.IO.Resources.IResource"/> implementation for resources stored within
            assemblies.
            </summary>
            <remarks>
            <p>
            This implementation expects any resource name passed to the
            constructor to adhere to the following format:</p>
            <p>
            assembly://<i>assemblyName</i>/<i>namespace</i>/<i>resourceName</i>
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Tangosol.IO.Resources.EmbeddedResource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <b>EmbeddedResource</b> class.
            </summary>
            <param name="resourceName">
            The name of the assembly resource.
            </param>
            <exception cref="T:System.UriFormatException">
            If the supplied <paramref name="resourceName"/> did not conform
            to the expected format.
            </exception>
            <exception cref="T:System.IO.FileLoadException">
            If the assembly specified in the supplied
            <paramref name="resourceName"/> was loaded twice with two
            different evidences.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            If the assembly specified in the supplied
            <paramref name="resourceName"/> could not be found.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            If the caller does not have the required permission to load
            the assembly specified in the supplied
            <paramref name="resourceName"/>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Resources.EmbeddedResource.GetStream">
            <summary>
            Opens a stream for this <see cref="T:Tangosol.IO.Resources.IResource"/>.
            </summary>
            <returns>
            A <b>System.IO.Stream</b>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            If the caller does not have the required permission to load the
            underlying assembly's manifest.
            </exception>
        </member>
        <member name="T:Tangosol.IO.Resources.FileResource">
            <summary>
            File resource implementation of <see cref="T:Tangosol.IO.Resources.IResource"/>.
            </summary>
            <remarks>
            <p/>
            Supports both a <b>System.IO.FileInfo</b> and a <b>System.Uri</b>.
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Tangosol.IO.Resources.FileResource.GetStream">
            <summary>
            Gets a stream for this <see cref="T:Tangosol.IO.Resources.IResource"/>.
            </summary>
            <returns>
            A <b>System.IO.Stream</b>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If the stream can not be opened.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            If the file can not be found.
            </exception>
            <seealso cref="T:Tangosol.IO.Resources.IResource"/>
        </member>
        <member name="M:Tangosol.IO.Resources.FileResource.#ctor(System.String)">
            <summary>
            Creates a <b>FileResource</b> class using the resource name
            supplied.
            </summary>
            <param name="resourceName">
            The name of the file system resource.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="resourceName"/> is <c>null</c> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Tangosol.IO.Resources.FileResource.GetFileHandle(System.String)">
            <summary>
            Gets the <b>System.IO.FileInfo</b> for the specified
            <paramref name="resourceName"/>.
            </summary>
            <param name="resourceName">
            The name of the file system resource.
            </param>
            <returns>
            The <b>System.IO.FileInfo</b> for this <b>FileResource</b>.
            </returns>
        </member>
        <member name="T:Tangosol.IO.Resources.ResourceRegistry">
            <summary>
            Registry class that contains mappings between various protocols
            and their associated resource handlers.
            </summary>
            <remarks>
            <p>The following protocols and resource handlers are 
            registered by default:</p>
            <list>
            <item>file - <see cref="T:Tangosol.IO.Resources.FileResource"/></item>
            <item>http/https/ftp - <see cref="T:Tangosol.IO.Resources.UrlResource"/></item>
            <item>assembly/asm - <see cref="T:Tangosol.IO.Resources.EmbeddedResource"/></item>
            <item>web - <see cref="T:Tangosol.IO.Resources.WebResource"/></item>
            </list>
            </remarks>
            <author>Aleksandar Seovic  2006.10.7</author>
        </member>
        <member name="M:Tangosol.IO.Resources.ResourceRegistry.#ctor">
            <summary>
            Singleton constructor.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Resources.ResourceRegistry.RegisterHandler(System.String,System.Type)">
            <summary>
            Registers resource handler for a specified protocol.
            </summary>
            <param name="protocolName">
            The name of the protocol to register handler for.
            </param>
            <param name="handlerType">
            Resource handler type to use for the specified protocol.
            </param>
            <exception cref="T:System.ArgumentException">
            If the specified type does not have a constructor that
            accepts a single argument of <see cref="T:System.String"/> type.
            </exception> 
        </member>
        <member name="M:Tangosol.IO.Resources.ResourceRegistry.GetHandler(System.String)">
            <summary>
            Returns resource handler for the protocol name specified.
            </summary>
            <param name="protocolName">
            Protocol name of the resource.
            </param>
            <returns>
            <b>ConstructorInfo</b> object that is handler constructor for the
            specified protocol name.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="protocolName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Resources.ResourceRegistry.IsHandlerRegistered(System.String)">
            <summary>
            Determines whether a handler is registered for the specified
            protocol.
            </summary>
            <param name="protocolName">
            Protocol name.
            </param>
            <returns>
            <b>true</b> if a handler is registered for the specified
            protocol, otherwise <b>false</b>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="protocolName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Resources.ResourceRegistry.RegisterHandlerInternal(System.String,System.Type)">
            <summary>
            Registers resource handler for a specified protocol.
            </summary>
            <param name="protocolName">
            The name of the protocol to register handler for.
            </param>
            <param name="handlerType">
            Resource handler type to use for the specified protocol.
            </param>
            <exception cref="T:System.ArgumentException">
            If the specified type does not have a constructor that
            accepts a single argument of <see cref="T:System.String"/> type.
            </exception> 
        </member>
        <member name="M:Tangosol.IO.Resources.ResourceRegistry.GetHandlerConstructor(System.Type)">
            <summary>
            Finds a constructor that should be used to create 
            instances of this resource handler type.
            </summary>
            <param name="handlerType">The resource handler type.</param>
            <returns></returns>
        </member>
        <member name="T:Tangosol.IO.Resources.ResourceLoader">
            <summary>
            Loads resources from various sources.
            </summary>
            <remarks>
            Protocol name in the resource URI is used to determine the
            appropriate resource handler.
            </remarks>
            <author>Aleksandar Seovic</author>
            <seealso cref="T:Tangosol.IO.Resources.IResource"/>
            <seealso cref="T:Tangosol.IO.Resources.ResourceRegistry"/>
        </member>
        <member name="F:Tangosol.IO.Resources.ResourceLoader.PROTOCOL_SEPARATOR">
            <summary>
            The separator between the protocol name and the resource name.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Resources.ResourceLoader.#ctor">
            <summary>
            This class cannot be instantiated.
            </summary>
        </member>
        <member name="M:Tangosol.IO.Resources.ResourceLoader.GetResource(System.String)">
            <summary>
            Returns an <see cref="T:Tangosol.IO.Resources.IResource"/> that has been mapped to the
            protocol of the supplied <paramref name="resourceName"/>.
            </summary>
            <param name="resourceName">
            The name of the resource.
            </param>
            <returns>
            A new <see cref="T:Tangosol.IO.Resources.IResource"/> instance for the supplied
            <paramref name="resourceName"/>.
            </returns>
            <exception cref="T:System.UriFormatException">
            If an <see cref="T:Tangosol.IO.Resources.IResource"/> type mapping does not exist for the
            supplied <paramref name="resourceName"/>.
            </exception>
            <exception cref="T:System.Exception">
            In the case of any errors arising from the instantiation of the
            returned <see cref="T:Tangosol.IO.Resources.IResource"/> instance.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Resources.ResourceLoader.GetResource(System.String,System.Boolean)">
            <summary>
            Returns an <see cref="T:Tangosol.IO.Resources.IResource"/> that has been mapped to the
            protocol of the supplied <paramref name="resourceName"/>.
            </summary>
            <param name="resourceName">
            The name of the resource.
            </param>
            <param name="relative">
            If <b>true</b> the returned <see cref="T:Tangosol.IO.Resources.IResource"/> will be
            relative to the application base directory or web application root.
            </param>
            <returns>
            A new <see cref="T:Tangosol.IO.Resources.IResource"/> instance for the supplied
            <paramref name="resourceName"/>.
            </returns>
            <exception cref="T:System.UriFormatException">
            If an <see cref="T:Tangosol.IO.Resources.IResource"/> type mapping does not exist for the
            supplied <paramref name="resourceName"/>.
            </exception>
            <exception cref="T:System.Exception">
            In the case of any errors arising from the instantiation of the
            returned <see cref="T:Tangosol.IO.Resources.IResource"/> instance.
            </exception>
        </member>
        <member name="M:Tangosol.IO.Resources.ResourceLoader.HasProtocol(System.String)">
            <summary>
            Checks that the supplied <paramref name="resourceName"/> starts
            with one of the protocol names currently mapped by this
            <b>ResourceLoader</b> instance.
            </summary>
            <param name="resourceName">
            The name of the resource.
            </param>
            <returns>
            <b>true</b> if the supplied <paramref name="resourceName"/>
            starts with one of the known protocols; <b>false</b> if not, or
            if the supplied <paramref name="resourceName"/> is itself
            <c>null</c>.
            </returns>
        </member>
        <member name="M:Tangosol.IO.Resources.ResourceLoader.GetProtocol(System.String)">
            <summary>
            Extracts the protocol name from the supplied
            <paramref name="resourceName"/>.
            </summary>
            <param name="resourceName">
            The name of the resource.
            </param>
            <returns>
            The extracted protocol name or <c>null</c> if the supplied
            <paramref name="resourceName"/> is unqualified (or is itself
            <c>null</c>).
            </returns>
        </member>
        <member name="T:Tangosol.IO.Resources.UrlResource">
            <summary>
            URL resource implementation.
            </summary>
            <remarks>
            This <see cref="T:Tangosol.IO.Resources.IResource"/> implementation can be used to access
            resources on remote servers over HTTP or FTP.
            </remarks>
            <author>Aleksandar Seovic  2006.10.07</author>
            <seealso cref="T:Tangosol.IO.Resources.IResource"/>
            <seealso cref="T:Tangosol.IO.Resources.ResourceLoader"/>
        </member>
        <member name="M:Tangosol.IO.Resources.UrlResource.#ctor(System.String)">
            <summary>
            Constructor that takes a resource name and creates resource.
            </summary>
            <remarks>
            You can use http://www.mycompany.com/services.txt, 
            ftp://user:pass@ftp.myserver.com/dir/file.xml or similar URL 
            as a resource name.
            </remarks>
            <param name="resourceName">
            Resource name of the URL resource.
            </param>
        </member>
        <member name="M:Tangosol.IO.Resources.UrlResource.GetStream">
            <summary>
            Gets a stream for this <see cref="T:Tangosol.IO.Resources.IResource"/>.
            </summary>
            <returns>
            A <b>System.IO.Stream</b>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If the stream could not be opened.
            </exception>
            <seealso cref="T:Tangosol.IO.Resources.IResource"/>
        </member>
        <member name="T:Tangosol.IO.Resources.WebResource">
            <summary>
            A resource implementation that should be used for accces to 
            resources within ASP.NET application.
            </summary>
            <remarks>
            <p>
            Uses the <c>System.Web.HttpContext.Current.Server.MapPath</c>
            method to resolve the file name for a given resource.</p>
            <p>
            Note that the <c>WebResource</c> is resolved in the context of 
            the HTTP request it is constructed in, which means that the 
            relative paths will be resolved relative to the requested web 
            page.</p>
            <p>
            If you want the resource to be resolved relative to the 
            web application root, make sure that you prefix resource 
            name with a tilde (~) character:</p>
            <code>
            web://~/my-resource.txt
            </code>
            </remarks>
            <author>Aleksandar Seovic  2006.10.07</author>
        </member>
        <member name="M:Tangosol.IO.Resources.WebResource.#ctor(System.String)">
            <summary>
            Creates a new instance of the <b>WebResource</b> class.
            </summary>
            <param name="resourceName">
            The name of the file system resource (on the server).
            </param>
        </member>
        <member name="M:Tangosol.IO.Resources.WebResource.GetFileHandle(System.String)">
            <summary>
            Resolves the <b>System.IO.FileInfo</b> handle for the supplied
            <paramref name="resourceName"/>.
            </summary>
            <param name="resourceName">
            The name of the file system resource.
            </param>
            <returns>
            The <b>System.IO.FileInfo</b> handle for this resource.
            </returns>
        </member>
        <member name="T:Tangosol.Net.CacheFactory">
            <summary>
            Factory for the <b>Oracle Coherence™ for .NET</b> product.
            </summary>
            <remarks>
            <p>
            One of the most common functions provided by the CacheFactory is
            ability to obtain an instance of a cache. There are various cache
            services and cache topologies that are supported by Coherence.</p>
            <p>
            To get a cache reference use the <see cref="M:Tangosol.Net.CacheFactory.GetCache(System.String)"/> method.</p>
            <p>
            This approach that has a lot of advantages over service type specific
            methods described further below because:</p>
            <list type="bullet">
            <item>
            complex cache topology could be configured declaratively in the cache
            configuration XML rather then programmaticaly via API;
            </item>
            <item>
            the caller's code could become completely generic and agnostic to the
            cache topology;
            </item>
            <item>
            the cache topology decision could be deferred and made much later in
            the development cycle without changing the application code.
            </item>
            </list>
            <p>
            When a cache is no longer used, it is preferrable to call
            <see cref="M:Tangosol.Net.CacheFactory.ReleaseCache(Tangosol.Net.INamedCache)"/> to release the associated resources. To
            destroy all instances of the cache across the cluster, use
            <see cref="M:Tangosol.Net.CacheFactory.DestroyCache(Tangosol.Net.INamedCache)"/>.</p>
            <p>
            Other services:</p>
            <list type="bullet">
            <item>
            <term>Invocation</term>
            <description>
            Invocation service provides the means for invoking and monitoring
            execution of classes on specified nodes across a cluster.<p/>
            The following factory method returns an instance of Invocation
            service:<p/>
            <see cref="M:Tangosol.Net.CacheFactory.GetService(System.String)"/>
            </description>
            </item>
            </list>
            </remarks>
            <author>Cameron Purdy  2001.12.14</author>
            <author>Gene Gleyzer</author>
            <author>Ana Cikic  2006.09.19</author>
            <author>Aleksandar Seovic  2008.10.09</author>
            <author>Jason Howes  2010.12.15</author>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.Configure(System.String,System.String)">
            <summary>
            Configure the CacheFactory.
            </summary>
            <param name="cacheConfig">
            An optional path to a file that conforms to <c>cache-config.xsd</c>.
            </param>
            <param name="coherenceConfig">
            An optional path to a file that conforms to <c>coherence.xsd</c>.
            </param>
            <since>Coherence 3.7</since>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.Configure(Tangosol.IO.Resources.IResource,Tangosol.IO.Resources.IResource)">
            <summary>
            Configure the CacheFactory.
            </summary>
            <param name="cacheConfig">
            An optional location of a resource that conforms to
            <c>cache-config.xsd</c>.
            </param>
            <param name="coherenceConfig">
            An optional location of a resource that conforms to
            <c>coherence.xsd</c>.
            </param>
            <since>Coherence 3.7</since>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.Configure(Tangosol.Run.Xml.IXmlElement,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Configure the CacheFactory.
            </summary>
            <param name="xmlCache">
            An optional <see cref="T:Tangosol.Run.Xml.IXmlElement"/> that conforms to
            <c>cache-config.xsd</c>.
            </param>
            <param name="xmlCoherence">
            An optional <see cref="T:Tangosol.Run.Xml.IXmlElement"/> that conforms to
            <c>coherence.xsd</c>.
            </param>
            <since>Coherence 3.7</since>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.Configure(Tangosol.Net.IConfigurableCacheFactory,Tangosol.Net.IOperationalContext)">
            <summary>
            Configure the CacheFactory.
            </summary>
            <param name="factory">
            The rquired singleton <see cref="T:Tangosol.Net.IConfigurableCacheFactory"/>.
            </param>
            <param name="ctx">
            An optional <see cref="T:Tangosol.Net.IOperationalContext"/> that contains
            operational configuration information.
            </param>
            <since>Coherence 3.7</since>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.Shutdown">
            <summary>
            Shutdown all services.
            </summary>
            <since>Coherence 1.0</since>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.PreprocessProp(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Preprocess the Coherence properties specified either in the
            application configuration or environment variables.
            When both are specified, environment varialbe takes the precedence.
            </summary>
            <param name="xmlElement">The XML element to process.</param>
            <since>coherence 12.2.1.0.1</since>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.GetCache(System.String)">
            <summary>
            Return an instance of a cache configured by the current
            <see cref="P:Tangosol.Net.CacheFactory.ConfigurableCacheFactory"/>.
            </summary>
            <remarks>
            This helper method is a simple wrapper around
            <see cref="M:Tangosol.Net.IConfigurableCacheFactory.EnsureCache(System.String)"/> method.
            </remarks>
            <param name="name">
            Cache name (unique for a given configurable cache factory). If
            the <see cref="T:Tangosol.Net.INamedCache"/> with the specified name already
            exists, a reference to the same object will be returned.
            </param>
            <returns>
            The <b>INamedCache</b> object.
            </returns>
            <since>Coherence 2.2</since>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.ReleaseCache(Tangosol.Net.INamedCache)">
            <summary>
            Release local resources associated with the specified instance of
            the cache.
            </summary>
            <remarks>
            This invalidates a reference obtained by using one of the factory
            methods (<pre>GetReplicatedCache, GetOptimisticCache</pre>).
            <p>
            Releasing an <see cref="T:Tangosol.Net.INamedCache"/> reference makes it no
            longer usable, but does not affect the content of the cache. In
            other words, all other references to the cache will still be
            valid, and the cache data is not affected by releasing the
            reference.</p>
            <p>
            The reference that is released using this method can no longer be
            used; any attempt to use the reference will result in an
            exception.</p>
            </remarks>
            <param name="cache">
            The <b>INamedCache</b> object to be released.
            </param>
            <since>Coherence 1.1</since>
            <seealso cref="M:Tangosol.Net.Impl.RemoteCacheService.ReleaseCache(Tangosol.Net.INamedCache)"/>
            <seealso cref="M:Tangosol.Net.CacheFactory.DestroyCache(Tangosol.Net.INamedCache)"/>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.DestroyCache(Tangosol.Net.INamedCache)">
            <summary>
            Releases and destroys the specified <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <remarks>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the entire
            cluster to this cache will be invalidated, the cached data will
            be cleared, and all resources will be released.
            </remarks>
            <param name="cache">
            The <b>INamedCache</b> object to be destroyed.
            </param>
            <since>Coherence 1.1</since>
            <seealso cref="M:Tangosol.Net.Impl.RemoteCacheService.DestroyCache(Tangosol.Net.INamedCache)"/>
            <seealso cref="M:Tangosol.Net.CacheFactory.ReleaseCache(Tangosol.Net.INamedCache)"/>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.GetService(System.String)">
            <summary>
            Return an instance of a service configured by the current
            <see cref="P:Tangosol.Net.CacheFactory.ConfigurableCacheFactory"/>.
            </summary>
            <remarks>
            This helper method is a simple wrapper around the
            <see cref="M:Tangosol.Net.DefaultConfigurableCacheFactory.EnsureService(System.String)"/>
            method.
            </remarks>
            <param name="name">
            Service name (unique for a given configurable cache factory).
            If the <b>IService</b> with the specified name already exists, a
            reference to the same object will be returned.
            </param>
            <returns>
            The <b>IService</b> object.
            </returns>
            <since>Coherence 3.3</since>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.IsLogEnabled(Tangosol.Net.CacheFactory.LogLevel)">
            <summary>
            Return <b>true</b> if the Logger would log a message with the
            given log level.
            </summary>
            <param name="level">
            <see cref="T:Tangosol.Net.CacheFactory.LogLevel"/> value.
            </param>
            <returns>
            Whether the Logger would log a message with the given log level.
            </returns>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.Log(System.String,Tangosol.Net.CacheFactory.LogLevel)">
            <summary>
            Log a message using Coherence logging facility which is driven by
            the "logging-config" element located in the coherence.xml
            configuration file.
            </summary>
            <param name="message">
            A message to log.
            </param>
            <param name="severity">
            The severity of the logged message.
            </param>
            <since>Coherence 2.0</since>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.Log(System.Exception,Tangosol.Net.CacheFactory.LogLevel)">
            <summary>
            Log an exception using Coherence logging facility which is driven
            by the "logging-config" element located in the coherence.xml
            configuration file.
            </summary>
            <param name="exc">
            An exception to log.
            </param>
            <param name="severity">
            The severity of the logged message.
            </param>
            <since>Coherence 2.0</since>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.Log(System.String,System.Exception,Tangosol.Net.CacheFactory.LogLevel)">
            <summary>
            Log a message and exception using Coherence logging facility
            which is driven by the "logging-config" element located in the
            coherence.xml configuration file.
            </summary>
            <param name="message">
            A message to log.
            </param>
            <param name="exc">
            An exception to log.
            </param>
            <param name="severity">
            The severity of the logged message.
            </param>
            <since>Coherence 2.0</since>
        </member>
        <member name="M:Tangosol.Net.CacheFactory.LogInternal(System.String,System.Exception,Tangosol.Net.CacheFactory.LogLevel)">
            <summary>
            Log a message and exception using the current Logger. If the
            Logger is null, defer the log mesage by placing it on the defered
            log message list.
            </summary>
            <param name="message">
            A message to log.
            </param>
            <param name="exc">
            An exception to log.
            </param>
            <param name="severity">
            The severity of the logged message.
            </param>
            <since>Coherence 3.7</since>
        </member>
        <member name="F:Tangosol.Net.CacheFactory.s_factory">
            <summary>
            IConfigurableCacheFactory singleton.
            </summary>
        </member>
        <member name="F:Tangosol.Net.CacheFactory.s_logger">
            <summary>
            Logger singleton.
            </summary>
        </member>
        <member name="F:Tangosol.Net.CacheFactory.s_initLogMessages">
            <summary>
            Log messages that should be queued up before logger is initialized.
            </summary>
        </member>
        <member name="P:Tangosol.Net.CacheFactory.DefaultCacheConfigPath">
            <summary>
            The path to the default XML cache configuration.
            </summary>
            <value>
            The path to the default XML cache configuration.
            </value>
            <since>Coherence 3.7</since>
        </member>
        <member name="P:Tangosol.Net.CacheFactory.DefaultCacheConfigResource">
            <summary>
            The <see cref="T:Tangosol.IO.Resources.IResource"/> for the default XML cache
            configuration.
            </summary>
            <value>
            The <see cref="T:Tangosol.IO.Resources.IResource"/> for the default XML cache
            configuration.
            </value>
            <since>Coherence 3.7</since>
        </member>
        <member name="P:Tangosol.Net.CacheFactory.DefaultCacheConfig">
            <summary>
            The default XML cache configuration.
            </summary>
            <value>
            The default XML cache configuration.
            </value>
            <since>Coherence 3.7</since>
        </member>
        <member name="P:Tangosol.Net.CacheFactory.DefaultOperationalConfigPath">
            <summary>
            The path to the default XML operational configuration.
            </summary>
            <value>
            The path to the default XML operational configuration.
            </value>
            <since>Coherence 3.7</since>
        </member>
        <member name="P:Tangosol.Net.CacheFactory.DefaultOperationalConfigResource">
            <summary>
            The <see cref="T:Tangosol.IO.Resources.IResource"/> for the default XML operational
            configuration.
            </summary>
            <value>
            The <see cref="T:Tangosol.IO.Resources.IResource"/> for the default XML operational
            configuration.
            </value>
            <since>Coherence 3.7</since>
        </member>
        <member name="P:Tangosol.Net.CacheFactory.DefaultOperationalConfig">
            <summary>
            The default XML operational configuration.
            </summary>
            <value>
            The default XML operational configuration.
            </value>
            <since>Coherence 3.7</since>
        </member>
        <member name="P:Tangosol.Net.CacheFactory.DefaultPofConfigPath">
            <summary>
            The path to the default XML POF configuration.
            </summary>
            <value>
            The path to the default XML POF configuration.
            </value>
            <since>Coherence 3.7</since>
        </member>
        <member name="P:Tangosol.Net.CacheFactory.DefaultPofConfigResource">
            <summary>
            The <see cref="T:Tangosol.IO.Resources.IResource"/> for the default XML POF
            configuration.
            </summary>
            <value>
            The <see cref="T:Tangosol.IO.Resources.IResource"/> for the default XML POF
            configuration.
            </value>
            <since>Coherence 3.7</since>
        </member>
        <member name="P:Tangosol.Net.CacheFactory.DefaultPofConfig">
            <summary>
            The default XML POF configuration.
            </summary>
            <value>
            The default XML POF configuration.
            </value>
            <since>Coherence 3.7</since>
        </member>
        <member name="P:Tangosol.Net.CacheFactory.ConfigurableCacheFactory">
            <summary>
            The <see cref="T:Tangosol.Net.IConfigurableCacheFactory"/> singleton.
            </summary>
            <value>
            An instance of <b>IConfigurableCacheFactory</b>.
            </value>
            <since>Coherence 2.2</since>
        </member>
        <member name="T:Tangosol.Net.CacheFactory.LogLevel">
            <summary>
            The logging level a message must meet or exceed in order to be
            logged.
            </summary>
        </member>
        <member name="F:Tangosol.Net.CacheFactory.LogLevel.Always">
            <summary>
            It is expected that items with a log level of 0 will always
            be logged.
            </summary>
        </member>
        <member name="F:Tangosol.Net.CacheFactory.LogLevel.Error">
            <summary>
            Log level 1 indicates an error.
            </summary>
        </member>
        <member name="F:Tangosol.Net.CacheFactory.LogLevel.Warn">
            <summary>
            Log level 2 indicates a warning.
            </summary>
        </member>
        <member name="F:Tangosol.Net.CacheFactory.LogLevel.Info">
            <summary>
            Log level 3 indicates information that should likely be
            logged.
            </summary>
        </member>
        <member name="F:Tangosol.Net.CacheFactory.LogLevel.Debug">
            <summary>
            The default logging level is 5, so using the level of 5 will
            show up in the logs by default as a debug message.
            </summary>
        </member>
        <member name="F:Tangosol.Net.CacheFactory.LogLevel.Quiet">
            <summary>
            The default logging level is 5, so using a level higher than 5
            will be "quiet" by default, meaning that it will not show up in
            the logs unless the configured logging level is increased.
            </summary>
        </member>
        <member name="F:Tangosol.Net.CacheFactory.LogLevel.Max">
            <summary>
            The maximum logging level indicator.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.AbstractBundler">
            <summary>
            An abstract base for processors that implement bundling strategy.
            </summary>
            <remarks>
            Assume that we receive a continuous and concurrent stream of individual
            operations on multiple threads in parallel. Let's also assume those individual
            operations have relatively high latency (network or database-related) and
            there are functionally analogous [bulk] operations that take a collection of
            arguments instead of a single one without causing the latency to grow
            linearly, as a function of the collection size. Examples of operations and
            topologies that satisfy these assumptions are:
            <list type="bullet">
              <item> Get() and GetAll() methods for the <see cref="T:Tangosol.Net.INamedCache"/>
                  API for the partitioned cache service topology;
              </item>
              <item> Insert() and InsertAll() methods for the <see cref="T:Tangosol.Net.INamedCache"/>
                  API for the partitioned cache service topology;
              </item>
              <item> Remove() method for the <see cref="T:Tangosol.Net.INamedCache"/>
                  API for the partitioned cache service topology;
              </item>
            </list>
            <p/>
            Under these assumptions, it's quite clear that the bundler could achieve a
            better utilization of system resources and better throughput if slightly
            delays the individual execution requests with a purpose of "bundling" them
            together and passing into a corresponding bulk operation. Additionally,
            the "bundled" request should be triggered if a bundle reaches a "preferred
            bundle size" threshold, eliminating a need to wait till a bundle timeout is
            reached.
            <p/>
            <note> 
            We assume that all bundle-able operations are idempotent and could be
            repeated if un-bundling is necessary due to a bundled operation failure.
            </note>
            </remarks>
            <author>gg  2007.01.28</author>
            <author>lh  2012.05.18</author>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.ADJUSTMENT_FREQUENCY">
            <summary>
            Frequency of the adjustment attempts. This number represents a number of
            iterations of the master bundle usage after which an adjustment attempt
            will be performed.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.#ctor">
            <summary>
            Construct the bundler. By default, the timeout delay value is set to
            one millisecond and the auto-adjustment feature is turned on.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Adjust">
            <summary>
            Adjust this Bundler's parameters according to the available 
            statistical information.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.ResetStatistics">
            <summary>
            Reset this Bundler statistics.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.UpdateStatistics">
            <summary>
            Update the statistics for this Bundle.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.ToString">
            <summary>
            Provide a human readable description for the Bundler object
            (for debugging).
            </summary>
            <returns>
            A human readable description for the Bundler object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.getOpenBundle">
            <summary>
            Retrieve any Bundle that is currently in the open state. This method does
            not assume any external synchronization and as a result, a caller must
            double check the returned bundle open state (after synchronizing on it).
            </summary>
            <returns>
            An open Bundle.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.InstantiateBundle">
            <summary>
            Instantiate a new Bundle object.
            </summary>
            <returns>
            A new Bundle object.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.m_sizeThreshold">
            <summary>
            The bundle size threshold. We use double for this value to allow for
            fine-tuning of the auto-adjust algorithm.
            </summary>
            <see cref="M:Tangosol.Net.Cache.AbstractBundler.Adjust"/>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.m_previousSizeThreshold">
            <summary>
            The previous bundle size threshold value.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.m_threadThreshold">
            <summary>
            The minimum number of threads that should trigger the bundler to switch
            from a pass through mode to a bundled mode.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.m_delayMillis">
            <summary>
            The delay timeout in milliseconds. Default value is one millisecond.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.m_listBundle">
            <summary>
            A pool of Bundle objects. Note that this list never shrinks.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.m_activeBundle">
            <summary>
            Last active (open) bundle position.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.m_countThreads">
            <summary>
            A counter for the total number of threads that have started any bundle
            related execution. This counter is used by subclasses to reduce an impact
            of bundled execution for lightly loaded environments.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.m_stats">
            <summary>
            An instance of the Statistics object containing the latest statistics.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.SizeThreshold">
             <summary>
             The bundle size threshold value.
             </summary>
             <value> 
             The bundle size threshold, a positive value expressed in the same 
             units as the value returned by the <see cref="P:Tangosol.Net.Cache.AbstractBundler.Bundle.BundleSize"/> property.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.ThreadThreshold">
            <summary>
            The minimum number of threads that will trigger the bundler to
            switch from a pass through to a bundled mode.
            </summary>
            <value>
            The number of threads threshold.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.DelayMillis">
            <summary>
            The timeout delay value.
            </summary>
            <value>
            The timeout delay value in milliseconds. Default value is one 
            millisecond.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.AllowAutoAdjust">
            <summary>
            Specifies whether or not auto-adjustment is on. Default value is "true".
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <b>ICollection</b>.
            </summary>
            <value>
            An object that can be used to synchronize access to the
            <b>ICollection</b>.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.AbstractBundler.Bundle">
            <summary>
            Bundle represents a unit of optimized execution.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.Bundle.STATUS_OPEN">
            <summary>
            This Bundle accepting additional items.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.Bundle.STATUS_PENDING">
            <summary>
            This Bundle is closed for accepting additional items and awaiting
            for the execution results.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.Bundle.STATUS_PROCESSED">
            <summary>
            This Bundle is in process of returning the result of execution
            back to the client.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.Bundle.STATUS_EXCEPTION">
            <summary>
            Attempt to bundle encountered and exception; the execution has to be
            de-optimized and performed by individual threads.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.#ctor(Tangosol.Net.Cache.AbstractBundler)">
            <summary>
            Default constructor.
            </summary>
            <param name="bundler">
            The Bundler the bundle operates on.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.IsOpen">
            <summary>
            Check whether or not this bundle is open for adding request elements.
            </summary>
            <returns>
            True iff this Bundle is still open.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.IsPending">
            <summary>
            Check whether or not this bundle is in the "pending" state - awaiting
            for the execution results.
            </summary>
            <returns>
            True iff this Bundle is in the "pending" state.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.IsProcessed">
            <summary>
            Check whether or not this bundle is in the "processed" state -
            ready to return the result of execution back to the client.
            </summary>
            <returns>
            True iff this Bundle is in the "processed" state.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.IsException">
            <summary>
            Check whether or not this bundle is in the "exception" state -
            bundled execution threw an exception and requests have to be
            un-bundled.
            </summary>
            <returns>
            True iff this Bundle is in the "exception" state.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.SetStatus(System.Int32)">
            <summary>
            Change the status of this Bundle.
            </summary>
            <param name="status">
            The new status value.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.EnsureResults">
            <summary>
            Obtain results of the bundled requests. This method should be
            implemented by concrete Bundle implementations using the most
            efficient mechanism.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.WaitForResults(System.Boolean)">
            <summary>
            Wait until results of bundled requests are retrieved.
            </summary>
            <note>
            Calls to this method must be externally synchronized.
            </note>
            <param name="isFirst">
            True iff this is the first thread entering the bundle
            </param>
            <returns>
            True if this thread is supposed to perform an actual bundled
            operation (burst); false otherwise
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.EnsureResults(System.Boolean)">
            <summary>
            Obtain results of the bundled requests or ensure that the results
            have already been retrieved.
            </summary>
            <param name="isBurst">
            Specifies whether or not the actual results have to be
            fetched on this thread; this parameter will be true
            for one and only one thread per bundle
            </param>
            <returns>
            True if the bundling has succeeded; false if the un-bundling
            has to be performed as a result of a failure.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.ReleaseThread">
            <summary>
            Release all bundle resources associated with the current thread.
            </summary>
            <returns>
            True iff all entered threads have released.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.ResetStatistics">
            <summary>
            Reset statistics for this Bundle.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.ToString">
            <summary>
            Provide a human readable description for the Bundle object
            (for debugging).
            </summary>
            <returns>
            A human readable description for the Bundle object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Bundle.FormatStatusName(System.Int32)">
            <summary>
            Return a human readable name for the specified status value.
            </summary>
            <param name="status">
            The status value to format.
            </param>
            <returns>
            A human readable status name.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.Bundle.m_status">
            <summary>
            This Bundle status.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.Bundle.m_cThreads">
            <summary>
            A count of threads that are using this Bundle.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.Bundle.m_startTime">
            <summary>
            Statistics: a timestamp of the first thread entering the bundle.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractBundler.Bundle.m_lock">
            <summary>
            An object that serves as a mutex for this Daemon synchronization.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Bundle.Bundler">
            <summary>
            The bundler the operations are performed on.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Bundle.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize calls to a
            method.
            </summary>
            <value>
            An object that can be used to synchronize calls to a
            method.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Bundle.BundleSize">
            <summary>
            Bundle size. The return value should be expressed in the
            same units as the value returned by the
            <see cref="P:Tangosol.Net.Cache.AbstractBundler.SizeThreshold"/> property.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Bundle.IsMaster">
            <summary>
            A flag that differentiates the "master" bundle which is
            responsible for all auto-adjustments. It's set to "true" for
            one and only one Bundle object.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Bundle.TotalBundles">
            <summary>
            Statistics: the total number of times this Bundle has been
            used for bundled request processing.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Bundle.TotalSize">
            <summary>
            Statistics: the total size of individual requests processed
            by this Bundle expressed in the same units as values returned
            by the <see cref="P:Tangosol.Net.Cache.AbstractBundler.Bundle.BundleSize"/> method.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Bundle.TotalBurstDuration">
            <summary>
            Statistics: a total time duration this Bundle has spent in
            bundled request processing (burst).
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Bundle.TotalWaitDuration">
            <summary>
            Statistics: a total time duration this Bundle has spent
            waiting for bundle to be ready for processing.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Bundle.Lock">
            <summary>
            An object that serves as a mutex for thread synchronization.
            </summary>
            <remarks>
            When idle, the bundle thread is waiting for a notification on
            the Lock object.
            </remarks>
            <value>
            An object that serves as a mutex for thread synchronization.
            </value>
            <seealso cref="M:System.Threading.Monitor.PulseAll(System.Object)"/>
            <seealso cref="M:System.Threading.Monitor.Wait(System.Object)"/>
        </member>
        <member name="T:Tangosol.Net.Cache.AbstractBundler.Statistics">
            <summary>
            Statistics class contains the latest bundler statistics.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Statistics.Reset">
            <summary>
            Reset the statistics.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractBundler.Statistics.ToString">
            <summary>
            Provide a human readable description for the Statistics object.
            (for debugging).
            </summary>
            <returns>
            A human readable description for the Statistics object.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Statistics.AverageBundleSize">
            <summary>
            An average bundle size for this Bundler.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Statistics.AverageBurstDuration">
            <summary>
            An average time for bundled request processing (burst).
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Statistics.AverageThreadWaitDuration">
            <summary>
            An average thread waiting time caused by under-filled bundle. The
            wait time includes the time spend in the bundled request processing.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Statistics.AverageThroughput">
            <summary>
            An average bundled request throughput in size units per millisecond
            (total bundle size over total processing time)
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Statistics.BundleCountSnapshot">
            <summary>
            Snapshot for a total number of processed bundled.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Statistics.BundleSizeSnapshot">
            <summary>
            Snapshot for a total size of processed bundled.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Statistics.BurstDurationSnapshot">
            <summary>
            Snapshot for a burst duration.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractBundler.Statistics.ThreadWaitSnapshot">
            <summary>
            Snapshot for a combined thread waiting time.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.AbstractCacheLoader">
            <summary>
            An abstract base class for <see cref="T:Tangosol.Net.Cache.ICacheLoader"/>.
            </summary>
            <author>Cameron Purdy  2003.05.29</author>
            <author>Ivan Cikic  2007.05.17</author>
        </member>
        <member name="T:Tangosol.Net.Cache.ICacheLoader">
            <summary>
            A cache loader.
            </summary>
            <author>Cameron Purdy  2003.05.29</author>
            <author>Goran Milosavljevic  2006.09.07</author>
            <since>Coherence 2.2</since>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheLoader.Load(System.Object)">
            <summary>
            Return the value associated with the specified key, or
            <c>null</c> if the key does not have an associated value in the
            underlying store.
            </summary>
            <param name="key">
            Key whose associated value is to be returned.
            </param>
            <returns>
            The value associated with the specified key, or
            <c>null</c> if no value is available for that key.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheLoader.LoadAll(System.Collections.ICollection)">
            <summary>
            Return the values associated with each the specified keys in
            the passed collection.
            </summary>
            <remarks>
            If a key does not have an associated value in the underlying
            store, then the return dictionary will not have an entry for
            that key.
            </remarks>
            <param name="keys">
            A collection of keys to load.
            </param>
            <returns>
            A dictionary of keys to associated values for the specified
            keys.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractCacheLoader.Load(System.Object)">
            <summary>
            Return the value associated with the specified key, or
            <c>null</c> if the key does not have an associated value in the
            underlying store.
            </summary>
            <param name="key">
            Key whose associated value is to be returned.
            </param>
            <returns>
            The value associated with the specified key, or
            <c>null</c> if no value is available for that key.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractCacheLoader.LoadAll(System.Collections.ICollection)">
            <summary>
            Return the values associated with each the specified keys in
            the passed collection.
            </summary>
            <remarks>
            If a key does not have an associated value in the underlying
            store, then the return dictionary will not have an entry for
            that key.
            </remarks>
            <param name="keys">
            A collection of keys to load.
            </param>
            <returns>
            A dictionary of keys to associated values for the specified
            keys.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Cache.AbstractCacheStore">
            <summary>
             An abstract base class for the <see cref="T:Tangosol.Net.Cache.ICacheStore"/>.
            </summary>
            <author>Cameron Purdy  2003.05.29</author>
            <author>Jason Howes  2005.09.01</author>
            <author>Ivan Cikic  2007.05.21</author>
        </member>
        <member name="T:Tangosol.Net.Cache.ICacheStore">
            <summary>
            A cache store.
            </summary>
            <author>Cameron Purdy  2003.05.29</author>
            <author>Goran Milosavljevic  2006.09.07</author>
            <since>Coherence 2.2</since>
            <seealso cref="T:Tangosol.Net.Cache.ICacheLoader"/>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheStore.Store(System.Object,System.Object)">
            <summary>
            Store the specified value under the specified key in the
            underlying store.
            </summary>
            <remarks>
            This method is intended to support both key/value creation
            and value update for a specific key.
            </remarks>
            <param name="key">
            Key to store the value under.
            </param>
            <param name="value">
            Value to be stored.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If this implementation or the underlying store is read-only.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheStore.StoreAll(System.Collections.IDictionary)">
            <summary>
            Store the specified values under the specified keys in the
            underlying store.
            </summary>
            <remarks>
            This method is intended to support both key/value creation
            and value update for the specified keys.
            </remarks>
            <param name="dictionary">
            An <see cref="T:System.Collections.IDictionary"/> of any number of keys and values
            to store.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If this implementation or the underlying store is read-only.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheStore.Erase(System.Object)">
            <summary>
            Remove the specified key from the underlying store if present.
            </summary>
            <param name="key">
            Key whose mapping is being removed from the cache.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If this implementation or the underlying store is read-only.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheStore.EraseAll(System.Collections.ICollection)">
            <summary>
            Remove the specified keys from the underlying store if present.
            </summary>
            <param name="keys">
            Keys whose mappings are being removed from the cache.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If this implementation or the underlying store is read-only.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractCacheStore.Store(System.Object,System.Object)">
            <summary>
            Store the specified value under the specified key in the
            underlying store.
            </summary>
            <remarks>
            This method is intended to support both key/value creation
            and value update for a specific key.
            </remarks>
            <param name="key">
            Key to store the value under.
            </param>
            <param name="value">
            Value to be stored.
            </param>
            <exception cref="T:System.NotSupportedException">
            If this implementation or the underlying store is read-only.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractCacheStore.StoreAll(System.Collections.IDictionary)">
            <summary>
            Store the specified values under the specified keys in the
            underlying store.
            </summary>
            <remarks>
            <p>
            This method is intended to support both key/value creation
            and value update for the specified keys.</p>
            <p>
            The implementation of this method calls <see cref="M:Tangosol.Net.Cache.AbstractCacheStore.Store(System.Object,System.Object)"/> for
            each entry in the supplied <b>IDictionary</b>. Once stored 
            successfully, an entry is removed from the <b>IDictionary</b>
            (if possible).</p>
            <p>
            <b>Note:</b>
            For many types of persistent stores, a single store operation is 
            as expensive as a bulk store operation; therefore, subclasses 
            should override this method if possible.</p>
            </remarks>
            <param name="dictionary">
            An <see cref="T:System.Collections.IDictionary"/> of any number of keys and values
            to store.
            </param>
            <exception cref="T:System.NotSupportedException">
            If this implementation or the underlying store is read-only.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractCacheStore.Erase(System.Object)">
            <summary>
            Remove the specified key from the underlying store if present.
            </summary>
            <param name="key">
            Key whose mapping is being removed from the cache.
            </param>
            <exception cref="T:System.NotSupportedException">
            If this implementation or the underlying store is read-only.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractCacheStore.EraseAll(System.Collections.ICollection)">
            <summary>
            Remove the specified keys from the underlying store if present.
            </summary>
            <remarks>
            <p>
            The implementation of this method calls <see cref="M:Tangosol.Net.Cache.AbstractCacheStore.Erase(System.Object)"/> for 
            each key in the supplied <b>ICollection</b>. Once erased 
            successfully, a key is removed from the <b>ICollection</b>
            (if possible).</p>
            <p>
            <b>Note:</b>
            For many types of persistent stores, a single erase operation is
            as expensive as a bulk erase operation; therefore, subclasses 
            should override this method if possible.</p>
            </remarks>
            <param name="keys">
            Keys whose mappings are being removed from the cache.
            </param>
            <exception cref="T:System.NotSupportedException">
            If this implementation or the underlying store is read-only.
            </exception>
        </member>
        <member name="T:Tangosol.Net.Cache.AbstractEntryBundler">
            <summary>
            An abstract entry-based bundler serves as a base for 
            NamedCache.Insert() operation bundling.
            </summary>
            <author>gg  2007.01.28</author>
            <author>lh  2012.05.22</author>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEntryBundler.Process(System.Object,System.Object)">
            <summary>
            Process the specified entry in a most optimal way according
            to the bundle settings.
            </summary>
            <param name="key">
            The entry key.
            </param>
            <param name="value">
            The entry value.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEntryBundler.ProcessAll(System.Collections.IDictionary)">
            <summary>
            Process a colllection of entries in a most optimal way 
            according to the bundle settings.
            </summary>
            <param name="dictionary">
            The collection of entries to process
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEntryBundler.Bundling(System.Collections.IDictionary)">
            <summary>
            The bundle operation to be performed against a collected 
            dictionary of entries by the concrete AbstractEntryBundler 
            implementations. If an exception occurs during bundle 
            operation, it will be repeated using singleton dictionaries.
            </summary>
            <param name="dictionary">
            A dictionary of entries to perform the bundled operation for.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEntryBundler.InstantiateBundle">
            <summary>
            Instantiate a new Bundle object.
            </summary>
            <returns>
            A new Bundle object.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Cache.AbstractEntryBundler.Bundle">
            <summary>
            Bundle represents a unit of optimized execution.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEntryBundler.Bundle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEntryBundler.Bundle.#ctor(Tangosol.Net.Cache.AbstractBundler)">
            <summary>
            Constructor.
            </summary>
            <param name="bundler">
            The bundler the operations are performed on.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEntryBundler.Bundle.Add(System.Object,System.Object)">
            <summary>
            Add the specified entry to the Bundle.
            </summary>
            <note>
            A call to this method must be externally synchronized for
            this Bundle object.
            </note>
            <param name="key">
            The entry key.
            </param>
            <param name="value">
            The entry value.
            </param>
            <returns>
            True if this Bundle was empty prior to this call.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEntryBundler.Bundle.AddAll(System.Collections.IDictionary)">
            <summary>
            Add the specified collection of entries to the Bundle.
            </summary>
            <note>
            A call to this method must be externally synchronized
            for this Bundle object.
            </note>
            <param name="dictionary">
            The collection of entries.
            </param>
            <returns>
            True if this Bundle was empty prior to this call.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEntryBundler.Bundle.Process(System.Boolean,System.Object,System.Object)">
            <summary>
            Process the specified entry according to this Bundle state.
            </summary>
            <param name="isBurst">
            True if this thread is supposed to perform an actual bundled
            operation (burst); false otherwise
            </param>
            <param name="key">
            The entry key.
            </param>
            <param name="value">
            The entry value.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEntryBundler.Bundle.ProcessAll(System.Boolean,System.Collections.IDictionary)">
            <summary>
            Process the specified collection of entries according to 
            this Bundle state.
            </summary>
            <param name="isBurst">
            True if this thread is supposed to perform an actual
            bundled operation (burst); false otherwise
            </param>
            <param name="dictionary">
            The collection of entries.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEntryBundler.Bundle.GetBundleSize">
            <summary>
            Bundle size. The return value should be expressed in the
            same units as the value returned by the
            <see cref="P:Tangosol.Net.Cache.AbstractBundler.SizeThreshold"/> property.
            </summary>
            <returns>
            Bundle size.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEntryBundler.Bundle.EnsureResults">
            <summary>
            Obtain results of the bundled requests.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEntryBundler.Bundle.ReleaseThread">
            <summary>
            Release all bundle resources associated with the current thread.
            </summary>
            <returns>
            True iff all entered threads have released.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractEntryBundler.Bundle.m_mapEntries">
            <summary>
            This bundle content.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.AbstractEvictionPolicy">
            <summary>
            An abstract base class for custom cache eviction policies.
            </summary>
            <author>Jason Howes  2005.12.14</author>
            <author>Ivan Cikic  2007.05.17</author>
            <author>Aleksandar Seovic  2009.07.28</author>
        </member>
        <member name="T:Tangosol.Net.Cache.IEvictionPolicy">
            <summary>
            An eviction policy is an object that the cache provides with access
            information, and when requested, the eviction policy selects and
            evicts entries from the cache. 
            </summary>
            <remarks>
            If the eviction policy needs to be aware of changes to the cache, 
            it must implement the <see cref="T:Tangosol.Net.Cache.ICacheListener"/> interface; 
            if it does, it will automatically be registered to receive
            cache events.
            </remarks>
            <seealso cref="T:Tangosol.Net.Cache.AbstractEvictionPolicy"/>
            <seealso cref="T:Tangosol.Net.Cache.ICacheListener"/> 
            <author>Cameron Purdy  2009.01.13</author>
            <author>Aleksandar Seovic  2009.07.27</author>
            <since>Coherence 3.5.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.IEvictionPolicy.EntryTouched(Tangosol.Net.Cache.IConfigurableCacheEntry)">
            <summary>
            This method is called by the cache to indicate that an entry has
            been touched.
            </summary>
            <param name="entry">
            The cache entry that has been touched.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.IEvictionPolicy.RequestEviction(System.Int64)">
            <summary>
            This method is called by the cache when the cache requires the
            eviction policy to evict entries.
            </summary>
            <param name="maximum">
            The maximum number of units that should remain in the cache when 
            the eviction is complete.
            </param>
        </member>
        <member name="P:Tangosol.Net.Cache.IEvictionPolicy.Name">
            <summary>
            Obtain the name of the eviction policy. 
            </summary>
            <remarks>
            This is intended to be human readable for use in a monitoring tool; 
            examples include "LRU" and "LFU".
            </remarks>
            <value>
            The name of the eviction policy.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.ICacheListener">
            <summary>
            The listener interface for receiving <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </summary>
            <author>Gene Gleyzer  2002.02.11</author>
            <author>Aleksandar Seovic  2006.07.12</author>
            <seealso cref="T:Tangosol.Net.Cache.IObservableCache"/>
            <seealso cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheListener.EntryInserted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheListener.EntryUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been updated.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the update
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheListener.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEvictionPolicy.EntryTouched(Tangosol.Net.Cache.IConfigurableCacheEntry)">
            <summary>
            This method is called by the cache to indicate that an entry
            has been touched.
            </summary>
            <param name="entry">
            The <see cref="T:Tangosol.Net.Cache.IConfigurableCacheEntry"/> that has been touched.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEvictionPolicy.RequestEviction(System.Int64)">
            <summary>
            This method is called by the cache when the cache requires
            the eviction policy to evict entries.
            </summary>
            <param name="maximum">
            The maximum number of units that should remain in the cache
            when the eviction is complete.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEvictionPolicy.EntryInserted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEvictionPolicy.EntryUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been updated.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the update
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEvictionPolicy.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEvictionPolicy.EntryUpdated(Tangosol.Net.Cache.IConfigurableCacheEntry)">
            <summary>
            This method is called to indicate that an entry has been either 
            inserted or updated.
            </summary>
            <param name="entry">
            The cache entry that has been updated.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEvictionPolicy.EnsureCache(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Return the <see cref="T:Tangosol.Net.Cache.IConfigurableCache"/> that uses this eviction
            policy. 
            </summary>
            <remarks>
            If the <b>LocalCache</b> property has not been intialized, it is
            set to the <b>LocalCache</b> that raised the given event.
            </remarks>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> raised by the <b>LocalCache</b>
            that uses this eviction policy.
            </param>
            <returns>
            The <b>LocalCache</b> that uses this eviction policy.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractEvictionPolicy.GetEntry(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Return the cache entry associated with the given cache event.
            </summary>
            <param name="evt">
            A cache event raised by the <see cref="T:Tangosol.Net.Cache.IConfigurableCache"/> 
            that uses this eviction policy.
            </param>
            <returns>
            The cache entry associated with the given event.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractEvictionPolicy.m_cache">
            <summary>
            The <see cref="T:Tangosol.Net.Cache.IConfigurableCache"/> that is using this eviction 
            policy.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractEvictionPolicy.Cache">
            <summary>
            Return the <see cref="T:Tangosol.Net.Cache.IConfigurableCache"/> that uses this 
            eviction policy.
            </summary>
            <remarks>
            The <b>IConfigurableCache</b> is set the first time a cache event 
            is processed by the eviction policy.
            </remarks>
            <value>
            The <b>IConfigurableCache</b> or <c>null</c> if a cache event has 
            not yet been processed by this eviction policy.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.AbstractEvictionPolicy.Name">
            <summary>
            Obtain the name of the eviction policy. 
            </summary>
            <value>
            The name of the eviction policy.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.AbstractKeyBundler">
            <summary>
            An abstract key-based bundler serves as a base for NamedCache get() and
            remove() operation bundling.
            </summary>
            <author>gg  2007.01.28</author>
            <author>lh  2012.05.22</author>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.Process(System.Object)">
            <summary>
            Process the specified key in a most optimal way according to the
            bundle settings.
            </summary>
            <param name="key">
            The key to process.
            </param>
            <returns> 
            An execution result according to the caller's contract.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.ProcessAll(System.Collections.ICollection)">
            <summary>
            Process a colKeys of specified items in a most optimal way according to
            the bundle settings.
            </summary>
            <param name="colKeys">
            The collection of keys to process.
            </param>
            <returns>
            An execution result according to the caller's contract.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.Bundling(System.Collections.ICollection)">
            <summary>
            The bundle operation to be performed against a collected set of keys
            by the concrete AbstractKeyBundler implementations. If an exception
            occurs during bundle operation, it could be repeated using singleton sets.
            </summary>
            <param name="colKeys">
            A key collection to perform the bundled operation for.
            </param>
            <returns>
            The Map of operation results.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.Unbundling(System.Object)">
            <summary>
            Un-bundle bundled operation. This operation would be used if an 
            exception occurs during a bundled operation or if the number of 
            active threads is below the <see cref="P:Tangosol.Net.Cache.AbstractBundler.ThreadThreshold"/>
            value.
            </summary>
            <param name="key">
            A key to perform the un-bundled operation for.
            </param>
            <returns>
            The operation result for the specified key, may be null.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.InstantiateBundle">
            <summary>
            Instantiate a new Bundle object.
            </summary>
            <returns>
            A new Bundle object.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Cache.AbstractKeyBundler.Bundle">
            <summary>
            Bundle represents a unit of optimized execution.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.Bundle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.Bundle.#ctor(Tangosol.Net.Cache.AbstractBundler)">
            <summary>
            Constructor.
            </summary>
            <param name="bundler">
            The bundler the operations are performed on.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.Bundle.Add(System.Object)">
            <summary>
            Add the specified key to the Bundle.
            </summary>
            <note>
            A call to this method must be externally synchronized
            for this Bundle object.
            </note>
            <param name="key">
            The key to add to this Bundle.
            </param>
            <returns>
            True if this Bundle was empty prior to this call.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.Bundle.AddAll(System.Collections.ICollection)">
            <summary>
            Add the specified collection of keys to the Bundle.
            </summary>
            <note>
            A call to this method must be externally synchronized for
            this Bundle object.
            </note>
            <param name="colKeys">
            The collection of keys to add to this Bundle.
            </param> 
            <returns>
            True if this Bundle was empty prior to this call.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.Bundle.Process(System.Boolean,System.Object)">
            <summary>
            Process the specified key according to this Bundle state.
            </summary>
            <param name="isBurst">
            True if this thread is supposed to perform an actual bundled 
            operation (burst); false otherwise.
            </param>
            <param name="key">
            The key to process.
            </param>
            <returns>
            An execution result according to the caller's contract.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.Bundle.ProcessAll(System.Boolean,System.Collections.ICollection)">
            <summary>
            Process the specified key collection according to this Bundle state.
            </summary>
            <param name="isBurst">
            True if this thread is supposed to perform an actual bundled
            operation (burst); false otherwise.
            </param>
            <param name="colKeys">
            The collection of keys to process.
            </param>
            <returns>
            An execution result according to the caller's contract.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.Bundle.GetBundleSize">
            <summary>
            Bundle size. The return value should be expressed in the
            same units as the value returned by the
            <see cref="P:Tangosol.Net.Cache.AbstractBundler.SizeThreshold"/> property.
            </summary>
            <returns>
            Bundle size.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.Bundle.EnsureResults">
            <summary>
            Obtain results of the bundled requests.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.AbstractKeyBundler.Bundle.ReleaseThread">
            <summary>
            Release all bundle resources associated with the current thread.
            </summary>
            <returns>
            True iff all entered threads have released
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractKeyBundler.Bundle.m_setKeys">
            <summary>
            This bundle content.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.AbstractKeyBundler.Bundle.m_mapResults">
            <summary>
            A result of the bundled processing.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.CacheEventArgs">
            <summary>
            An event which indicates that the content of a cache has changed.
            </summary>
            <remarks>
            Possible cache changes that can be respresented by this class are:
            <list type="bullet">
            <item>
            <description>an entry has been added</description>
            </item>
            <item>
            <description>an entry has been removed</description>
            </item>
            <item>
            <description>an entry has been changed</description>
            </item>
            </list>
            <p>
            A CacheEventArgs object is sent as an argument to the
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> interface methods. <c>null</c>
            values may be provided for the old and the new values.</p>
            </remarks>
            <author>Gene Gleyzer  2002.02.11</author>
            <author>Aleksandar Seovic  2006.07.12</author>
        </member>
        <member name="M:Tangosol.Net.Cache.CacheEventArgs.#ctor(Tangosol.Net.Cache.IObservableCache,Tangosol.Net.Cache.CacheEventType,System.Object,System.Object,System.Object,System.Boolean)">
            <summary>
            Constructs a new CacheEventArgs.
            </summary>
            <param name="source">
            The <see cref="T:Tangosol.Net.Cache.IObservableCache"/> object that fired the
            event.
            </param>
            <param name="eventType">
            This event's type, one of <see cref="T:Tangosol.Net.Cache.CacheEventType"/>
            values.
            </param>
            <param name="key">
            The key into the cache.
            </param>
            <param name="valueOld">
            The old value (for update and delete events).
            </param>
            <param name="valueNew">
            The new value (for insert and update events).
            </param>
            <param name="isSynthetic">
            <b>true</b> if the event is caused by the cache internal
            processing such as eviction or loading.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CacheEventArgs.#ctor(Tangosol.Net.Cache.IObservableCache,Tangosol.Net.Cache.CacheEventType,System.Object,System.Object,System.Object,System.Boolean,Tangosol.Net.Cache.CacheEventArgs.TransformationState)">
            <summary>
            Constructs a new CacheEventArgs.
            </summary>
            <param name="source">
            The <see cref="T:Tangosol.Net.Cache.IObservableCache"/> object that fired the
            event.
            </param>
            <param name="eventType">
            This event's type, one of <see cref="T:Tangosol.Net.Cache.CacheEventType"/>
            values.
            </param>
            <param name="key">
            The key into the cache.
            </param>
            <param name="valueOld">
            The old value (for update and delete events).
            </param>
            <param name="valueNew">
            The new value (for insert and update events).
            </param>
            <param name="isSynthetic">
            <b>true</b> if the event is caused by the cache internal
            processing such as eviction or loading.
            </param>
            <param name="transformState">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs.TransformationState"/> describing how this event
            has been or should be transformed.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CacheEventArgs.Dispatch(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Dispatch this event to the specified MapListener.
            </summary>
            <param name="listener">
            The <b>ICacheListener</b>.
            </param>
            <since>12.2.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.CacheEventArgs.ToString">
            <summary>
            Return a string representation of this
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> object.
            </summary>
            <returns>
            A <b>String</b> representation of this <b>CacheEventArgs</b>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CacheEventArgs.GetDescription">
            <summary>
            Get the event's description.
            </summary>
            <returns>
            This event's description.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CacheEventArgs.GetDescription(Tangosol.Net.Cache.CacheEventType)">
            <summary>
            Convert an event type into a human-readable string.
            </summary>
            <param name="eventType">
            An event type, one of the <see cref="T:Tangosol.Net.Cache.CacheEventType"/>
            enumerated values.
            </param>
            <returns>
            A corresponding human-readable string, for example "inserted".
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEventArgs.m_source">
            <summary>
            The event's source.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEventArgs.m_eventType">
            <summary>
            The event's type.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEventArgs.m_key">
            <summary>
            A key.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEventArgs.m_valueOld">
            <summary>
            A previous value.
            </summary>
            <remarks>
            May be <c>null</c> if not known.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEventArgs.m_valueNew">
            <summary>
            A new value.
            </summary>
            <remarks>
            May be <c>null</c> if not known.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEventArgs.m_isSynthetic">
            <summary>
            Event cause flag.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEventArgs.m_transformState">
            <summary>
            The transformation state for this event
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.CacheEventArgs.Cache">
            <summary>
            Gets the <see cref="T:Tangosol.Net.Cache.IObservableCache"/> object on which this
            event has actually occured.
            </summary>
            <value>
            An <b>IObservableCache</b> object on which this event has
            occured.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CacheEventArgs.EventType">
            <summary>
            Gets this event's type.
            </summary>
            <remarks>
            The event type is one of the <see cref="T:Tangosol.Net.Cache.CacheEventType"/>
            enumerated constants.
            </remarks>
            <value>
            An event type.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CacheEventArgs.Key">
            <summary>
            Gets a key associated with this event.
            </summary>
            <value>
            A key.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CacheEventArgs.OldValue">
            <summary>
            Gets an old value associated with this event.
            </summary>
            <remarks>
            The old value represents a value deleted from or updated in a
            dictionary. It is always <c>null</c> for "insert" notifications.
            </remarks>
            <value>
            An old value.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CacheEventArgs.NewValue">
            <summary>
            Gets a new value associated with this event.
            </summary>
            <remarks>
            The new value represents a new value inserted into or updated in
            a dictionary. It is always <c>null</c> for "delete" notifications.
            </remarks>
            <value>
            A new value.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CacheEventArgs.IsSynthetic">
            <summary>
            Return <b>true</b> if this event is caused by the cache internal
            processing such as eviction or loading.
            </summary>
            <value>
            <b>true</b> if this event is caused by the cache internal
            processing.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CacheEventArgs.TransformState">
            <summary>
            Return TransformationState for this event.
            </summary>
            <value>
            A TransformationState.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.CacheEventArgs.TransformationState">
            <summary>
            TransformationState describes how a CacheEvent has been or should be
            transformed.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEventArgs.TransformationState.NON_TRANSFORMABLE">
            <summary>
            Value used to indicate that an event is non-transformable and should
            not be passed to any transformer-based listeners.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEventArgs.TransformationState.TRANSFORMABLE">
            <summary>
            Value used to indicate that an event is transformable and could be
            passed to transformer-based listeners.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEventArgs.TransformationState.TRANSFORMED">
            <summary>
            Value used to indicate that an event has been transformed, and should
            only be passed to transformer-based listeners.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.CacheEventType">
            <summary>
            Cache event type enumeration.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEventType.Inserted">
            <summary>
            This event indicates that an entry has been added to the cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEventType.Updated">
            <summary>
            This event indicates that an entry has been updated in the cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEventType.Deleted">
            <summary>
            This event indicates that an entry has been removed from the
            cache.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.CacheEntry">
            <summary>
            Basic <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> implementation.
            </summary>
            <author>Aleksandar Seovic  2006.11.11</author>
        </member>
        <member name="T:Tangosol.Net.Cache.ICacheEntry">
            <summary>
            A cache entry (key-value pair).
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheEntry.Key">
            <summary>
            Gets the key corresponding to this entry.
            </summary>
            <value>
            The key corresponding to this entry; may be <c>null</c> if the
            underlying dictionary supports <c>null</c> keys.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheEntry.Value">
            <summary>
            Gets or sets the value corresponding to this entry.
            </summary>
            <value>
            The value corresponding to this entry; may be <c>null</c> if the
            value is <c>null</c> or if the entry does not exist in the
            cache.
            </value>
        </member>
        <member name="M:Tangosol.Net.Cache.CacheEntry.#ctor(System.Object,System.Object)">
            <summary>
            Creates an instance of a <see cref="T:Tangosol.Net.Cache.CacheEntry"/>.
            </summary>
            <param name="key">
            Cache entry <b>key</b>.
            </param>
            <param name="value">
            Cache entry <b>value</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CacheEntry.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Creates an instance of a <see cref="T:Tangosol.Net.Cache.CacheEntry"/>.
            </summary>
            <param name="key">
            Cache entry <b>key</b>.
            </param>
            <param name="value">
            Cache entry <b>value</b>.
            </param>
            <param name="origValue">
            The original value in the cache that this entry's value is
            replacing.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CacheEntry.GetHashCode">
            <summary>
            Generates hash code for this <b>CacheEntry.</b>
            </summary>
            <returns>
            A hash code for this <b>CacheEntry.</b>
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CacheEntry.Equals(System.Object)">
            <summary>
            Checks two cache entries for equality.
            </summary>
            <param name="obj">
            The object to compare with.
            </param>
            <returns>
            <c>true</c> iff this <b>CacheEntry.</b> and the passed object are equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CacheEntry.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents
            the current <b>CacheEntry</b>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <b>CacheEntry</b>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tangosol.Net.Cache.CacheEntry.op_Implicit(Tangosol.Net.Cache.CacheEntry)~System.Collections.DictionaryEntry">
            <summary>
            Converts CacheEntry to <b>DictionaryEntry</b>.
            </summary>
            <param name="entry">
            CacheEntry.
            </param>
            <returns>
            <b>DictionaryEntry</b> with key and value extracted from
            specified CacheEntry.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CacheEntry.op_Implicit(System.Collections.DictionaryEntry)~Tangosol.Net.Cache.CacheEntry">
            <summary>
            Converts <b>DictionaryEntry</b> to CacheEntry.
            </summary>
            <param name="entry">
            <b>DictionaryEntry</b>.
            </param>
            <returns>
            CacheEntry with key and value extracted from specified
            <b>DictionaryEntry</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEntry.m_key">
            <summary>
            The key for this entry.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEntry.m_value">
            <summary>
            The value for this entry. 
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheEntry.m_valueOrig">
            <summary>
            The optional original value of this entry.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.CacheEntry.Key">
            <summary>
            Gets the key for this cache entry.
            </summary>
            <value>
            The <b>key</b> for this cache entry.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CacheEntry.Value">
            <summary>
            Gets or sets the value for this cache entry.
            </summary>
            <value>
            The <b>value</b> for this cache entry.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CacheEntry.OriginalValue">
            <summary>
            Determine the original value in the cache that this cache entry's 
            value is replacing.
            </summary>
            <value>
            The <b>original value</b> for this cache entry.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.CacheExpiration">
            <summary>
            Cache expiration constants.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT">
            <summary>
            A special time-to-live value that can be passed to the extended
            <see cref="M:Tangosol.Net.Cache.ICache.Insert(System.Object,System.Object,System.Int64)"/> method
            to indicate that the cache's default expiry should be used.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CacheExpiration.NEVER">
            <summary>
            A special time-to-live value that can be passed to the extended
            <see cref="M:Tangosol.Net.Cache.ICache.Insert(System.Object,System.Object,System.Int64)"/> method
            to indicate that the cache entry should never expire.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.CompositeCache">
            <summary>
            <see cref="T:Tangosol.Net.Cache.ICache"/> implementation that wraps two caches - a
            front cache (assumed to be "inexpensive" and probably
            "incomplete") and a back cache (assumed to be "complete" and
            "correct", but more "expensive") - using a read-through/write-through
            approach.
            </summary>
            <remarks>
            <p>
            If the back cache implements <see cref="T:Tangosol.Net.Cache.IObservableCache"/> interface,
            the <b>CompositeCache</b> provides four different strategies of
            invalidating the front cache entries that have changed by other
            processes in the back cache:
            <list type="bullet">
            <item>
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenNone"/> strategy
            instructs the cache not to listen for invalidation events at all.
            This is the best choice for raw performance and scalability when
            business requirements permit the use of data which might not be
            absolutely current. Freshness of data can be guaranteed by use of a
            sufficiently brief eviction policy for the front cache.
            </item>
            <item>
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenPresent"/> strategy
            instructs the <b>CompositeCache</b> to listen to the back cache
            events related <b>only</b> to the items currently present in the
            front cache. This strategy works best when each instance of a
            front cache contains distinct subset of data relative to the
            other front cache instances (e.g. sticky data access patterns).
            </item>
            <item>
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenAll"/> strategy instructs
            the <b>CompositeCache</b> to listen to <b>all</b> back cache events.
            This strategy is optimal for read-heavy tiered access patterns where
            there is significant overlap between the different instances of front
            caches.
            </item>
            <item>
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenAuto"/> strategy
            instructs the <b>CompositeCache</b> implementation to switch
            automatically between <b>ListenPresent</b> and <b>ListenAll</b>
            strategies based on the cache statistics.
            </item>
            <item>
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenLogical"/> strategy
            instructs the <b>CompositeCache</b> to listen to <b>all</b> back map
            events that are <b>not synthetic</b>.  A synthetic event could be
            emitted as a result of eviction or expiration.  With this invalidation
            stategy, it is possible for the front map to contain cache entries that
            have been synthetically removed from the back (though any subsequent
            re-insertion will cause the corresponding entries in the front map to
            be invalidated).
            </item>
            </list></p>
            <p>
            The front cache implementation is assumed to be thread safe;
            additionally any modifications to the front cache are allowed
            only after the corresponding lock is acquired against the
            <see cref="P:Tangosol.Net.Cache.CompositeCache.CacheControl"/> property.</p>
            <p>
            <b>Note:</b> <c>null</c> values are not cached in the front
            cache and therefore this implementation is not optimized for
            caches that allow <c>null</c> values to be stored.</p>
            </remarks>
            <author>Alex Gleyzer, Gene Gleyzer  2002.09.10</author>
            <author>Gene Gleyzer  2003.10.16</author>
            <author>Ivan Cikic  2006.09.11</author>
        </member>
        <member name="T:Tangosol.Net.Cache.ICache">
            <summary>
            An <b>ICache</b> is a dictionary that supports caching.
            </summary>
            <author>Gene Gleyzer  2004.01.05</author>
            <author>Aleksandar Seovic  2006.07.11</author>
        </member>
        <member name="M:Tangosol.Net.Cache.ICache.GetAll(System.Collections.ICollection)">
            <summary>
            Get the values for all the specified keys, if they are in the
            cache.
            </summary>
            <remarks>
            <p>
            For each key that is in the cache, that key and its corresponding
            value will be placed in the dictionary that is returned by this
            method. The absence of a key in the returned dictionary indicates
            that it was not in the cache, which may imply (for caches that
            can load behind the scenes) that the requested data could not be
            loaded.</p>
            <p>
            The result of this method is defined to be semantically the same
            as the following implementation, without regards to threading
            issues:</p>
            <pre>
            IDictionary dict = new AnyDictionary();
            // could be a Hashtable (but does not have to)
            foreach (object key in colKeys)
            {
                object value = this[key];
                if (value != null || Contains(key))
                {
                    dict[key] = value;
                }
            }
            return dict;
            </pre>
            </remarks>
            <param name="keys">
            A collection of keys that may be in the named cache.
            </param>
            <returns>
            A dictionary of keys to values for the specified keys passed in
            <paramref name="keys"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ICache.Insert(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            <p>
            Invoking this method is equivalent to the following call:
            <pre>
            Insert(key, value, CacheExpiration.Default);
            </pre></p>
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the dictionary previously associated <c>null</c>
            with the specified key, if the implementation supports
            <c>null</c> values.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ICache.Insert(System.Object,System.Object,System.Int64)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            This variation of the <see cref="M:Tangosol.Net.Cache.ICache.Insert(System.Object,System.Object)"/>
            method allows the caller to specify an expiry (or "time to live")
            for the cache entry.
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire,
            also referred to as the entry's "time to live"; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT"/> to use the cache's
            default time-to-live setting; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.NEVER"/> to indicate that the
            cache entry should never expire; this milliseconds value is
            <b>not</b> a date/time value, but the amount of time object will
            be kept in the cache.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c> with
            the specified key, if the implementation supports <c>null</c>
            values.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If the requested expiry is a positive value and the
            implementation does not support expiry of cache entries.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.ICache.InsertAll(System.Collections.IDictionary)">
            <summary>
            Copies all of the mappings from the specified dictionary to this
            cache (optional operation).
            </summary>
            <remarks>
            These mappings will replace any mappings that this cache had for
            any of the keys currently in the specified dictionary.
            </remarks>
            <param name="dictionary">
            Mappings to be stored in this cache.
             </param>
            <exception cref="T:System.InvalidCastException">
            If the class of a key or value in the specified dictionary
            prevents it from being stored in this cache.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
            <exception cref="T:System.NullReferenceException">
            This cache does not permit <c>null</c> keys or values, and the
            specified key or value is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.ICache.GetEnumerator">
            <summary>
            Returns an <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> object for the
            <b>ICache</b> instance.
            </summary>
            <returns>An <b>ICacheEnumerator</b> object for the
            <b>ICache</b> instance.</returns>
        </member>
        <member name="P:Tangosol.Net.Cache.ICache.Entries">
            <summary>
            Gets a collection of <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> instances
            within the cache.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.ICacheStatistics">
            <summary>
            An interface for exposing <see cref="T:Tangosol.Net.Cache.ICache"/> statistics.
            </summary>
            <since>Coherence 2.2</since>
            <author>Cameron Purdy  2003.05.26</author>
            <author>Goran Milosavljevic  2006.11.09</author>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheStatistics.ResetHitStatistics">
            <summary>
            Reset the cache statistics.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.TotalGets">
            <summary>
            Determine the total number of "get" operations since the cache
            statistics were last reset.
            </summary>
            <value>
            The total number of "get" operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.TotalGetsMillis">
            <summary>
            Determine the total number of milliseconds spent on "get"
            operations since the cache statistics were last reset.
            </summary>
            <value>
            The total number of milliseconds processing "get" operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.AverageGetMillis">
            <summary>
            Determine the average number of milliseconds per "get"
            invocation since the cache statistics were last reset.
            </summary>
            <value>
            The average number of milliseconds per "get" operation.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.TotalPuts">
            <summary>
            Determine the total number of "put" operations since the cache
            statistics were last reset.
            </summary>
            <value>
            The total number of "put" operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.TotalPutsMillis">
            <summary>
            Determine the total number of milliseconds spent on "put"
            operations since the cache statistics were last reset.
            </summary>
            <value>
            The total number of milliseconds processing "put" operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.AveragePutMillis">
            <summary>
            Determine the average number of milliseconds per "put"
            invocation since the cache statistics were last reset.
            </summary>
            <value>
            The average number of milliseconds per "put" operation.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.CacheHits">
            <summary>
            Determine the rough number of cache hits since the cache
            statistics were last reset.
            </summary>
            <remarks>
            A cache hit is a read operation invocation (i.e. "get") for which
            an entry exists in this cache.
            </remarks>
            <value>
            The number of "get" calls that have been served by
            existing cache entries.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.CacheHitsMillis">
            <summary>
            Determine the total number of milliseconds (since that last
            statistics reset) for the "get" operations for which an entry
            existed in this cache.
            </summary>
            <value>
            The total number of milliseconds for the "get" operations that
            were hits.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.AverageHitMillis">
            <summary>
            Determine the average number of milliseconds per "get"
            invocation that is a hit.
            </summary>
            <value>
            The average number of milliseconds per cache hit.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.CacheMisses">
            <summary>
            Determine the rough number of cache misses since the cache
            statistics were last reset.
            </summary>
            <remarks>
            A cache miss is a "get" invocation that does not have an entry
            in this cache.
            </remarks>
            <value>
            The number of "get" calls that failed to find an existing
            cache entry because the requested key was not in the cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.CacheMissesMillis">
            <summary>
            Determine the total number of milliseconds (since that last
            statistics reset) for the "get" operations for which no entry
            existed in this cache.
            </summary>
            <value>
            The total number of milliseconds (since that last statistics
            reset) for the "get" operations that were misses.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.AverageMissMillis">
            <summary>
            Determine the average number of milliseconds per "get" invocation
            that is a miss.
            </summary>
            <value>
            The average number of milliseconds per cache miss.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.HitProbability">
            <summary>
            Determine the rough probability (0 &lt;= p &lt;= 1) that the next
            invocation will be a hit, based on the statistics collected since
            the last reset of the cache statistics.
            </summary>
            <value>
            The cache hit probability (0 &lt;= p &lt;= 1).
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.CachePrunes">
            <summary>
            Determine the rough number of cache pruning cycles since the
            cache statistics were last reset.
            </summary>
            <remarks>
            For the LocalCache implementation, this refers to the number of
            times that the <tt>prune()</tt> method is executed.
            </remarks>
            <value>
            The total number of cache pruning cycles (since that last
            statistics reset).
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.CachePrunesMillis">
            <summary>
            Determine the total number of milliseconds (since that last
            statistics reset) spent on cache pruning.
            </summary>
            <remarks>
            For the LocalCache implementation, this refers to the time spent in
            the <tt>prune()</tt> method.
            </remarks>
            <value>
            The total number of milliseconds (since that last statistics
            reset) for cache pruning operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheStatistics.AveragePruneMillis">
            <summary>
            Determine the average number of milliseconds per cache pruning.
            </summary>
            <value>
            The average number of milliseconds per cache pruning.
            </value>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.STRICT_SYNCHRO_LISTENER">
            <summary>
            Specifies whether the back cache listener strictly adheres
            to the <see cref="T:Tangosol.Net.Cache.Support.CacheListenerSupport.ISynchronousListener"/>
            contract.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.#ctor(Tangosol.Net.Cache.ICache,Tangosol.Net.Cache.ICache)">
            <summary>
            Construct a <b>CompositeCache</b> using two specified
            caches:
            <list type="bullet">
            <item>
            <i>FrontCache</i> (aka "cache", "near" or "shallow")
            </item>
            <item>
            <i>BackCache</i>  (aka "actual", "real" or "deep")
            </item>
            </list>
            </summary>
            <remarks>
            If the BackCache implements the <see cref="T:Tangosol.Net.Cache.IObservableCache"/>
            interface a listener will be added to the BackCache to invalidate
            FrontCache items updated [externally] in the back cache using the
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenAuto"/> strategy.
            </remarks>
            <param name="front">
            The front cache.
            </param>
            <param name="back">
            The back cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.#ctor(Tangosol.Net.Cache.ICache,Tangosol.Net.Cache.ICache,Tangosol.Net.Cache.CompositeCacheStrategyType)">
            <summary>
            Construct a <b>CompositeCache</b> using two specified
            caches:
            <list type="bullet">
            <item>
            <i>FrontCache</i> (aka "cache", "near" or "shallow")
            </item>
            <item>
            <i>BackCache</i>  (aka "actual", "real" or "deep")
            </item>
            </list>
            and using the specified front cache invalidation strategy.
            </summary>
            <param name="front">
            The front cache.
            </param>
            <param name="back">
            The back cache.
            </param>
            <param name="strategy">
            Specifies the strategy used for the front caches invalidation;
            valid values are <see cref="T:Tangosol.Net.Cache.CompositeCacheStrategyType"/>
            values.
            </param>
            <since>Coherence 2.3</since>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.Release">
            <summary>
            Release the <b>CompositeCache</b>.
            </summary>
            <remarks>
            If the <see cref="T:Tangosol.Net.Cache.ICache"/> implements an
            <see cref="T:Tangosol.Net.Cache.IObservableCache"/> calling this method is necessary
            to remove the back cache listener. Any access to the
            <b>CompositeCache</b> which has been released will cause
            <b>InvalidOperationException</b>.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.Clear">
            <summary>
            Clears both the front and back caches.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.Contains(System.Object)">
            <summary>
            Check whether or not this cache contains a mapping for the
            specified key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            <b>true</b> if this cache contains a mapping for the
            specified key, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.Add(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Gets the <b>IDictionaryEnumerator</b> object for this object.
            </summary>
            <returns>
            An <b>IDictionaryEnumerator</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.Remove(System.Object)">
            <summary>
            Remove the mapping for this key from this cache if present.
            </summary>
            <remarks>
            Expensive: updates both the underlying cache and the local cache.
            </remarks>
            <param name="key">
            Key whose mapping is to be removed from the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="P:Tangosol.Net.Cache.CompositeCache.BackCache"/> to an
            <b>Array</b>, starting at a particular <b>Array</b> index.
            </summary>
            <param name="array">
            The one-dimensional <b>Array</b> that is the destination of the
            elements copied from <b>BackCache</b>. The <b>Array</b> must have
            zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a cache.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate through
            the back cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.GetAll(System.Collections.ICollection)">
            <summary>
            Get the values for all the specified keys, if they are in the
            cache.
            </summary>
            <remarks>
            <p>
            For each key that is in the cache, that key and its corresponding
            value will be placed in the dictionary that is returned by this
            method. The absence of a key in the returned dictionary indicates
            that it was not in the cache, which may imply (for caches that
            can load behind the scenes) that the requested data could not be
            loaded.</p>
            <p>
            <b>Note:</b> this implementation does not differentiate between
             missing keys or <c>null</c> values stored in the back
            dictionary; in both cases the returned dictionary will not
            contain the corresponding entry.</p>
            </remarks>
            <param name="keys">
            A collection of keys that may be in the named cache.
            </param>
            <returns>
            A dictionary of keys to values for the specified keys passed in
            <paramref name="keys"/>.
            </returns>
            <since>Coherence 2.5</since>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.Insert(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            <p>
            Invoking this method is equivalent to the following call:
            <pre>
            Insert(key, value, CacheExpiration.Default);
            </pre></p>
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the dictionary previously associated <c>null</c>
            with the specified key, if the implementation supports
            <c>null</c> values.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.Insert(System.Object,System.Object,System.Int64)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            This variation of the <see cref="M:Tangosol.Net.Cache.CompositeCache.Insert(System.Object,System.Object)"/>
            method allows the caller to specify an expiry (or "time to live")
            for the cache entry.
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire,
            also referred to as the entry's "time to live"; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT"/> to use the cache's
            default time-to-live setting; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.NEVER"/> to indicate that the
            cache entry should never expire; this milliseconds value is
            <b>not</b> a date/time value, but the amount of time object will
            be kept in the cache.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c> with
            the specified key, if the implementation supports <c>null</c>
            values.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If the requested expiry is a positive value and the
            implementation does not support expiry of cache entries.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.Insert(System.Collections.IDictionary,System.Object,System.Object,System.Int64)">
            <summary>
            Extended put implementation that respects the expiration contract.
            </summary>
            <param name="dictionary">
            The <b>IDictionary</b> object to add pair key/value to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire,
            also referred to as the entry's "time to live"; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT"/> to use the cache's
            default time-to-live setting; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.NEVER"/> to indicate that the
            cache entry should never expire; this milliseconds value is
            <b>not</b> a date/time value, but the amount of time object will
            be kept in the cache.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c> with
            the specified key, if the implementation supports <c>null</c>
            values.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.InsertAll(System.Collections.IDictionary)">
            <summary>
            Copies all of the mappings from the specified dictionary to this
            cache (optional operation).
            </summary>
            <remarks>
            These mappings will replace any mappings that this cache had for
            any of the keys currently in the specified dictionary.
            </remarks>
            <param name="dictionary">
            Mappings to be stored in this cache.
             </param>
            <exception cref="T:System.InvalidCastException">
            If the class of a key or value in the specified dictionary
            prevents it from being stored in this cache.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
            <exception cref="T:System.NullReferenceException">
            This cache does not permit <c>null</c> keys or values, and the
            specified key or value is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.Tangosol#Net#Cache#ICache#GetEnumerator">
            <summary>
            Returns an <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> object for the
            <b>ICache</b> instance.
            </summary>
            <returns>An <b>ICacheEnumerator</b> object for the
            <b>ICache</b> instance.</returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.Dispose">
            <summary>
            Calls <see cref="M:Tangosol.Net.Cache.CompositeCache.Release"/> to release the resources associated with this cache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.InvalidateFront(System.Object)">
            <summary>
            Invalidate the key from the front.
            </summary>
            <remarks>
            The caller must have the key locked.
            </remarks>
            <param name="key">
            The key to invalidate.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.FinalizeInsert(System.Object,System.Object,System.Collections.IList,System.Int64)">
            <summary>
            Helper method used by <see cref="M:Tangosol.Net.Cache.CompositeCache.Insert(System.Object,System.Object)"/> and
            <see cref="M:Tangosol.Net.Cache.CompositeCache.InsertAll(System.Collections.IDictionary)"/> to perform common maintanence tasks after
            completing an operation against the back.
            </summary>
            <reamarks>
            This includes removing the keys from the control cache, and
            evaluating if it is safe to update the front with the "new"
            value.  The implementation makes use of the following assumption:
            if listEvents == IGNORE_LIST then key does not exist in the
            front, and there is no key based listener for it. Any key passed
            to this method must be locked in the control cache by the caller.
            </reamarks>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The new value.
            </param>
            <param name="listEvents">
            The event list associated with the key, or <c>null</c> if
            it must be looked up from the control cache.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.Validate(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Validate the front cache entry for the specified back cache
            event.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> from the back cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.TryLock(Tangosol.Util.Collections.HashSet)">
            <summary>
            Lock the keys in the given set without blocking.
            </summary>
            <param name="setKeys">
            keys to lock in the control map.
            </param>
            <returns>
             Set of keys that were successfully locked.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.IsPriming(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Check if the specified event is a "priming" one.
            </summary>
            <param name="evt">
            CacheEvent to check.
            </param>
            <returns>
            true iff the event is a Priming Event.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.SetKeyHolder">
            <summary>
            Set up a thread local Set to hold all the keys that might be evicted
            from the front cache.
            </summary>
            <returns>
            a Set to hold all the keys in the ThreadLocal object or null
            if the bulk unregistering is not needed.
            </returns>
            <since>12.2.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.RemoveKeyHolder">
            <summary>
            Remove the key holder from the ThreadLocal object.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.ResetHitStatistics">
            <summary>
            Reset the cache statistics.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.Equals(System.Object)">
            <summary>
            Compares the specified object with this dictionary for equality.
            </summary>
            <param name="o">
            <b>Object</b> to be compared for equality with this dictionary.
            </param>
            <returns>
            <b>true</b> if the specified object is equal to this dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.GetHashCode">
            <summary>
            Return the hash code value for this dictionary.
            </summary>
            <returns>
            The hash code value for this dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.ToString">
            <summary>
            For debugging purposes, format the contents of the
            <b>CompositeCache</b> in a human readable format.
            </summary>
            <returns>
            A <b>String</b> representation of the <b>CompositeCache</b>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.RegisterListener">
            <summary>
            Register the global back cache listener.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.UnregisterListener">
            <summary>
            Unregister the global back cache listener.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.RegisterListener(System.Object)">
            <summary>
            Register the back cache listener for the specified key.
            </summary>
            <param name="key">
            The key.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.RegisterListeners(Tangosol.Util.Collections.HashSet)">
            <summary>
            Register the back map listeners for the specified set of keys.
            </summary>
            <param name="setKeys">
            The key set.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.UnregisterListener(System.Object)">
            <summary>
            Unregister the back cache listener for the specified key.
            </summary>
            <param name="key">
            The key.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.UnregisterListeners(System.Collections.ICollection)">
            <summary>
            Unregister the back cache listener for the specified keys.
            <p> 
            Note: all the keys in the passed-in set must be locked and will be unlocked.
            </p>
            </summary>
            <param name="setKeys">
            Set of keys to unregister (and unlock).
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.RegisterFrontListener">
            <summary>
            Register the global front cache listener.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.UnregisterFrontListener">
            <summary>
            Unregister the global front cache listener.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.EnsureInvalidationStrategy">
            <summary>
            Ensure that a strategy has been choosen and that any appropriate
            global listeners have been registered.
            </summary>
            <returns>
            The current strategy.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.ResetInvalidationStrategy">
            <summary>
            Reset the "current invalidation strategy" flag.
            </summary>
            <remarks>
            This method should be called <b>only</b> while the access to the
            front cache is fully synchronzied and the front cache
            is empty to prevent stalled data.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.InstantiateBackCacheListener(Tangosol.Net.Cache.CompositeCacheStrategyType)">
            <summary>
            Factory pattern: instantiate back cache listener.
            </summary>
            <param name="strategy">
            CompositeCacheStrategyType.
            </param>
            <returns>
            An instance of back cache listener responsible for keeping the
            front cache coherent with the back cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.RegisterDeactivationListener">
            <summary>
            Instantiate and register a DeactivationListener with the back cache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.UnregisterDeactivationListener">
            <summary>
            Unregister back cache deactivation listener.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.ResetFrontMap">
            <summary>
            Reset the front map.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.InstantiateFrontCacheListener">
            <summary>
            Factory pattern: instantiate front cache listener.
            </summary>
            <returns>
            An instance of front cache listener.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.m_back">
            <summary>
            The "back" cache, considered to be "complete" yet "expensive" to
            access.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.m_front">
            <summary>
            The "front" cache, considered to be "incomplete" yet
            "inexpensive" to access.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.m_strategyTarget">
            <summary>
            The invalidation strategy that this cache is to use.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.m_strategyCurrent">
            <summary>
            The current invalidation strategy, which at times could be
            different from the target strategy.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.m_listener">
            <summary>
            An optional listener for the "back" cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.m_listenerFront">
            <summary>
            An optional listener for the "front" cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.m_filterListener">
            <summary>
            A filter that selects events for the back map listener.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.m_listenerDeactivation">
            <summary>
            A filter that selects events for the back map listener.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.m_cacheControl">
            <summary>
            The <see cref="T:Tangosol.Net.Cache.IConcurrentCache"/> to keep track of front cache
            updates.
            </summary>
            <remarks>
            Values are list of events received by the listener while the
            corresponding key was locked.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.m_stats">
            <summary>
            The <see cref="T:Tangosol.Net.Cache.ICacheStatistics"/> object maintained by this
            cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.m_countInvalidationHits">
            <summary>
            The rough (ie unsynchronized) number of times the front cache
            entries that were present in the front cache were invalidated by
            the listener.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.m_countInvalidationMisses">
            <summary>
            The rough (ie unsynchronized) number of times the front cache
            entries that were absent in the front cache received invalidation
            event.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.m_countRegisterListener">
            <summary>
            The total number of RegisterListener(key) operations.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.s_tloKeys">
            <summary>
            The ThreadLocal to hold all the keys that are evicted while the front cache
            is updated during get or getAll operation.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.GLOBAL_KEY">
            <summary>
            A unique <b>Object</b> that serves as a control key for global
            operations such as clear and release and synchronization point
            for the current strategy change.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.IGNORE_LIST">
            <summary>
            Empty list that ignores any add operations.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.FrontCache">
            <summary>
            Obtain the front cache reference.
            </summary>
            <remarks>
            <b>Note:</b> direct modifications of the returned cache may
            cause an unpredictable behavior of the <b>CompositeCache</b>.
            </remarks>
            <value>
            The front <see cref="T:Tangosol.Net.Cache.ICache"/>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.BackCache">
            <summary>
            Obtain the back cache reference.
            </summary>
            <remarks>
            <b>Note:</b> direct modifications of the returned cache may
            cause an unpredictable behavior of the <b>CompositeCache</b>.
            </remarks>
            <value>
            The back <see cref="T:Tangosol.Net.Cache.ICache"/>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.InvalidationStrategy">
            <summary>
            Obtain the invalidation strategy used by this
            <b>CompositeCache</b>.
            </summary>
            <value>
            One of <see cref="T:Tangosol.Net.Cache.CompositeCacheStrategyType"/> values.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.CacheControl">
            <summary>
            Obtain the <see cref="T:Tangosol.Net.Cache.IConcurrentCache"/> that should be used to
            synchronize the front cache modification access.
            </summary>
            <value>
            An <b>IConcurrentCache</b> instance controlling the front cache
            modifications.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.IsCoherent">
            <summary>
            Determine if changes to the back cache affect the front cache so
            that data in the front cache stays in sync.
            </summary>
            <value>
            <c>true</c> if the front cache has a means to stay in sync
            with the back cache so that it does not contain stale data.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.CacheStatistics">
            <summary>
            Obtain the <see cref="P:Tangosol.Net.Cache.CompositeCache.CacheStatistics"/> for this cache.
            </summary>
            <value>
            A <b>CacheStatistics</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.InvalidationHits">
            <summary>
            Determine the rough number of front cache invalidation hits
            since the cache statistics were last reset.
            </summary>
            <remarks>
            An invalidation hit is an externally induced cache event
            for an entry that exists in the front cache.
            </remarks>
            <value>
            The number of cache invalidation hits.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.InvalidationMisses">
            <summary>
            Determine the rough number of front cache invalidation
            misses since the cache statistics were last reset.
            </summary>
            <remarks>
            An invalidation hit is an externally induced cache event
            for an entry that exists in the front cache.
            </remarks>
            <value>
            The number of cache invalidation misses.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.TotalRegisterListener">
            <summary>
            Determine the total number of
            <see cref="M:Tangosol.Net.Cache.CompositeCache.RegisterListener(System.Object)"/> operations since the cache
            statistics were last reset.
            </summary>
            <value>
            The total number of listener registrations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">
            The key of the element to get or set.
            </param>
            <value>
            The element with the specified key.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.Keys">
            <summary>
            Obtain an <b>ICollection</b> of the keys contained in this cache.
            </summary>
            <remarks>
            If there is a listener for the back cache, then the collection
            will be mutable; otherwise the returned collection will be
            immutable. The returned collection reflects the full contents of
            the back cache.
            </remarks>
            <value>
            An <b>ICollection</b> of the keys contained in this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.Values">
            <summary>
            Obtain an <b>ICollection</b> of the values contained in this
            cache.
            </summary>
            <remarks>
            If there is a listener for the back cache, then the collection
            will be mutable; otherwise the returned collection will be
            immutable. The returned collection reflects the full contents of
            the back cache.
            </remarks>
            <value>
            An <b>ICollection</b> of the values contained in this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="P:Tangosol.Net.Cache.CompositeCache.BackCache"/>
            object is read-only.
            </summary>
            <value>
            <b>true</b> if the <see cref="P:Tangosol.Net.Cache.CompositeCache.BackCache"/> object is a read-only;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="P:Tangosol.Net.Cache.CompositeCache.BackCache"/>
            object has a fixed size.
            </summary>
            <value>
            <b>true</b> if the <see cref="P:Tangosol.Net.Cache.CompositeCache.BackCache"/> object has a fixed
            size; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="P:Tangosol.Net.Cache.CompositeCache.BackCache"/>.
            </summary>
            <value>
            The number of elements contained in the back cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the back
            cache.
            </summary>
            <value>
            An object that can be used to synchronize access to the back
            cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the back cache is
            synchronized (thread safe).
            </summary>
            <value>
            <b>true</b> if access to the back cache is synchronized (thread
            safe); otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.Entries">
            <summary>
            Gets a collection of <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> instances
            within the cache.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.TotalGets">
            <summary>
            Determine the total number of "get" operations since the cache
            statistics were last reset.
            </summary>
            <value>
            The total number of "get" operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.TotalGetsMillis">
            <summary>
            Determine the total number of milliseconds spent on "get"
            operations since the cache statistics were last reset.
            </summary>
            <value>
            The total number of milliseconds processing "get" operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.AverageGetMillis">
            <summary>
            Determine the average number of milliseconds per "get"
            invocation since the cache statistics were last reset.
            </summary>
            <value>
            The average number of milliseconds per "get" operation.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.TotalPuts">
            <summary>
            Determine the total number of "put" operations since the cache
            statistics were last reset.
            </summary>
            <value>
            The total number of "put" operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.TotalPutsMillis">
            <summary>
            Determine the total number of milliseconds spent on "put"
            operations since the cache statistics were last reset.
            </summary>
            <value>
            The total number of milliseconds processing "put" operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.AveragePutMillis">
            <summary>
            Determine the average number of milliseconds per "put"
            invocation since the cache statistics were last reset.
            </summary>
            <value>
            The average number of milliseconds per "put" operation.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.CacheHits">
            <summary>
            Determine the rough number of cache hits since the cache
            statistics were last reset.
            </summary>
            <remarks>
            A cache hit is a read operation invocation (i.e. "get") for which
            an entry exists in this cache.
            </remarks>
            <value>
            The number of "get" calls that have been served by
            existing cache entries.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.CacheHitsMillis">
            <summary>
            Determine the total number of milliseconds (since that last
            statistics reset) for the "get" operations for which an entry
            existed in this cache.
            </summary>
            <value>
            The total number of milliseconds for the "get" operations that
            were hits.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.AverageHitMillis">
            <summary>
            Determine the average number of milliseconds per "get"
            invocation that is a hit.
            </summary>
            <value>
            The average number of milliseconds per cache hit.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.CacheMisses">
            <summary>
            Determine the rough number of cache misses since the cache
            statistics were last reset.
            </summary>
            <remarks>
            A cache miss is a "get" invocation that does not have an entry
            in this cache.
            </remarks>
            <value>
            The number of "get" calls that failed to find an existing
            cache entry because the requested key was not in the cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.CacheMissesMillis">
            <summary>
            Determine the total number of milliseconds (since that last
            statistics reset) for the "get" operations for which no entry
            existed in this map.
            </summary>
            <value>
            The total number of milliseconds (since that last statistics
            reset) for the "get" operations that were misses.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.AverageMissMillis">
            <summary>
            Determine the average number of milliseconds per "get" invocation
            that is a miss.
            </summary>
            <value>
            The average number of milliseconds per cache miss.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.HitProbability">
            <summary>
            Determine the rough probability (0 &lt;= p &lt;= 1) that the next
            invocation will be a hit, based on the statistics collected since
            the last reset of the cache statistics.
            </summary>
            <value>
            The cache hit probability (0 &lt;= p &lt;= 1).
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.CachePrunes">
            <summary>
            Determine the rough number of cache pruning cycles since the
            cache statistics were last reset.
            </summary>
            <remarks>
            For the LocalCache implementation, this refers to the number of
            times that the <tt>prune()</tt> method is executed.
            </remarks>
            <value>
            The total number of cache pruning cycles (since that last
            statistics reset).
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.CachePrunesMillis">
            <summary>
            Determine the total number of milliseconds (since that last
            statistics reset) spent on cache pruning.
            </summary>
            <remarks>
            For the LocalCache implementation, this refers to the time spent in
            the <tt>prune()</tt> method.
            </remarks>
            <value>
            The total number of milliseconds (since that last statistics
            reset) for cache pruning operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.CompositeCache.AveragePruneMillis">
            <summary>
            Determine the average number of milliseconds per cache pruning.
            </summary>
            <value>
            The average number of milliseconds per cache pruning.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.CompositeCache.DeactivationListener">
            <summary>
            DeactivationListener for the back NamedCache.
            </summary>
            <remarks>
            The primary goal of that listener is invalidation of the front map
            when the back cache is destroyed or all storage nodes are stopped.
            </remarks>
            <since>12.1.3</since>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.AbstractCacheListener">
            <summary>
            A base class that simplifies the implementation of a
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, particularly classes that only implement
            one or two of the three event methods.
            </summary>
            <author>Cameron Purdy  2006.01.18</author>
            <author>Ivan Cikic  2006.11.09</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractCacheListener.EntryInserted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractCacheListener.EntryUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been updated.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the update
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractCacheListener.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="T:Tangosol.Net.Internal.INamedCacheDeactivationListener">
            <summary>
            Pseudo <b>MapListener</b> that can be used to listen for a deactivation event
            from a <b>NamedCache</b>.
            </summary>
            <remarks>
            Instances of this interface can be added to a NamedCache with the single
            parameter <see cref="M:Tangosol.Net.Cache.IObservableCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)"/> method.
            When the NamedCache is deactivated, it will call the
            <see cref="M:Tangosol.Net.Cache.ICacheListener.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)"/> method. The other event
            handlers are not used.
            </remarks>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.CacheListenerSupport.ISynchronousListener">
            <summary>
            A tag interface indicating that tagged
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> implementation has to receive
            the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> notifications in a synchronous
            manner.
            </summary>
            <remarks>
            <p>
            Consider an <b>ICacheListener</b> that subscribes to receive
            notifications for distributed (partitioned) cache. All events
            notifications are received by the service thread and immediately
            queued to be processed by the dedicated event dispatcher thread.
            This makes it impossible to differentiate between the event
            caused by the updates made by this thread and any other thread.
            Forcing the events to be processed on the service thread
            guarantees that by the time "put" or "remove" requests return to
            the caller all relevant cache event notification have been
            processed (due to the "in order delivery" rule enforced by the
            TCMP).</p>
            <p>
            This interface should be considered as a very advanced feature,
            so an <b>ICacheListener</b> implementation that is tagged as
            an ISynchronousListener must exercise extreme caution during event
            processing since any delay with return or unhandled exception
            will cause a delay or complete shutdown of the corresponding
            cache service.</p>
            <p>
            <b>Note:</b> The contract by the event producer in respect to the
            ISynchronousListener is somewhat weaker then the general one.
            First, the ISynchronousListener implementaion should make no
            assumptions about the event source obtained by
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.Cache"/>.</p>
            <p>
            Second, in the event of [automatic] service restart, the listener
            has to be re-registered manually.</p>
            <p>
            Third, and the most important, no calls against the
            <see cref="T:Tangosol.Net.INamedCache"/> are allowed during the synchronous
            event processing (the only exception being a call to remove the
            listener itself).</p>
            </remarks>
        </member>
        <member name="T:Tangosol.Util.ISynchronousListener">
            <summary>
            A tag interface indicating that a listener implementation has to receive
            the event notifications synchronously on the corresponding service's thread.
            </summary>
            <remarks>
            This interface should be considered as a very advanced feature, as
            a listener implementation that is marked as a SynchronousListener
            must exercise extreme caution during event processing since any delay
            with return or unhandled exception will cause a delay or complete
            shutdown of the corresponding service.
            </remarks>    
        </member>
        <member name="T:Tangosol.Net.Cache.Support.CacheListenerSupport">
            <summary>
            This class provides support for advanced
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> functionality.
            </summary>
            <author>Gene Gleyzer  2003.09.16</author>
            <author>Goran Milosavljevic  2006.09.11</author>
            <since>Coherence 2.3</since>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.AddListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Add a cache listener that receives events based on a filter
            evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="filter">
            An <see cref="T:Tangosol.Util.IFilter"/> that will be passed
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects to select from; a
            <b>CacheEventArgs</b> will be delivered to the listener only if
            the filter evaluates to <b>true</b> for that
            <b>CacheEventArgs</b>; <c>null</c> is equivalent to a filter
            that alway returns <b>true</b>.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <b>CacheEventArgs</b> objects
            do not have to include the <b>OldValue</b> and <b>NewValue</b>
            property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.AddListener(Tangosol.Net.Cache.ICacheListener,System.Object,System.Boolean)">
            <summary>
            Add a cache listener for a specific key.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="key">
            The key that identifies the <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> for
            which to raise events.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <b>CacheEventArgs</b> objects
            do not have to include the <b>OldValue</b> and <b>NewValue</b>
            property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.RemoveListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)">
            <summary>
            Remove a cache listener that previously signed up for events
            based on a filter evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="filter">
            An <see cref="T:Tangosol.Util.IFilter"/> used to evaluate events.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.RemoveListener(Tangosol.Net.Cache.ICacheListener,System.Object)">
            <summary>
            Remove a cache listener that previously signed up for events
            about a specific key.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.AddSafeListener(System.Collections.IDictionary,System.Object,Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Ensure that the specified cache has an
            <see cref="T:Tangosol.Util.Listeners"/> object associated with the specified key
            and add the specified listener to it.
            </summary>
            <param name="cacheListeners">
            Dictionary of cache listeners.
            </param>
            <param name="key">
            Key that specified listener should be associated to.
            </param>
            <param name="listener">
            Listener to associate to specified key.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.AddSafeListener(System.Collections.IDictionary,Tangosol.Util.IFilter,Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Ensure that the specified cache has an
            <see cref="T:Tangosol.Util.Listeners"/> object associated with the specified filter
            and add the specified listener to it.
            </summary>
            <param name="cacheListeners">
            Dictionary of cache listeners.
            </param>
            <param name="anyFilter">
            Filter that specified listener should be associated to.
            </param>
            <param name="listener">
            Listener to associate to specified key.
            </param>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.RemoveSafeListener(System.Collections.IDictionary,System.Object,Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove the specified listener from the <see cref="T:Tangosol.Util.Listeners"/>
            object associated with the specified key.
            </summary>
            <param name="cacheListeners">
            Dictionary of cache listeners.
            </param>
            <param name="key">
            Key that determines listener to be removed.
            </param>
            <param name="listener">
            Listener to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.AddListenerState(System.Collections.IDictionary,System.Object,Tangosol.Net.Cache.ICacheListener,System.Boolean)">
            <summary>
            Add a state information (lite or standard) assosiated with
            specified key and listener.
            </summary>
            <param name="cacheStandardListeners">
            Dictionary of cache listeners.
            </param>
            <param name="key">
            Key that the specified listener should be associated to.
            </param>
            <param name="listener">
            Cache listener.
            </param>
            <param name="isLite">
            <b>true</b> if listener is "lite", <b>false</b> otherwise.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.RemoveListenerState(System.Collections.IDictionary,System.Object,Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a state information (lite or standard) associated with
            specified key and listener.
            </summary>
            <param name="cacheStandardListeners">
            Dictionary of cache listeners.
            </param>
            <param name="key">
            Key that the specified listener is associated to.
            </param>
            <param name="listener">
            Cache listener.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.Clear">
            <summary>
            Remove all signed up listeners.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.IsEmpty">
            <summary>
            Checks whether or not this CacheListenerSupport object
            contains any listeners.
            </summary>
            <returns>
            <b>true</b> if there are no listeners encapsulated by this
            CacheListenerSupport object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.IsEmpty(Tangosol.Util.IFilter)">
            <summary>
            Checks whether or not this CacheListenerSupport object
            contains any listeners for a given filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/>.
            </param>
            <returns>
            <b>true</b> if there are no listeners for the specified filter
            encapsulated by this CacheListenerSupport object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.IsEmpty(System.Object)">
            <summary>
            Checks whether or not this CacheListenerSupport object
            contains any listeners for a given key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            <b>true</b> if there are no listeners for the specified filter
            encapsulated by this CacheListenerSupport object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.ContainsStandardListeners(Tangosol.Util.IFilter)">
            <summary>
            Checks whether or not this CacheListenerSupport object
            contains any standard (not lite) listeners for a given filter.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <returns>
            <b>true</b> if there are no standard listeners for the specified
            filter encapsulated by this CacheListenerSupport object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.ContainsStandardListeners(System.Object)">
            <summary>
            Checks whether or not this CacheListenerSupport object
            contains any standard (not lite) listeners for a given key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            <b>true</b> if there are no standard listeners for the specified
            filter encapsulated by this CacheListenerSupport object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.GetListeners(Tangosol.Util.IFilter)">
            <summary>
            Obtain the <see cref="T:Tangosol.Util.Listeners"/> object for a given filter.
            </summary>
            <remarks>
            <b>Note</b>: The returned value must be treated as an immutable.
            </remarks>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <b>Listeners</b> object for the filter; <c>null</c> if none
            exists.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.GetListeners(System.Object)">
            <summary>
            Obtain the <see cref="T:Tangosol.Util.Listeners"/> object for a given key.
            </summary>
            <remarks>
            <b>Note</b>: The returned value must be treated as an immutable.
            </remarks>
            <param name="key">
            The key.
            </param>
            <returns>
            The <b>Listeners</b> object for the key; <c>null</c> if none
            exists.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.Dispatch(Tangosol.Net.Cache.CacheEventArgs,Tangosol.Util.Listeners)">
            <summary>
            Dispatch the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> to the specified
            <see cref="T:Tangosol.Util.Listeners"/> collection.
            </summary>
            <remarks>
            This call is equivalent to
            <pre>
            Dispatch(evt, listeners, true);
            </pre>
            </remarks>
            <param name="evt">
            The <b>CacheEventArgs</b>.
            </param>
            <param name="listeners">
            The <see cref="T:Tangosol.Util.Listeners"/> collection.
            </param>
            <exception cref="T:System.InvalidCastException">
            If any of the targets is not an instance of
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> interface.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.Dispatch(Tangosol.Net.Cache.CacheEventArgs,Tangosol.Util.Listeners,System.Boolean)">
            <summary>
            Dispatch the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> to the specified
            <see cref="T:Tangosol.Util.Listeners"/> collection.
            </summary>
            <param name="evt">
            The <b>CacheEventArgs</b>.
            </param>
            <param name="listeners">
            The <see cref="T:Tangosol.Util.Listeners"/> collection.
            </param>
            <param name="isStrict">
            If <b>true</b> then any <b>Exception</b> thrown by event
            handlers stops all further event processing and the exception is
            re-thrown; if <b>false</b> then all exceptions are logged and the
            process continues.
            </param>
            <exception cref="T:System.InvalidCastException">
            If any of the targets is not an instance of
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> interface.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.Dispatch(Tangosol.Net.Cache.CacheEventArgs,Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Dispatch the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> to the specified
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/>.
            </summary>
            <param name="evt">
            The <b>CacheEventArgs</b>.
            </param>
            <param name="listener">
            The listener.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.CollectListeners(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Collect all <see cref="T:Tangosol.Util.Listeners"/> that should be notified for a
            given event.
            </summary>
            <remarks>
            <b>Note</b>: The returned value must be treated as an immutable.
            </remarks>
            <param name="cacheEvent">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> object.
            </param>
            <returns>
            The <b>Listeners</b> object containing the relevant listeners.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.FireEvent(Tangosol.Net.Cache.CacheEventArgs,System.Boolean)">
            <summary>
            Fire the specified cache event.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </param>
            <param name="isStrict">
            If <b>true</b> then any <b>Exception</b> thrown by event
            handlers stops all further event processing and the exception
            is re-thrown; if <b>false</b> then all exceptions are logged and
            the process continues.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.ConvertEvent(Tangosol.Net.Cache.CacheEventArgs,Tangosol.Net.Cache.IObservableCache,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Convert the specified cache event into another
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> that ensures the lazy event data
            conversion using the specified converters.
            </summary>
            <param name="evt">
            The cache event.
            </param>
            <param name="cacheConv">
            The source for the converted event.
            </param>
            <param name="convKey">
            (Optional) the key <see cref="T:Tangosol.Util.IConverter"/>.
            </param>
            <param name="convVal">
            (Optional) the value <see cref="T:Tangosol.Util.IConverter"/>.
            </param>
            <returns>
            The converted <b>CacheEventArgs</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.EnrichEvent(Tangosol.Net.Cache.CacheEventArgs,Tangosol.Util.Listeners)">
            <summary>
            Enrich the event with the filters associated with the listener.
            </summary>
            <param name="evt">
            The cache event.
            </param>
            <param name="listners">
            The Listeners object that has the associated filters.
            </param>
            <returns>
            The enriched <b>FilterEventArgs</b> object.
            </returns>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.UnwrapEvent(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Unwrap the specified map event and return the underlying source event.
            </summary>
            <param name="evt">
            The event to unwrap.
            </param>
            <returns>
            The unwrapped event.
            </returns>
            <since>Coherence 3.7.1.9</since>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.IsPrimingListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Check if the given listener is a PrimingListener or if it wraps one.
            </summary>
            <param name="listener">
            Cache listener to check.
            </param>
            <returns>
            true iff the listener is a PrimingListener or wraps one.
            </returns>
            <since>12.2.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.UnwrapListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Unwrap the specified cache listener and return the underlying cache listener.
            </summary>
            <param name="listener">
            Cache listener to unwrap.
            </param>
            <returns>
            the unwrapped listener.
            </returns>
            <since>12.2.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.EvaluateEvent(Tangosol.Util.IFilter,Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Evaluate whether or not the specified event should be delivered to the
            listener associated with the specified filter.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <param name="evt">
            The event.
            </param>
            <returns>
            true iff the event should be delivered to the corresponding listener
            </returns>
            <since>Coherence 3.7.1.9</since>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.IsTransformedEvent(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Return true iff the specified event represents a transformed CacheEvent.
            </summary>
            <param name="evt">
            The event to tests
            </param>
            <returns>
            true iff the event has been transformed
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.ToString">
            <summary>
            Provide a string representation of the CacheListenerSupport
            object.
            </summary>
            <returns>
            A human-readable description of the CacheListenerSupport
            instance.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.CacheListenerSupport.m_cacheListeners">
            <summary>
            The collections of ICacheListener objects that have signed up for
            notifications from an IObservableCache implementation keyed by
            the corresponding IFilter objects.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.CacheListenerSupport.m_cacheKeyListeners">
            <summary>
            The collections of ICacheListener objects that have signed up for
            key based notifications from an IObservableCache implementation
            keyed by the corresponding key objects.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.CacheListenerSupport.m_cacheStandardListeners">
            <summary>
            The subset of standard (not lite) global listeners.
            </summary>
            <remarks>
            The keys are the IFilter objects, the values are collections of
            corresponding standard listeners.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.CacheListenerSupport.m_cacheStandardKeyListeners">
            <summary>
            The subset of standard (not lite) key listeners.
            </summary>
            <remarks>
            The keys are the key objects, the values are collections of
            corresponding standard listeners.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.CacheListenerSupport.m_optimizationPlan">
            <summary>
            The optimization plan which indicates the fastest way to put
            together a list of listeners.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.CacheListenerSupport.m_cachedListeners">
            <summary>
            A cached list of Listeners.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.CacheListenerSupport.NO_LISTENERS">
            <summary>
            An empty list of Listeners.
            </summary>
            <remarks>
            Because this is a theoretically mutable object that is used as a
            return value, it is purposefully not static.
            </remarks>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.CacheListenerSupport.Filters">
            <summary>
            Obtain a collection of all <see cref="T:Tangosol.Util.IFilter"/> objects that
            have associated global listeners.
            </summary>
            <remarks>
            <b>Note</b>: The returned value must be treated as an immutable.
            </remarks>
            <value>
            A collection of all filters that have associated global
            listeners.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.CacheListenerSupport.Keys">
            <summary>
            Obtain a collection of all keys that have associated key
            listeners.
            </summary>
            <remarks>
            <b>Note</b>: The returned value must be treated as an immutable.
            </remarks>
            <value>
            A collection of all keys that have associated key listeners.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.CacheListenerSupport.ISynchronousListener">
            <summary>
            A tag interface indicating that tagged
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> implementation has to receive
            the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> notifications in a synchronous
            manner.
            </summary>
            <remarks>
            <p>
            Consider an <b>ICacheListener</b> that subscribes to receive
            notifications for distributed (partitioned) cache. All events
            notifications are received by the service thread and immediately
            queued to be processed by the dedicated event dispatcher thread.
            This makes it impossible to differentiate between the event
            caused by the updates made by this thread and any other thread.
            Forcing the events to be processed on the service thread
            guarantees that by the time "put" or "remove" requests return to
            the caller all relevant cache event notification have been
            processed (due to the "in order delivery" rule enforced by the
            TCMP).</p>
            <p>
            This interface should be considered as a very advanced feature,
            so an <b>ICacheListener</b> implementation that is tagged as
            an ISynchronousListener must exercise extreme caution during event
            processing since any delay with return or unhandled exception
            will cause a delay or complete shutdown of the corresponding
            cache service.</p>
            <p>
            <b>Note:</b> The contract by the event producer in respect to the
            ISynchronousListener is somewhat weaker then the general one.
            First, the ISynchronousListener implementaion should make no
            assumptions about the event source obtained by
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.Cache"/>.</p>
            <p>
            Second, in the event of [automatic] service restart, the listener
            has to be re-registered manually.</p>
            <p>
            Third, and the most important, no calls against the
            <see cref="T:Tangosol.Net.INamedCache"/> are allowed during the synchronous
            event processing (the only exception being a call to remove the
            listener itself).</p>
            </remarks>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.CacheListenerSupport.IPrimingListener">
            <summary>
            A tag interface indicating that tagged
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> implementation receives "lite"
            the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> notifications (carrying only a key) 
            and generates a "priming" event when registered.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.CacheListenerSupport.WrapperSynchronousListener">
            <summary>
            A wrapper class that turns the specified
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> into a synchronous listener.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.MultiplexingCacheListener">
            <summary>
            A base class that simplifies the implementation of a
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> by multiplexing all events into a single
            listener method.
            </summary>
            <author>Cameron Purdy  2006.01.19</author>
            <author>Ivan Cikic  2006.11.09</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.MultiplexingCacheListener.OnCacheEvent(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted, updated or
            deleted.
            </summary>
            <remarks>
             To determine what action has occurred, use
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.EventType"/> property.
            </remarks>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert, update or
            delete information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.MultiplexingCacheListener.EntryInserted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.MultiplexingCacheListener.EntryUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been updated.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the update
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.MultiplexingCacheListener.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.WrapperSynchronousListener.#ctor(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Counstruct WrapperSynchronousListener.
            </summary>
            <param name="listener">
            The wrapped <b>ICacheListener</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.WrapperSynchronousListener.OnCacheEvent(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted, updated or deleted.
            </summary>
            <param name="evt">
            The cache event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.WrapperSynchronousListener.GetHashCode">
            <summary>
            Determine a hash value for the WrapperSynchronousListener
            object.
            </summary>
            <returns>
            An integer hash value for this WrapperSynchronousListener.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.WrapperSynchronousListener.Equals(System.Object)">
            <summary>
            Compare the WrapperSynchronousListener with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare to.
            </param>
            <returns>
            <b>true</b> if this WrapperSynchronousListener and the passed
            object are equivalent listeners.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.CacheListenerSupport.WrapperSynchronousListener.m_listener">
            <summary>
            Wrapped ICacheListener.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.CacheListenerSupport.WrapperSynchronousListener.CacheListener">
            <summary>
            Gets the underlying <see cref="T:Tangosol.Net.Cache.ICacheListener"/> object.
            </summary>
            <value>
            An <b>ICacheListener</b> object.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.CacheListenerSupport.WrapperPrimingListener">
            <summary>
            A wrapper class that turns the specified
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> into a priming listener.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.CacheListenerSupport.WrapperPrimingListener.#ctor(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Counstruct WrapperPrimingListener.
            </summary>
            <param name="listener">
            The wrapped <b>ICacheListener</b>.
            </param>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.CacheListenerSupport.OptimizationPlan">
            <summary>
            The values for CacheListenerSupport optimization plan, which
            indicates the fastest way to put together a list of listeners.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.CacheListenerSupport.OptimizationPlan.None">
            <summary>
            A plan has not yet been formed.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.CacheListenerSupport.OptimizationPlan.NoListeners">
            <summary>
            There are no listeners.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.CacheListenerSupport.OptimizationPlan.AllListener">
            <summary>
            There is one all-keys non-filtered listener.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.CacheListenerSupport.OptimizationPlan.KeyListener">
            <summary>
            There is one key listener (even if for multiple keys).
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.CacheListenerSupport.OptimizationPlan.NoOptimize">
            <summary>
            There is no optimized plan, so just use the default approach.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.DeactivationListener.#ctor(Tangosol.Net.Cache.CompositeCache)">
            <summary>
            Constructor that passes the reference of the parent object.
            </summary>
            <param name="parent">
            The reference to the instatnce of the parent class.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.DeactivationListener.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a back cache is destroyed or all storage nodes are stopped.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.DeactivationListener.EntryUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a back cache is truncated.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            </param>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.DeactivationListener.m_parent">
            <summary>
            The parent class reference.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.CompositeCache.PrimingListener">
            <summary>
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> for back cache responsible for
            keeping the front cache coherent with the back cache.
            </summary>
            <remarks>
            This listener is registered as a synchronous listener for lite
            events (carrying only a key) and generates a "priming" event when registered.
            </remarks>
            <since>12.2.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.PrimingListener.#ctor(Tangosol.Net.Cache.CompositeCache)">
            <summary>
            Constructor that passes the reference of the parent object.
            </summary>
            <param name="parent">
            The reference to the instatnce of the parent class.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.PrimingListener.OnCacheEvent(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked for any event.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </param>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.PrimingListener.m_parent">
            <summary>
            The parent class reference.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.CompositeCache.SimpleListener">
            <summary>
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> for back cache responsible for
            keeping the front cache coherent with the back cache.
            </summary>
            <remarks>
            This listener is registered as a synchronous listener for lite
            events (carrying only a key).
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.SimpleListener.#ctor(Tangosol.Net.Cache.CompositeCache)">
            <summary>
            Constructor that passes the reference of the parent object.
            </summary>
            <param name="parent">
            The reference to the instatnce of the parent class.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.SimpleListener.OnCacheEvent(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked for any event.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </param>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.SimpleListener.m_parent">
            <summary>
            The parent class reference.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.CompositeCache.FrontCacheListener">
            <summary>
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> for front cache responsible for
            deregistering back cache listeners upon front cache eviction.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.FrontCacheListener.#ctor(Tangosol.Net.Cache.CompositeCache)">
            <summary>
            Constructor that passes the reference of the parent object.
            </summary>
            <param name="parent">
            The reference to the instatnce of the parent class.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.FrontCacheListener.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.FrontCacheListener.Register">
            <summary>
            Register this listener with the "front" cache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.FrontCacheListener.Unregister">
            <summary>
            Unregister this listener with the "front" cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.FrontCacheListener.m_filter">
            <summary>
            The filter associated with this listener.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCache.FrontCacheListener.m_parent">
            <summary>
            The parent class reference.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.CompositeCache.IgnoreList">
            <summary>
            List that ignores any Add operations.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.CompositeCache.IgnoreList.Add(System.Object)">
            <summary>
            Adds an object to the end of the list.
            </summary>
            <remarks>
            Add operation is ignored in this list.
            </remarks>
            <param name="value">
            Value to add.
            </param>
            <returns>
            Always -1.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Cache.CompositeCacheStrategyType">
            <summary>
            Type of <b>CompositeCache</b> invalidation strategy.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenNone">
            <summary>
            No invalidation strategy.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenPresent">
            <summary>
            Invalidation strategy that instructs the <b>CompositeCache</b>
            to listen to the back dictionary events related <b>only</b> to
            the items currently present in the front dictionary.
            </summary>
            <remarks>
            This strategy serves best when the changes to the back dictionary
            come mostly from the CompositeCache itself.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenAll">
            <summary>
            Invalidation strategy that instructs the <b>CompositeCache</b>
            to listen to <b>all</b> back dictionary events.
            </summary>
            <remarks>
            This strategy is preferred when updates to the back dictionary
            are frequent and with high probability come from the outside of
            this <b>CompositeCache</b>; for example multiple
            <b>CompositeCache</b> instances using the same back dictionary
            with a large degree of key set overlap between front dictionaries.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenAuto">
            <summary>
            Invalidation strategy that instructs the <b>CompositeCache</b>
            implementation to switch automatically between ListenPresent and
            ListenAll strategies based on the cache statistics.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenLogical">
            <summary>
            Invalidation strategy that instructs the <b>CompositeCache</b>
            to listen to <b>all</b> back map events that are <b>not synthetic
            </b>.  A synthetic event could be emitted as a result of eviction
            or expiration.  With this invalidation stategy, it is possible for
            the front map to contain cache entries that have been synthetically
            removed from the back (though any subsequent re-insertion will
            cause the corresponding entries in the front map to be invalidated).
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.ConditionalIndex">
            <summary>
            ConditionalIndex is an <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> implementation that 
            uses an associated filter to evaluate whether or not an entry should be 
            indexed. An entry's extracted value is only added to the index if the
            filter evaluates to true.
            </summary>
            <author>Tom Beerbower  2010.02.08</author>
            <author>Jason Howes  2010.10.01</author>
        </member>
        <member name="T:Tangosol.Net.Cache.SimpleCacheIndex">
            <summary>
            SimpleCacheIndex is an <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> implementation used to 
            correlate property values extracted from resource cache entries with 
            corresponding keys using what is commonly known as an <i>Inverted Index 
            algorithm.</i>.    
            </summary>
            <author>Tom Beerbower  2009.03.09</author>
            <author>Jason Howes  2010.09.28</author>
        </member>
        <member name="T:Tangosol.Net.Cache.ICacheIndex">
            <summary>
            ICacheIndex is used to correlate values stored in an <i>indexed 
            ICache</i> (or attributes of those values) to the corresponding keys in 
            the indexed <see cref="T:Tangosol.Net.Cache.ICache"/>.
            </summary>
            <author>Cameron Purdy, Gene Gleyzer  2002.10.31</author>
            <author>Jason Howes  2010.09.28</author>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheIndex.Get(System.Object)">
            <summary>
            Using the index information if possible, get the value associated
            with the specified key. This is expected to be more efficient than 
            using the IValueExtractor against an object containing the value, 
            because the index should already have the necessary information at 
            hand.
            </summary>
            <param name="key">
            The key that specifies the object to extract the value from.
            </param>
            <returns>
            The value that would be extracted by this ICacheIndex's 
            IValueExtractor from the object specified by the passed key;
            <see cref="F:Tangosol.Util.ObjectUtils.NO_VALUE"/> if the index does not have the
            necessary information.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheIndex.Insert(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Update this index in response to a insert operation on a cache.
            </summary>
            <param name="entry">
            The entry representing the object being inserted.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheIndex.Update(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Update this index in response to a update operation on a cache.
            </summary>
            <param name="entry">
            The entry representing the object being updated.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheIndex.Delete(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Update this index in response to a remove operation on a cache.
            </summary>
            <param name="entry">
            The entry representing the object being removed.
            </param>        
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheIndex.ValueExtractor">
            <summary>
            Obtain the IValueExtractor object that the ICacheIndex uses to 
            extract an indexable Object from a value stored in the indexed 
            ICache. This property is never <c>null</c>.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheIndex.IsOrdered">
            <summary>
            Determine if the ICacheIndex orders the contents of the indexed 
            information.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheIndex.Comparer">
            <summary>
            The IComparer used to sort the index.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheIndex.IsPartial">
            <summary>
            Determine if indexed information for any entry in the indexed 
            ICache has been excluded from this index. This information is used 
            by <see cref="T:Tangosol.Util.Filter.IIndexAwareFilter"/> 
            implementations to determine the most optimal way to apply the 
            index.
            </summary>
            <returns>
            <b>true</b> if any entry of the indexed ICache has been excluded 
            from the index, <b>false</b> otherwise
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheIndex.IndexContents">
            <summary>
            Get the IDictionary that contains the <i>index contents</i>.
            </summary>
            <remarks>
            <p>
            The keys of the IDictionary are the return values from the 
            IValueExtractor operating against the indexed ICache's values, and 
            for each key, the corresponding value stored in the 
            IDictionary is an ICollection of keys to the indexed value.</p>
            <p>
            If the ICacheIndex is known to be ordered, then the returned 
            IDictionary object will be an instance of SortedList (or wrapper
            thereof). The SortedList may or may not have an IComparer object 
            associated with it.</p>
            <p>
            A client should assume that the returned IDictionary object is 
            read-only and must not attempt to modify it.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.#ctor(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer)">
            <summary>
            Construct an index.
            </summary>
            <param name="extractor">
            The IValueExtractor that is used to extract an indexed value from a 
            resource cache entry.
            </param>
            <param name="ordered">
            <b>true</b> iff the contents of the indexed information should be 
            ordered; <b>false</b> otherwise.
            </param>
            <param name="comparer">
            The IComparator object which imposes an ordering on entries in the 
            index map; or <tt>null</tt> if the entries' values natural ordering 
            should be used.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.#ctor(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer,System.Boolean)">
            <summary>
            Construct an index.
            </summary>
            <param name="extractor">
            The IValueExtractor that is used to extract an indexed value from a 
            resource cache entry.
            </param>
            <param name="ordered">
            <b>true</b> iff the contents of the indexed information should be 
            ordered; <b>false</b> otherwise.
            </param>
            <param name="comparer">
            The IComparator object which imposes an ordering on entries in the 
            index map; or <tt>null</tt> if the entries' values natural ordering 
            should be used.
            </param>
            <param name="init">
            Initialize the index if <b>true</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.Get(System.Object)">
            <summary>
            Using the index information if possible, get the value associated
            with the specified key. This is expected to be more efficient than 
            using the IValueExtractor against an object containing the value, 
            because the index should already have the necessary information at 
            hand.
            </summary>
            <param name="key">
            The key that specifies the object to extract the value from.
            </param>
            <returns>
            The value that would be extracted by this ICacheIndex's 
            IValueExtractor from the object specified by the passed key;
            <see cref="F:Tangosol.Util.ObjectUtils.NO_VALUE"/> if the index does not have the
            necessary information.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.Insert(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Update this index in response to a insert operation on a cache.
            </summary>
            <param name="entry">
            The entry representing the object being inserted.
            </param>    
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.Update(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Update this index in response to a update operation on a cache.
            </summary>
            <param name="entry">
            The entry representing the object being updated.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.Delete(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Update this index in response to a remove operation on a cache.
            </summary>
            <param name="entry">
            The entry representing the object being removed.
            </param>        
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.Initialize(System.Boolean)">
            <summary>
            Initialize the index's data structures.
            </summary>
            <param name="forwardIndex">
            <b>true</b> If forward index is supported; <b>false</b> otherwise.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.GetForwardValue(System.Object)">
            <summary>
            Get the forward index value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value associated with the key.</returns>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.RemoveForwardEntry(System.Object)">
             <summary>
             Remove the forward index entry for the specified key.
             </summary>
            <param name="key">
             The key to remove the forward index entry for.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.ExtractNewValue(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Extract the "new" value from the specified entry.
            </summary>
            <param name="entry">
            The entry to extract the "new" value from.
            </param>
            <returns>
            The extracted "new" value, or NO_VALUE if the extraction failed
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.ExtractOldValue(Tangosol.Net.Cache.CacheEntry)">
            <summary>
            Extract the "old" value from the specified entry.
            </summary>
            <param name="entry">
            The entry to extract the "old" value from.
            </param>
            <returns>
            The extracted "old" value, or NO_VALUE if the extraction failed.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.EnsureCollection(System.Object)">
            <summary>
            Return a Collection representation of the specified value, which could be
            a Collection, Object[], scalar, or NO_VALUE.
            </summary>
            <param name="value"> 
            The value.
            </param>
            <returns>
            A Collection representation of the specified value, or an empty
            Collection if NO_VALUE.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.InstantiateForwardIndex">
            <summary>
            Instantiate the forward index.
            </summary>
            <returns>
            The forward index.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.InstatiateInverseIndex(System.Boolean,System.Collections.IComparer)">
            <summary>
            Instantiate the inverse index.
            </summary>
            <param name="ordered">
            <b>true</b> iff the contents of the indexed information should be 
            ordered; false otherwise.
            </param>
            <param name="comparer">
            The IComparator object which imposes an ordering on entries in the 
            index; or <tt>null</tt> if the entries' values natural ordering 
            should be used.
            </param>
            <returns>The inverse index.</returns>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.InsertInternal(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Update this index in response to a insert operation on a cache.
            </summary>
            <param name="entry">
            The entry representing the object being inserted.
            </param>        
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.UpdateInternal(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Update this index in response to a update operation on a cache.
            </summary>
            <param name="entry">
            The entry representing the object being updated.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.DeleteInternal(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Update this index in response to a remove operation on a cache.
            </summary>
            <param name="entry">
            The entry representing the object being removed.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.AddInverseMapping(System.Object,System.Object)">
            <summary>
            Add a new mapping from the given indexed value to the given key in
            the inverse index.
            </summary>
            <param name="value">The index value (serves as a key in the inverse
            index).</param>
            <param name="key">the key to insert into the inverse index</param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.AddInverseMapping(System.Collections.IDictionary,System.Object,System.Object)">
            <summary>
            Add a new mapping from the given indexed value to the given key in
            the supplied index.
            </summary>
            <param name="index">the index to which to add the mapping</param>
            <param name="value">the indexed value</param>
            <param name="key">the key to insert into the inverse index</param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.AddInverseCollectionMapping(System.Collections.IDictionary,System.Collections.ICollection,System.Object)">
            <summary>
            Add new mappings from the elements of the given value to the given 
            key in the supplied index.
            </summary>
            <param name="index">the index to which to add the mapping</param>
            <param name="value">the indexed ICollection value (each element 
            serves as a key in the inverse index)</param>
            <param name="key">the key to insert into the inverse index</param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.RemoveInverseMapping(System.Object,System.Object,System.Collections.ICollection)">
            <summary>
            Remove the mapping from the given indexed value to the given key 
            from the inverse index.
            </summary>
            <param name="value">The indexed value.</param>
            <param name="key">The key.</param>
            <param name="colIgnore">
            The Collection of values to ignore (exclude from removal), or null.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.RemoveInverseMapping(System.Object,System.Object)">
            <summary>
            Remove the mapping from the given indexed value to the given key 
            from the inverse index.
            </summary>
            <param name="value">The indexed value, or NO_VALUE if unknown.</param>
            <param name="key">The key</param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.RemoveInverseMapping(System.Collections.IDictionary,System.Object,System.Object)">
            <summary>
            Remove the mapping from the given indexed value to the given key 
            from the supplied index.
            </summary>
            <param name="index">the index from which to remove the 
            mapping</param>
            <param name="value">the indexed value</param>
            <param name="key">the key</param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.CollectRemoved(System.Object,System.Object)">
            <summary>
            Given that the old value is known to be a Collection or an array,
            collect all the enclosed elements that are not part of the new value.
            </summary> 
            <param name="valueOld">The old value, must be a collection or an array.</param>
            <param name="valueNew">The new value.</param>
            <returns>The set of values that are contained in the old collection
            or array, but not part of the new value.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.LogMissingIdx(System.Object,System.Object)">
            <summary>
            Log messages for missing inverse index. 
            </summary>
            <param name="value">the indexed value</param>
            <param name="key">the key</param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.UpdateExcludedKeys(Tangosol.Net.Cache.ICacheEntry,System.Boolean)">
            <summary>
            Check the entry against the set of entries not included in the
            index and update the set if necessary.
            </summary>
            <param name="entry">
            The entry to be checked.
            </param>
            <param name="excluded">
            True if the insert or update of the entry into the index caused
            an exception.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.IsKeyExcluded(System.Object)">
            <summary>
            Check if the entry with the given key is excluded from the index.
            </summary>
            <param name="key"> The key to test </param>
            <returns>
            True if the key is in the list of keys currently excluded from
             the index, false if the entry with the key is in the index.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this object.
            </summary>
            <returns>
            true if the specified object is equal to this object; 
            otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with this object. 
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.Equals(Tangosol.Net.Cache.SimpleCacheIndex)">
            <summary>
            Compares this index with another index for equality.
            </summary>
            <remarks>
            This method returns true if this index and the specified index have 
            exactly the same contents.
            </remarks>
            <param name="index">
            index to compare this index with.
            </param>
            <returns>
            <c>true</c> if the two indexes are equal; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.GetHashCode">
            <summary>
            Returns a hash code for this object. 
            </summary>
            <returns>
            A hash code for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheIndex.ToString">
            <summary>
            Returns string representation of this instance.
            </summary>
            <returns>
            String representation of this instance.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheIndex.NO_VALUE">
            <summary>
            Marker object used to represent extractor failure.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheIndex.m_splitCollection">
            <summary>
            If a value extracted by the IValueExtractor is an ICollection, this
            property specifies whether or not it should be treated as a 
            collection of contained attributes or indexed as a single composite
            attribute.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheIndex.m_ldtLogMissingIdx">
            <summary>
            The time at which the most recent logging of "missing inverse index"
            messages started.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheIndex.m_cLogMissingIdx">
            <summary>
            The number of "missing inverse index" messages that have been logged.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheIndex.m_keysExcluded">
            <summary>
            A set of keys for the entries, which could not be included in the index.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheIndex.m_fImmutableValues">
            <summary>
            Specifies whether or not the index is based on the immutable values (e.g. keys).
            </summary>
            <since>12.2.1.</since>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheIndex.ValueExtractor">
            <summary>
            IValueExtractor object that this ICacheIndex uses to extract an 
            indexable Object from a [converted] value stored in the Storage.
            This property is never <c>null</c>.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheIndex.IsOrdered">
            <summary>
            Specifies whether or not this ICacheIndex orders the contents of
            the indexed information.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheIndex.Comparer">
            <summary>
            IComparer used to sort the index. Used iff Ordered is <b>true</b>.
            Could be <c>null</c>, which implicates a natural order.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheIndex.IsPartial">
            <summary>
            Determine if indexed information for any entry in the indexed 
            ICache has been excluded from this index. This information is used 
            by <see cref="T:Tangosol.Util.Filter.IIndexAwareFilter"/> 
            implementations to determine the most optimal way to apply the 
            index.
            </summary>
            <returns>
            <b>true</b> if any entry of the indexed ICache has been excluded 
            from the index, <b>false</b> otherwise
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheIndex.IndexContents">
            <summary>
            The IDictionary that contains the <i>index contents</i>.
            </summary>
            <remarks>
            <p>
            The keys of the IDictionary are the return values from the 
            IValueExtractor operating against the indexed ICache's values, and 
            for each key, the corresponding value stored in the 
            IDictionary is an ICollection of keys to the indexed value.</p>
            <p>
            If the ICacheIndex is known to be ordered, then the returned 
            IDictionary object will be an instance of SortedList (or wrapper
            thereof). The SortedList may or may not have an IComparer object 
            associated with it.</p>
            <p>
            A client should assume that the returned IDictionary object is 
            read-only and must not attempt to modify it.</p>
            </remarks>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheIndex.IndexForward">
            <summary>
            IDictionary that contains the index values (forward index). The 
            keys of the IDictionary are the keys to the indexed cache and the 
            values are the extracted values. This map is used by 
            <see cref="T:Tangosol.Util.Filter.IIndexAwareFilter"/> implementations 
            to avoid conversion and value extraction steps.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.ConditionalIndex.#ctor(Tangosol.Util.IFilter,Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer,System.Boolean)">
            <summary>
            Construct a ConditionalIndex.
            </summary>
            <param name="filter">the filter that is used to evaluate the 
            entries of the resource cache that is being indexed.
            </param>
            <param name="extractor">
            the <see cref="T:Tangosol.Util.IValueExtractor"/> that is used to extract an
            indexed value from a resource cache entry.
            </param>
            <param name="ordered">
            <c>true</c> iff the contents of the indexed information should be 
            ordered; <c>false</c> otherwise.
            </param>
            <param name="comparer">
            the IComparer object which imposes an ordering on entries in the
            index; or <tt>null</tt> if the entries' values natural ordering 
            should be used.
            </param>
            <param name="forwardIndex">
            specifies whether or not this index supports a forward map
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ConditionalIndex.Get(System.Object)">
            <summary>
            Using the index information if possible, get the value associated
            with the specified key. This is expected to be more efficient than 
            using the IValueExtractor against an object containing the value, 
            because the index should already have the necessary information at 
            hand.
            </summary>
            <param name="key">
            The key that specifies the object to extract the value from.
            </param>
            <returns>
            The value that would be extracted by this ICacheIndex's 
            IValueExtractor from the object specified by the passed key;
            <see cref="F:Tangosol.Util.ObjectUtils.NO_VALUE"/> if the index does not have the
            necessary information.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ConditionalIndex.GetForwardValue(System.Object)">
            <summary>
            Get the forward index value associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value associated with the key.</returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ConditionalIndex.RemoveForwardEntry(System.Object)">
             <summary>
             Remove the forward index entry for the specified key.
             </summary>
            <param name="key">
             The key to remove the forward index entry for.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ConditionalIndex.InstantiateForwardIndex">
            <summary>
            Instantiate the forward index.
            </summary>
            <returns>
            The forward index.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ConditionalIndex.InsertInternal(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Update this index in response to a insert operation on a cache.
            </summary>
            <param name="entry">
            The entry representing the object being inserted.
            </param>        
        </member>
        <member name="M:Tangosol.Net.Cache.ConditionalIndex.UpdateInternal(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Update this index in response to a update operation on a cache.
            </summary>
            <param name="entry">
            The entry representing the object being updated.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ConditionalIndex.DeleteInternal(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Update this index in response to a delete operation on a cache.
            </summary>
            <param name="entry">
            The entry representing the object being inserted.
            </param>        
        </member>
        <member name="M:Tangosol.Net.Cache.ConditionalIndex.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Evaluate the given entry using this index's filter. If the entry 
            does not pass the filter then it should be excluded from this 
            index, making this a partial index.
            </summary>
            <param name="entry">The entry to evaluate.</param>
            <returns>
            <c>true</c> If the entry passes the filter, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ConditionalIndex.ToString">
            <summary>
            Returns string representation of this instance.
            </summary>
            <returns>
            String representation of this instance.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ConditionalIndex.Equals(Tangosol.Net.Cache.SimpleCacheIndex)">
            <summary>
            Compares this index with another index for equality.
            </summary>
            <remarks>
            This method returns true if this index and the specified index have 
            exactly the same contents.
            </remarks>
            <param name="index">
            index to compare this index with.
            </param>
            <returns>
            <c>true</c> if the two indexes are equal; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.ConditionalIndex.m_partial">
            <summary>
            <b>true</b> if any entry of the indexed ICache has been excluded 
            from the index, <b>false</b> otherwise
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.ConditionalIndex.IsPartial">
            <summary>
            Determine if indexed information for any entry in the indexed 
            ICache has been excluded from this index. This information is used 
            by <see cref="T:Tangosol.Util.Filter.IIndexAwareFilter"/> 
            implementations to determine the most optimal way to apply the 
            index.
            </summary>
            <returns>
            <b>true</b> if any entry of the indexed ICache has been excluded 
            from the index, <b>false</b> otherwise
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.ConditionalIndex.Filter">
            <summary>
             Get the associated filter.
             </summary>
            <returns>The filter.</returns>
        </member>
        <member name="P:Tangosol.Net.Cache.ConditionalIndex.IsForwardIndexSupported">
            <summary>
             Determine whether or not this ConditionalIndex supports a forward 
             index.
             </summary>
             <returns>
             <c>true</c> if this ConditionalIndex supports a forward index; 
             <c>false</c> otherwise.
             </returns>
        </member>
        <member name="T:Tangosol.Net.Cache.ContinuousQueryCache">
            <summary>
            Create a materialized view of an <see cref="T:Tangosol.Net.INamedCache"/> using the
            Coherence <i>Continuous Query</i> capability.
            </summary>
            <author>Cameron Purdy  2006.01.19</author>
            <author>Ana Cikic  2006.11.27</author>
            <author>Goran Milosavljevic  2006.11.28</author>
            <author>Ivan Cikic  2006.11.28</author>
            <author>Aleksandar Seovic  2012.01.13</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.AbstractKeySetBasedCache">
            <summary>
            <b>AbstractKeySetBasedCache</b> is an extension to the
            <see cref="T:Tangosol.Net.Cache.Support.AbstractKeyBasedCache"/> that has a full awareness of the
            set of keys upon which the cache is based.
            </summary>
            <remarks>
            <p>
            As a result, it is possible to optimize the implementation of a
            number of methods that benefit from a knowledge of the entire set of
            keys.</p>
            <p>
            Read-only implementations must implement
            <see cref="M:Tangosol.Net.Cache.Support.AbstractKeySetBasedCache.GetInternalKeysCollection"/> and
            <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Get(System.Object)"/>.
            Read/write implementations must additionally implement
            <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Insert(System.Object,System.Object,System.Int64)"/> and
            <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Remove(System.Object)"/>.
            If the implementation has any cost of returning an "old value", then
            the <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.InsertAll(System.Collections.IDictionary)"/> and
            <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.RemoveBlind(System.Object)"/>
            methods should also be implemented. The only other obvious method for
            optimization is <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Clear"/>, if the
            implementation is able to do it in bulk.</p>
            </remarks>
            <author>Cameron Purdy  2005.09.20</author>
            <author>Ana Cikic  2006.11.27</author>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.AbstractKeyBasedCache">
            <summary>
            <b>AbstractKeyBasedCache</b> is a base class for <see cref="T:Tangosol.Net.Cache.ICache"/>
            implementations.
            </summary>
            <remarks>
            <p>
            AbstractKeyBasedCache requires a read-only sub-type to implement only
            <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Get(System.Object)"/> and <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.GetKeysEnumerator"/> methods, and a
            read-write sub-type to additionally implement only
            <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Insert(System.Object,System.Object,System.Int64)"/> and
            <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Remove(System.Object)"/>.</p>
            <p>
            A number of the methods have implementations provided, but are
            extremely inefficient for caches that contain large amounts of data,
            including <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Clear"/>, <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Contains(System.Object)"/> and
            <see cref="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Count"/>. Furthermore, if any of a number of method
            implementations has any cost of returning an "old value", then the
            <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.InsertAll(System.Collections.IDictionary)"/> and <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.RemoveBlind(System.Object)"/> methods should
            also be implemented.</p>
            </remarks>
            <author>Cameron Purdy  2005.07.13</author>
            <author>Ana Cikic  2006.11.27</author>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Get(System.Object)">
            <summary>
            Returns the value for the specified key.
            </summary>
            <param name="key">
            Key whose value is returned.
            </param>
            <returns>
            Value from the cache for the specified key.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.GetKeysEnumerator">
            <summary>
            Create an <b>IEnumerator</b> over the keys in this cache.
            </summary>
            <returns>
            A new instance of an <b>IEnumerator</b> over the keys in this
            cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.RemoveBlind(System.Object)">
            <summary>
            Removes the mapping for this key from this cache if present.
            </summary>
            <remarks>
            This method exists to allow sub-types to optimize remove
            functionalitly for situations in which the original value is not
            required.
            </remarks>
            <param name="key">
            Key whose mapping is to be removed from the cache.
            </param>
            <returns>
            <b>true</b> iff the cache changed as the result of this
            operation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the
            <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="value">
            The <see cref="T:System.Object"/> to use as the value of the element to
            add.
            </param>
            <param name="key">
            The <see cref="T:System.Object"/> to use as the key of the element to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Contains(System.Object)">
            <summary>
            Returns <b>true</b> if this cache contains a mapping for the
            specified key.
            </summary>
            <param name="key">
            Key whose mapping is searched for.
            </param>
            <returns>
            <b>true</b> if this cache contains a mapping for the specified
            key, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <b>ICollection</b> to an <b>Array</b>,
            starting at a particular index.
            </summary>
            <param name="array">
            The one-dimensional <b>Array</b> that is the destination of the
            elements copied from <b>ICollection</b>.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Clear">
            <summary>
            Clear all key/value mappings.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.GetAll(System.Collections.ICollection)">
            <summary>
            Get all the specified keys, if they are in the cache.
            </summary>
            <remarks>
            For each key that is in the cache, that key and its corresponding
            value will be placed in the dictionary that is returned by this
            method. The absence of a key in the returned dictionary indicates
            that it was not in the cache, which may imply (for caches that
            can load behind the scenes) that the requested data could not be
            loaded.
            </remarks>
            <param name="keys">
            A collection of keys that may be in the named cache.
            </param>
            <returns>
            An <b>IDictionary</b> of keys to values for the specified keys
            passed in <paramref name="keys"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.GetEnumerator">
            <summary>
            Returns an <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> object for the
            <b>ICache</b> instance.
            </summary>
            <returns>An <b>ICacheEnumerator</b> object for the
            <b>ICache</b> instance.</returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <b>IDictionaryEnumerator</b> object for the
            <b>IDictionary</b> object.
            </summary>
            <returns>
            An <b>IDictionaryEnumerator</b> object for the <b>IDictionary</b>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Insert(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Insert(System.Object,System.Object,System.Int64)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            This variation of the <see cref="M:Tangosol.Net.Cache.ICache.Insert(System.Object,System.Object)"/>
            method allows the caller to specify an expiry (or "time to live")
            for the cache entry.
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire,
            also referred to as the entry's "time to live"; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT"/> to use the cache's
            default time-to-live setting; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.NEVER"/> to indicate that the
            cache entry should never expire; this milliseconds value is
            <b>not</b> a date/time value, but the amount of time object will
            be kept in the cache.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c> with
            the specified key, if the implementation supports <c>null</c>
            values.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If the requested expiry is a positive value and the
            implementation does not support expiry of cache entries.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.InsertAll(System.Collections.IDictionary)">
            <summary>
            Copies all of the mappings from the specified <b>IDictionary</b>
            to this cache.
            </summary>
            <remarks>
            The effect of this call is equivalent to that of calling
            <see cref="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Insert(System.Object,System.Object)"/> on this cache once for each
            mapping in the passed dictionary. The behavior of this operation
            is unspecified if the passed dictionary is modified while the
            operation is in progress.
            </remarks>
            <param name="dictionary">
            The <b>IDictionary</b> containing the key/value pairings to
            insert into this cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Remove(System.Object)">
            <summary>
            Removes the mapping for this key from this cache if present.
            </summary>
            <remarks>
            Expensive: updates both the underlying cache and the local cache.
            </remarks>
            <param name="key">
            Key whose mapping is to be removed from the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Equals(System.Object)">
            <summary>
            Compares the specified object with this cache for equality.
            </summary>
            <remarks>
            Returns <b>true</b> if the given object is also a cache and the
            two caches represent the same mappings. More formally, two caches
            <pre>t1</pre> and <pre>t2</pre> represent the same mappings if
            <pre>t1.Keys.Equals(t2.Keys)</pre> and for every key <pre>k</pre>
            in <pre>t1.Keys</pre>, <pre> (t1[k]==null ? t2[k]==null :
            t1[k].Equals(t2[k]) </pre>. This ensures that the <b>Equals</b>
            method works properly across different implementations of the
            cache interface.
            </remarks>
            <param name="o">
            Object to be compared for equality with this cache.
            </param>
            <returns>
            <b>true</b> if the specified object is equal to this cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.GetHashCode">
            <summary>
            Returns the hash code value for this cache.
            </summary>
            <remarks>
            The hash code of a cache is defined to be the sum of the hash
            codes of each entry in the cache's <b>Entries</b>. This ensures
            that <pre>t1.Equals(t2)</pre> implies that
            <pre>t1.GetHashCode()==t2.GetHashCode()</pre> for any two caches
            <pre>t1</pre> and <pre>t2</pre>, as required by the general
            contract of <b>object.GetHashCode</b>.
            </remarks>
            <returns>
            The hash code value for this cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.ToString">
            <summary>
            Returns a string representation of this cache.
            </summary>
            <remarks>
            The string representation consists of a list of key-value
            mappings in the order returned by the cache's <b>Entries</b>
            enumerator, enclosed in braces (<pre>"{}"</pre>).  Adjacent
            mappings are separated by the characters <pre>", "</pre> (comma
            and space). Each key-value mapping is rendered as the key
            followed by an equals sign (<pre>"="</pre>) followed by the
            associated value.  Keys and values are converted to strings as by
            <pre>object.ToString()</pre>.
            </remarks>
            <returns>
            A string representation of this cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.InstantiateKeysCollection">
            <summary>
            Factory pattern: Create a collection that represents the keys in
            the cache.
            </summary>
            <returns>
            A new instance of <b>ICollection</b> that represents the keys in
            the cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.InstantiateEntriesCollection">
            <summary>
            Factory pattern: Create a collection that represents the entries
            in the cache.
            </summary>
            <returns>
            A new instance of <b>ICollection</b> that represents the entries
            in the cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.InstantiateValuesCollection">
            <summary>
            Factory pattern: Instantiate the values collection.
            </summary>
            <returns>
            A new instance of <b>ICollection</b> that represents this cache's
            values.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.m_keys">
            <summary>
            The keys collection for this cache; lazily instantiated.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.m_entries">
            <summary>
            The entries collection for this cache; lazily instantiated.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.m_values">
            <summary>
            The values collection for this cache; lazily instantiated.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Count">
            <summary>
            Returns the number of key-value mappings in this cache.
            </summary>
            <value>
            The number of key-value mappings in this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entries">
            <summary>
            Returns a collection of the mappings contained in this cache.
            </summary>
            <remarks>
            Each element in the returned collectioin is an
            <see cref="T:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry"/>.
            </remarks>
            <value>
            A collection of the mappings contained in this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <b>ICollection</b>
            is synchronized (thread safe).
            </summary>
            <value>
            Always <b>false</b> for this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.IsReadOnly">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object is
            read-only.
            </summary>
            <value>
            Always <b>false</b> for this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.IsFixedSize">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object has
            a fixed size.
            </summary>
            <value>
            Always <b>false</b> for this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Keys">
            <summary>
            Returns a collection view of the keys contained in this cache.
            </summary>
            <value>
            A colleciton of the keys contained in this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <b>ICollection</b>.
            </summary>
            <value>
            An object that can be used to synchronize access to the
            <b>ICollection"></b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Values">
            <summary>
            Returns a collection of the values contained in this cache.
            </summary>
            <value>
            A collection of the values contained in this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Item(System.Object)">
            <summary>
            Returns the value to which this cache maps the specified key.
            </summary>
            <param name="key">
            The key object.
            </param>
            <value>
            The value to which this cache maps the specified key, or
            <c>null</c> if the cache contains no mapping for this key.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry">
            <summary>
            <see cref="T:Tangosol.Net.Cache.CacheEntry"/> implementation for this cache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry.#ctor(System.Object,System.Object)">
            <summary>
            Creates an instance of a <b>Entry</b>.
            </summary>
            <param name="key">
            Cache entry <b>key</b>.
            </param>
            <param name="value">
            Cache entry <b>value</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry.#ctor(Tangosol.Net.Cache.Support.AbstractKeyBasedCache,System.Object,System.Object)">
            <summary>
            Creates an instance of a <b>Entry</b>.
            </summary>
            <param name="cache">
            Parent <b>AbstractKeyBasedCache</b>.
            </param>
            <param name="key">
            Cache entry <b>key</b>.
            </param>
            <param name="value">
            Cache entry <b>value</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry.GetHashCode">
            <summary>
            Generates hash code for this <b>CacheEntry.</b>
            </summary>
            <returns>
            A hash code for this <b>CacheEntry.</b>
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry.Equals(System.Object)">
            <summary>
            Checks two cache entries for equality.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents
            the current <b>CacheEntry</b>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <b>CacheEntry</b>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry.op_Implicit(Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry)~System.Collections.DictionaryEntry">
            <summary>
            Converts CacheEntry to <b>DictionaryEntry</b>.
            </summary>
            <param name="entry">
            CacheEntry.
            </param>
            <returns>
            <b>DictionaryEntry</b> with key and value extracted from
            specified CacheEntry.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry.op_Implicit(System.Collections.DictionaryEntry)~Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry">
            <summary>
            Converts <b>DictionaryEntry</b> to CacheEntry.
            </summary>
            <param name="entry">
            <b>DictionaryEntry</b>.
            </param>
            <returns>
            CacheEntry with key and value extracted from specified
            <b>DictionaryEntry</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry.m_cache">
            <summary>
            Parent AbstractKeyBasedCache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry.m_key">
            <summary>
            The key for this entry.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry.m_value">
            <summary>
            The value for this entry. 
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Entry.Value">
            <summary>
            Gets or sets the value for this cache entry.
            </summary>
            <value>
            The <b>value</b> for this cache entry.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollectionType">
            <summary>
            AbstractKeyBasedCache collection type enumeration.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection">
            <summary>
            Represents collection of keys, values or entries in the
            <b>AbstractKeyBasedCache</b>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.#ctor(Tangosol.Net.Cache.Support.AbstractKeyBasedCache,Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollectionType)">
            <summary>
            Create new instance of KeyBasedCollection.
            </summary>
            <param name="parent">
            Parent AbstractKeyBasedCache.
            </param>
            <param name="type">
            Collection type, one of the
            <see cref="T:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollectionType"/> values.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting
            at a particular index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the
            elements copied from the collection. The array must have
            zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Array is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero -or- index is equal to or greater
            than the length of array.
            </exception>
            <exception cref="T:System.ArgumentException">
            Array is multidimensional -or- the number of elements in the
            source collection is greater than the available space from
            index to the end of the destination array.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.m_cache">
            <summary>
            Parent AbstractKeyBasedCache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.m_type">
            <summary>
            The KeyBasedCollection type.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>
            The number of elements contained in the collection.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.SyncRoot">
             <summary>
             Gets an object that can be used to synchronize access to the
             collection.
            </summary>
             <value>
             An object that can be used to synchronize access to the
             collection.
             </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is
            synchronized (thread safe).
            </summary>
            <value>
            <b>true</b> if access to the collection is synchronized
            (thread safe); otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.KeyBasedEnumerator">
            <summary>
            <b>IEnumerator</b> implementation for KeyBasedCollection.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.KeyBasedEnumerator.#ctor(Tangosol.Net.Cache.Support.AbstractKeyBasedCache,Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollectionType)">
            <summary>
            Sets <see cref="T:Tangosol.Net.Cache.Support.AbstractKeyBasedCache"/> that created the
            parent KeyBasedCollection.
            </summary>
            <param name="cache">
            Sets <b>AbstractKeyBasedCache</b> that created the parent
            KeyBasedCollection.
            </param>
            <param name="type">
            Type of the collection, one of the
            <see cref="T:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollectionType"/> values.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.KeyBasedEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the
            collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced
            to the next element; <b>false</b> if the enumerator has
            passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was
            created.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.KeyBasedEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was
            created.
            </exception>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.KeyBasedEnumerator.m_keyEnumerator">
            <summary>
            An iterator over the keys returned by
            AbstractKeyBasedCache.GetKeysEnumerator().
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.KeyBasedEnumerator.m_cache">
            <summary>
            The AbstractKeyBasedCache that created the parent
            collection.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.KeyBasedEnumerator.m_type">
            <summary>
            The KeyBasedCollection type.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollection.KeyBasedEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value>
            The current element in the collection.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of
            the collection or after the last element.
            </exception>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Enumerator">
            <summary>
            <b>IEnumerator</b> implementation for AbstractKeysBasedCache
            entries collection.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.ICacheEnumerator">
            <summary>
            Enumerates cache elements.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current cache entry.
            </summary>
            <value>
            An <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> containing both the key and
            the value of the current cache entry.
            </value>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Enumerator.#ctor(Tangosol.Net.Cache.Support.AbstractKeyBasedCache)">
            <summary>
            Sets parent <see cref="T:Tangosol.Net.Cache.Support.AbstractKeyBasedCache"/>.
            </summary>
            <param name="cache">
            Sets parent <b>AbstractKeyBasedCache</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the
            collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to
            the next element; <b>false</b> if the enumerator has passed
            the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before
            the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Enumerator.m_key">
            <summary>
            Last key that was iterated.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Enumerator.m_keyEnumerator">
            <summary>
            An iterator over the keys returned by
            AbstractKeyBasedCache.Keys.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Enumerator.m_cache">
            <summary>
            The parent AbstractKeyBasedCache.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Enumerator.Key">
            <summary>
            Last key that was iterated.
            </summary>
            <value>
            Last key that was iterated.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Enumerator.Value">
            <summary>
            The value of the current cache entry.
            </summary>
            <value>
            The value of the current cache entry.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
            <summary>
            The key and the value of the current dictionary entry.
            </summary>
            <value>
            The key and the value of the current dictionary entry.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Enumerator.Entry">
            <summary>
            The key and the value of the current cache entry.
            </summary>
            <value>
            The key and the value of the current cache entry.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value>
            The current element in the collection.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of
            the collection or after the last element.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeySetBasedCache.Contains(System.Object)">
            <summary>
            Returns <b>true</b> if this cache contains a mapping for the
            specified key.
            </summary>
            <param name="key">
            Key whose mapping is searched for.
            </param>
            <returns>
            <b>true</b> if this cache contains a mapping for the specified
            key, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeySetBasedCache.GetKeysEnumerator">
            <summary>
            Create an <b>IEnumerator</b> over the keys in this cache.
            </summary>
            <remarks>
            Note that this implementation delegates back to the keys
            collection, while the super type delegates from the keys
            collection to this method.
            </remarks>
            <returns>
            A new instance of an enumerator over the keys in this cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeySetBasedCache.GetInternalKeysCollection">
            <summary>
            Obtain a collection of keys that are represented by this cache.
            </summary>
            <remarks>
            The AbstractKeySetBasedCache only utilizes the internal keys
            collection as a read-only resource.
            </remarks>
            <returns>
            An internal collection of keys that are contained by this cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeySetBasedCache.InstantiateKeyEnumerator">
            <summary>
            Factory pattern: Create an <b>IEnumerator</b> over the keys in
            the cache.
            </summary>
            <returns>
            A new instance of <b>IEnumerator</b> that iterates over the keys
            in the cache.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.AbstractKeySetBasedCache.Count">
            <summary>
            Returns the number of key-value mappings in this cache.
            </summary>
            <value>
            The number of key-value mappings in this cache.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.AbstractKeySetBasedCache.KeySetBasedCollection">
            <summary>
            Represents collection of keys, values or entries in the
            <b>AbstractKeySetBasedCache</b>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeySetBasedCache.KeySetBasedCollection.#ctor(Tangosol.Net.Cache.Support.AbstractKeySetBasedCache,Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollectionType)">
            <summary>
            Create new instance of KeySetBasedCollection.
            </summary>
            <param name="parent">
            Parent AbstractKeySetBasedCache.
            </param>
            <param name="type">
            Collection type, one of the
            <see cref="T:Tangosol.Net.Cache.Support.AbstractKeyBasedCache.KeyBasedCollectionType"/> values.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.AbstractKeySetBasedCache.KeySetBasedCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a
            particular index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from the collection. The array must have zero-based
            indexing.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Array is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero -or- index is equal to or greater than
            the length of array.
            </exception>
            <exception cref="T:System.ArgumentException">
            Array is multidimensional -or- the number of elements in the source
            collection is greater than the available space from index to the
            end of the destination array.
            </exception>
        </member>
        <member name="T:Tangosol.Net.INamedCache">
            <summary>
            An INamedCache is an <see cref="T:Tangosol.Net.Cache.ICache"/> that adds lifecycle management,
            event support, concurrency control, the ability to query cache content,
            and entry-targeted processing and aggregating operations.
            </summary>
            <remarks>
            Cached resources are expected to be managed in memory, and are
            typically composed of data that are stored persistently in a
            database, or data that have been assembled or calculated at some
            significant cost, thus these resources are referred to as
            <i>cached</i>.
            </remarks>
            <author>Gene Gleyzer  2002.03.27</author>
            <author>Aleksandar Seovic  2006.07.11</author>
        </member>
        <member name="T:Tangosol.Net.Cache.IObservableCache">
            <summary>
            The <b>IObservableCache</b> interface represents an object with a model
            being an <see cref="T:Tangosol.Net.Cache.ICache"/> that allows for pluggable notifications 
            for occuring changes.
            </summary>
            <remarks>
            <p>
            This is primarily intended for caches that have automatic pruning
            and purging strategies or caches that are asynchronously modified by
            different threads.</p>
            </remarks>
            <author>Gene Gleyzer  2002.02.11</author>
            <author>Cameron Purdy  2003.05.21</author>
            <author>Aleksandar Seovic  2006.07.11</author>
        </member>
        <member name="M:Tangosol.Net.Cache.IObservableCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Add a standard cache listener that will receive all events
            (inserts, updates, deletes) that occur against the cache, with
            the key, old-value and new-value included.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            AddCacheListener(listener, (IFilter) null, false);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.IObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a standard cache listener that previously signed up for
            all events.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            RemoveCacheListener(listener, (IFilter) null);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.IObservableCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object,System.Boolean)">
            <summary>
            Add a cache listener for a specific key.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.OldValue"/> and
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.NewValue"/> properties.</p>
            <p>
            To unregister the ICacheListener, use the
            <see cref="M:Tangosol.Net.Cache.IObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.IObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)">
            <summary>
            Remove a cache listener that previously signed up for events
            about a specific key.
            </summary>
            <param name="listener">
            The listener to remove.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.IObservableCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Add a cache listener that receives events based on a filter
            evaluation.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the <b>OldValue</b> and <b>NewValue</b>
            properties.</p>
            <p>
            To unregister the <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, use the
            <see cref="M:Tangosol.Net.Cache.IObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.</param>
            <param name="filter">
            A filter that will be passed <b>CacheEventArgs</b> objects to
            select from; a <b>CacheEventArgs</b> will be delivered to the
            listener only if the filter evaluates to <b>true</b> for that
            <b>CacheEventArgs</b>; <c>null</c> is equivalent to a filter
            that alway returns <b>true</b>.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.IObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)">
            <summary>
            Remove a cache listener that previously signed up for events
            based on a filter evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="filter">
            A filter used to evaluate events; <c>null</c> is equivalent to a
            filter that alway returns <b>true</b>.
            </param>
        </member>
        <member name="T:Tangosol.Net.Cache.IConcurrentCache">
            <summary>
            <see cref="T:Tangosol.Net.Cache.ICache"/> with additional concurrency features.
            </summary>
            <author>Gene Gleyzer  2001.12.16</author>
            <author>Aleksandar Seovic  2006.07.12</author>
        </member>
        <member name="M:Tangosol.Net.Cache.IConcurrentCache.Lock(System.Object,System.Int64)">
            <summary>
            Attempt to lock the specified item within the specified period of
            time.
            </summary>
            <remarks>
            <p>
            The item doesn't have to exist to be <i>locked</i>. While the
            item is locked there is known to be a <i>lock holder</i> which
            has an exclusive right to modify (calling put and remove methods)
            that item.</p>
            <p>
            Lock holder is an abstract concept that depends on the
            IConcurrentCache implementation. For example, holder could
            be a cluster member or a thread (or both).</p>
            <p>
            Locking strategy may vary for concrete implementations as well.
            Lock could have an expiration time (this lock is sometimes called
            a "lease") or be held indefinitely (until the lock holder
            terminates).</p>
            <p>
            Some implementations may allow the entire cache to be locked. If
            the cache is locked in such a way, then only a lock holder is
            allowed to perform any of the "put" or "remove" operations.</p>
            <p>
            Pass the special constant
            <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> as the <i>key</i>
            parameter to indicate the cache lock.</p>
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <param name="waitTimeMillis">
            The number of milliseconds to continue trying to obtain a lock;
            pass zero to return immediately; pass -1 to block the calling
            thread until the lock could be obtained.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked within the
            specified time; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.IConcurrentCache.Lock(System.Object)">
            <summary>
            Attempt to lock the specified item and return immediately.
            </summary>
            <remarks>
            This method behaves exactly as if it simply performs the call
            <b>Lock(key, 0)</b>.
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.IConcurrentCache.Unlock(System.Object)">
            <summary>
            Unlock the specified item.
            </summary>
            <remarks>
            The item doesn't have to exist to be <i>unlocked</i>.
            If the item is currently locked, only the <i>holder</i> of the
            lock could successfully unlock it.
            </remarks>
            <param name="key">
            Key being unlocked.
            </param>
            <returns>
            <b>true</b> if the item was successfully unlocked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Cache.IQueryCache">
            <summary>
            <see cref="T:Tangosol.Net.Cache.ICache"/> with additional query features.
            </summary>
            <author>Gene Gleyzer  2002.09.24</author>
            <author>Aleksandar Seovic  2006.07.11</author>
        </member>
        <member name="M:Tangosol.Net.Cache.IQueryCache.GetKeys(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the keys contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of keys for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.IQueryCache.GetValues(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of the values for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.IQueryCache.GetValues(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            It is guaranteed that enumerator will traverse the array in such
            a way that the values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.IQueryCache.GetEntries(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.IQueryCache.GetEntries(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            <p>
            It is guaranteed that enumerator will traverse the array in such
            a way that the entry values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.IQueryCache.AddIndex(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer)">
            <summary>
            Add an index to this IQueryCache.
            </summary>
            <remarks>
            This allows to correlate values stored in this
            <i>indexed cache</i> (or attributes of those values) to the
            corresponding keys in the indexed dictionary and increase the
            performance of <b>GetKeys</b> and <b>GetEntries</b> methods.
            </remarks>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the indexed
            cache. Must not be <c>null</c>.
            </param>
            <param name="isOrdered">
            <b>true</b> if the contents of the indexed information should be
            ordered; <b>false</b> otherwise.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on entries
            in the indexed cache; or <c>null</c> if the entries' values
            natural ordering should be used.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.IQueryCache.RemoveIndex(Tangosol.Util.IValueExtractor)">
            <summary>
            Remove an index from this IQueryCache.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the cache.
            </param>
        </member>
        <member name="T:Tangosol.Net.Cache.IInvocableCache">
            <summary>
            An <b>IInvocableCache</b> is an <see cref="T:Tangosol.Net.Cache.ICache"/> against which both
            entry-targeted processing and aggregating operations can be invoked.
            </summary>
            <remarks>
            <p>
            While a traditional model for working with a dictionary is to have an
            operation access and mutate the dictionary directly through its API,
            the IInvocableCache allows that model of operation to be inverted
            such that the operations against the cache contents are executed by
            (and thus within the localized context of) a cache.
            This is particularly useful in a distributed environment, because it
            enables the processing to be moved to the location at which the
            entries-to-be-processed are being managed, thus providing efficiency
            by localization of processing.</p>
            </remarks>
            <author>Cameron Purdy, Gene Gleyzer, Jason Howes  2005.07.19</author>
            <author>Aleksandar Seovic  2007.07.12</author>
        </member>
        <member name="M:Tangosol.Net.Cache.IInvocableCache.Invoke(System.Object,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the entry
            specified by the passed key, returning the result of the
            invocation.
            </summary>
            <param name="key">
            The key to process; it is not required to exist within the
            dictionary.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified key.
            </param>
            <returns>
            The result of the invocation as returned from the
            <b>IEntryProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.IInvocableCache.InvokeAll(System.Collections.ICollection,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entries specified by the passed keys, returning the result of the
            invocation for each.
            </summary>
            <param name="keys">
            The keys to process; these keys are not required to exist within
            the dictionary.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against each of the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.IInvocableCache.InvokeAll(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the set
            of entries that are selected by the given <see cref="T:Tangosol.Util.IFilter"/>,
            returning the result of the invocation for each.
            </summary>
            <remarks>
            <p>
            Unless specified otherwise, IInvocableCache implementations
            will perform this operation in two steps: (1) use the filter to
            retrieve a matching entry collection; (2) apply the agent to
            every filtered entry. This algorithm assumes that the agent's
            processing does not affect the result of the specified filter
            evaluation, since the filtering and processing could be
            performed in parallel on different threads.</p>
            <p>
            If this assumption does not hold, the processor logic has to be
            idempotent, or at least re-evaluate the filter. This could be
            easily accomplished by wrapping the processor with the
            <see cref="T:Tangosol.Util.Processor.ConditionalProcessor"/>.</p>
            </remarks>
            <param name="filter">
            An <see cref="T:Tangosol.Util.IFilter"/> that results in the collection of keys to
            be processed.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> to use to process the specified
            keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against the keys that are selected by the
            given <b>IFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.IInvocableCache.Aggregate(System.Collections.ICollection,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the entries specified by
            the passed keys.
            </summary>
            <param name="keys">
            The collection of keys that specify the entries within this cache
            to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the specified entries of this dictionary.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.IInvocableCache.Aggregate(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the collection of
            entries that are selected by the given <b>IFilter</b>.
            </summary>
            <param name="filter">
            an <see cref="T:Tangosol.Util.IFilter"/> that is used to select entries within
            this cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the selected entries of this dictionary.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.INamedCache.Release">
            <summary>
            Release local resources associated with this instance of
            INamedCache.
            </summary>
            <remarks>
            <p>
            Releasing a cache makes it no longer usable, but does not affect
            the cache itself. In other words, all other references to the
            cache will still be valid, and the cache data is not affected by
            releasing the reference.
            Any attempt to use this reference afterword will result in an
            exception.</p>
            <p>
            Caches should be released by the same mechansim in which they were
            obtained. For example:
            <ul>
             <li> new Cache() - cache.Release()</li>
             <li> CacheFactory.GetCache() - CacheFactory.ReleaseCache()</li>
             <li> ConfigurableCacheFactory.EnsureCache() - ConfigurableCacheFactory.ReleaseCache()</li>
            </ul>
            Except for the case where the application code expicitly allocated the
            cache, this method should not be called by application code.</p>
            
            </remarks>
        </member>
        <member name="M:Tangosol.Net.INamedCache.Destroy">
            <summary>
            Release and destroy this instance of INamedCache.
            </summary>
            <remarks>
            <p>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the entire
            cluster to this cache will be invalidated, the cached data will
            be cleared, and all resources will be released.</p>
            <p>
            Caches should be destroyed by the same mechansim in which they were
            obtained. For example:
            <ul>
             <li> new Cache() - cache.Destroy()</li>
             <li> CacheFactory.GetCache() - CacheFactory.DestroyCache()</li>
             <li> ConfigurableCacheFactory.EnsureCache() - ConfigurableCacheFactory.DestroyCache()</li>
            </ul>
            Except for the case where the application code expicitly allocated the
            cache, this method should not be called by application code.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.INamedCache.Truncate">
            <summary>
            Removes all mappings from this map.
            </summary>
            <remarks>
            Note: the removal of entries caused by this truncate operation will
            not be observable.
            </remarks>
        </member>
        <member name="P:Tangosol.Net.INamedCache.CacheName">
            <summary>
            Gets the cache name.
            </summary>
            <value>
            The cache name.
            </value>
        </member>
        <member name="P:Tangosol.Net.INamedCache.CacheService">
            <summary>
            Gets the <see cref="T:Tangosol.Net.ICacheService"/> that this INamedCache is a
            part of.
            </summary>
            <value>
            The cache service this INamedCache is a part of.
            </value>
        </member>
        <member name="P:Tangosol.Net.INamedCache.IsActive">
            <summary>
            Specifies whether or not the INamedCache is active.
            </summary>
            <value>
            <b>true</b> if the INamedCache is active; <b>false</b> otherwise.
            </value>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.#ctor(Tangosol.Net.INamedCache,Tangosol.Util.IFilter)">
            <summary>
            Create a locally materialized view of an <b>INamedCache</b> using
            an <see cref="T:Tangosol.Util.IFilter"/>.
            </summary>
            <remarks>
            A materialized view is an implementation of <i>Continuous Query</i>
            exposed through the standard INamedCache API. This constructor will
            result in a ContinuousQueryCache that caches both its keys and
            values locally.
            </remarks>
            <param name="cache">
            The <b>INamedCache</b> to create a view of.
            </param>
            <param name="filter">
            The filter that defines the view.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.#ctor(Tangosol.Net.INamedCache,Tangosol.Util.IFilter,Tangosol.Util.IValueExtractor)">
            <summary>
            Create a locally materialized view of an <b>INamedCache</b> using
            an <see cref="T:Tangosol.Util.IFilter"/> and a transformer.
            </summary>
            <remarks>
            A materialized view is an implementation of <i>Continuous Query</i>
            exposed through the standard INamedCache API. This constructor will
            result in a ContinuousQueryCache that caches both its keys and
            values locally.
            </remarks>
            <param name="cache">
            The <b>INamedCache</b> to create a view of.
            </param>
            <param name="filter">
            The filter that defines the view.
            </param>
            <param name="transformer">
            The transformer that should be used to convert values from the 
            underlying cache before storing them locally
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.#ctor(Tangosol.Net.INamedCache,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Create a materialized view of an <b>INamedCache</b> using an
            <b>IFilter</b>.
            </summary>
            <remarks>
            A materialized view is an implementation of <i>Continuous Query</i>
            exposed through the standard INamedCache API.
            </remarks>
            <param name="cache">
            The <b>INamedCache</b> to create a view of.
            </param>
            <param name="filter">
            The filter that defines the view.
            </param>
            <param name="isCacheValues">
            Pass <b>true</b> to cache both the keys and values of the
            materialized view locally, or <b>false</b> to only cache the keys.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.#ctor(Tangosol.Net.INamedCache,Tangosol.Util.IFilter,Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Create a materialized view of an <b>INamedCache</b> using an
            <b>IFilter</b>.
            </summary>
            <remarks>
            A materialized view is an implementation of <i>Continuous Query</i>
            exposed through the standard INamedCache API. This constructor
            allows a client to receive all events, including those that result
            from the initial population of the ContinuousQueryCache. In other
            words, all contents of the ContinuousQueryCache will be delivered
            to the listener as a sequence of events, including those items that
            already exist in the underlying (unfiltered) cache. Note that this
            constructor will always result in both the keys and values being
            cached locally if a listener is passed.
            </remarks>
            <param name="cache">
            The <b>INamedCache</b> to create a view of.
            </param>
            <param name="filter">
            The <b>IFilter</b> that defines the view.
            </param>
            <param name="listener">
            An initial <see cref="T:Tangosol.Net.Cache.ICacheListener"/> that will receive all the
            events from the ContinuousQueryCache, including those corresponding
            to its initial population.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.#ctor(Tangosol.Net.INamedCache,Tangosol.Util.IFilter,System.Boolean,Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IValueExtractor)">
            <summary>
            Initialize the ContinuousQueryCache.
            </summary>
            <param name="cache">
            The <b>INamedCache</b> to create a view of.
            </param>
            <param name="filter">
            The filter that defines the view.
            </param>
            <param name="cacheValues">
            Pass <b>true</b> to cache both the keys and values of the
            materialized view locally, or <b>false</b> to only cache the keys.
            </param>
            <param name="listener">
            The optional <b>ICacheListener</b> that will receive all events
            starting from the initialization of the ContinuousQueryCache.
            </param>
            <param name="transformer">
            The transformer that should be used to convert values from the 
            underlying cache before storing them locally
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.GetInternalKeysCollection">
            <summary>
            Obtain a collection of keys that are represented by this cache.
            </summary>
            <remarks>
            The AbstractKeySetBasedCache only utilizes the internal keys
            collection as a read-only resource.
            </remarks>
            <returns>
            An internal collection of keys that are contained by this cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Get(System.Object)">
            <summary>
            Returns the value for the specified key.
            </summary>
            <param name="key">
            Key whose value is returned.
            </param>
            <returns>
            Value from the cache for the specified key.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Contains(System.Object)">
            <summary>
            Returns <b>true</b> if this cache contains a mapping for the
            specified key.
            </summary>
            <param name="key">
            Key whose mapping is searched for.
            </param>
            <returns>
            <b>true</b> if this cache contains a mapping for the specified
            key, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.RemoveBlind(System.Object)">
            <summary>
            Removes the mapping for this key from this cache if present.
            </summary>
            <remarks>
            This method exists to allow sub-types to optimize remove
            functionalitly for situations in which the original value is not
            required.
            </remarks>
            <param name="key">
            Key whose mapping is to be removed from the cache.
            </param>
            <returns>
            <b>true</b> if the cache changed as the result of this
            operation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Invoke(System.Object,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the entry
            specified by the passed key, returning the result of the
            invocation.
            </summary>
            <param name="key">
            The key to process; it is not required to exist within the
            dictionary.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified key.
            </param>
            <returns>
            The result of the invocation as returned from the
            <b>IEntryProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.InvokeAll(System.Collections.ICollection,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entries specified by the passed keys, returning the result of the
            invocation for each.
            </summary>
            <param name="keys">
            The keys to process; these keys are not required to exist within
            the dictionary.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against each of the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.InvokeAll(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the set
            of entries that are selected by the given <see cref="T:Tangosol.Util.IFilter"/>,
            returning the result of the invocation for each.
            </summary>
            <remarks>
            <p>
            Unless specified otherwise, IInvocableCache implementations
            will perform this operation in two steps: (1) use the filter to
            retrieve a matching entry collection; (2) apply the agent to
            every filtered entry. This algorithm assumes that the agent's
            processing does not affect the result of the specified filter
            evaluation, since the filtering and processing could be
            performed in parallel on different threads.</p>
            <p>
            If this assumption does not hold, the processor logic has to be
            idempotent, or at least re-evaluate the filter. This could be
            easily accomplished by wrapping the processor with the
            <see cref="T:Tangosol.Util.Processor.ConditionalProcessor"/>.</p>
            </remarks>
            <param name="filter">
            An <see cref="T:Tangosol.Util.IFilter"/> that results in the collection of keys to
            be processed.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> to use to process the specified
            keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against the keys that are selected by the
            given <b>IFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Aggregate(System.Collections.ICollection,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the entries specified by
            the passed keys.
            </summary>
            <param name="keys">
            The collection of keys that specify the entries within this cache
            to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the specified entries of this dictionary.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Aggregate(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the collection of
            entries that are selected by the given <b>IFilter</b>.
            </summary>
            <param name="filter">
            an <see cref="T:Tangosol.Util.IFilter"/> that is used to select entries within
            this cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the selected entries of this dictionary.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.GetKeys(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the keys contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of keys for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.GetValues(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of the values for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.GetValues(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            It is guaranteed that enumerator will traverse the array in such
            a way that the values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.GetEntries(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.GetEntries(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            <p>
            It is guaranteed that enumerator will traverse the array in such
            a way that the entry values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.AddIndex(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer)">
            <summary>
            Add an index to this IQueryCache.
            </summary>
            <remarks>
            This allows to correlate values stored in this
            <i>indexed cache</i> (or attributes of those values) to the
            corresponding keys in the indexed dictionary and increase the
            performance of <b>GetKeys</b> and <b>GetEntries</b> methods.
            </remarks>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the indexed
            cache. Must not be <c>null</c>.
            </param>
            <param name="isOrdered">
            <b>true</b> if the contents of the indexed information should be
            ordered; <b>false</b> otherwise.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on entries
            in the indexed cache; or <c>null</c> if the entries' values
            natural ordering should be used.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.RemoveIndex(Tangosol.Util.IValueExtractor)">
            <summary>
            Remove an index from this IQueryCache.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EnsureIndexMap">
            <summary>
            Obtain the IDictionary of indexes maintained by this cache. 
            </summary>
            <returns>
            The IDictionary of indexes maintained by this cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.ReleaseIndexMap">
            <summary>
            Release the the entire index map.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Lock(System.Object,System.Int64)">
            <summary>
            Attempt to lock the specified item within the specified period of
            time.
            </summary>
            <remarks>
            <p>
            The item doesn't have to exist to be <i>locked</i>. While the
            item is locked there is known to be a <i>lock holder</i> which
            has an exclusive right to modify (calling put and remove methods)
            that item.</p>
            <p>
            Lock holder is an abstract concept that depends on the
            IConcurrentCache implementation. For example, holder could
            be a cluster member or a thread (or both).</p>
            <p>
            Locking strategy may vary for concrete implementations as well.
            Lock could have an expiration time (this lock is sometimes called
            a "lease") or be held indefinitely (until the lock holder
            terminates).</p>
            <p>
            Some implementations may allow the entire cache to be locked. If
            the cache is locked in such a way, then only a lock holder is
            allowed to perform any of the "put" or "remove" operations.</p>
            <p>
            Pass the special constant
            <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> as the <i>key</i>
            parameter to indicate the cache lock.</p>
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <param name="waitTimeMillis">
            The number of milliseconds to continue trying to obtain a lock;
            pass zero to return immediately; pass -1 to block the calling
            thread until the lock could be obtained.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked within the
            specified time; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Lock(System.Object)">
            <summary>
            Attempt to lock the specified item and return immediately.
            </summary>
            <remarks>
            This method behaves exactly as if it simply performs the call
            <b>Lock(key, 0)</b>.
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Unlock(System.Object)">
            <summary>
            Unlock the specified item.
            </summary>
            <remarks>
            The item doesn't have to exist to be <i>unlocked</i>.
            If the item is currently locked, only the <i>holder</i> of the
            lock could successfully unlock it.
            </remarks>
            <param name="key">
            Key being unlocked.
            </param>
            <returns>
            <b>true</b> if the item was successfully unlocked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Add a standard cache listener that will receive all events
            (inserts, updates, deletes) that occur against the cache, with
            the key, old-value and new-value included.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            AddCacheListener(listener, (IFilter) null, false);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a standard cache listener that previously signed up for
            all events.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            RemoveCacheListener(listener, (IFilter) null);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object,System.Boolean)">
            <summary>
            Add a cache listener for a specific key.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.OldValue"/> and
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.NewValue"/> properties.</p>
            <p>
            To unregister the ICacheListener, use the
            <see cref="M:Tangosol.Net.Cache.IObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)">
            <summary>
            Remove a cache listener that previously signed up for events
            about a specific key.
            </summary>
            <param name="listener">
            The listener to remove.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Add a cache listener that receives events based on a filter
            evaluation.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the <b>OldValue</b> and <b>NewValue</b>
            properties.</p>
            <p>
            To unregister the <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, use the
            <see cref="M:Tangosol.Net.Cache.IObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.</param>
            <param name="filter">
            A filter that will be passed <b>CacheEventArgs</b> objects to
            select from; a <b>CacheEventArgs</b> will be delivered to the
            listener only if the filter evaluates to <b>true</b> for that
            <b>CacheEventArgs</b>; <c>null</c> is equivalent to a filter
            that alway returns <b>true</b>.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)">
            <summary>
            Remove a cache listener that previously signed up for events
            based on a filter evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="filter">
            A filter used to evaluate events; <c>null</c> is equivalent to a
            filter that alway returns <b>true</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.GetAll(System.Collections.ICollection)">
            <summary>
            Get the values for all the specified keys, if they are in the
            cache.
            </summary>
            <remarks>
            <p>
            For each key that is in the cache, that key and its corresponding
            value will be placed in the dictionary that is returned by this
            method. The absence of a key in the returned dictionary indicates
            that it was not in the cache, which may imply (for caches that
            can load behind the scenes) that the requested data could not be
            loaded.</p>
            <p>
            The result of this method is defined to be semantically the same
            as the following implementation, without regards to threading
            issues:</p>
            <pre>
            IDictionary dict = new AnyDictionary();
            // could be a Hashtable (but does not have to)
            foreach (object key in colKeys)
            {
                object value = this[key];
                if (value != null || Contains(key))
                {
                    dict[key] = value;
                }
            }
            return dict;
            </pre>
            </remarks>
            <param name="keys">
            A collection of keys that may be in the named cache.
            </param>
            <returns>
            A dictionary of keys to values for the specified keys passed in
            <paramref name="keys"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Insert(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            <p>
            Invoking this method is equivalent to the following call:
            <pre>
            Insert(key, value, CacheExpiration.Default);
            </pre></p>
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the dictionary previously associated <c>null</c>
            with the specified key, if the implementation supports
            <c>null</c> values.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Insert(System.Object,System.Object,System.Int64)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            This variation of the <see cref="M:Tangosol.Net.Cache.ICache.Insert(System.Object,System.Object)"/>
            method allows the caller to specify an expiry (or "time to live")
            for the cache entry.
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire,
            also referred to as the entry's "time to live"; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT"/> to use the cache's
            default time-to-live setting; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.NEVER"/> to indicate that the
            cache entry should never expire; this milliseconds value is
            <b>not</b> a date/time value, but the amount of time object will
            be kept in the cache.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c> with
            the specified key, if the implementation supports <c>null</c>
            values.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If the requested expiry is a positive value and the
            implementation does not support expiry of cache entries.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.InsertAll(System.Collections.IDictionary)">
            <summary>
            Copies all of the mappings from the specified dictionary to this
            cache (optional operation).
            </summary>
            <remarks>
            These mappings will replace any mappings that this cache had for
            any of the keys currently in the specified dictionary.
            </remarks>
            <param name="dictionary">
            Mappings to be stored in this cache.
             </param>
            <exception cref="T:System.InvalidCastException">
            If the class of a key or value in the specified dictionary
            prevents it from being stored in this cache.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
            <exception cref="T:System.NullReferenceException">
            This cache does not permit <c>null</c> keys or values, and the
            specified key or value is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Release">
            <summary>
            Release local resources associated with this instance of
            INamedCache.
            </summary>
            <remarks>
            <p>
            Releasing a cache makes it no longer usable, but does not affect
            the cache itself. In other words, all other references to the
            cache will still be valid, and the cache data is not affected by
            releasing the reference.
            Any attempt to use this reference afterword will result in an
            exception.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Destroy">
            <summary>
            Release and destroy this instance of <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <remarks>
            <p>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the entire
            cluster to this cache will be invalidated, the cached data will
            be cleared, and all resources will be released.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Truncate">
            <summary>
            Removes all mappings from this map.
            </summary>
            <remarks>
            Note: the removal of entries caused by this truncate operation will
            not be observable.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Clear">
            <summary>
            Removes all mappings from this cache.
            </summary>
            <remarks>
            Some implementations will attempt to lock the entire cache
            (if necessary) before preceeding with the clear operation. For
            such implementations, the entire cache has to be either
            already locked or able to be locked for this operation to
            succeed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            <b>IDictionary</b> object.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.Dispose">
            <summary>
            Calls <see cref="M:Tangosol.Net.Cache.ContinuousQueryCache.Release"/> to release the resources associated with this cache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.MergeFilter(Tangosol.Util.IFilter)">
            <summary>
            Return a filter which merges the <b>ContinousQueueCache</b>'s
            filter with the supplied filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> to merge with this cache's filter.
            </param>
            <returns>
            The merged filter.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.CheckReadOnly">
            <summary>
            Check the read-only setting to verify that the cache is NOT read-only.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            if the <b>ContinuousQueryCache</b> is read-only.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.CheckEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Check the passed value to verify that it does belong in this
            <b>ContinuousQueryCache</b>.
            </summary>
            <param name="entry">
            a key/value pair to check.
            </param>
            <exception cref="T:System.ArgumentException">
            if the entry does not belong in this <b>ContinuousQueryCache</b>
            (based on the cache's filter).
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.CheckEntry(System.Object,System.Object)">
            <summary>
            Check the passed value to verify that it does belong in this
            <b>ContinuousQueryCache</b>.
            </summary>
            <param name="key">
            The key for the entry.
            </param>
            <param name="value">
            The value for the entry.
            </param>
            <exception cref="T:System.ArgumentException">
            if the entry does not belong in this <b>ContinuousQueryCache</b>
            (based on the cache's filter).
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.InstantiateInternalCache">
            <summary>
            Instantiate the internal cache used by the ContinuousQueryCache.
            </summary>
            <returns>
            A new <b>IObservableMap</b> that will represent the materialized
            view of the <b>ContinuousQueryCache</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.InstantiateRemoveListener">
            <summary>
            Instantiate an <see cref="T:Tangosol.Net.Cache.ICacheListener"/> for evicting items
            from the query.
            </summary>
            <returns>
            A new <b>ICacheListener</b> that will listen to all events that
            will remove items from the <b>ContinuousQueryCache</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.InstantiateAddListener">
            <summary>
            Instantiate an <see cref="T:Tangosol.Net.Cache.ICacheListener"/> for adding items to
            the query, and (if there are listeners on the
            <b>ContinuousQueryCache</b>) for dispatching inserts and updates.
            </summary>
            <returns>
            A new <b>ICacheListener</b> that will add items to and update
            items in the <b>ContinuousQueryCache</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.InstantiateEventRouter(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Instantiate a listener on the internal cache that will direct
            events to the passed listener, either synchronously or
            asynchronously as appropriate.
            </summary>
            <param name="listener">
            The listener to route to.
            </param>
            <returns>
            A new <b>EventRouter</b> specific to the passed listener.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.OnMemberJoined(System.Object,Tangosol.Net.MemberEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> has joined the service.
            </summary>
            <remarks>
            <p>
            Note: this event could be called during the service restart
            on the local node in which case the listener's code should
            not attempt to use any clustered cache or service
            functionality.
            </p>
            <p>
            The most critical situation arises when a number of threads
            are waiting for a local service restart, being blocked by a
            <b>IService</b> object synchronization monitor. Since the
            Joined event should be fired only once, it is called on a
            client thread <b>while holding a synchronization monitor</b>.
            An attempt to use other clustered service functionality
            during this local event notification may result in a
            deadlock.
            </p>
            </remarks>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            An event which indicates that membership has changed.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.OnMemberLeaving(System.Object,Tangosol.Net.MemberEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> is leaving the service.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            An event which indicates that membership has changed.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.OnMemberLeft(System.Object,Tangosol.Net.MemberEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> has left the service.
            </summary>
            <remarks>
            Note: this event could be called during the service restart
            on the local node in which case the listener's code should
            not attempt to use any clustered cache or service
            functionality.
            </remarks>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            An event which indicates that membership has changed.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.RegisterServiceMemberEventHandler">
            <summary>
            Register a member event handler with the underlying caches's
            service.
            </summary>
            <remarks>
            <p/>
            The primary goal of that event handler is invalidation of the
            front cache in case of the service [automatic] restart.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.UnregisterServiceMemberEventHandler">
            <summary>
            Unregister underlying caches's service member event handler.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.ConfigureSynchronization(System.Boolean)">
            <summary>
            Set up the listeners that keep the <b>ContinuousQueryCache</b>
            up-to-date.
            </summary>
            <param name="reload">
            Pass <b>true</b> to force a data reload.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.CreateTransformerFilter(Tangosol.Util.Filter.CacheEventFilter)">
            <summary>
            Wrap specified CacheEventFilter with a CacheEventTransformerFilter that
            will either transform cache value using transformer defined for this
            ContinuousQueryCache, or remove the old value from the event using
            SemiLiteEventTransformer, if no transformer is defined for this CQC.
            </summary>
            <param name="filterAdd">
            Add filter to wrap.
            </param>
            <returns>
            CacheEventTransformerFilter that wraps specified add filter
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EnsureSynchronized(System.Boolean)">
            <summary>
            Ensure that the ContinousQueryCache listeners have been
            registered and its content synchronized with the underlying
            INamedCache.
            </summary>
            <param name="reload">
            The value to pass to the <see cref="M:Tangosol.Net.Cache.ContinuousQueryCache.ConfigureSynchronization(System.Boolean)"/>
            method if the ContinousQueryCache needs to be configured and
            synchronized.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.IsEventDeferred(System.Object)">
            <summary>
            Called when an event has occurred.
            </summary>
            <remarks>
            Allows the key to be logged as requiring deferred
            synchronization if the event occurs during the configuration or
            population of the <b>ContinuousQueryCache</b>.
            </remarks>
            <param name="key">
            The key that the event is related to.
            </param>
            <returns>
            <b>true</b> if the event processing has been deferred.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_cache">
            <summary>
            The underlying <see cref="T:Tangosol.Net.INamedCache"/> object.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_indexMap">
            <summary>
            The IDictionary of indexes maintaned by this cache. The keys are
            IValueExtractor objects, and for each key, the corresponding value
            stored in the IDictionary is a MapIndex object.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_name">
            <summary>
            The name of the underlying <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <remarks>
            A copy is kept here because the reference to the underlying
            <b>INamedCache</b> is discarded when this cache is released.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_filter">
            <summary>
            The filter that represents the subset of information from the
            underlying <see cref="T:Tangosol.Net.INamedCache"/> that this
            <b>ContinuousQueryCache</b> represents.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_cacheValues">
            <summary>
            The option of whether or not to locally cache values.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_isReadOnly">
            <summary>
            The option to disallow modifications through this
            <b>ContinuousQueryCache</b> interface.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_transformer">
            <summary>
            The transformer that should be used to convert values from the
            underlying cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_reconnectMillis">
            <summary>
            The interval (in millisceonds) that indicates how often the
            ContinuousQueryCache should attempt to synchronize its content
            with the underlying cache in case the connection is severed.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_connectionTimestamp">
            <summary>
            The timestamp when the synchronization was last attempted.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_cacheLocal">
            <summary>
             The keys that are in this <b>ContinuousQueryCache</b>, and (if
            <see cref="F:Tangosol.Net.Cache.ContinuousQueryCache.m_cacheValues"/> is true) the corresponding values as
            well.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_syncReq">
            <summary>
            While the <b>ContinuousQueryCache</b> is configuring or
            re-configuring its listeners and content, any events that are
            received must be logged to ensure that the corresponding content
            is in sync.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_eventDispatcher">
            <summary>
            The event queue for this <b>ContinuousQueryCache</b>.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_hasListeners">
            <summary>
            Keeps track of whether the <b>ContinuousQueryCache</b> has
            listeners that require this cache to cache values.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_filterAdd">
            <summary>
            The <see cref="T:Tangosol.Util.Filter.CacheEventFilter"/> that uses the
            <b>ContinuousQueryCache</b>'s filter to select events that would
            add elements to this cache's contents.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_filterRemove">
            <summary>
            The <see cref="T:Tangosol.Util.Filter.CacheEventFilter"/> that uses the
            <b>ContinuousQueryCache</b>'s filter to select events that would
            remove elements from this cache's contents.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_listenerAdd">
            <summary>
            The listener that gets information about what should be in this
            cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_listenerRemove">
            <summary>
            The listener that gets information about what should be thrown
            out of this cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.m_state">
            <summary>
            State of the ContinousQueryCache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.InstantiateEventDispatcher">
            <summary>
            Create a self-processing event queue dispatcher.
            </summary>
            <returns>
            A EventDispatcher onto which events can be placed in order to be
            dispatched asynchronously.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EnsureEventDispatcher">
            <summary>
            Obtain the existing event queue or create one if none exists.
            </summary>
            <returns>
            The event dispatcher that this ContinuousQueryCache uses to
            dispatch its events to its non-synchronous listeners.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.ShutdownEventQueue">
            <summary>
            Shut down running event queue.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.Cache">
            <summary>
            Obtain the <see cref="T:Tangosol.Net.INamedCache"/> that this
            <b>ContinuousQueryCache</b> is based on.
            </summary>
            <value>
            The underlying <b>INamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.IndexMap">
            <summary>
            The index IDictionary used by this <b>ContinuousQueryCache</b>.
            </summary>
            <value>
            The <see cref="T:System.Collections.IDictionary"/> used by this <b>ContinuousQueryCache</b>,
            or <c>null</c> if none.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.Filter">
            <summary>
            Obtain the <see cref="T:Tangosol.Util.IFilter"/> that this
            <b>ContinuousQueryCache</b> is using to query the underlying
            <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <value>
            The <b>IFilter</b> that this cache uses to select its contents
            from the underlying <b>INamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.IsCacheValues">
            <summary>
            Obtain or modify the local-caching option for this
            <b>ContinuousQueryCache</b>.
            </summary>
            <remarks>
            <p>
            By changing this value from <b>false</b> to <b>true</b>, the
            <b>ContinuousQueryCache</b> will fully realize its contents
            locally and maintain them coherently in a manner analogous to the
            Coherence Near Cache. By changing this value from <b>true</b> to
            <b>false</b>, the <b>ContinuousQueryCache</b> will discard its
            locally cached data and rely on the underlying
            <see cref="T:Tangosol.Net.INamedCache"/>.</p>
            </remarks>
            <value>
            <b>true</b> if this object caches values locally, and false if it
            relies on the underlying <b>INamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.CacheValues">
            <summary>
            Obtain or modify the local-caching option for this
            <b>ContinuousQueryCache</b>.
            </summary>
            <remarks>
            <p>
            By changing this value from <b>false</b> to <b>true</b>, the
            <b>ContinuousQueryCache</b> will fully realize its contents
            locally and maintain them coherently in a manner analogous to the
            Coherence Near Cache. By changing this value from <b>true</b> to
            <b>false</b>, the <b>ContinuousQueryCache</b> will discard its
            locally cached data and rely on the underlying
            <see cref="T:Tangosol.Net.INamedCache"/>.</p>
            </remarks>
            <value>
            <b>true</b> if this object caches values locally, and false if it
            relies on the underlying <b>INamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.IsReadOnly">
            <summary>
            Obtain or modify the read-only option for the
            <b>ContinuousQueryCache</b>.
            </summary>
            <remarks>
            Note that the cache can be made read-only, but the opposite
            (making it mutable) is explicitly disallowed.
            </remarks>
            <value>
            <b>true</b> if this <b>ContinuousQueryCache</b> has been
            configured as read-only.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.InternalCache">
            <summary>
            Obtain a reference to the internal cache.
            </summary>
            <remarks>
            The internal cache maintains all of the keys in the
            <b>ContinuousQueryCache</b>, and if <see cref="P:Tangosol.Net.Cache.ContinuousQueryCache.CacheValues"/> is
            <b>true</b>, it also maintains the up-to-date values
            corresponding to those keys.
            </remarks>
            <value>
            The internal cache that represents the materialized view of the
            <b>ContinuousQueryCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.IsObserved">
            <summary>
            Determine or modify if the <b>ContinuousQueryCache</b> has any
            listeners that cannot be served by this cache listening to lite
            events.
            </summary>
            <value>
            <b>true</b> iff there is at least one listener.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.State">
            <summary>
            The state of the ContinuousQueryCache.
            </summary>
            <value>
            One of the <see cref="T:Tangosol.Net.Cache.ContinuousQueryCache.CacheState"/> values.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.ReconnectInterval">
            <summary>
            Return a reconnection interval (in milliseconds).
            </summary>
            <remarks>
            This value indicates how often the ContinuousQueryCache should
            attempt to re-connect with the underlying [clustered] cache in
            case the connection is severed.
            </remarks>
            <value>
            A reconnection interval (in milliseconds). The value of zero
            means that the ContinuousQueryCache cannot be used when not
            connected. If the value is positive, the local content could be
            accessed (read-only) even if connection is severed.
            </value>
            <since>Coherence 3.4</since>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <b>ICollection</b>
            is synchronized (thread safe).
            </summary>
            <value>
            Always <b>true</b> for this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.CacheName">
            <summary>
            Gets the cache name.
            </summary>
            <value>
            The cache name.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.CacheService">
            <summary>
            Gets the <see cref="T:Tangosol.Net.ICacheService"/> that this INamedCache is a
            part of.
            </summary>
            <value>
            The cache service this INamedCache is a part of.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.IsActive">
            <summary>
            Specifies whether or not the INamedCache is active.
            </summary>
            <value>
            <b>true</b> if the INamedCache is active; <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.Dispatcher">
            <summary>
            Obtain this ContinuousQueryCache's event dispatcher.
            </summary>
            <value>
            The event dispatcher that this ContinuousQueryCache uses to
            dispatch its events to its non-synchronous listeners.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.ContinuousQueryCache.AddListener">
            <summary>
            An <see cref="T:Tangosol.Net.Cache.ICacheListener"/> for evicting items from the query.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.AddListener.#ctor(Tangosol.Net.Cache.ContinuousQueryCache)">
            <summary>
            Create AddListener object.
            </summary>
            <param name="parentQueryCache">
            Parent cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.AddListener.ToString">
            <summary>
            Produce a human-readable description of this object.
            </summary>
            <returns>
            a String describing this object
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.AddListener.OnCacheEvent(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted, updated or
            deleted.
            </summary>
            <remarks>
             To determine what action has occurred, use
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.EventType"/> property.
            </remarks>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert, update or
            delete information.
            </param>
        </member>
        <member name="T:Tangosol.Net.Cache.ContinuousQueryCache.EventRouter">
            <summary>
            An <b>EventRouter</b> routes events from the internal cache of
            the <see cref="T:Tangosol.Net.Cache.ContinuousQueryCache"/> to the client listeners,
            and it can do so asynchronously when appropriate.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EventRouter.#ctor(Tangosol.Net.Cache.ContinuousQueryCache,Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Construct an <b>EventRouter</b> to route events from the
            internal cache of the <see cref="T:Tangosol.Net.Cache.ContinuousQueryCache"/> to
            the client listeners.
            </summary>
            <param name="parentQueryCache">
            Parent cache instance.
            </param>
            <param name="listener">
            A client listener.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EventRouter.GetHashCode">
            <summary>
            Determine a hash value for the EventRouter object according to the
            general <b>Object.GetHashCode()</b> contract.
            </summary>
            <returns>
            an integer hash value for this EventRouter
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EventRouter.Equals(System.Object)">
            <summary>
            Compare the <b>EventRouter</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare to.
            </param>
            <returns>
            <b>true</b> if this <b>EventRouter</b> and the passed object are
            equivalent listeners.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EventRouter.ToString">
            <summary>
            Produce a human-readable description of this
            <b>EventRouter</b>.
            </summary>
            <returns>
            A String describing this <b>EventRouter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EventRouter.OnCacheEvent(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted, updated or
            deleted.
            </summary>
            <remarks>
             To determine what action has occurred, use
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.EventType"/> property.
            </remarks>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert, update or
            delete information.
            </param>
        </member>
        <member name="T:Tangosol.Net.Cache.ContinuousQueryCache.EventRouter.DispatcherCacheEvent">
            <summary>
            Wraps <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> and
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, so the
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.QueueProcessor"/> can <b>Run</b> event
            dispatching to the listener.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EventRouter.DispatcherCacheEvent.#ctor(Tangosol.Net.Cache.CacheEventArgs,Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Constructs <b>DispatcherCacheEvent</b> with the specific
            cache event and listener.
            </summary>
            <param name="cacheEvent">
            The <b>CacheEventArgs</b> to dispatch.
            </param>
            <param name="listener">
            The listener.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EventRouter.DispatcherCacheEvent.Run">
            <summary>
            The method that will be called by the queue processor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EventRouter.DispatcherCacheEvent.Dispatch(Tangosol.Net.Cache.CacheEventArgs,Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Dispatch the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> to the specified
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/>.
            </summary>
            <param name="evt">
            The <b>CacheEventArgs</b>.
            </param>
            <param name="listener">
            The listener.
            </param>
        </member>
        <member name="T:Tangosol.Net.Cache.ContinuousQueryCache.RemoveListener">
            <summary>
            An <see cref="T:Tangosol.Net.Cache.ICacheListener"/> for evicting items from the query.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.RemoveListener.#ctor(Tangosol.Net.Cache.ContinuousQueryCache)">
            <summary>
            Construct an <b>RemoveListener</b> .
            </summary>
            <param name="parentQueryCache">
            Parent cache instance.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.RemoveListener.ToString">
            <summary>
            Produce a human-readable description of this object.
            </summary>
            <returns>
            A String describing this object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.RemoveListener.OnCacheEvent(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted, updated or
            deleted.
            </summary>
            <remarks>
             To determine what action has occurred, use
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.EventType"/> property.
            </remarks>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert, update or
            delete information.
            </param>
        </member>
        <member name="T:Tangosol.Net.Cache.ContinuousQueryCache.EventDispatcher">
            <summary>
            <see cref="T:Tangosol.Util.Daemon.Daemon"/> used to dispatch asynchronous
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>s.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.QueueProcessor">
            <summary>
            This is a <see cref="T:Tangosol.Util.Daemon.Daemon"/> component that waits for items to
            process from a <see cref="P:Tangosol.Util.Daemon.QueueProcessor.QueueProcessor.Queue"/>.
            </summary>
            <remarks>
            <p>
            Whenever the <b>Queue</b> contains an item, the
            <see cref="M:Tangosol.Util.Daemon.Daemon.OnNotify"/> event occurs. It is expected that
            sub-classes will process OnNotify as follows:
            <pre>
            Object o;
            while ((o = Queue.RemoveNoWait()) != null)
            {
            // process the item
            // ...
            }
            </pre></p>
            <p>
            The <b>Queue</b> is used as the synchronization point for the daemon.
            </p>
            </remarks>
            <author>Goran Milosavljevic  2006.08.24</author>
        </member>
        <member name="T:Tangosol.Util.Daemon.Daemon">
            <summary>
            This class is used to create and manage a daemon thread.
            </summary>
            <remarks>
            <p>
            A caller may use the following methods to control the Daemon
            object:
            <list type="number">
            <item>
            <term><see cref="M:Tangosol.Util.Daemon.Daemon.Start"/></term>
            <description>creates and starts the daemon thread</description>
            </item>
            <item>
            <term><see cref="P:Tangosol.Util.Daemon.Daemon.IsStarted"/></term>
            <description>determines whether the daemon is running</description>
            </item>
            <item>
            <term><see cref="M:Tangosol.Util.Daemon.Daemon.Stop"/></term>
            <description>stops the daemon thread and releases the related
            resources </description>
            </item>
            </list></p>
            <p>
            Advanced options available to a designer or caller include:
            <list type="number">
            <item>
            <term><see cref="P:Tangosol.Util.Daemon.Daemon.Priority"/></term>
            <description>before starting the daemon, a Thread priority can be
            provided</description>
            </item>
            <item>
            <term><see cref="P:Tangosol.Util.Daemon.Daemon.ThreadName"/></term>
            <description>before starting the daemon, a Thread name can be
            provided</description>
            </item>
            <item>
            <term><see cref="P:Tangosol.Util.Daemon.Daemon.Thread"/></term>
            <description>the actual Thread object can be accessed via this
            property</description>
            </item>
            <item>
            <term><see cref="P:Tangosol.Util.Daemon.Daemon.StartException"/></term>
            <description>if the start method fails to start the daemon, the
            StartException property provides the failure information
            </description>
            </item>
            </list></p>
            The daemon thread itself executes the following events while it is
            running:
            <list type="number">
            <item>
            <term><see cref="M:Tangosol.Util.Daemon.Daemon.OnEnter"/></term>
            <description>invoked when the daemon starts</description>
            </item>
            <item>
            <term><see cref="M:Tangosol.Util.Daemon.Daemon.OnWait"/></term>
            <description>invoked to wait for notification</description>
            </item>
            <item>
            <term><see cref="M:Tangosol.Util.Daemon.Daemon.OnNotify"/></term>
            <description>invoked when a notification occurs</description>
            </item>
            <item>
            <term><see cref="M:Tangosol.Util.Daemon.Daemon.OnInterrupt(System.Threading.ThreadInterruptedException)"/></term>
            <description>invoked when the thread is interrupted when waiting for
            a notification</description>
            </item>
            <item>
            <term><see cref="M:Tangosol.Util.Daemon.Daemon.OnException(System.Exception)"/></term>
            <description>invoked when an exception occurs while invoking one of
            the daemon events</description>
            </item>
            <item>
            <term><see cref="M:Tangosol.Util.Daemon.Daemon.OnExit"/></term>
            <description>invoked before the daemon exits</description>
            </item>
            </list>
            </remarks>
            <author>Goran Milosavljevic  2006.08.23</author>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.#ctor">
            <summary>
            Default constructor for Daemon object.
            </summary>
            <remarks>
            It sets <see cref="P:Tangosol.Util.Daemon.Daemon.DaemonState"/> to
            <see cref="F:Tangosol.Util.Daemon.DaemonState.Initial"/>.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Parametrized constructor.
            </summary>
            <param name="init">
            If <b>true</b>, <see cref="P:Tangosol.Util.Daemon.Daemon.DaemonState"/> would be set to
            <see cref="F:Tangosol.Util.Daemon.DaemonState.Initial"/>.
            </param>
            <param name="autoStart">
            Determines whether Daemon should be automatically
            started or not.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.Finalize">
            <summary>
            Perform clean up before object is reclaimed by GC.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.OnEnter">
            <summary>
            Event notification called once the daemon's thread starts and
            before the daemon thread goes into the "wait - perform" loop.
            </summary>
            <remarks>
            Unlike the <c>OnInit()</c> event, this method executes on the
            daemon's thread.
            <p>
            This method is called while the caller's thread is still waiting
            for a notification to  "unblock" itself.</p>
            <p>
            Any exception thrown by this method will terminate the thread
            immediately.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.OnException(System.Exception)">
            <summary>
            This event occurs when an exception is thrown from
            <b>OnEnter</b>, <b>OnWait</b>, <b>OnNotify</b> and <b>OnExit</b>.
            </summary>
            <param name="e">
            Exception that has occured.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.OnExit">
            <summary>
            Event notification called right before the daemon thread
            terminates.
            </summary>
            <remarks>
            This method is guaranteed to be called only once and on the
            daemon's thread.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.OnInit">
            <summary>
            Initialization method.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.OnInterrupt(System.Threading.ThreadInterruptedException)">
            <summary>
            Event notification called if the daemon's thread get interrupted.
            </summary>
            <param name="e">
            <b>ThreadInterruptedException</b>.
            </param>
            <seealso cref="M:Tangosol.Util.Daemon.Daemon.Stop"/>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.OnNotify">
            <summary>
            Event notification to perform a regular daemon activity.
            </summary>
            <remarks>
            To get it called, another thread has to set IsNotification to
            <b>true</b>:
            <c>daemon.IsNotification = true;</c>
            </remarks>
            <seealso cref="M:Tangosol.Util.Daemon.Daemon.OnWait"/>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.OnWait">
            <summary>
            Event notification called when the daemon's Thread is waiting
            for work.
            </summary>
            <seealso cref="M:Tangosol.Util.Daemon.Daemon.Run"/>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.Start">
            <summary>
            Starts the daemon thread.
            </summary>
            <remarks>
            If the thread is already starting or has started, invoking
            this method has no effect. Synchronization is used here to
            verify that the start of the thread occurs; the lock is obtained
            before the thread is started, and the daemon thread notifies
            back that it has started from the Run() method.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.Stop">
            <summary>
            Stops the daemon thread associated with this object.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.Run">
            <summary>
            This method is called right after this daemon's thread starts.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.Daemon.Sleep(System.Int64)">
            <summary>
            Causes the current thread to sleep for the specified interval.
            </summary>
            <remarks>
            If interrupted while sleeping the interrupt flag will be set
            and sleep will return <b>false</b>.
            </remarks>
            <returns>
            <b>true</b> if the thread slept, or <b>false</b> if its sleep
            was interrupted.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Daemon.Daemon.m_isAutoStart">
            <summary>
            pecifies whether this Daemon should start automatically at the
            initialization time.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.Daemon.m_clockResolutionMillis">
            <summary>
            The resolution of the system clock in milliseconds.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.Daemon.m_daemonState">
            <summary>
            Specifies the state of the daemon.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.Daemon.m_lock">
            <summary>
            An object that serves as a mutex for this Daemon synchronization.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.Daemon.m_isNotification">
            <summary>
            Specifes whether there is work for the daemon to do.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.Daemon.m_priority">
            <summary>
            Specifies the priority of the daemon's thread.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.Daemon.m_startException">
            <summary>
            The exception (if any) that prevented the daemon from starting
            successfully.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.Daemon.m_startTimestamp">
            <summary>
            Date/time value that this Daemon's thread has started.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.Daemon.m_thread">
            <summary>
            The daemon thread if it is running, or null before the daemon
            starts and after the daemon stops.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.Daemon.m_threadName">
            <summary>
            Specifies the name of the daemon thread.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.Daemon.m_waitMillis">
            <summary>
            The number of milliseconds that the daemon will wait for notification.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.Daemon.ClockResolutionMillis">
            <summary>
            The resolution of the system clock in milliseconds.
            </summary>
            <value>
            The resolution of the system clock in milliseconds.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.Daemon.DaemonState">
            <summary>
            Specifies the state of the daemon
            (Initial, Starting, Running, Exiting, Exited).
            </summary>
            <remarks>
            Change the daemon's state to the specified state iff the new state is greater then the current state.
            
            Despite this property being volatile, the setter is synchronized to ensure forward only state transitions.
            Additionally this allows for queries of the state to be held stable by synchronizing before the get and the corresponding usage.
            State transitions also trigger a notifyAll on the daemon's monitor
            </remarks>
            <value>
            One of the <see cref="P:Tangosol.Util.Daemon.Daemon.DaemonState"/> values.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.Daemon.Lock">
            <summary>
            An object that serves as a mutex for this Daemon synchronization.
            </summary>
            <remarks>
            When idle, the Daemon is waiting for a notification on the Lock
            object.
            </remarks>
            <value>
            An object that serves as a mutex for this Deamon synchronization.
            </value>
            <seealso cref="M:Tangosol.Util.Daemon.Daemon.OnNotify"/>
            <seealso cref="M:Tangosol.Util.Daemon.Daemon.OnWait"/>
        </member>
        <member name="P:Tangosol.Util.Daemon.Daemon.Priority">
            <summary>
            A non-zero value specifies the priority of the daemon's thread.
            </summary>
            <remarks>
            A zero value implies the Thread default priority. Priority must
            be set before the Daemon is started (by the Start() method) in
            order to have effect.
            </remarks>
            <value>
            <b>ThreadPriority</b> value.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.Daemon.StartException">
            <summary>
            The exception (if any) that prevented the daemon from starting
            successfully.
            </summary>
            <value>
            The exception that prevented the daemon from starting
            successfully.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.Daemon.StartTimestamp">
            <summary>
            Date/time value that this Daemon's thread has started.
            </summary>
            <value>
            Date/time value that this Daemon's thread has started.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.Daemon.Thread">
            <summary>
            The daemon thread if it is running, or <c>null</c> before the
            daemon starts and after the daemon stops.
            </summary>
            <value>
            The daemon thread if it is running, or <c>null</c>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.Daemon.ThreadName">
            <summary>
            Specifies the name of the daemon thread.
            </summary>
            <remarks>
            If not specified, the type name will be used. This property can
            be set at design time or runtime. If set at runtime, it must be
            configured before Start() is invoked to cause the daemon thread
            to have the specified name.
            </remarks>
            <value>
            The name of the daemon thread.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.Daemon.WaitMillis">
            <summary>
            The number of milliseconds that the daemon will wait for
            notification.
            </summary>
            <remarks>
            Zero means to wait indefinitely. Negative value means to skip
            waiting altogether.
            </remarks>
            <value>
            The number of milliseconds that the daemon will wait for
            notification.
            </value>
            <seealso cref="M:Tangosol.Util.Daemon.Daemon.OnWait"/>
        </member>
        <member name="P:Tangosol.Util.Daemon.Daemon.IsNotification">
            <summary>
            Specifes whether there is work for the daemon to do; if there is
            work, IsNotification must evaluate to <b>true</b>, and if there
            is no work (implying that the daemon should wait for work) then
            IsNotification must evaluate to <b>false</b>.
            </summary>
            <remarks>
            To verify that a wait is necessary, the monitor on the Lock
            property is first obtained and then IsNotification is evaluated;
            only if IsNotification evaluates to <b>false</b> will the daemon
            go into a wait state on the Lock property.
            <p/>
            To unblock (notify) the daemon, another thread should set
            IsNotification to <b>true</b>.
            </remarks>
            <value>
            <b>true</b> if there is work for the daemon to do, <b>false</b>
            otherwise.
            </value>
            <seealso cref="M:Tangosol.Util.Daemon.Daemon.OnWait"/>
        </member>
        <member name="P:Tangosol.Util.Daemon.Daemon.IsAutoStart">
            <summary>
            Determine whether this Daemon should start automatically at the
            initialization time.
            </summary>
            <value>
            <b>true</b> if Daemon should start automatically at the
            initialization time.
            </value>
            <seealso cref="M:Tangosol.Util.Daemon.Daemon.OnInit"/>
        </member>
        <member name="P:Tangosol.Util.Daemon.Daemon.IsExiting">
            <summary>
            Specifies whether the daemon is instructed to stop.
            </summary>
            <value>
            <b>true</b> if Deamon is in the state Exiting; otherwise
            it <b>false</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.Daemon.IsStarted">
            <summary>
            Specifies whether the daemon has been started.
            </summary>
            <value>
            <b>true</b> if Daemon is started; <b>false</b> if it is in the
            state of Initial or Exited.
            </value>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.QueueProcessor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.QueueProcessor.m_queue">
            <summary>
            This is the Queue to which items that need to be processed are
            added, and from which the daemon pulls items to process.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.QueueProcessor.Queue">
            <summary>
            This is the <b>Queue</b> to which items that need to be processed
            are added, and from which the daemon pulls items to process.
            </summary>
            <value>
            A <see cref="P:Tangosol.Util.Daemon.QueueProcessor.QueueProcessor.Queue"/> object.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.QueueProcessor.IsNotification">
            <summary>
            Specifes whether there is work for the daemon to do; if there is
            work, IsNotification must evaluate to <b>true</b>, and if there
            is no work (implying that the daemon should wait for work) then
            IsNotification must evaluate to <b>false</b>.
            </summary>
            <remarks>
            To verify that a wait is necessary, the monitor on the Lock
            property is first obtained and then IsNotification is evaluated;
            only if IsNotification evaluates to <b>false</b> will the daemon
            go into a wait state on the Lock property.
            <p/>
            To unblock (notify) the daemon, another thread should set
            IsNotification to true.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EventDispatcher.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EventDispatcher.OnException(System.Exception)">
            <summary>
            This event occurs when an exception is thrown from
            <b>OnEnter</b>, <b>OnWait</b>, <b>OnNotify</b> and <b>OnExit</b>.
            </summary>
            <param name="e">
            Exception that has occured.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EventDispatcher.OnExit">
            <summary>
            Event notification called right before the daemon thread
            terminates.
            </summary>
            <remarks>
            This method is guaranteed to be called only once and on the
            daemon's thread.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.ContinuousQueryCache.EventDispatcher.OnNotify">
            <summary>
            Event notification to perform a regular daemon activity.
            </summary>
            <remarks>
            To get it called, another thread has to set IsNotification to
            <b>true</b>:
            <c>daemon.IsNotification = true;</c>
            </remarks>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.EventDispatcher.m_querycache">
            <summary>
            Parent ContinousQueryCache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.EventDispatcher.m_queue">
            <summary>
            This is the Queue to which items that need to be processed are
            added, and from which the daemon pulls items to process.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.EventDispatcher.ContinuousQueryCache">
            <summary>
            Parent ContinuousQueryCache.
            </summary>
            <value>
            Parent ContinuousQueryCache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ContinuousQueryCache.EventDispatcher.Queue">
            <summary>
            This is the <b>Queue</b> to which items that need to be
            processed are added, and from which the daemon pulls items to
            process.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.ContinuousQueryCache.CacheState">
            <summary>
            The <b>ContinuousQueryCache</b> state values.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.CacheState.Init">
            <summary>
            The ContinousQueryCache must be configured or re-configured
            before it can be used.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.CacheState.Disconnected">
            <summary>
            The content of the ContinousQueryCache is not fully
            synchronized with the underlying [clustered] cache.
            </summary>
            <remarks>
            If the value of the
            <see cref="P:Tangosol.Net.Cache.ContinuousQueryCache.ReconnectInterval"/> is zero,
            it must be configured (synchronized) before it can be used.
            </remarks>
            <since>Coherence 3.4</since>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.CacheState.Configuring">
            <summary>
            The ContinuousQueryCache is configuring or re-configuring its
            listeners and content.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.CacheState.Configured">
            <summary>
            The ContinousQueryCache has been configured.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.ContinuousQueryCache.CacheState.Synchronized">
            <summary>
            The ContinousQueryCache has been configured and fully
            synchronized.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.FilterEventArgs">
            <summary>
            An extension of the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> which may
            carry no values (old or new), but instead holds on an array of
            <see cref="T:Tangosol.Util.IFilter"/> objects being the "cause" of the event.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.FilterEventArgs.#ctor(Tangosol.Net.Cache.IObservableCache,Tangosol.Net.Cache.CacheEventType,System.Object,System.Boolean,Tangosol.Util.IFilter[])">
            <summary>
            Constructs a new lite (no values are speicifed) FilterEventArgs.
            </summary>
            <param name="map">
            The <see cref="T:Tangosol.Net.Cache.IObservableCache"/> object that fired the
            event.
            </param>
            <param name="id">
            This event's id.
            </param>
            <param name="key">
            The key into the cache.
            </param>
            <param name="isSynthetic">
            <b>true</b> if the event is caused by the cache internal
            processing such as eviction or loading.
            </param>
            <param name="filters">
            An array of filters that caused this event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.FilterEventArgs.#ctor(Tangosol.Net.Cache.IObservableCache,Tangosol.Net.Cache.CacheEventType,System.Object,System.Object,System.Object,System.Boolean,Tangosol.Util.IFilter[])">
            <summary>
            Constructs a new FilterEventArgs.
            </summary>
            <param name="cache">
            The <see cref="T:Tangosol.Net.Cache.IObservableCache"/> object that fired the
            event.
            </param>
            <param name="type">
            This event's type.
            </param>
            <param name="key">
            The key into the cache.
            </param>
            <param name="valueOld">
            The old value.
            </param>
            <param name="valueNew">
            The new value.
            </param>
            <param name="isSynthetic">
            <b>true</b> if the event is caused by the cache internal
            processing such as eviction or loading.
            </param>
            <param name="filters">
            An array of filters caused this event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.FilterEventArgs.#ctor(Tangosol.Net.Cache.IObservableCache,Tangosol.Net.Cache.CacheEventType,System.Object,System.Object,System.Object,System.Boolean,Tangosol.Net.Cache.CacheEventArgs.TransformationState,Tangosol.Util.IFilter[])">
            <summary>
            Constructs a new FilterEventArgs.
            </summary>
            <param name="cache">
            The IObservableCache object that fired the event
            </param>
            <param name="type">
            This event's type.
            </param>
            <param name="key">
            The key into the cache.
            </param>
            <param name="valueOld">
            The old value.
            </param>
            <param name="valueNew">
            The new value.
            </param>
            <param name="isSynthetic">
            <b>true</b> if the event is caused by the cache internal
            processing such as eviction or loading.
            </param>
            <param name="transformState">
            The TransformationState state describing
            how this event has been or should be transformed.
            </param>
            <param name="filters">
            An array of filters that caused this event.
            </param>
            <since>Coherence 3.7.1.9</since>
        </member>
        <member name="M:Tangosol.Net.Cache.FilterEventArgs.#ctor(Tangosol.Net.Cache.CacheEventArgs,Tangosol.Util.IFilter[])">
            <summary>
            Constructs a new FilterEventArgs from another FilterEventArgs.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.FilterEventArgs"/> object that fired the
            event.
            </param>
            <param name="filters">
            An array of filters that caused this event.
            </param>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="F:Tangosol.Net.Cache.FilterEventArgs.m_filters">
            <summary>
            Filters that caused the event.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.FilterEventArgs.m_event">
            <summary>
            The Filter event.
            </summary>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="P:Tangosol.Net.Cache.FilterEventArgs.Filters">
            <summary>
            Return an array of filters that are the cause of this event.
            </summary>
            <value>
            An array of filters.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.FilterEventArgs.Event">
            <summary>
            Return the FilterEventArgs.
            </summary>
            <value>
            A FilterEventArgs.
            </value>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="P:Tangosol.Net.Cache.FilterEventArgs.Key">
            <summary>
            Returns the filter event key.
            </summary>
            <value>
            The event key.
            </value>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="P:Tangosol.Net.Cache.FilterEventArgs.OldValue">
            <summary>
            Returns the filter event old value.
            </summary>
            <value>
            The old value.
            </value>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="P:Tangosol.Net.Cache.FilterEventArgs.NewValue">
            <summary>
            Returns the filter event new value.
            </summary>
            <value>
            The old value.
            </value>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="T:Tangosol.Net.Cache.IConfigurableCache">
            <summary>
            An extension to the <see cref="T:Tangosol.Net.Cache.ICache"/> interface that supports 
            runtime configuration and monitoring of various caching properties.
            </summary>
            <author>Cameron Purdy  2009.01.13</author>
            <author>Aleksandar Seovic  2009.07.27</author>
            <since>Coherence 3.5.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.IConfigurableCache.Evict(System.Object)">
            <summary>
            Evict a specified key from the cache, as if it had expired from the
            cache. If the key is not in the cache, then the method has no effect.
            </summary>
            <param name="oKey">
            The key to evict from the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.IConfigurableCache.EvictAll(System.Collections.ICollection)">
             <summary>
             Evict the specified keys from the cache, as if they had each expired
             from the cache.
             </summary>
             <remarks>
             The result of this method is defined to be semantically the same as
             the following implementation:
            
             <code>
             foreach (Object oKey in colKeys)
             {
                 Evict(oKey);
             }
             </code>
             </remarks>
             <param name="colKeys">
             A collection of keys to evict from the cache.
             </param>
        </member>
        <member name="M:Tangosol.Net.Cache.IConfigurableCache.Evict">
            <summary>
            Evict all entries from the cache that are no longer valid, and
            potentially prune the cache size if the cache is size-limited
            and its size is above the caching low water mark.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.IConfigurableCache.GetCacheEntry(System.Object)">
            <summary>
            Locate a cache entry in the cache based on its key.
            </summary>
            <param name="key">
            The key object to search for.
            </param>
            <returns>
            The entry or null.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.IConfigurableCache.Units">
            <summary>
            Determine the number of units that the cache currently stores.
            </summary>
            <value>
            The current size of the cache in units.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.IConfigurableCache.HighUnits">
            <summary>
            Get or set the limit of the cache size in units. The cache will prune
            itself automatically once it reaches its maximum unit level. This is
            often referred to as the "high water mark" of the cache.
            </summary>
            <value>
            The limit of the cache size in units.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.IConfigurableCache.LowUnits">
            <summary>
            Get or set the point to which the cache will shrink when it prunes.
            This is often referred to as a "low water mark" of the cache. If the
            cache incrementally prunes, then this setting will have no effect.
            </summary>
            <value>
            The number of units that the cache prunes to.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.IConfigurableCache.ExpiryDelay">
            <summary>
            Get or set the default "time to live" for each individual cache entry.
            </summary>
            <remarks>
            Change of this property does not affect the already-scheduled expiry 
            of existing entries.
            </remarks>
            <value>
            The number of milliseconds that a cache entry value will live,
            or zero if cache entries are never automatically expired.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.IConfigurableCache.FlushDelay">
            <summary>
            Get or set the delay between cache flushes. A cache flush evicts 
            entries that have expired.
            </summary>
            <remarks>
            This value is used by cache implementations that periodically evict
            entries that have expired; this value has no meaning for cache
            implementations that aggressively evict entries as they expire.
            </remarks>
            <value>
            The number of milliseconds between cache flushes, or zero which
            signifies that the cache never flushes.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.IConfigurableCache.EvictionPolicy">
            <summary>
            Get or set the eviction policy used by the cache.
            </summary>
            <value>
            The eviction policy used by the cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.IConfigurableCache.UnitCalculator">
            <summary>
            Get or set the unit calculator used by the cache.
            </summary>
            <value>
            The unit calculator used by the cache.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.IConfigurableCacheEntry">
            <summary>
            A cache Entry carries information additional to the base Map Entry in
            order to support eviction and expiry.
            </summary>
            <author>Cameron Purdy  2009.01.13</author>
            <author>Aleksandar Seovic  2009.07.27</author>
            <since>Coherence 3.5.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.IConfigurableCacheEntry.Touch">
            <summary>
            Indicate to the entry that it has been touched, such as when it is
            accessed or modified.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.IConfigurableCacheEntry.TouchCount">
            <summary>
            Determine the number of times that the cache entry has been
            touched (since the touch count was last reset).
            </summary>
            <value>
            The number of times that the cache entry has been touched.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.IConfigurableCacheEntry.LastTouchMillis">
            <summary>
            Determine when the cache entry was last touched.
            </summary>
            <value>
            The date/time value, in millis, when the entry was most
            recently touched.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.IConfigurableCacheEntry.ExpiryMillis">
            <summary>
            Get or set when the cache entry will expire, if ever.
            </summary>
            <remarks>
            If the cache is configured for automatic expiry, each subsequent 
            update to this cache entry will reschedule the expiry time.
            </remarks>
            <value>
            The date/time value, in millis, when the entry will (or did) 
            expire; zero indicates no expiry.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.IConfigurableCacheEntry.IsExpired">
            <summary>
            Determine if this entry has expired.
            </summary>
            <value>
            <c>true</c> if this entry has already expired, 
            <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.IConfigurableCacheEntry.Units">
            <summary>
            Get or set the number of cache units used by this entry.
            </summary>
            <value>
            An integer value 0 or greater, with a larger value
            signifying a higher cost; -1 implies that the entry
            has been discarded
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.IKeyAssociation">
            <summary>
            A KeyAssociation represents a key object that has a natural
            association with another key object.
            </summary>
            <remarks>
            The key object and the associated key may refer to entries in the
            same or different caches.
            <p/>
            For example, the information provided by a key that implements
            <b>IKeyAssociation</b> may be used to place the key into the same
            partition as its associated key.
            <p/>
            See <see cref="T:Tangosol.Util.Filter.KeyAssociatedFilter"/> for an example of a distributed
            query that takes advantage of a custom <b>IKeyAssociation</b>
            implementation to dramatically optimize its performance.
            </remarks>
            <since>Coherence 3.0</since>
        </member>
        <member name="P:Tangosol.Net.Cache.IKeyAssociation.AssociatedKey">
            <summary>
            Determine the key object to which this key object is associated.
            </summary>
            <remarks>
            The key object returned by this method is often referred to as a
             <i>host key</i>.
            </remarks>
            <value>
            The host key that for this key object, or <c>null</c> if this key
            has no association.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.ICacheEventTransformer">
            <summary>
            ICacheEventTransformer interface is used to allow an event consumer
            to change the content of a <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> destined for
            the corresponding <see cref="T:Tangosol.Net.Cache.ICacheListener"/>.
            </summary>
            <remarks>
            <p>
            In general, the <see cref="M:Tangosol.Net.Cache.ICacheEventTransformer.Transform(Tangosol.Net.Cache.CacheEventArgs)"/> method is called after the
            original <b>CacheEventArgs</b> is evaluated by an
            <see cref="T:Tangosol.Util.IFilter"/> (such as
            <see cref="T:Tangosol.Util.Filter.CacheEventFilter"/>). The values
            contained by the returned <b>CacheEventArgs</b> object will be the
            ones given (sent) to the corresponding listener. Returning
            <c>null</c> will prevent the emission of the event altogether.</p>
            <p>
            <b>Note:</b> Currently, the ICacheEventTransformer interface is
            supported only by partitioned caches.</p>
            </remarks>
            <author>Gene Gleyzer/Jason Howes  2008.05.01</author>
            <author>Ana Cikic  2008.06.17</author>
            <since>Coherence 3.4</since>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheEventTransformer.Transform(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Transform the specified <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </summary>
            <remarks>
            The values contained by the returned <b>CacheEventArgs</b> object
            will be the ones given (sent) to the corresponding listener.
            </remarks>
            <param name="evt">
            The original <b>CacheEventArgs</b> object.
            </param>
            <returns>
            Modified <b>CacheEventArgs</b> object or <c>null</c> to discard
            the event.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Cache.ICacheTrigger">
            <summary>
            ICacheTrigger represents a functional agent that allows to validate,
            reject or modify mutating operations against an underlying cache.
            </summary>
            <remarks>
            The trigger operates on <see cref="T:Tangosol.Net.Cache.ICacheTriggerEntry"/> object that
            represents a pending mutation that is about to be committed to the
            underlying cache. An ICacheTrigger could be registered with any
            <see cref="T:Tangosol.Net.Cache.IObservableCache"/> using the
            <see cref="T:Tangosol.Util.CacheTriggerListener"/> class:
            <code>
            INamedCache   cache   = CacheFactory.GetCache(cacheName);
            ICacheTrigger trigger = new MyCustomTrigger();
            cache.AddCacheListener(new CacheTriggerListener(trigger));
            </code>
            <b>Note:</b> In a clustered environment, ICacheTrigger registration
            process requires triggers to be serializable and providing a
            non-default implementation of the GetHashCode() and Equals() methods.
            Failure to do so may result in duplicate registration and a redundant
            entry processing by equivalent, but "not equal" ICacheTrigger
            objects.
            </remarks>
            <author>Cameron Purdy/Gene Gleyzer  2008.03.11</author>
            <author>Ana Cikic  2008.07.02</author>
            <since>Coherence 3.4</since>
            <seealso cref="T:Tangosol.Util.Filter.FilterTrigger"/>
        </member>
        <member name="M:Tangosol.Net.Cache.ICacheTrigger.Process(Tangosol.Net.Cache.ICacheTriggerEntry)">
            <summary>
            This method is called before the result of a mutating operation
            represented by the specified entry object is committed into the
            underlying cache.
            </summary>
            <remarks>
            An implementation of this method can evaluate the change by
            analyzing the original and the new value, and can perform any of
            the following:
            <list type="bullet">
            <item>
            override the requested change by setting
            <see cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.Value"/> to a different value;
            </item>
            <item>
            undo the pending change by resetting the entry value to the
            original value obtained from
            <see cref="P:Tangosol.Net.Cache.ICacheTriggerEntry.OriginalValue"/>
            </item>
            <item>
            remove the entry from the underlying cache by calling
            <see cref="M:Tangosol.Net.Cache.IInvocableCacheEntry.Remove(System.Boolean)"/>
            </item>
            <item>
            reject the pending change by throwing an <see cref="T:System.Exception"/>,
            which will prevent any changes from being committed, and will
            result in the exception being thrown from the operation that
            attempted to modify the cache; or
            </item>
            <item>
            do nothing, thus allowing the pending change to be committed to
            the underlying cache.
            </item>
            </list>
            </remarks>
            <param name="entry">
            An <see cref="T:Tangosol.Net.Cache.ICacheTriggerEntry"/> object that represents the
            pending change to be committed to the cache, as well as the
            original state of the entry.
            </param>
        </member>
        <member name="T:Tangosol.Net.Cache.ICacheTriggerEntry">
            <summary>
            A <see cref="T:Tangosol.Net.Cache.ICacheTrigger"/> entry represents a pending change to an
            entry that is about to committed to the underlying cache.
            </summary>
            <remarks>
            The methods inherited from <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> provide
            both the pending state and the ability to alter that state.
            The original state of the entry can be obtained using the
            <see cref="P:Tangosol.Net.Cache.ICacheTriggerEntry.OriginalValue"/> and <see cref="P:Tangosol.Net.Cache.ICacheTriggerEntry.IsOriginalPresent"/>
            properties.
            </remarks>
        </member>
        <member name="T:Tangosol.Net.Cache.IInvocableCacheEntry">
            <summary>
            An <b>IInvocableCacheEntry</b> contains additional information and
            exposes additional operations that the basic <b>ICacheEntry</b>
            does not.
            </summary>
            <remarks>
            It allows non-existent entries to be represented, thus allowing
            their optional creation. It allows existent entries to be removed
            from the cache. It supports a number of optimizations that can
            ultimately be mapped through to indexes and other data structures of
            the underlying dictionary.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.IInvocableCacheEntry.SetValue(System.Object,System.Boolean)">
            <summary>
            Store the value corresponding to this entry.
            </summary>
            <remarks>
            <p>
            If the entry does not exist, then the entry will be created by
            invoking this method, even with a <c>null</c> value (assuming the
            cache supports <c>null</c> values).</p>
            <p>
            Unlike the property <see cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.Value"/>, this method does not
            return the previous value, and as a result may be significantly
            less expensive (in terms of cost of execution) for certain
            cache implementations.</p>
            </remarks>
            <param name="value">
            The new value for this entry.
            </param>
            <param name="isSynthetic">
            Pass <b>true</b> only if the insertion into or modification of
            the cache should be treated as a synthetic event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.IInvocableCacheEntry.Extract(Tangosol.Util.IValueExtractor)">
            <summary>
            Extract a value out of the entry's value.
            </summary>
            <remarks>
            Calling this method is semantically equivalent to
            <b>extractor.Extract(entry.Value)</b>, but this method may be
            significantly less expensive because the resultant value may be
            obtained from a forward index, for example.
            </remarks>
            <param name="extractor">
            An <see cref="T:Tangosol.Util.IValueExtractor"/> to apply to the entry's value
            </param>
            <returns>
            The extracted value.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.IInvocableCacheEntry.Update(Tangosol.Util.IValueUpdater,System.Object)">
            <summary>
            Update the entry's value.
            </summary>
            <remarks>
            Calling this method is semantically equivalent to:
            <pre>
            object target = entry.Value;
            updater.Update(target, value);
            entry.Value = target;
            </pre>
            The benefit of using this method is that it may allow the entry
            implementation to significantly optimize the operation, such as
            for purposes of delta updates and backup maintenance.
            </remarks>
            <param name="updater">
            An <see cref="T:Tangosol.Util.IValueUpdater"/> used to modify the entry's value.
            </param>
            <param name="value">
            Value to update target object to.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.IInvocableCacheEntry.Remove(System.Boolean)">
            <summary>
            Remove this entry from the cache if it is present in the cache.
            </summary>
            <remarks>
            <p>
            This method supports both the operation corresponding to
            <b>IDictionary.Remove</b> as well as synthetic operations such as
            eviction. If the containing cache does not differentiate between
            the two, then this method will always be identical to
            <tt>IInvocableCache.Remove(Key)</tt>.</p>
            </remarks>
            <param name="isSynthetic">
            Pass <b>true</b> only if the removal from the dictionary should
            be treated as a synthetic event.
            </param>
        </member>
        <member name="P:Tangosol.Net.Cache.IInvocableCacheEntry.Key">
            <summary>
            Gets the key corresponding to this entry.
            </summary>
            <remarks>
            The resultant key does not necessarily exist within the
            containing cache, which is to say that
            <b>IInvocableCache.Contains(Key)</b> could return
            <b>false</b>. To test for the presence of this key within the
            dictionary, use <see cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.IsPresent"/>, and to create the entry
            for the key, set <see cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.Value"/> property.
            </remarks>
            <value>
            The key corresponding to this entry; may be <c>null</c> if the
            underlying cache supports <c>null</c> keys.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.IInvocableCacheEntry.Value">
            <summary>
            Gets or sets the value corresponding to this entry.
            </summary>
            <remarks>
            If the entry does not exist, then the value will be <c>null</c>.
            <p>
            To differentiate between a <c>null</c> value and a non-existent
            entry, use <see cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.IsPresent"/>.</p>
            </remarks>
            <value>
            The value corresponding to this entry; may be <c>null</c> if the
            value is <c>null</c> or if the entry does not exist in the cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.IInvocableCacheEntry.IsPresent">
            <summary>
            Determine if this entry exists in the cache.
            </summary>
            <remarks>
            If the entry is not present, it can be created by setting the
            <see cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.Value"/> property. If the entry is present,
            it can be destroyed by calling <see cref="M:Tangosol.Net.Cache.IInvocableCacheEntry.Remove(System.Boolean)"/>.
            </remarks>
            <value>
            <b>true</b> if this entry exists in the containing cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheTriggerEntry.OriginalValue">
            <summary>
            Get the value that existed before the start of the mutating
            operation that is being evaluated by the trigger.
            </summary>
            <value>
            The original value corresponding to this entry; may be
            <c>null</c> if the value is <c>null</c> or if the entry did not
            exist in the cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.ICacheTriggerEntry.IsOriginalPresent">
            <summary>
            Determine whether or not the entry existed before the start of
            the mutating operation that is being evaluated by the trigger.
            </summary>
            <value>
            <b>true</b> iff this entry was existent in the containing cache.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.IEntryAggregator">
            <summary>
            An <b>IEntryAggregator</b> represents processing that can be directed to
            occur against some subset of the entries in an
            <see cref="T:Tangosol.Net.Cache.IInvocableCache"/>, resulting in a aggregated result.
            </summary>
            <remarks>
            Common examples of aggregation include functions such as Min(),
            Max(), Sum() and Avg(). However, the concept of aggregation applies
            to any process that needs to evaluate a group of entries to come up
            with a single answer.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.IEntryAggregator.Aggregate(System.Collections.ICollection)">
            <summary>
            Process a set of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> objects
            in order to produce an aggregated result.
            </summary>
            <param name="entries">
            A collection of read-only <b>IInvocableCacheEntry</b>
            objects to aggregate.
            </param>
            <returns>
            The aggregated result from processing the entries.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Cache.IParallelAwareAggregator">
            <summary>
            An <b>IParallelAwareAggregator</b> is an advanced extension to
            <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is explicitly capable of being
            run in parallel, for example in a distributed environment.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.IParallelAwareAggregator.AggregateResults(System.Collections.ICollection)">
            <summary>
            Aggregate the results of the parallel aggregations.
            </summary>
            <param name="results">
            Results to aggregate.
            </param>
            <returns>
            The aggregation of the parallel aggregation results.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.IParallelAwareAggregator.ParallelAggregator">
            <summary>
            Get an aggregator that can take the place of this aggregator in
            situations in which the <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> can
            aggregate in parallel.
            </summary>
            <value>
            The aggregator that will be run in parallel.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.IPartialResultAggregator">
            <summary>
            PartialResultAggregator allows for the intermediate {@link
            #AggregatePartialResults aggregation} of the partial results of a
            {@link ParallelAwareAggregator parallel aggregation}.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.IPartialResultAggregator.AggregatePartialResults(System.Collections.ICollection)">
            <summary>
            Aggregate the results of the parallel aggregations, producing a
            partial result logically representing the partial aggregation. The
            returned partial result will be further {@link
            ParallelAwareAggregator#AggregateResults aggregated} to produce
            the final result.
            </summary>
            <param name="partialResults">
            The partial results to agregate.
            </param>
            <returns>
            An aggregattion of the collection of partial results.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Cache.IIterableCacheLoader">
            <summary>
            An <see cref="T:Tangosol.Net.Cache.ICacheLoader"/> extension that exposes an <b>IEnumerator</b>
            for the collection of keys in the underlying <see cref="T:Tangosol.Net.Cache.ICache"/>.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.IIterableCacheLoader.Keys">
            <summary>
            Gets the <b>IEnumerator</b> for the keys collection.
            </summary>
            <value>
            The <b>IEnumerator</b> for the keys collection.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.InvocableCacheEx">
            <summary>
            Contains extension methods for IInvocableCache for the new Java 8 
            InvocableMap methods.
            </summary>
            <author>lh 2015.04.28</author>
            <since>Coherence 12.2.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.InvocableCacheEx.GetOrDefault(Tangosol.Net.Cache.IInvocableCache,System.Object,System.Object)">
            <summary>
            Returns the value to which the specified key is mapped, or
            the defaultValue if this cache contains no mapping for the key.
            </summary>
            <param name="invocable">
            The interface it extends.
            </param>
            <param name="key">
            The key whose associated value is to be returned.
            </param>
            <param name="defaultValue">
            The default value of the key.
            </param>
            <returns>
            The value to which the specified key is mapped, or defaultValue
            if this cache contains no mapping for the key.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.InvocableCacheEx.InsertIfAbsent(Tangosol.Net.Cache.IInvocableCache,System.Object,System.Object)">
            <summary>
            If the specified key is not already associated with a value 
            (or is mapped to null) associates it with the given value and
            returns null, else returns the current value.
            </summary>
            <param name="invocable">
            The interface it extends.
            </param>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            The current value associated with the specified key, or
            null if there was no mapping for the key.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.InvocableCacheEx.Remove(Tangosol.Net.Cache.IInvocableCache,System.Object,System.Object)">
            <summary>
            Removes the entry for the specified key only if it is currently
            mapped to the specified value.
            </summary>
            <param name="invocable">
            The interface it extends.
            </param>
            <param name="key">
            Key with which the specified value is associated.
            </param>
            <param name="value">
            Value expected to be associated with the specified key.
            </param>
            <returns>
            True if the value was removed.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.InvocableCacheEx.Replace(Tangosol.Net.Cache.IInvocableCache,System.Object,System.Object,System.Object)">
            <summary>
            Replaces the entry for the specified key only if currently
            mapped to the specified value.
            </summary>
            <param name="invocable">
            The interface it extends.
            </param>
            <param name="key">
            Key with which the specified value is associated.
            </param>
            <param name="oldValue">
            Value expected to be associated with the specified key.
            </param>
            <param name="newValue">
            Value to be associated with the specified key.
            </param>
            <returns>
            True if the value was replaced.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.InvocableCacheEx.Replace(Tangosol.Net.Cache.IInvocableCache,System.Object,System.Object)">
            <summary>
            Replaces the entry for the specified key only if it is
            currently mapped to some value.
            </summary>
            <param name="invocable">
            The interface it extends.
            </param>
            <param name="key">
            Key with which the specified value is associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            The previous value associated with the specified key, or
            null if there was no mapping for the key.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Cache.IQueryCacheEntry">
            <summary>
            An <b>IQueryCacheEntry</b> exposes additional index-related functionality
            that the basic <b>ICacheEntry</b> does not.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.IQueryCacheEntry.Extract(Tangosol.Util.IValueExtractor)">
            <summary>
            Extract a value out of the entry's value.
            </summary>
            <remarks>
            Calling this method is semantically equivalent to
            <b>valueExtractor.Extract(entry.Value)</b>, but this method may
            be significantly less expensive. For example, the resultant value
            may be obtained from a forward index, avoiding a potential object
            de-serialization.
            </remarks>
            <param name="valueExtractor">
            An <see cref="T:Tangosol.Util.IValueExtractor"/> to apply to the entry's value.
            </param>
            <returns>
            The extracted value.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Cache.IUnitCalculator">
            <summary>
            A unit calculator is an object that can calculate the cost of caching
            an object.
            </summary>
            <author>Cameron Purdy  2009.01.13</author>
            <author>Aleksandar Seovic  2009.07.27</author>
            <since>Coherence 3.5.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.IUnitCalculator.CalculateUnits(System.Object,System.Object)">
            <summary>
            Calculate a cache cost for the specified cache entry key and value.
            </summary>
            <param name="oKey">
            The cache key to evaluate for unit cost.
            </param>
            <param name="oValue">
            The cache value to evaluate for unit cost.
            </param>
            <returns>
            An integer value 0 or greater, with a larger value signifying 
            a higher cost.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.IUnitCalculator.Name">
            <summary>
            Obtain the name of the unit calculator. 
            </summary>
            <remarks>
            This is intended to be human readable for use in a monitoring tool; 
            examples include "SimpleMemoryCalculator" and "BinaryMemoryCalculator".
            </remarks>
            <value>
            The name of the unit calculator.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache">
            <summary>
            A local in-memory cache implementation.
            </summary>
            <remarks>
            <p/>
            The implementation is thread safe and uses a combination of
            Most Recently Used (MRU) and Most Frequently Used (MFU) caching
            strategies.
            <p/>
            The cache is size-limited, which means that once it reaches its
            maximum size ("high-water mark") it prunes itself (to its
            "low-water mark"). The cache high- and low-water-marks are measured
            in terms of "units", and each cached item by default uses one unit.
            All of the cache constructors, except for the default constructor,
            require the maximum number of units to be passed in. To change the
            number of units that each cache entry uses, either set the Units
            property of the cache entry, or extend the <see cref="T:Tangosol.Net.Cache.ICache"/>
            implementation so that the inner <see cref="T:Tangosol.Net.Cache.LocalCache.Entry"/> class calculates
            its own unit size. To determine the current, high-water and low-water
            sizes of the cache, use the cache object's <see cref="P:Tangosol.Net.Cache.LocalCache.Units"/>,
            <see cref="P:Tangosol.Net.Cache.LocalCache.HighUnits"/> and <see cref="P:Tangosol.Net.Cache.LocalCache.LowUnits"/> properties.
            The <b>HighUnits</b> and <b>LowUnits</b> properties can be changed,
            even after the cache is in use. To specify the <b>LowUnits</b> value
            as a percentage when constructing the cache, use the extended
            constructor taking the percentage-prune-level.
            <p/>
            Each cached entry never expires by default. To alter this behavior,
            use a constructor that takes the expiry-millis; for example, an
            expiry-millis value of 10000 will expire entries after 10 seconds.
            The <see cref="P:Tangosol.Net.Cache.LocalCache.ExpiryDelay"/> property can also be set once the cache
            is in use, but it will not affect the expiry of previously cached
            items.
            <p/>
            The cache can optionally be flushed on a periodic basis by setting
            the <see cref="P:Tangosol.Net.Cache.LocalCache.FlushDelay"/> property or scheduling a specific flush
            time by setting the <see cref="P:Tangosol.Net.Cache.LocalCache.FlushTime"/> property.
            <p/>
            Cache hit statistics can be obtained from the
            <see cref="P:Tangosol.Net.Cache.LocalCache.CacheHits"/>, <see cref="P:Tangosol.Net.Cache.LocalCache.CacheMisses"/> and
            <see cref="P:Tangosol.Net.Cache.LocalCache.HitProbability"/> read-only properties. The statistics can
            be reset by invoking <see cref="M:Tangosol.Net.Cache.LocalCache.ResetHitStatistics"/>. The statistics
            are automatically reset when the cache is cleared (the
            <see cref="M:Tangosol.Net.Cache.LocalCache.Clear"/> method).
            <p/>
            The <b>LocalCache</b> implements the <see cref="T:Tangosol.Net.Cache.IObservableCache"/>
            interface, meaning it provides event notifications to any interested
            listener for each insert, update and delete, including those that
            occur when the cache is pruned or entries are automatically expired.
            <p/>
            This implementation is designed to support extension through
            inheritence. To override the one-unit-per-entry default behavior,
            extend the inner <b>Entry</b> class and override the
            <see cref="M:Tangosol.Net.Cache.LocalCache.Entry.CalculateUnits(System.Object)"/> method.
            </remarks>
            <author>Cameron Purdy  2001.04.19, 2005.05.18</author>
            <author>Goran Milosavljevic  2006.11.13</author>
        </member>
        <member name="T:Tangosol.Util.Collections.SynchronizedDictionary">
            <summary>
            Synchronized <b>IDictionary</b> wrapper that uses read/write locks 
            to synchronize access to the underlying dictionary.
            </summary>
            <remarks>
            This class uses read/write locks to ensure that only a single thread
            can modify the underlying dictionary at any given time, while allowing
            concurrent reads by multiple threads.
            <p/>
            While all individual operations exposed by this class are thread-safe,
            you may still need to synchronize access to an instance of this class 
            if you need to perform multiple operations atomically. 
            <p/>
            In order to do that, you can do one of the following:
            <list type="bullet">
            <item>
            <b>Lock the <see cref="P:Tangosol.Util.Collections.SynchronizedDictionary.SyncRoot"/> property.</b> Because the write 
            locks used internally also lock <c>SyncRoot</c>, this will prevent 
            concurrent modification. However, concurrent read operations will
            still be allowed, which means that other threads will be able to see
            partial updates. If you need truly atomic multi-operation updates, 
            you should use write locks instead.
            </item>
            <item>
            <b>Use read locks.</b> By acquiring a read lock externally, you can 
            ensure that no modifications take place while you are reading from the
            dictionary. See <see cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireReadLock"/> for details.
            </item>
            <item>
            <b>Use write locks.</b> By acquiring a write lock, you can achieve 
            complete isolation and fully atomic multi-operation updates, as no 
            other thread will be able to either read from or write to the 
            dictionary until the write lock is released. See 
            <see cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireWriteLock"/> for details.
            </item>
            </list>
            <p/>
            <b>Note 1:</b> If you attempt to acquire a write lock on a thread that 
            holds a read lock, the read lock will be promoted to a write lock as 
            soon as all read locks held by other threads are released.
            <p/>
            <b>Note 2:</b> The enumerator returned by the <see cref="M:Tangosol.Util.Collections.SynchronizedDictionary.GetEnumerator"/> 
            method is  <b>not</b> thread-safe. You should either acquire a read 
            lock or lock the <see cref="P:Tangosol.Util.Collections.SynchronizedDictionary.SyncRoot"/> explicitly if you need to 
            enumerate dictionary entries in a thread-safe manner.
            <p/>
            <b>Note 3:</b> This class has been renamed from SynchronizedHashtable to 
            SynchronizedDictionary in Coherence 3.5, to better reflect the fact
            that it can be used to wrap any <c>IDictionary</c> implementation.
            </remarks>
            <author>Aleksandar Seovic  2006.11.13</author>
            <author>Aleksandar Seovic  2009.08.03</author>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.#ctor">
            <summary>
            Create <c>SynchronizedDictionary</c> instance.
            </summary>
            <remarks>
            This constructor will create a wrapper around the internal
            <see cref="T:Tangosol.Util.Collections.HashDictionary"/> instance, which means that the 
            created dictionary instance will support <c>null</c> keys,
            contrary to the general <c>IDictionary</c> contract. 
            </remarks>
            <seealso cref="T:Tangosol.Util.Collections.HashDictionary"/>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.#ctor(System.Int32)">
            <summary>
            Create <c>SynchronizedDictionary</c> instance.
            </summary>
            <remarks>
            This constructor will create a wrapper around the internal
            <see cref="T:Tangosol.Util.Collections.HashDictionary"/> instance, which means that the 
            created dictionary instance will support <c>null</c> keys,
            contrary to the general <c>IDictionary</c> contract. 
            </remarks>
            <seealso cref="T:Tangosol.Util.Collections.HashDictionary"/>
            <param name="capacity">
            The initial capacity of the internal <see cref="T:Tangosol.Util.Collections.HashDictionary"/>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.#ctor(System.Collections.IDictionary)">
            <summary>
            specified dictionary.
            </summary>
            <param name="dict">
            Dictionary to wrap.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SynchronizedDictionary</c> 
            class using the specified 
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            object containing the information required to initialize this 
            <c>SynchronizedDictionary</c> instance.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            object containing the source and destination of the serialized 
            stream associated with this dictionary. 
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireReadLock">
            <summary>
            Acquire a read lock.
            </summary>
            <remarks>
            This method will block until the read lock is acquired.
            <p/>
            Multiple threads can hold read locks at the same time, but no
            thread will be able to acquire a write lock until all read locks
            are released.
            <p/>
            This method should always be used in combination with a
            <see cref="M:Tangosol.Util.Collections.SynchronizedDictionary.ReleaseReadLock"/> method in the following manner:
            <code>
            dict.AcquireReadLock();
            try
            {
                // access dictionary
            }
            finally
            {
                dict.ReleaseReadLock();
            }
            </code>
            This will ensure that the lock is released properly even if an
            exception is thrown by the code within the <c>try</c> block.
            </remarks>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireReadLock(System.Int32)"/>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.ReleaseReadLock"/>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireReadLock(System.Int32)">
            <summary>
            Acquire a read lock.
            </summary>
            <remarks>
            This method will attempt to acquire a read lock for up to
            <paramref name="timeout"/> milliseconds, and will return a boolean 
            value specifying whether or not the lock was acquired successfully.
            <p/>
            Multiple threads can hold read locks at the same time, but no
            thread will be able to acquire a write lock until all read locks
            are released.
            <p/>
            This method should always be used in combination with a
            <see cref="M:Tangosol.Util.Collections.SynchronizedDictionary.ReleaseReadLock"/> method in the following manner:
            <code>
            if (dict.AcquireReadLock(timeout))
            {
                try
                {
                    // access dictionary
                }
                finally
                {
                    dict.ReleaseReadLock();
                }
            }
            </code>
            This will ensure that the dictionary is not accessed unless the 
            lock was acquired successfully, and that the lock is released 
            properly even if an exception is thrown by the code within the 
            <c>try</c> block. 
            <p/>
            It is entirely up to you how to handle the case when the 
            <c>AcquireReadLock</c> method returns <c>false</c>. For example,
            you can ignore the fact, throw an exception, or retry the 
            operation by placing the code above within a loop.
            </remarks>
            <param name="timeout">
            Timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if a lock was acquired within the specified time,
            <c>false</c> otherwise.
            </returns>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireReadLock"/>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.ReleaseReadLock"/>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.ReleaseReadLock">
            <summary>
            Release a read lock.
            </summary>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireReadLock"/>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireReadLock(System.Int32)"/>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireWriteLock">
            <summary>
            Acquire a write lock.
            </summary>
            <remarks>
            This method will block until the write lock is acquired.
            <p/>
            Only a single thread can hold the write lock at any given time, 
            and no other threads will be able to acquire either a read lock
            or a write lock until the write lock is released.
            <p/>
            This method should always be used in combination with a
            <see cref="M:Tangosol.Util.Collections.SynchronizedDictionary.ReleaseWriteLock"/> method in the following manner:
            <code>
            dict.AcquireWriteLock();
            try
            {
                // access dictionary
            }
            finally
            {
                dict.ReleaseWriteLock();
            }
            </code>
            This will ensure that the lock is released properly even if an
            exception is thrown by the code within the <c>try</c> block.
            </remarks>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireWriteLock(System.Int32)"/>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.ReleaseWriteLock"/>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireWriteLock(System.Int32)">
            <summary>
            Acquire a write lock.
            </summary>
            <remarks>
            This method will attempt to acquire a write lock for up to
            <paramref name="timeout"/> milliseconds, and will return a boolean 
            value specifying whether or not the lock was acquired successfully.
            <p/>
            Only a single thread can hold the write lock at any given time, 
            and no other threads will be able to acquire either a read lock
            or a write lock until the write lock is released.
            <p/>
            This method should always be used in combination with a
            <see cref="M:Tangosol.Util.Collections.SynchronizedDictionary.ReleaseWriteLock"/> method in the following manner:
            <code>
            if (dict.AcquireWriteLock(timeout))
            {
                try
                {
                    // access dictionary
                }
                finally
                {
                    dict.ReleaseWriteLock();
                }
            }
            </code>
            This will ensure that the dictionary is not accessed unless the 
            lock was acquired successfully, and that the lock is released 
            properly even if an exception is thrown by the code within the 
            <c>try</c> block. 
            <p/>
            It is entirely up to you how to handle the case when the 
            <c>AcquireWriteLock</c> method returns <c>false</c>. For example,
            you can ignore the fact, throw an exception, or retry the 
            operation by placing the code above within a loop.
            </remarks>
            <param name="timeout">
            Timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if a lock was acquired within the specified time,
            <c>false</c> otherwise.
            </returns>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireWriteLock"/>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.ReleaseWriteLock"/>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.ReleaseWriteLock">
            <summary>
            Release a write lock.
            </summary>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireWriteLock"/>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireWriteLock(System.Int32)"/>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.Add(System.Object,System.Object)">
            <summary>
            Add an entry with the specified key and value to this dictionary.
            </summary>
            <param name="key">
            Entry key.
            </param>
            <param name="value">
            Entry value.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.Clear">
            <summary>
            Remove all entries from this dictionary.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.Contains(System.Object)">
            <summary>
            Determine whether this dictionary contains the specified key.
            </summary>
            <param name="key">
            Key to search for.
            </param>
            <returns>
            <b>true</b> if this dictionary contains the specified key.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.GetEnumerator">
            <summary>
            Return an <b>IDictionaryEnumerator</b> that iterates through this
            dictionary.
            </summary>
            <returns>
            An <b>IDictionaryEnumerator</b> that iterates through this
            dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.Remove(System.Object)">
            <summary>
            Remove the entrty with the specified key from this dictionary.
            </summary>
            <param name="key">
            Key that determines the entry to remove.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return an <b>IEnumerator</b> that iterates through this dictionary.
            </summary>
            <returns>
            An <b>IEnumerator</b> that iterates through this dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy entries from this dictionary into the one-dimensional array.
            </summary>
            <param name="array">
            An array to which entries should be copied.
            </param>
            <param name="arrayIndex">
            Index in <paramref name="array"/> at which copying should start.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SynchronizedDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates SerializationInfo with the data needed to serialize this 
            object.
            </summary>
            <param name="info">
            The SerializationInfo to populate with data. 
            </param>
            <param name="context">
            The serialization context. 
            </param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
        </member>
        <member name="F:Tangosol.Util.Collections.SynchronizedDictionary.m_dict">
            <summary>
            Wrapped, non-thread safe dictionary.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.SynchronizedDictionary.m_gate">
            <summary>
            Gate used to synchronize access to this cache.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Collections.SynchronizedDictionary.Delegate">
            <summary>
            Return the delegate IDictionary.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Collections.SynchronizedDictionary.IsReadLockHeld">
            <summary>
            Determines whether or not the current thread holds a read lock.
            </summary>
            <value>
            <b>true</b> if the current thread holds a read lock; <b>false</b>
            otherwise.
            </value>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireReadLock"/>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireReadLock(System.Int32)"/>
        </member>
        <member name="P:Tangosol.Util.Collections.SynchronizedDictionary.IsWriteLockHeld">
            <summary>
            Determines whether or not the current thread holds the write lock.
            </summary>
            <value>
            <b>true</b> if the current thread holds the write lock; <b>false</b>
            otherwise.
            </value>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireWriteLock"/>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireWriteLock(System.Int32)"/>
        </member>
        <member name="P:Tangosol.Util.Collections.SynchronizedDictionary.Item(System.Object)">
            <summary>
            Get or set the value associated with the specified key.
            </summary>
            <param name="key">
            The key whose value to get or set.
            </param>
            <value>
            The value associated with the specified key.
            </value>
        </member>
        <member name="P:Tangosol.Util.Collections.SynchronizedDictionary.Keys">
            <summary>
            Get a collection containing the keys in this dictionary.
            </summary>
            <value>
            A collection of the keys in this dictionary.
            </value>
        </member>
        <member name="P:Tangosol.Util.Collections.SynchronizedDictionary.Values">
            <summary>
            Get a collection containing the values in this dictionary.
            </summary>
            <value>
            A collection of the values in this dictionary.
            </value>
        </member>
        <member name="P:Tangosol.Util.Collections.SynchronizedDictionary.IsReadOnly">
            <summary>
            Get a value indicating whether this dictionary is read-only.
            </summary>
            <value>
            <b>true</b> if this dictionary is read-only,
            <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Util.Collections.SynchronizedDictionary.IsFixedSize">
            <summary>
            Get a value indicating whether this dictionary has a fixed size.
            </summary>
            <value>
            <b>true</b> if this dictionary has a fixed size,
            <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Util.Collections.SynchronizedDictionary.Count">
            <summary>
            Gets the number of key/value pairs in this dictionary.
            </summary>
            <value>
            The number of key/value pairs in this dictionary.
            </value>
        </member>
        <member name="P:Tangosol.Util.Collections.SynchronizedDictionary.IsSynchronized">
            <summary>
            Gets a value indicating whether access to this dictionary
            is thread-safe.
            </summary>
            <value>
            Always <b>true</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Collections.SynchronizedDictionary.SyncRoot">
            <summary>
            Get an object that can be used to synchronize access to this 
            dictionary.
            </summary>
            <remarks>
            This property is used internally to synchronize mutating 
            operations on this dictionary. 
            <p/>
            You can use it externally to block mutating operations as well, 
            but keep in mind that simply locking this property will not 
            prevent concurrent read operations. If you need to block both read 
            and write operations, use <see cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireWriteLock"/> method
            instead.
            </remarks>
            <value>
            An object that is used to synchronize access to this dictionary.
            </value>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireReadLock"/>
            <seealso cref="M:Tangosol.Util.Collections.SynchronizedDictionary.AcquireWriteLock"/>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.DEFAULT_UNITS">
            <summary>
            By default, the cache size (in units) is infinite.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.DEFAULT_EXPIRE">
            <summary>
            By default, the cache entries never expire.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.DEFAULT_FLUSH">
            <summary>
            By default, expired cache entries are flushed on a minute
            interval.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.DEFAULT_PRUNE">
            <summary>
            By default, when the cache prunes, it reduces its entries by 25%,
            meaning it retains 75% (.75) of its entries.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.#ctor">
            <summary>
            Construct the cache manager.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.#ctor(System.Int32)">
            <summary>
            Construct the cache manager.
            </summary>
            <param name="units">
            The number of units that the cache manager will cache before
            pruning the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the cache manager.
            </summary>
            <param name="units">
            The number of units that the cache manager will cache before
            pruning the cache.
            </param>
            <param name="expiryMillis">
            The number of milliseconds that each cache entry lives before
            being automatically expired.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Construct the cache manager.
            </summary>
            <param name="units">
            The number of units that the cache manager will cache before
            pruning the cache.
            </param>
            <param name="expiryMillis">
            The number of milliseconds that each cache entry lives before
            being automatically expired.
            </param>
            <param name="pruneLevel">
            The percentage of the total number of units that will remain
            after the cache manager prunes the cache (i.e. this is the
            "low water mark" value); this value is in the range 0.0 to 1.0.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.#ctor(System.Int32,System.Int32,Tangosol.Net.Cache.ICacheLoader)">
            <summary>
            Construct the cache manager.
            </summary>
            <param name="units">
            The number of units that the cache manager will cache before
            pruning the cache.
            </param>
            <param name="expiryMillis">
            The number of milliseconds that each cache entry lives before
            being automatically expired.
            </param>
            <param name="loader">
            The <see cref="T:Tangosol.Net.Cache.ICacheLoader"/> or <see cref="T:Tangosol.Net.Cache.ICacheStore"/> to
            use.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.ResetHitStatistics">
            <summary>
            Reset the cache statistics.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.ContainsKey(System.Object)">
            <summary>
            Determines whether the <b>IDictionary</b> object contains an
            element with the specified key.
            </summary>
            <param name="key">
            The key to locate in the <b>IDictionary</b> object.
            </param>
            <returns>
            <b>true</b> if the <b>IDictionary</b> contains an element with
            the key; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.ContainsValue(System.Object)">
            <summary>
            Determines whether the <b>IDictionary</b> object contains an
            element with the specified value.
            </summary>
            <param name="value">
            The value to locate in the <b>IDictionary</b> object.
            </param>
            <returns>
            <b>true</b> if the <b>IDictionary</b> contains an element with
            the value; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.GetEntry(System.Object)">
            <summary>
            Locate an <see cref="T:Tangosol.Net.Cache.LocalCache.Entry"/> in the cache based on its key.
            </summary>
            <param name="key">
            The key object to search for.
            </param>
            <returns>
            The <b>Entry</b> or <c>null</c>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Load(System.Object)">
            <summary>
            Indicates to the cache that the specified key should be loaded
            into the cache, if it is not already in the cache.
            </summary>
            <remarks>
            This provides a means to "pre-load" a single entry into the cache
            using the cache's loader.
            <p/>
            If a valid entry with the specified key already exists in the
            cache, or if the cache does not have a loader, then this method
            has no effect.
            <p/>
            An implementation may perform the load operation asynchronously.
            </remarks>
            <param name="key">
            The key to request to be loaded.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.LoadAll">
            <summary>
            Indicates to the cache that it should load data from its loader
            to fill the cache; this is sometimes referred to as
            "pre-loading" or "warming" a cache.
            </summary>
            <remarks>
            <p/>
            The specific set of data that will be loaded is unspecified.
            The implementation may choose to load all data, some specific
            subset of the data, or no data. An implementation may require
            that the loader implement the IIterableCacheLoader interface in
            order for this method to load any data.
            <p/>
            An implementation may perform the load operation asynchronously.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.LoadAll(System.Collections.ICollection)">
            <summary>
            Indicates to the cache that the specified keys should be loaded
            into the cache, if they are not already in the cache.
            </summary>
            <remarks>
            <p>
            This provides a means to "pre-load" entries into the cache using
            the cache's loader.</p>
            <p>
            The result of this method is defined to be semantically the same
            as the following implementation:</p>
            <pre>
            ICacheLoader loader = CacheLoader;
            if (loader != null &amp;&amp; keys.Count != 0)
            {
                ArrayList requestList = new ArrayList(keys);
                CollectionUtils.RemoveAll(requestList, PeekAll(keys).Keys);
                if (requestList.Count != 0)
                {
                    IDictionary dictionary = loader.LoadAll(requestList);
                    if (dictionary.Count != 0)
                    {
                        CollectionUtils.AddAll(dictionary);
                    }
                }
            }
            </pre>
            </remarks>
            <param name="keys">
            A collection of keys to request to be loaded.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Peek(System.Object)">
            <summary>
            Checks for a valid entry corresponding to the specified key in
            the cache, and returns the corresponding value if it is.
            </summary>
            <remarks>
            If it is not in the cache, returns <c>null</c>, and does not
            attempt to load the value using its cache loader.
            </remarks>
            <param name="key">
            The key to "peek" into the cache for.
            </param>
            <returns>
            The value corresponding to the specified key.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.PeekAll(System.Collections.ICollection)">
             <summary>
             Checks for a valid entry corresponding to each specified key in
             the cache, and places the corresponding value in the returned
             dictionary if it is.
             </summary>
             <remarks>
             For each key that is not in the cache, no entry is placed into
             the returned dictionary. The cache does not attempt to load any
             values using its cache loader.
             <p/>
             The result of this method is defined to be semantically the same
             as the following implementation, without regards to threading
             issues:
             <pre>
             IDictionary dict = new Hashtable();
            
             foreach (object key in keys)
             {
                Object value = Peek(key);
                if (value != null || Contains(key))
                {
                    dict.Add(key, value);
                }
             }
             return dict;
             </pre>
             </remarks>
             <param name="keys">
             A collection of keys to "peek" into the cache for.
             </param>
             <returns>
             An <b>IDictionary</b> of keys that were found in the cache and
             their values.
             </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <b>IDictionary</b> to an <b>Array</b>,
            starting at a particular index.
            </summary>
            <param name="array">
            The one-dimensional <b>Array</b> that is the destination of the
            elements copied from <b>IDictionary</b>.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Contains(System.Object)">
            <summary>
            Determines whether the object contains an element with the
            specified key.
            </summary>
            <returns>
            <b>true</b> if the <see cref="T:Tangosol.Net.Cache.ICache"/> contains an element
            with the key; otherwise, <b>false</b>.
            </returns>
            <param name="key">
            The key to locate in the <b>ICache</b> object.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Clear">
            <summary>
            Removes all elements from the <see cref="T:Tangosol.Net.Cache.ICache"/> object.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            <see cref="T:Tangosol.Net.Cache.ICache"/> object.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the cache.
            </summary>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            <param name="key">
            The object to use as the key of the element to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.GetAll(System.Collections.ICollection)">
            <summary>
            Get the values for all the specified keys, if they are in the
            cache.
            </summary>
            <remarks>
            <p>
            For each key that is in the cache, that key and its corresponding
            value will be placed in the dictionary that is returned by this
            method. The absence of a key in the returned dictionary indicates
            that it was not in the cache, which may imply (for caches that
            can load behind the scenes) that the requested data could not be
            loaded.</p>
            <p>
            The result of this method is defined to be semantically the same
            as the following implementation, without regards to threading
            issues:</p>
            <pre>
            IDictionary dict = new AnyDictionary();
            // could be a Hashtable (but does not have to)
            foreach (object key in colKeys)
            {
                object value = this[key];
                if (value != null || Contains(key))
                {
                    dict[key] = value;
                }
            }
            return dict;
            </pre>
            </remarks>
            <param name="keys">
            A collection of keys that may be in the cache.
            </param>
            <returns>
            A dictionary of keys to values for the specified keys passed in
            <paramref name="keys"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Insert(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            <p>
            Invoking this method is equivalent to the following call:
            <pre>
            Insert(key, value, CacheExpiration.Default);
            </pre></p>
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the dictionary previously associated <c>null</c>
            with the specified key, if the implementation supports
            <c>null</c> values.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Insert(System.Object,System.Object,System.Int64)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            This variation of the <see cref="M:Tangosol.Net.Cache.ICache.Insert(System.Object,System.Object)"/>
            method allows the caller to specify an expiry (or "time to live")
            for the cache entry.
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire,
            also referred to as the entry's "time to live"; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT"/> to use the cache's
            default time-to-live setting; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.NEVER"/> to indicate that the
            cache entry should never expire; this milliseconds value is
            <b>not</b> a date/time value, but the amount of time object will
            be kept in the cache.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c> with
            the specified key, if the implementation supports <c>null</c>
            values.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If the requested expiry is a positive value and the
            implementation does not support expiry of cache entries.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InsertAll(System.Collections.IDictionary)">
            <summary>
            Copies all of the mappings from the specified dictionary to this
            cache (optional operation).
            </summary>
            <remarks>
            These mappings will replace any mappings that this cache had for
            any of the keys currently in the specified dictionary.
            </remarks>
            <param name="dictionary">
            Mappings to be stored in this cache.
             </param>
            <exception cref="T:System.InvalidCastException">
            If the class of a key or value in the specified dictionary
            prevents it from being stored in this cache.
            </exception>
            <exception cref="T:System.NullReferenceException">
            This cache does not permit <c>null</c> keys or values, and the
            specified key or value is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.GetEnumerator">
            <summary>
            Returns an <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> object for the
            <b>ICache</b> instance.
            </summary>
            <returns>An <b>ICacheEnumerator</b> object for the
            <b>ICache</b> instance.</returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.GetCacheEntry(System.Object)">
            <summary>
            Locate a cache entry in the cache based on its key.
            </summary>
            <param name="key">
            The key object to search for.
            </param>
            <returns>
            The entry or null.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Evict(System.Object)">
            <summary>
            Evict a specified key from the cache, as if it had expired from
            the cache.
            </summary>
            <remarks>
            If the key is not in the cache, then the method has no effect.
            </remarks>
            <param name="key">
            The key to evict from the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.EvictAll(System.Collections.ICollection)">
            <summary>
            Evict the specified keys from the cache, as if they had each
            expired from the cache.
            </summary>
            <remarks>
            <p>
            The result of this method is defined to be semantically the same
            as the following implementation:</p>
            <pre>
            foreach (object key in keys)
            {
                Evict(key);
            }
            </pre>
            </remarks>
            <param name="keys">
            A collection of keys to evict from the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Evict">
            <summary>
            Evict all entries from the cache that are no longer valid, and
            potentially prune the cache size if the cache is size-limited
            and its size is above the caching low water mark.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Add a standard cache listener that will receive all events
            (inserts, updates, deletes) that occur against the cache, with
            the key, old-value and new-value included.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            AddCacheListener(listener, (IFilter) null, false);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a standard cache listener that previously signed up for
            all events.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            RemoveCacheListener(listener, (IFilter) null);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object,System.Boolean)">
            <summary>
            Add a cache listener for a specific key.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.OldValue"/> and
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.NewValue"/> properties.</p>
            <p>
            To unregister the ICacheListener, use the
            <see cref="M:Tangosol.Net.Cache.IObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)">
            <summary>
            Remove a cache listener that previously signed up for events
            about a specific key.
            </summary>
            <param name="listener">
            The listener to remove.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Add a cache listener that receives events based on a filter
            evaluation.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the <b>OldValue</b> and <b>NewValue</b>
            properties.</p>
            <p>
            To unregister the <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, use the
            <see cref="M:Tangosol.Net.Cache.IObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.</param>
            <param name="filter">
            A filter that will be passed <b>CacheEventArgs</b> objects to
            select from; a <b>CacheEventArgs</b> will be delivered to the
            listener only if the filter evaluates to <b>true</b> for that
            <b>CacheEventArgs</b>; <c>null</c> is equivalent to a filter
            that alway returns <b>true</b>.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)">
            <summary>
            Remove a cache listener that previously signed up for events
            based on a filter evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="filter">
            A filter used to evaluate events; <c>null</c> is equivalent to a
            filter that alway returns <b>true</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InstantiateLock(System.Object)">
            <summary>
            Factory pattern.
            </summary>
            <returns>
            A new instance of the Lock class (or a subclass thereof).
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Lock(System.Object,System.Int64)">
            <summary>
            Attempt to lock the specified item within the specified period of
            time.
            </summary>
            <remarks>
            <p>
            The item doesn't have to exist to be <i>locked</i>. While the
            item is locked there is known to be a <i>lock holder</i> which
            has an exclusive right to modify (calling put and remove methods)
            that item.</p>
            <p>
            Lock holder is an abstract concept that depends on the
            IConcurrentCache implementation. For example, holder could
            be a cluster member or a thread (or both).</p>
            <p>
            Locking strategy may vary for concrete implementations as well.
            Lock could have an expiration time (this lock is sometimes called
            a "lease") or be held indefinitely (until the lock holder
            terminates).</p>
            <p>
            Some implementations may allow the entire cache to be locked. If
            the cache is locked in such a way, then only a lock holder is
            allowed to perform any of the "put" or "remove" operations.</p>
            <p>
            Pass the special constant
            <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> as the <i>key</i>
            parameter to indicate the cache lock.</p>
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <param name="waitTimeMillis">
            The number of milliseconds to continue trying to obtain a lock;
            pass zero to return immediately; pass -1 to block the calling
            thread until the lock could be obtained.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked within the
            specified time; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Lock(System.Object)">
            <summary>
            Attempt to lock the specified item and return immediately.
            </summary>
            <remarks>
            This method behaves exactly as if it simply performs the call
            <b>Lock(key, 0)</b>.
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Unlock(System.Object)">
            <summary>
            Unlock the specified item.
            </summary>
            <remarks>
            The item doesn't have to exist to be <i>unlocked</i>.
            If the item is currently locked, only the <i>holder</i> of the
            lock could successfully unlock it.
            </remarks>
            <param name="key">
            Key being unlocked.
            </param>
            <returns>
            <b>true</b> if the item was successfully unlocked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.GetKeys(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the keys contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of keys for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.GetValues(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of the values for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.GetValues(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            It is guaranteed that enumerator will traverse the array in such
            a way that the values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.GetEntries(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.GetEntries(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            <p>
            It is guaranteed that enumerator will traverse the array in such
            a way that the entry values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.AddIndex(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer)">
            <summary>
            Add an index to this IQueryCache.
            </summary>
            <remarks>
            This allows to correlate values stored in this
            <i>indexed cache</i> (or attributes of those values) to the
            corresponding keys in the indexed dictionary and increase the
            performance of <b>GetKeys</b> and <b>GetEntries</b> methods.
            </remarks>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the indexed
            cache. Must not be <c>null</c>.
            </param>
            <param name="isOrdered">
            <b>true</b> if the contents of the indexed information should be
            ordered; <b>false</b> otherwise.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on entries
            in the indexed cache; or <c>null</c> if the entries' values
            natural ordering should be used.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.RemoveIndex(Tangosol.Util.IValueExtractor)">
            <summary>
            Remove an index from this IQueryCache.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.EnsureIndexMap">
            <summary>
            Obtain the IDictionary of indexes maintained by this cache. 
            </summary>
            <returns>
            The IDictionary of indexes maintained by this cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Invoke(System.Object,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the entry
            specified by the passed key, returning the result of the
            invocation.
            </summary>
            <param name="key">
            The key to process; it is not required to exist within the
            dictionary.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified key.
            </param>
            <returns>
            The result of the invocation as returned from the
            <b>IEntryProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InvokeAll(System.Collections.ICollection,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entries specified by the passed keys, returning the result of the
            invocation for each.
            </summary>
            <param name="keys">
            The keys to process; these keys are not required to exist within
            the dictionary.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against each of the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InvokeAll(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the set
            of entries that are selected by the given <see cref="T:Tangosol.Util.IFilter"/>,
            returning the result of the invocation for each.
            </summary>
            <remarks>
            <p>
            Unless specified otherwise, IInvocableCache implementations
            will perform this operation in two steps: (1) use the filter to
            retrieve a matching entry collection; (2) apply the agent to
            every filtered entry. This algorithm assumes that the agent's
            processing does not affect the result of the specified filter
            evaluation, since the filtering and processing could be
            performed in parallel on different threads.</p>
            <p>
            If this assumption does not hold, the processor logic has to be
            idempotent, or at least re-evaluate the filter. This could be
            easily accomplished by wrapping the processor with the
            <see cref="T:Tangosol.Util.Processor.ConditionalProcessor"/>.</p>
            </remarks>
            <param name="filter">
            An <see cref="T:Tangosol.Util.IFilter"/> that results in the collection of keys to
            be processed.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> to use to process the specified
            keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against the keys that are selected by the
            given <b>IFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Aggregate(System.Collections.ICollection,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the entries specified by
            the passed keys.
            </summary>
            <param name="keys">
            The collection of keys that specify the entries within this cache
            to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the specified entries of this dictionary.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Aggregate(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the collection of
            entries that are selected by the given <b>IFilter</b>.
            </summary>
            <param name="filter">
            an <see cref="T:Tangosol.Util.IFilter"/> that is used to select entries within
            this cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the selected entries of this dictionary.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.CreateEntry(System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="key">
            Entry key.
            </param>
            <param name="value">
            Entry value.
            </param>
            <returns>
            <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> instance.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.AddInternal(System.Object,System.Object)">
            <summary>
            Add new cache entry and raise Inserted event if necessary.
            </summary>
            <remarks>
            This method should only be called while holding the write lock.
            </remarks>
            <param name="key">Key to add.</param>
            <param name="value">Value to add.</param>
            <returns>Added entry.</returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.GetEntryInternal(System.Object)">
            <summary>
            Locate an <see cref="T:Tangosol.Net.Cache.LocalCache.Entry"/> in the cache based on its key.
            </summary>
            <remarks>
            <p>
            If the <b>Entry</b> has expired, it is removed from the cache.
            </p>
            <p>
            Unlike the <see cref="M:Tangosol.Net.Cache.LocalCache.GetEntry(System.Object)"/> method, this method does not
            flush the cache (if necessary) or update cache statistics.
            </p>
            <p>
            This method should only be called while holding the write lock.
            </p>
            </remarks>
            <param name="key">
            The key object to search for.
            </param>
            <returns>
            The <b>Entry</b> or <c>null</c> if the entry is not found in the
            cache or has expired.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.PeekEntryInternal(System.Object)">
            <summary>
            Locate an <see cref="T:Tangosol.Net.Cache.LocalCache.Entry"/> in the cache based on its key.
            </summary>
            <remarks>
            <p>
            Unlike the <see cref="M:Tangosol.Net.Cache.LocalCache.GetEntryInternal(System.Object)"/> method, this method does
            not remove expired entries from the cache.</p>p
            <p>
            This method should only be called while holding a read or write
            lock.
            </p>
            </remarks>
            <param name="key">
            The key object to search for.
            </param>
            <returns>
            The <b>Entry</b> or <c>null</c> if the entry is not found in the
            cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.RemoveInternal(Tangosol.Net.Cache.LocalCache.Entry,System.Boolean)">
            <summary>
            Remove an entry.
            </summary>
            <remarks>
            This method should only be called while holding the write lock.
            </remarks>
            <param name="entry">
            The expired cache entry.
            </param>
            <param name="removeInternal">
            <b>true</b> if the cache entry still needs to be removed from the
            cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.RemoveExpired(Tangosol.Net.Cache.LocalCache.Entry,System.Boolean)">
            <summary>
            Remove an entry because it has expired.
            </summary>
            <remarks>
            This method should only be called while holding the write lock.
            </remarks>
            <param name="entry">
            The expired cache entry.
            </param>
            <param name="removeInternal">
            <b>true</b> if the cache entry still needs to be removed from the
            cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.CheckSize">
            <summary>
            Check if the cache is too big, and if it is prune it by
            discarding the lowest priority cache entries.
            </summary>
            <remarks>
            This method should only be called while holding the write lock.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.IsFlushRequired">
            <summary>
            Check if the cache needs to be flushed.
            </summary>
            <remarks>
            This method should only be called while holding a read or write 
            lock.
            </remarks>
            <returns>
            <b>true</b> if it is time to flush the cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.CheckFlush">
            <summary>
            Flush the cache if it needs to be flushed.
            </summary>
            <remarks>
            This method should only be called while holding the write lock.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Prune">
            <summary>
            Prune the cache by discarding the lowest priority cache entries.
            </summary>
            <remarks>
            This method should only be called while holding the write lock.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.ScheduleFlush">
            <summary>
            Schedule the next flush.
            </summary>
            <remarks>
            This method should only be called while holding the write lock.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.AdjustUnits(System.Int32)">
            <summary>
            Adjust current size.
            </summary>
            <remarks>
            This method should only be called while holding the write lock.
            </remarks>
            <param name="delta">
            Value that current size should be adjusted by.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.HasListeners">
            <summary>
            Determine if the <b>LocalCache</b> has any listeners at all.
            </summary>
            <remarks>
            This method should only be called while holding the read or write
            lock.
            </remarks>
            <returns>
            <b>true</b> if this <b>LocalCache</b> has at least one
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.DispatchEvent(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Dispatch the passed event.
            </summary>
            <remarks>
            This method should only be called while holding the read lock.
            </remarks>
            <param name="evt">
            A <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> object.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InstantiateCacheEvent(Tangosol.Net.Cache.CacheEventType,System.Object,System.Object,System.Object)">
            <summary>
            Factory pattern: instantiate a new <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            corresponding to the specified parameters.
            </summary>
            <param name="type">
            This event's type, one of <see cref="T:Tangosol.Net.Cache.CacheEventType"/>
            values.
            </param>
            <param name="key">
            The key into the cache.
            </param>
            <param name="valueOld">
            The old value (for update and delete events).
            </param>
            <param name="valueNew">
            The new value (for insert and update events).
            </param>
            <returns>
            A new instance of the <b>CacheEventArgs</b> class (or a
            subclass thereof).
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InstantiateInternalListener">
            <summary>
            Factory pattern: Instantiate an internal
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to listen to this cache and report
            changes to the <see cref="T:Tangosol.Net.Cache.ICacheStore"/>.
            </summary>
            <returns>
            A new <b>ICacheListener</b> instance.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.ConfigureEviction(Tangosol.Net.Cache.LocalCache.EvictionPolicyType,Tangosol.Net.Cache.IEvictionPolicy)">
            <summary>
            Configure the eviction type and policy.
            </summary>
            <remarks>
            This method should only be called while holding the write lock.
            </remarks>
            <param name="type">
            One of the <see cref="T:Tangosol.Net.Cache.LocalCache.EvictionPolicyType"/> enum values.
            </param>
            <param name="policy">
            An external eviction policy, or <c>null</c>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.ConfigureUnitCalculator(Tangosol.Net.Cache.LocalCache.UnitCalculatorType,Tangosol.Net.Cache.IUnitCalculator)">
            <summary>
            Configure the unit calculator type and implementation.
            </summary>
            <remarks>
            This method should only be called while holding the write lock.
            </remarks>
            <param name="type">
            One of the <see cref="T:Tangosol.Net.Cache.LocalCache.UnitCalculatorType"/> enum values.
            </param>
            <param name="calculator">
            An external unit calculator, or <c>null</c>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.EnsureEntry(System.Object)">
            <summary>
            Create a <see cref="T:Tangosol.Net.Cache.LocalCache.Entry"/> object for the specified key.
            </summary>
            <param name="key">
            The key to create an entry for; the key is not required to exist
            within the cache.
            </param>
            <returns>
            A <b>Entry</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.EnsureEntryCollection(System.Collections.ICollection)">
            <summary>
            Create an array of <see cref="T:Tangosol.Net.Cache.LocalCache.Entry"/> objects for the specified
            <see cref="T:Tangosol.Net.Cache.ICache"/> and the keys collection.
            </summary>
            <param name="keys">
            Collection of keys to create entries for; these keys are not
            required to exist within the cache.
            </param>
            <returns>
            An array of <b>Entry</b> objects.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.ToString">
            <summary>
            Returns a string representation of this LocalCache object.
            </summary>
            <returns>
            A string representation of this LocalCache object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InstantiateCacheEnumerator(Tangosol.Net.Cache.LocalCache,Tangosol.Net.Cache.LocalCache.EnumeratorMode)">
            <summary>
            Factory method for cache enumerator.
            </summary>
            <param name="cache">Cache to enumerate.</param>
            <param name="mode">Enumerator mode.</param>
            <returns>Cache enumerator.</returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InstantiateEntriesCollection(Tangosol.Net.Cache.LocalCache)">
            <summary>
            Factory method that creates virtual collection of cache entries.
            </summary>
            <param name="cache">
            Cache to create entries collection for.
            </param>
            <returns>
            Virtual collection of cache entries.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InstantiateKeysCollection(Tangosol.Net.Cache.LocalCache)">
            <summary>
            Factory method that creates virtual collection of cache keys.
            </summary>
            <param name="cache">
            Cache to create keys collection for.
            </param>
            <returns>
            Virtual collection of cache keys.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InstantiateValuesCollection(Tangosol.Net.Cache.LocalCache)">
            <summary>
            Factory method that creates virtual collection of cache values.
            </summary>
            <param name="cache">
            Cache to create values collection for.
            </param>
            <returns>
            Virtual collection of cache values.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.DEFAULT_KEY_MASK">
            <summary>
            The default key mask that ignores nothing.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_listener">
            <summary>
            The cache listener used by this cache to listen to itself in
            order to pass events to the ICacheStore.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_loader">
            <summary>
            The loader used by this cache for misses.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_store">
            <summary>
            The store used by this cache for modifications.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_indexMap">
            <summary>
            The IDictionary of indexes maintaned by this cache. The keys are
            IValueExtractor objects, and for each key, the corresponding value
            stored in the IDictionary is a MapIndex object.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_curUnits">
            <summary>
            The current number of units in the cache.
            </summary>
            <remarks>
            A unit is an undefined means of measuring cached values, and
            must be 0 or positive. The particular <see cref="T:Tangosol.Net.Cache.LocalCache.Entry"/>
            implementation being used defines the meaning of unit.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_maxUnits">
            <summary>
            The number of units to allow the cache to grow to before pruning.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_pruneUnits">
            <summary>
            The number of units to prune the cache down to.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_pruneLevel">
            <summary>
            The percentage of the total number of units that will remain
            after the cache manager prunes the cache; this value is in the
            range 0.0 to 1.0.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_expiryDelay">
            <summary>
            The number of milliseconds that a value will live in the cache.
            </summary>
            <remarks>
            Zero indicates no timeout.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_flushDelay">
            <summary>
            The interval between full cache flushes, in milliseconds.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_nextFlush">
            <summary>
            The time at which the next full cache flush should occur.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_stats">
            <summary>
            The <see cref="P:Tangosol.Net.Cache.LocalCache.CacheStatistics"/> object maintained by this
            cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_listenerSupport">
            <summary>
            The <see cref="T:Tangosol.Net.Cache.Support.CacheListenerSupport"/> object.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_evictionType">
            <summary>
            The type of eviction policy employed by the cache; one of the
            EvictionPolicyType enum values.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_policy">
            <summary>
            The external eviction policy.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_calculatorType">
            <summary>
            The type of unit calculator employed by the cache; one of the
            UnitCalculatorType enum values.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_calculator">
            <summary>
            The external unit calculator.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_lastPrune">
            <summary>
            The last time that a prune was run. This value is used by the
            hybrid eviction policy.
            </summary>
            <since>Coherence 3.5</since>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_avgTouch">
            <summary>
            For a prune cycle, this value is the average number of touches
            that an entry should have. This value is used by the hybrid
            eviction policy.
            </summary>
            <since>Coherence 3.5</since>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_ignore">
            <summary>
            The thread-local object to check for keys that the current thread
            is supposed to ignore if those keys change.
            </summary>
            <remarks>
            Contains <b>KeyMask</b> objects.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_mapLock">
            <summary>
            The map containing all the locks.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_gateMap">
            <summary>
            The Gate object for the entire cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_colEntries">
            <summary>
            The collection of entries in this cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_colKeys">
            <summary>
            The collection of keys in this cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.m_colValues">
            <summary>
            The collection of values in this cache.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.EvictionType">
            <summary>
            Gets or sets the current eviction type.
            </summary>
            <remarks>
            The type can only be set to an external policy if an
            <see cref="T:Tangosol.Net.Cache.IEvictionPolicy"/> object has been provided.
            </remarks>
            <value>
            One of the <b>EvictionPolicyType</b> enum values.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.PruneLevel">
            <summary>
            The percentage of the total number of units that will remain
            after the cache manager prunes the cache.
            </summary>
            <value>
            The value in the range 0.0 to 1.0.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CacheStatistics">
            <summary>
            Gets the <see cref="T:Tangosol.Net.Cache.ICacheStatistics"/> for this cache.
            </summary>
            <value>
            An <b>ICacheStatistics</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CalculatorType">
            <summary>
            Gets or sets the current unit calculator type for the cache.
            </summary>
            <remarks>
            The type can only be set to an external unit calculator if a
            <see cref="P:Tangosol.Net.Cache.LocalCache.UnitCalculator"/> object has been provided.
            </remarks>
            <value>
            One of the <see cref="T:Tangosol.Net.Cache.LocalCache.UnitCalculatorType"/> enum values.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.FlushTime">
            <summary>
            Gets or sets the date/time offset in milliseconds at which the
            next cache flush is scheduled.
            </summary>
            <remarks>
            Note that the date/time may be long.MaxValue, which implies that
            a flush will never occur. Also note that the cache may internally
            adjust the flush time to prevent a flush from occurring during
            certain processing as a means to raise concurrency.
            </remarks>
            <value>
            The date/time offset in milliseconds at which the next cache
            flush is scheduled.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CacheHits">
            <summary>
            Gets the rough number of cache hits since the cache statistics
            were last reset.
            </summary>
            <value>
            The number of <see cref="P:Tangosol.Net.Cache.LocalCache.Item(System.Object)"/> calls that have been
            served by existing cache entries.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CacheMisses">
            <summary>
            Gets the rough number of cache misses since the cache statistics
            were last reset.
            </summary>
            <value>
            The number of <see cref="P:Tangosol.Net.Cache.LocalCache.Item(System.Object)"/> calls that failed to
            find an existing cache entry because the requested key was not in
            the cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.HitProbability">
            <summary>
            Gets the rough probability (0 &lt;= p &lt;= 1) that any
            particular "get" invocation will be satisfied by an existing
            entry in the cache, based on the statistics collected since the
            last reset of the cache statistics.
            </summary>
            <value>
            The cache hit probability (0 &lt;= p &lt;= 1).
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CacheLoader">
            <summary>
            Gets or sets the loader used by this <b>LocalCache</b>.
            </summary>
            <value>
            An <b>ICacheLoader</b> instance.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Storage">
            <summary>
            Get underlying cache storage.
            </summary>
            <remarks>
            This property should only be used while holding a read or write
            lock, depending on the operation that needs to be performed against
            the underlying storage.
            </remarks>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CacheStore">
            <summary>
            Determine the store used by this <b>LocalCache</b>, if any.
            </summary>
            <value>
            The <see cref="T:Tangosol.Net.Cache.ICacheStore"/> used by this <b>LocalCache</b>,
            or <c>null</c> if none.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.IndexMap">
            <summary>
            The index IDictionary used by this <b>LocalCache</b>.
            </summary>
            <value>
            The <see cref="T:System.Collections.IDictionary"/> used by this <b>LocalCache</b>,
            or <c>null</c> if none.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CurrentKeyMask">
            <summary>
            Gets or sets the current key mask for the current thread.
            </summary>
            <value>
            The current key mask.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Count">
            <summary>
            Gets the number of elements contained in the
            <see cref="T:Tangosol.Net.Cache.ICache"/>.
            </summary>
            <value>
            The number of elements contained in the <b>ICache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <value>
            The element with the specified key.
            </value>
            <param name="key">
            The key of the element to get or set.
            </param>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Keys">
            <summary>
            Get the keys collection.
            </summary>
            <value>
            The keys collection.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Values">
            <summary>
            Get the values collection.
            </summary>
            <value>
            The values collection.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Entries">
            <summary>
            Get a collection of <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> instances
            within the cache.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Units">
            <summary>
            Gets the number of units that the cache currently stores.
            </summary>
            <value>
            The number of units that the cache currently stores.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.LowUnits">
            <summary>
            Gets or sets the point to which the cache will shrink when it
            prunes.
            </summary>
            <remarks>
            This is often referred to as a "low water mark" of the cache.
            </remarks>
            <value>
            The number of units that the cache prunes to.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.HighUnits">
            <summary>
            Gets or sets the limit of the cache size in units.
            </summary>
            <remarks>
            The cache will prune itself automatically once it reaches
            its maximum unit level. This is often referred to as the
            "high water mark" of the cache.
            </remarks>
            <value>
            The limit of the cache size in units.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.ExpiryDelay">
            <summary>
            Gets or sets the "time to live" for each individual cache entry.
            </summary>
            <remarks>
            This does not affect the already-scheduled expiry of existing
            entries.
            </remarks>
            <value>
            The number of milliseconds that a cache entry value will live,
            or zero if cache entries are never automatically expired.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.FlushDelay">
            <summary>
            Gets or sets the delay between cache flushes.
            </summary>
            <value>
            The number of milliseconds between cache flushes, or zero which
            signifies that the cache never flushes
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.UnitCalculator">
            <summary>
            Gets or sets the current external unit calculator, if any.
            </summary>
            <remarks>
            If <c>null</c> is passed, clear the external unit calculator,
            and use the default unit calculator.
            </remarks>
            <value>
            The external unit calculator, if one has been provided.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.EvictionPolicy">
            <summary>
            Determine the current external eviction policy, if any.
            </summary>
            <remarks>
            If <c>null</c> is passed, clear the external eviction policy, and
            use the default internal policy.
            </remarks>
            <value>
            The external eviction policy, if one has been provided.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.Entry">
            <summary>
            A holder for a cached value.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.SetValue(System.Object,System.Boolean)">
            <summary>
            Store the value corresponding to this entry.
            </summary>
            <remarks>
            <p>
            If the entry does not exist, then the entry will be created by
            invoking this method, even with a <c>null</c> value (assuming the
            cache supports <c>null</c> values).</p>
            <p>
            Unlike the property <see cref="P:Tangosol.Net.Cache.LocalCache.Entry.Value"/>, this method does not
            return the previous value, and as a result may be significantly
            less expensive (in terms of cost of execution) for certain
            cache implementations.</p>
            </remarks>
            <param name="value">
            The new value for this entry.
            </param>
            <param name="isSynthetic">
            Pass <b>true</b> only if the insertion into or modification of
            the cache should be treated as a synthetic event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.Extract(Tangosol.Util.IValueExtractor)">
            <summary>
            Extract a value out of the entry's value.
            </summary>
            <remarks>
            Calling this method is semantically equivalent to
            <b>extractor.Extract(entry.Value)</b>, but this method may be
            significantly less expensive because the resultant value may be
            obtained from a forward index, for example.
            </remarks>
            <param name="extractor">
            An <see cref="T:Tangosol.Util.IValueExtractor"/> to apply to the entry's value
            </param>
            <returns>
            The extracted value.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.Update(Tangosol.Util.IValueUpdater,System.Object)">
            <summary>
            Update the entry's value.
            </summary>
            <remarks>
            Calling this method is semantically equivalent to:
            <pre>
            object target = entry.Value;
            updater.Update(target, value);
            entry.Value = target;
            </pre>
            The benefit of using this method is that it may allow the entry
            implementation to significantly optimize the operation, such as
            for purposes of delta updates and backup maintenance.
            </remarks>
            <param name="updater">
            An <see cref="T:Tangosol.Util.IValueUpdater"/> used to modify the entry's value.
            </param>
            <param name="value">
            Value to update target object to.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.Remove(System.Boolean)">
            <summary>
            Remove this entry from the cache if it is present in the cache.
            </summary>
            <remarks>
            <p>
            This method supports both the operation corresponding to
            <b>IDictionary.Remove</b> as well as synthetic operations such as
            eviction. If the containing cache does not differentiate between
            the two, then this method will always be identical to
            <tt>IInvocableCache.Remove(Key)</tt>.</p>
            </remarks>
            <param name="isSynthetic">
            Pass <b>true</b> only if the removal from the dictionary should
            be treated as a synthetic event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.ResetTouchCount">
            <summary>
            Reset the number of times that the cache entry has been
            touched.
            </summary>
            <remarks>
            The touch count does not get reset to zero, but rather to
            a fraction of its former self; this prevents long lived items
            from gaining an unasailable advantage in the eviction
            process.
            </remarks>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.#ctor(Tangosol.Net.Cache.LocalCache,System.Object,System.Object)">
            <summary>
            Construct the cacheable entry that holds the cached value.
            </summary>
            <param name="localCache">
            The local cache for this entry.
            </param>
            <param name="key">
            The key of this entry.
            </param>
            <param name="value">
            The value of this entry.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.Touch">
            <summary>
            Called each time the entry is accessed or modified.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.ScheduleExpiry">
            <summary>
            Reschedule the cache entry expiration.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.Discard">
            <summary>
            Called to inform the Entry that it is no longer used.
            </summary>
            <remarks>
            This method should only be called while holding the LocalCache
            write lock.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.CalculateUnits(System.Object)">
            <summary>
            Calculate a cache cost for the specified object.
            </summary>
            <remarks>
            The default implementation uses the unit calculator type of
            the containing cache.
            </remarks>
            <param name="value">
            The cache value to evaluate for unit cost.
            </param>
            <returns>
            An integer value 0 or greater, with a larger value signifying
            a higher cost.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.IndexOfMSB(System.Int32)">
            <summary>
            Determine the most significant bit of the passed integral
             value.
            </summary>
            <param name="n">
            An int.
            </param>
            <returns>
            -1 if no bits are set; otherwise, the bit position
            <tt>p</tt> of the most significant bit such that
            <tt>1 &lt;&lt; p</tt> is the most significant bit
            of <tt>n</tt>
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.ToString">
            <summary>
            Render the cache entry as a string.
            </summary>
            <returns>
            The details about this Entry.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.op_Implicit(Tangosol.Net.Cache.LocalCache.Entry)~System.Collections.DictionaryEntry">
            <summary>
            Converts Entry to <b>DictionaryEntry</b>.
            </summary>
            <param name="entry">
            Entry instance.
            </param>
            <returns>
            <b>DictionaryEntry</b> with key and value extracted from
            the specified Entry.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.Entry.op_Implicit(Tangosol.Net.Cache.LocalCache.Entry)~Tangosol.Net.Cache.CacheEntry">
            <summary>
            Converts Entry to <b>CacheEntry</b>.
            </summary>
            <param name="entry">
            Entry instance.
            </param>
            <returns>
            <b>CacheEntry</b> with key and value extracted from
            the specified Entry.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.Entry.m_cache">
            <summary>
            Parent cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.Entry.m_key">
            <summary>
            Entry's key.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.Entry.m_value">
            <summary>
            Entry's value.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.Entry.m_created">
            <summary>
            The time at which this Entry was created.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.Entry.m_lastUse">
            <summary>
            The time at which this Entry was last accessed.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.Entry.m_expiry">
            <summary>
            The time at which this Entry will (or did) expire.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.Entry.m_uses">
            <summary>
            The number of times that this Entry has been accessed.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.Entry.m_units">
            <summary>
            The number of units for the Entry.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Entry.Cache">
            <summary>
            Parent cache.
            </summary>
            <value>
            Parent cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Entry.Key">
            <summary>
            Gets the key corresponding to this entry.
            </summary>
            <value>
            The key corresponding to this entry; may be <c>null</c> if the
            underlying dictionary supports <c>null</c> keys.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Entry.Value">
            <summary>
            Gets or sets the value corresponding to this entry.
            </summary>
            <value>
            The value corresponding to this entry; may be <c>null</c> if the
            value is <c>null</c> or if the entry does not exist in the
            cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Entry.IsPresent">
            <summary>
            Determine if this entry exists in the cache.
            </summary>
            <remarks>
            If the entry is not present, it can be created by setting the
            <see cref="P:Tangosol.Net.Cache.LocalCache.Entry.Value"/> property. If the entry is present,
            it can be destroyed by calling <see cref="M:Tangosol.Net.Cache.LocalCache.Entry.Remove(System.Boolean)"/>.
            </remarks>
            <value>
            <b>true</b> if this entry exists in the containing cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Entry.CreatedMillis">
            <summary>
            Determine when the cache entry was created.
            </summary>
            <value>
            The date/time value, in millis, when the entry was created.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Entry.ExpiryMillis">
            <summary>
            Determine when the cache entry will expire, if ever.
            </summary>
            <remarks>
            Note that if the cache is configured for automatic expiry,
            each subsequent update to this cache entry will reschedule
            the expiry time.
            </remarks>
            <value>
            The date/time value, in millis, when the entry will (or did)
            expire; zero indicates no expiry.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Entry.LastTouchMillis">
            <summary>
            Determine when the cache entry was last touched.
            </summary>
            <value>
            The date/time value, in millis, when the entry was most
            recently touched.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Entry.Priority">
            <summary>
            Calculate a cache priority.
            </summary>
            <value>
            A value between 0 and 10, 0 being the highest priority.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Entry.TouchCount">
            <summary>
            Determine the number of times that the cache entry has been
            touched.
            </summary>
            <value>
            The number of times that the cache entry has been touched.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Entry.Units">
            <summary>
            Determine the number of cache units used by this Entry.
            </summary>
            <value>
            An integer value 0 or greater, with a larger value
            signifying a higher cost; -1 implies that the Entry
            has been discarded.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Entry.IsDiscarded">
            <summary>
            Determine if this entry has already been discarded from the
            cache.
            </summary>
            <value>
            <b>true</b> if this entry has been discarded.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.Entry.IsExpired">
            <summary>
            Determine if the cache entry has expired.
            </summary>
            <value>
            <b>true</b> if the cache entry was subject to automatic
            expiry and the current time is greater than the entry's
            expiry time.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.EnumeratorMode">
            <summary>
            Enumerator mode.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.EnumeratorMode.Entries">
            <summary>
            Enumerate entries.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.EnumeratorMode.Keys">
            <summary>
            Enumerate keys.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.EnumeratorMode.Values">
            <summary>
            Enumerate values.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.LocalCacheEnumerator">
            <summary>
            <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> implementation.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.LocalCacheEnumerator.#ctor(Tangosol.Net.Cache.LocalCache,Tangosol.Net.Cache.LocalCache.EnumeratorMode)">
            <summary>
            Creates an instance of cache enumerator.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.LocalCacheEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the
            collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to
            the next element; <b>false</b> if the enumerator has passed
            the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.LocalCacheEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.LocalCacheEnumerator.m_enumerator">
            <summary>
            The key enumerator of the SynchronizedCache this enumerator 
            enumerates over.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.LocalCacheEnumerator.m_mode">
            <summary>
            Enumerator mode, determines what will be returned by the 
            Current property.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.LocalCacheEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current cache entry.
            </summary>
            <value>
            An <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> containing both the key and
            the value of the current cache entry.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry
            of the cache or after the last entry.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.LocalCacheEnumerator.Key">
            <summary>
            Gets the key of the current cache entry.
            </summary>
            <returns>
            The key of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry
            of the cache or after the last entry.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.LocalCacheEnumerator.Value">
            <summary>
            Gets the value of the current cache entry.
            </summary>
            <returns>
            The value of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry
            of the cache or after the last entry.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.LocalCacheEnumerator.System#Collections#IDictionaryEnumerator#Entry">
            <summary>
            Gets both the key and the value of the current dictionary
            entry.
            </summary>
            <returns>
            A <b>DictionaryEntry</b> containing both the key and the
            value of the current dictionary entry.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry of the
            cache or after the last entry.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.LocalCacheEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the
            collection or after the last element.
            </exception>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.EntriesCollection">
            <summary>
            Internal entries collection.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.KeysCollection">
            <summary>
            Internal keys collection.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.ValuesCollection">
            <summary>
            Internal values collection.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.KeyMask">
            <summary>
            A class that masks certain changes so that they are not
            reported back to the <see cref="T:Tangosol.Net.Cache.ICacheStore"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.KeyMask.IsIgnored(System.Object)">
            <summary>
            Check if a key should be ignored.
            </summary>
            <param name="key">
            The key that a change event has occurred for.
            </param>
            <returns>
            <b>true</b> if change events for the key should be ignored.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.KeyMask.EnsureSynthetic">
            <summary>
            Ensure that the synthetic operation flag is set.
            </summary>
            <returns>
            The previous value of the flag.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.KeyMask.IsSynthetic">
            <summary>
            Check whether or not the currently performed operation is
            internally initiated.
            </summary>
            <value>
            <b>true</b> if the the current operation is internal.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.DefaultKeyMask">
            <summary>
            KeyMask implementation that ignores nothing.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.DefaultKeyMask.IsSynthetic">
            <summary>
            Check whether or not the currently performed operation is
            internally initiated.
            </summary>
            <value>
            <b>true</b> if the current operation is internal.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.LoadAllKeyMask">
            <summary>
            KeyMask implementation used in LoadAll().
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.LoadAllKeyMask.#ctor(System.Collections.ICollection)">
            <summary>
            Create a new LoadAllKeyMask that will mask events associated
            with any of the given keys.
            </summary>
            <param name="keys">
            The collection of keys for which events should be ignored.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.LoadAllKeyMask.IsIgnored(System.Object)">
            <summary>
            Check if a key should be ignored.
            </summary>
            <param name="key">
            The key that a change event has occurred for.
            </param>
            <returns>
            <b>true</b> if change events for the key should be ignored.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.LoadAllKeyMask.m_keys">
            <summary>
            The collection of keys for which events should be ignored.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.LoadKeyMask">
            <summary>
            KeyMask implementation used in Load().
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.LoadKeyMask.#ctor(System.Object)">
            <summary>
            Create a new LoadKeyMask that will mask events associated with
            the specified key.
            </summary>
            <param name="key">
            The key for which events should be ignored.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.LoadKeyMask.IsIgnored(System.Object)">
            <summary>
            Check if a key should be ignored.
            </summary>
            <param name="key">
            The key that a change event has occurred for.
            </param>
            <returns>
            <b>true</b> if change events for the key should be ignored.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.LoadKeyMask.m_key">
            <summary>
            The key for which events should be ignored.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.InternalListener">
            <summary>
            An internal <see cref="T:Tangosol.Net.Cache.ICacheListener"/> that listens to this
            cache and reports changes to the <see cref="T:Tangosol.Net.Cache.ICacheStore"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InternalListener.#ctor(Tangosol.Net.Cache.LocalCache)">
            <summary>
            Parametrized constructor.
            </summary>
            <param name="parentCache">
            Parent LocalCache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InternalListener.EntryInserted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InternalListener.EntryUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been updated.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the update
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InternalListener.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.InternalListener.OnModify(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            A value modification event (insert or update) has occurred.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> object.
            </param>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.CacheLock">
            <summary>
            A lock object.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.CacheLock.#ctor">
            <summary>
            Construct a new <b>Lock</b> object.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.CacheLock.Assign(System.Int64)">
            <summary>
            Assign the ownership of this <b>Lock</b> to the calling
            thread.
            </summary>
            <remarks>
            <p />
            Note: caller of this method is expected to hold a
            synchronization monitor for the <b>Lock</b> object while
            making this call.
            </remarks>
            <param name="waitMillis">
            The number of milliseconds to continue trying to obtain
            a lock; pass zero to return immediately; pass -1 to block
            the calling thread until the lock could be obtained.
            </param>
            <returns>
            <b>true</b> if lock was successful; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.CacheLock.WaitForNotify(System.Int64)">
            <summary>
            Wait for a <b>Lock</b> release notification.
            </summary>
            <remarks>
            <p>
            Note: caller of this method is expected to hold a synchronization
            monitor for the Lock object while making this call.</p>
            </remarks>
            <param name="waitMillis">
            The number of milliseconds to continue waiting;
            pass -1 to block the calling thread indefinitely.
            </param>
            <returns>
            Updated wait time.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.CacheLock.Release">
            <summary>
            Release this Lock.
            </summary>
            <remarks>
            <p>
            Note: caller of this method is expected to hold a
            synchronization monitor for the <b>Lock</b> object while
            making this call.</p>
            </remarks>
            <returns>
            <b>true</b> if unlock is successful; <b>false</b> if the
            entry remained locked.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.LocalCache.CacheLock.ToString">
            <summary>
            Return a human readable decription of the <b>Lock</b>.
            </summary>
            <returns>
            A human readable decription of the <b>Lock</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.CacheLock.m_thread">
            <summary>
            The Thread object holding a lock for this entry.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.CacheLock.m_lockCount">
            <summary>
            The lock count (number of times the "assign" was called by
            the locking thread).
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.CacheLock.m_blockCount">
            <summary>
            The number of threads waiting on this Lock to be released.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CacheLock.IsDirty">
            <summary>
            Checks whether or not this <b>Lock</b> object is held by
            another thread.
            <p>
            Note: caller of this method is expected to hold a
            synchronization monitor for the <b>Lock</b> object while
            making this call.</p>
            </summary>
            <returns>
            <b>true</b> if the <b>Lock</b> is held by another thread;
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CacheLock.IsOwnedByCaller">
            <summary>
            Checks whether or not this <b>Lock</b> object is held by the
            calling thread.
            <p>
            Note: unlike other methods of this class, the caller of this
            method is <i>not</i> required to hold a synchronization
            monitor for the <b>Lock</b> object while making this call.</p>
            </summary>
            <returns>
            <b>true</b> if the <b>Lock</b> is held by the calling thread;
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CacheLock.IsDiscardable">
            <summary>
            Checks whether or not this <b>Lock</b> object is discardable.
            <p>
            Note: caller of this method is expected to hold a
            synchronization monitor for the <b>Lock</b> object while
            making this call.</p>
            </summary>
            <returns>
            <b>true</b> if the <b>Lock</b> is discardable; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CacheLock.LockThread">
            <summary>
            Gets the <b>Thread</b> object holding this <b>Lock</b>.
            </summary>
            <returns>
            The <b>Thread</b> object holding this <b>Lock</b>.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CacheLock.LockCount">
            <summary>
            Gets the lock count.
            </summary>
            <returns>
            The lock count.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CacheLock.BlockCount">
            <summary>
            Gets the blocked threads count.
            </summary>
            <returns>
            The blocked threads count.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.LocalCache.CacheLock.LockTypeDescription">
            <summary>
            Gets a human readable decription of the <b>Lock</b> type.
            </summary>
            <returns>
            A human readable decription of the <b>Lock</b> type.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.UnitCalculatorType">
            <summary>
            The type of unit calculator used by the cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.UnitCalculatorType.Fixed">
            <summary>
            Specifies the default unit calculator that weighs all entries
            equally as 1.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.UnitCalculatorType.External">
            <summary>
            Specifies a external (custom) unit calculator implementation.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.UnitCalculatorType.Unknown">
            <summary>
            Unspecified unit calculator.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.LocalCache.EvictionPolicyType">
            <summary>
            The type of eviction policy employed by the cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.EvictionPolicyType.Hybrid">
            <summary>
            By default, the cache prunes based on a hybrid LRU+LFU
            algorithm.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.EvictionPolicyType.LRU">
            <summary>
            The cache can prune based on a pure Least Recently Used (LRU)
            algorithm.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.EvictionPolicyType.LFU">
            <summary>
            The cache can prune based on a pure Least Frequently Used
            (LFU) algorithm.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.EvictionPolicyType.External">
            <summary>
            The cache can prune using an external eviction policy.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LocalCache.EvictionPolicyType.Unknown">
            <summary>
            Uncpecified eviction policy type.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.LockScope">
            <summary>
            Constants that define the scope of a cache lock.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.LockScope.LOCK_ALL">
            <summary>
            Special constant used as the <i>key</i> parameter for
            <see cref="M:Tangosol.Net.Cache.IConcurrentCache.Lock(System.Object)"/> or
            <see cref="M:Tangosol.Net.Cache.IConcurrentCache.Unlock(System.Object)"/> to indicate that all keys of
            the <b>IConcurrentCache</b> should be locked or unlocked.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.NearCache">
            <summary>
            A "near cache" is a <see cref="T:Tangosol.Net.Cache.CompositeCache"/> whose front
            cache is a size-limited and/or auto-expiring local cache,
            and whose back cache is a distributed cache.
            </summary>
            <remarks>
            A <b>CompositeCache</b> is a cache that has a "front" cache and a
            "back" cache; the front cache is assumed to be low latency but
            incomplete, and the back cache is assumed to be complete but high
            latency.
            </remarks>
            <seealso cref="T:Tangosol.Net.Cache.CompositeCache"/>
            <author>Alex Gleyzer, Cameron Purdy  2002.10.20</author>
            <author>Gene Gleyzer  2003.10.16</author>
            <author>Ivan Cikic  2006.11.13</author>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.#ctor(Tangosol.Net.Cache.ICache,Tangosol.Net.INamedCache)">
            <summary>
            Construct a <b>NearCache</b>, using a <i>back</i>
            <see cref="T:Tangosol.Net.INamedCache"/> as the complete (back) storage and
            <i>front</i> <see cref="T:Tangosol.Net.Cache.ICache"/> as a near (front) storage using
            the <see cref="T:Tangosol.Net.Cache.CompositeCacheStrategyType"/> invalidation
            strategy.
            </summary>
            <param name="front">
            <b>ICache</b> to put in front of the back cache.
            </param>
            <param name="back">
            <b>INamedCache</b> to put behind the front cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.#ctor(Tangosol.Net.Cache.ICache,Tangosol.Net.INamedCache,Tangosol.Net.Cache.CompositeCacheStrategyType)">
            <summary>
            Construct a <b>NearCache</b>, using a <i>back</i>
            <see cref="T:Tangosol.Net.INamedCache"/> as the complete (back) storage and
            <i>front</i> <see cref="T:Tangosol.Net.Cache.ICache"/> as a near (front) storage using
            the <see cref="T:Tangosol.Net.Cache.CompositeCacheStrategyType"/> invalidation
            strategy.
            </summary>
            <param name="front">
            <b>ICache</b> to put in front of the back cache.
            </param>
            <param name="back">
            <b>INamedCache</b> to put behind the front cache.
            </param>
            <param name="strategy">
            Specifies the strategy used for the front cache
            invalidation; valid values are:
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenNone"/>
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenPresent"/>
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenAll"/>
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenAuto"/>
            </param>
            <since>Coherence 2.3</since>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.Release">
            <summary>
            Release local resources associated with this instance of
            INamedCache.
            </summary>
            <remarks>
            <p>
            Releasing a cache makes it no longer usable, but does not affect
            the cache itself. In other words, all other references to the
            cache will still be valid, and the cache data is not affected by
            releasing the reference.
            Any attempt to use this reference afterword will result in an
            exception.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.Destroy">
            <summary>
            Release and destroy this instance of INamedCache.
            </summary>
            <remarks>
            <p>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the entire
            cluster to this cache will be invalidated, the cached data will
            be cleared, and all resources will be released.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.Truncate">
            <summary>
            Remove all mappings of this instance of INamedCache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Add a standard cache listener that will receive all events
            (inserts, updates, deletes) that occur against the cache, with
            the key, old-value and new-value included.
            </summary>
            <remarks>
            Expensive: Listening always occurs on the back cache.
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a standard cache listener that previously signed up for
            all events.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object,System.Boolean)">
            <summary>
            Add a cache listener for a specific key.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.OldValue"/> and
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.NewValue"/> properties.</p>
            <p>
            To unregister the ICacheListener, use the
            <see cref="M:Tangosol.Net.Cache.NearCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)"/>
            method.</p>
            <p>
            Expensive: Listening always occurs on the back cache.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)">
            <summary>
            Remove a cache listener that previously signed up for events
            about a specific key.
            </summary>
            <param name="listener">
            The listener to remove.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Add a cache listener that receives events based on a filter
            evaluation.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the <b>OldValue</b> and <b>NewValue</b>
            properties.</p>
            <p>
            To unregister the <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, use the
            <see cref="M:Tangosol.Net.Cache.NearCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)"/>
            method.</p>
            <p>
            Expensive: Listening always occurs on the back cache.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.</param>
            <param name="filter">
            A filter that will be passed <b>CacheEventArgs</b> objects to
            select from; a <b>CacheEventArgs</b> will be delivered to the
            listener only if the filter evaluates to <b>true</b> for that
            <b>CacheEventArgs</b>; <c>null</c> is equivalent to a filter
            that alway returns <b>true</b>.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)">
            <summary>
            Remove a cache listener that previously signed up for events
            based on a filter evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="filter">
            A filter used to evaluate events; <c>null</c> is equivalent to a
            filter that alway returns <b>true</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.Lock(System.Object,System.Int64)">
            <summary>
            Attempt to lock the specified item within the specified period of
            time.
            </summary>
            <remarks>
            <p>
            The item doesn't have to exist to be <i>locked</i>. While the
            item is locked there is known to be a <i>lock holder</i> which
            has an exclusive right to modify (calling put and remove methods)
            that item.</p>
            <p>
            Lock holder is an abstract concept that depends on the
            IConcurrentCache implementation. For example, holder could
            be a cluster member or a thread (or both).</p>
            <p>
            Locking strategy may vary for concrete implementations as well.
            Lock could have an expiration time (this lock is sometimes called
            a "lease") or be held indefinitely (until the lock holder
            terminates).</p>
            <p>
            Some implementations may allow the entire cache to be locked. If
            the cache is locked in such a way, then only a lock holder is
            allowed to perform any of the "put" or "remove" operations.</p>
            <p>
            Pass the special constant
            <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> as the <i>key</i>
            parameter to indicate the cache lock.</p>
            <p>
            Expensive: Locking always occurs on the back cache.</p>
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <param name="waitTimeMillis">
            The number of milliseconds to continue trying to obtain a lock;
            pass zero to return immediately; pass -1 to block the calling
            thread until the lock could be obtained.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked within the
            specified time; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.Lock(System.Object)">
            <summary>
            Attempt to lock the specified item and return immediately.
            </summary>
            <remarks>
            This method behaves exactly as if it simply performs the call
            <b>Lock(key, 0)</b>.
            <p>
            Expensive: Locking always occurs on the back cache.</p>
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.Unlock(System.Object)">
            <summary>
            Unlock the specified item.
            </summary>
            <remarks>
            The item doesn't have to exist to be <i>unlocked</i>.
            If the item is currently locked, only the <i>holder</i> of the
            lock could successfully unlock it.
            </remarks>
            <param name="key">
            Key being unlocked.
            </param>
            <returns>
            <b>true</b> if the item was successfully unlocked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.GetKeys(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the keys contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            The operation always executes against the back cache.
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of keys for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.GetValues(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            The operation always executes against the back cache.
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of the values for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.GetValues(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            It is guaranteed that enumerator will traverse the array in such
            a way that the values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.
            <p>
            The operation always executes against the back cache.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.GetEntries(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            The operation always executes against the back cache.
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.GetEntries(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            <p>
            It is guaranteed that enumerator will traverse the array in such
            a way that the entry values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.</p>
            <p>
            The operation always executes against the back cache.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.AddIndex(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer)">
            <summary>
            Add an index to this IQueryCache.
            </summary>
            <remarks>
            This allows to correlate values stored in this
            <i>indexed cache</i> (or attributes of those values) to the
            corresponding keys in the indexed cache and increase the
            performance of <b>GetKeys</b> and <b>GetEntries</b> methods.
            <p>
            The operation always executes against the back cache.</p>
            </remarks>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the indexed
            cache. Must not be <c>null</c>.
            </param>
            <param name="isOrdered">
            <b>true</b> if the contents of the indexed information should be
            ordered; <b>false</b> otherwise.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on entries
            in the indexed cache; or <c>null</c> if the entries' values
            natural ordering should be used.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.RemoveIndex(Tangosol.Util.IValueExtractor)">
            <summary>
            Remove an index from this IQueryCache.
            </summary>
            <remarks>
            The operation always executes against the back cache.
            </remarks>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.Invoke(System.Object,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the entry
            specified by the passed key, returning the result of the
            invocation.
            </summary>
            <remarks>
            The operation always executes against the back cache.
            </remarks>
            <param name="key">
            The key to process; it is not required to exist within the
            cache.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified key.
            </param>
            <returns>
            The result of the invocation as returned from the
            <b>IEntryProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.InvokeAll(System.Collections.ICollection,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entries specified by the passed keys, returning the result of the
            invocation for each.
            </summary>
            <remarks>
            The operation always executes against the back cache.
            </remarks>
            <param name="keys">
            The keys to process; these keys are not required to exist within
            the cache.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified keys.
            </param>
            <returns>
            A cache containing the results of invoking the
            <b>IEntryProcessor</b> against each of the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.InvokeAll(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the set
            of entries that are selected by the given <see cref="T:Tangosol.Util.IFilter"/>,
            returning the result of the invocation for each.
            </summary>
            <remarks>
            <p>
            Unless specified otherwise, IInvocableCache implementations
            will perform this operation in two steps: (1) use the filter to
            retrieve a matching entry collection; (2) apply the agent to
            every filtered entry. This algorithm assumes that the agent's
            processing does not affect the result of the specified filter
            evaluation, since the filtering and processing could be
            performed in parallel on different threads.</p>
            <p>
            If this assumption does not hold, the processor logic has to be
            idempotent, or at least re-evaluate the filter. This could be
            easily accomplished by wrapping the processor with the
            <see cref="T:Tangosol.Util.Processor.ConditionalProcessor"/>.</p>
            <p>
            The operation always executes against the back cache.</p>
            </remarks>
            <param name="filter">
            An <see cref="T:Tangosol.Util.IFilter"/> that results in the collection of keys to
            be processed.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> to use to process the specified
            keys.
            </param>
            <returns>
            A cache containing the results of invoking the
            <b>IEntryProcessor</b> against the keys that are selected by the
            given <b>IFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.Aggregate(System.Collections.ICollection,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the entries specified by
            the passed keys.
            </summary>
            <remarks>
            The operation always executes against the back cache.
            </remarks>
            <param name="keys">
            The collection of keys that specify the entries within this cache
            to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the specified entries of this cache.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.Aggregate(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the collection of
            entries that are selected by the given <b>IFilter</b>.
            </summary>
            <remarks>
            The operation always executes against the back cache.
            </remarks>
            <param name="filter">
            an <see cref="T:Tangosol.Util.IFilter"/> that is used to select entries within
            this cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the selected entries of this cache.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.OnMemberJoined(System.Object,Tangosol.Net.MemberEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> has joined the service.
            </summary>
            <remarks>
            <p>
            The most critical situation arises when a number of threads are
            waiting for a local service restart, being blocked by a
            <b>IService</b> object synchronization monitor. Since the Joined
            event should be fired only once, it is called on a client thread
            <b>while holding a synchronization monitor</b>. An attempt to use
            other clustered service functionality during this local event
            notification may result in a deadlock.</p>
            </remarks>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            An event which indicates that membership has changed.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.OnMemberLeaving(System.Object,Tangosol.Net.MemberEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> is leaving the service.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            An event which indicates that membership has changed.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.OnMemberLeft(System.Object,Tangosol.Net.MemberEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> has left the service.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            An event which indicates that membership has changed.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.Release(System.Boolean)">
            <summary>
            Release this cache, optionally destroying it.
            </summary>
            <param name="fDestroy">
            If true, destroy the cache as well.
            </param> 
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.RegisterBackServiceMemberEventHandler">
            <summary>
            Register an event handler for member events on back caches's
            service.
            </summary>
            <remarks>
            The primary goal of that event handler is invalidation of the
            front cache in case of the service [automatic] restart.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.NearCache.UnregisterBackServiceMemberEventHandler">
            <summary>
            Unregister back caches's service member event handler.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.NearCache.m_name">
            <summary>
            The cache name.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.NearCache.m_service">
            <summary>
            The back cache service.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.NearCache.BackCache">
            <summary>
            Obtain the <see cref="T:Tangosol.Net.INamedCache"/> object that sits behind this
            <b>NearCache</b>.
            </summary>
            <value>
            The <b>INamedCache</b> object, which is the back cache of this
            <b>NearCache</b>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If this <b>INamedCache</b> has been released.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Cache.NearCache.CacheName">
            <summary>
            Gets the cache name.
            </summary>
            <value>
            The cache name.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.NearCache.CacheService">
            <summary>
            Gets the <see cref="T:Tangosol.Net.ICacheService"/> that this INamedCache is a
            part of.
            </summary>
            <value>
            The cache service this INamedCache is a part of.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.NearCache.IsActive">
            <summary>
            Specifies whether or not the INamedCache is active.
            </summary>
            <value>
            <b>true</b> if the INamedCache is active; <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.SimpleCacheStatistics">
            <summary>
            Implementation of the <see cref="T:Tangosol.Net.Cache.ICacheStatistics"/> interface
            intended for use by a cache to maintain its statistics.
            </summary>
            <since>Coherence 2.2</since>
            <author>Cameron Purdy  2003.06.02</author>
            <author>Goran Milosavljevic  2006.11.09</author>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheStatistics.ResetHitStatistics">
            <summary>
            Reset the cache statistics.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheStatistics.ToString">
            <summary>
            For debugging purposes, format the contents of the
            <b>SimpleCachingStatistics</b> in a human readable format.
            </summary>
            <returns>
            A String representation of this object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheStatistics.RegisterHit">
            <summary>
            Register a cache hit (no timing information).
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheStatistics.RegisterHit(System.Int64)">
            <summary>
            Register a cache hit.
            </summary>
            <param name="startMillis">
            The time when the get operation started.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheStatistics.RegisterHits(System.Int32,System.Int64)">
            <summary>
            Register a multiple cache hit.
            </summary>
            <param name="hits">
            The number of hits.
            </param>
            <param name="startMillis">
            The time when the get operation started.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheStatistics.RegisterMiss">
            <summary>
            Register a cache miss (no timing information).
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheStatistics.RegisterMiss(System.Int64)">
            <summary>
            Register a cache miss.
            </summary>
            <param name="startMillis">
            The time when the get operation started.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheStatistics.RegisterMisses(System.Int32,System.Int64)">
            <summary>
            Register a multiple cache miss.
            </summary>
            <param name="misses">
            The number of misses.
            </param>
            <param name="startMillis">
            The time when the get operation started.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheStatistics.RegisterPut(System.Int64)">
            <summary>
            Register a cache put.
            </summary>
            <param name="startMillis">
            The time when the put operation started.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheStatistics.RegisterPuts(System.Int32,System.Int64)">
            <summary>
            Register a multiple cache put.
            </summary>
            <param name="puts">
            The number of puts.
            </param>
            <param name="startMillis">
            The time when the put operation started.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.SimpleCacheStatistics.RegisterCachePrune(System.Int64)">
            <summary>
            Register a cache prune.
            </summary>
            <param name="startMillis">
            The time when the prune operation started.
            </param>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheStatistics.m_cacheHits">
            <summary>
            The rough (ie unsynchronized) number of calls that could be
            answered from the front or the back and were answered by data
            in the front cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheStatistics.m_cacheMisses">
            <summary>
            The rough (ie unsynchronized) number of calls that could be
            answered from the front or the back and were answered by data in
            the back map.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheStatistics.m_hitsMillis">
            <summary>
            Total number of milliseconds used for get operations that were
            hits since the last statistics reset.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheStatistics.m_missesMillis">
            <summary>
            Total number of milliseconds used for get operations that were
            misses since the last statistics reset.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheStatistics.m_cachePuts">
            <summary>
            Total number of put operations since the last statistics reset.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheStatistics.m_putsMillis">
            <summary>
            Total number of milliseconds used for put operations since the
            last statistics reset.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheStatistics.m_cachePrunes">
            <summary>
            Total number of prune operations since the last statistics reset.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.SimpleCacheStatistics.m_prunesMillis">
            <summary>
            Total number of milliseconds used for prune operations since the
            last statistics reset.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.TotalGets">
            <summary>
            Determine the total number of "get" operations since the cache
            statistics were last reset.
            </summary>
            <value>
            The total number of "get" operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.TotalGetsMillis">
            <summary>
            Determine the total number of milliseconds spent on "get"
            operations since the cache statistics were last reset.
            </summary>
            <value>
            The total number of milliseconds processing "get" operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.AverageGetMillis">
            <summary>
            Determine the average number of milliseconds per "get"
            invocation since the cache statistics were last reset.
            </summary>
            <value>
            The average number of milliseconds per "get" operation.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.TotalPuts">
            <summary>
            Determine the total number of "put" operations since the cache
            statistics were last reset.
            </summary>
            <value>
            The total number of "put" operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.TotalPutsMillis">
            <summary>
            Determine the total number of milliseconds spent on "put"
            operations since the cache statistics were last reset.
            </summary>
            <value>
            The total number of milliseconds processing "put" operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.AveragePutMillis">
            <summary>
            Determine the average number of milliseconds per "put"
            invocation since the cache statistics were last reset.
            </summary>
            <value>
            The average number of milliseconds per "put" operation.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.CacheHits">
            <summary>
            Determine the rough number of cache hits since the cache
            statistics were last reset.
            </summary>
            <remarks>
            A cache hit is a read operation invocation (i.e. "get") for which
            an entry exists in this cache.
            </remarks>
            <value>
            The number of "get" calls that have been served by
            existing cache entries.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.CacheHitsMillis">
            <summary>
            Determine the total number of milliseconds (since the last
            statistics reset) for the "get" operations for which an entry
            existed in this cache.
            </summary>
            <value>
            The total number of milliseconds for the "get" operations that
            were hits.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.AverageHitMillis">
            <summary>
            Determine the average number of milliseconds per "get"
            invocation that is a hit.
            </summary>
            <value>
            The average number of milliseconds per cache hit.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.CacheMisses">
            <summary>
            Determine the rough number of cache misses since the cache
            statistics were last reset.
            </summary>
            <remarks>
            A cache miss is a "get" invocation that does not have an entry
            in this cache.
            </remarks>
            <value>
            The number of "get" calls that failed to find an existing
            cache entry because the requested key was not in the cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.CacheMissesMillis">
            <summary>
            Determine the total number of milliseconds (since the last
            statistics reset) for the "get" operations for which no entry
            existed in this cache.
            </summary>
            <value>
            The total number of milliseconds (since the last statistics
            reset) for the "get" operations that were misses.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.AverageMissMillis">
            <summary>
            Determine the average number of milliseconds per "get" invocation
            that is a miss.
            </summary>
            <value>
            The average number of milliseconds per cache miss.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.HitProbability">
            <summary>
            Determine the rough probability (0 &lt;= p &lt;= 1) that the next
            invocation will be a hit, based on the statistics collected since
            the last reset of the cache statistics.
            </summary>
            <value>
            The cache hit probability (0 &lt;= p &lt;= 1).
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.CachePrunes">
            <summary>
            Determine the rough number of cache pruning cycles since the
            cache statistics were last reset.
            </summary>
            <remarks>
            For the LocalCache implementation, this refers to the number of
            times that the <tt>prune()</tt> method is executed.
            </remarks>
            <value>
            The total number of cache pruning cycles (since that last
            statistics reset).
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.CachePrunesMillis">
            <summary>
            Determine the total number of milliseconds (since that last
            statistics reset) spent on cache pruning.
            </summary>
            <remarks>
            For the LocalCache implementation, this refers to the time spent in
            the <tt>prune()</tt> method.
            </remarks>
            <value>
            The total number of milliseconds (since that last statistics
            reset) for cache pruning operations.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.SimpleCacheStatistics.AveragePruneMillis">
            <summary>
            Determine the average number of milliseconds per cache pruning.
            </summary>
            <value>
            The average number of milliseconds per cache pruning.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.CacheEventHandler">
            <summary>
            Represents the method that will handle cache events.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.INamedCache"/> that raised an event.
            </param>
            <param name="args">
            Event arguments.
            </param>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.DelegatingCacheListener">
            <summary>
            Basic .NET style <see cref="T:Tangosol.Net.Cache.ICacheListener"/> implementation.
            </summary>
            <remarks>
            This class allows users to register for cache events using
            .NET-style event/delegate mechanism. When it recieves cache
            event, it will raise the corresponding .NET event.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.DelegatingCacheListener.Tangosol#Net#Cache#ICacheListener#EntryInserted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a dictionary entry has been inserted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.DelegatingCacheListener.Tangosol#Net#Cache#ICacheListener#EntryUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a dictionary entry has been updated.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the update
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.DelegatingCacheListener.Tangosol#Net#Cache#ICacheListener#EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a dictionary entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.DelegatingCacheListener.OnInserted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Raises the EntryInserted event.
            </summary>
            <param name="args">
            Cache event arguments containing event data.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.DelegatingCacheListener.OnUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Raises the EntryUpdated event.
            </summary>
            <param name="args">
            Cache event arguments containing event data.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.DelegatingCacheListener.OnDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Raises the EntryDeleted event.
            </summary>
            <param name="args">
            Cache event arguments containing event data.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.DelegatingCacheListener.InvokeCacheEvent(Tangosol.Net.Cache.Support.CacheEventHandler,Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invokes the event, with special remark towards multithreading 
            (using local copy of delegate and no inline attribute for method). 
            </summary>
            <param name="handler">
            The CacheEventHandler event that's being invoked. 
            </param>
            <param name="args">
            Event arguments.
            </param>
        </member>
        <member name="E:Tangosol.Net.Cache.Support.DelegatingCacheListener.EntryInserted">
            <summary>
            Occurs when a new entry is added to the cache.
            </summary>
        </member>
        <member name="E:Tangosol.Net.Cache.Support.DelegatingCacheListener.EntryUpdated">
            <summary>
            Occurs when a cache entry is updated.
            </summary>
        </member>
        <member name="E:Tangosol.Net.Cache.Support.DelegatingCacheListener.EntryDeleted">
            <summary>
            Occurs when an entry is deleted from the cache.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.InvocableCacheHelper">
            <summary>
            Helper methods for <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> implementations
            and <see cref="T:Tangosol.Util.IFilter"/> related evaluations.
            </summary>
            <author>Gene Gleyzer  2005.10.24</author>
            <author>Goran Milosavljevic  2006.10.25</author>
            <author>Jason Howes  2010.10.04</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.InvokeLocked(Tangosol.Net.Cache.IConcurrentCache,Tangosol.Net.Cache.IInvocableCacheEntry,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            specified <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <remarks>
            The invocation is made thread safe by locking the corresponding key
            on the cache.
            </remarks>
            <param name="cache">
            The <see cref="T:Tangosol.Net.Cache.IConcurrentCache"/> that the
            <b>IEntryProcessor</b> works against.
            </param>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process; it is not required to
            exist within the cache.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified key.
            </param>
            <returns>
            The result of the invocation as returned from the
            <b>IEntryProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.InvokeAllLocked(Tangosol.Net.Cache.IConcurrentCache,System.Collections.ICollection,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entries specified by the passed cache and entries.
            </summary>
            <remarks>
            The invocation is made thread safe by locking the corresponding
            keys on the cache. If an attempt to lock all the entries at once
            fails, they will be processed individually one-by-one.
            </remarks>
            <param name="cache">
            The <see cref="T:Tangosol.Net.Cache.IConcurrentCache"/> that the
            <b>IEntryProcessor</b> works against.
            </param>
            <param name="entries">
            A collection of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> objects to
            process.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified keys.
            </param>
            <returns>
            An <b>IDictionary</b> containing the results of invoking the
            <b>IEntryProcessor</b> against each of the specified entry.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.LockAll(Tangosol.Net.Cache.IConcurrentCache,System.Collections.ICollection,System.Int32)">
            <summary>
            Attempt to lock all the specified keys within a specified period
            of time.
            </summary>
            <param name="cache">
            The <see cref="T:Tangosol.Net.Cache.IConcurrentCache"/> to use.
            </param>
            <param name="keys">
            A collection of keys to lock.
            </param>
            <param name="waitMillis">
            The number of milliseconds to continue trying to obtain locks;
            pass zero to return immediately; pass -1 to block the calling
            thread until the lock could be obtained.
            </param>
            <returns>
            An <b>IList</b> containing all the locked keys in the order
            opposite to the locking order (LIFO); <c>null</c> if timeout has
            occurred.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.UnlockAll(Tangosol.Net.Cache.IConcurrentCache,System.Collections.ICollection)">
            <summary>
            Unlock all the specified keys.
            </summary>
            <param name="cache">
            The <see cref="T:Tangosol.Net.Cache.IConcurrentCache"/> to use.
            </param>
            <param name="keys">
            A collection of keys to unlock.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.EvaluateEntry(Tangosol.Util.IFilter,Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Check if the entry passes the filter evaulation.
            </summary>
            <param name="filter">
            The filter to evaluate against.
            </param>
            <param name="entry">
            An <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> to filter.
            </param>
            <returns>
            <b>true</b> if the entry passes the filter, <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.EvaluateEntry(Tangosol.Util.IFilter,System.Object,System.Object)">
            <summary>
            Check if an entry, expressed as a key and value, passes the
            filter evaulation.
            </summary>
            <param name="filter">
            The filter to evaluate against.
            </param>
            <param name="key">
            The key for the entry.
            </param>
            <param name="value">
            The value for the entry.
            </param>
            <returns>
            <b>true</b> if the entry passes the filter, <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.EvaluateOriginalEntry(Tangosol.Util.IFilter,Tangosol.Net.Cache.CacheEntry)">
            <summary>
            Check if the entry, in its "original" form, passes the filter 
            evaulation.
            </summary>
            <param name="filter">
            The filter to evaluate against.
            </param>
            <param name="entry">
            A <see cref="T:Tangosol.Net.Cache.CacheEntry"/> whose "original" value to evaluate.
            </param>
            <returns>
            <b>true</b> iff the entry has an original value and passes the 
            filter, <b>false</b> otherwise.
            </returns>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.ExtractFromEntry(Tangosol.Util.IValueExtractor,Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Extract a value from the specified entry using the specified
            extractor.
            </summary>
            <param name="extractor">
            The extractor to use.
            </param>
            <param name="entry">
            The entry to extract from.
            </param>
            <returns>
            The extracted value.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.ExtractOriginalFromEntry(Tangosol.Util.IValueExtractor,Tangosol.Net.Cache.CacheEntry)">
            <summary>
            Extract a value from the "original value" of the specified entry
            using the specified extractor.
            </summary>
            <param name="extractor">
            The extractor to use.
            </param>
            <param name="entry">
            The entry to extract from.
            </param>
            <returns>
            The extracted original value.
            </returns>
            <since>Coherence 3.7</since>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.Query(Tangosol.Net.Cache.ICache,Tangosol.Util.IFilter,Tangosol.Net.Cache.Support.InvocableCacheHelper.QueryType,System.Boolean,System.Collections.IComparer)">
            <summary>
            Generic implementation of the get methods for the particular
            <see cref="T:Tangosol.Util.IFilter"/> provided.
            </summary>
            <param name="cache">
            The <see cref="T:Tangosol.Net.Cache.ICache"/> to be queried.
            </param>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="queryType">
            An enum value that defines whether return array should be values,
            keys or entries.
            </param>
            <param name="sort">
            If <b>true</b>, sort the result-set before returning.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.IComparer"/> to use for sorting (optional).
            </param>
            <returns>
            A collection of the keys/values for entries that satisfy the
            specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.Query(Tangosol.Net.Cache.ICache,System.Collections.IDictionary,Tangosol.Util.IFilter,Tangosol.Net.Cache.Support.InvocableCacheHelper.QueryType,System.Boolean,System.Collections.IComparer)">
            <summary>
            Generic implementation of the get methods for the particular
            <see cref="T:Tangosol.Util.IFilter"/> provided.
            </summary>
            <param name="cache">
            The <see cref="T:Tangosol.Net.Cache.ICache"/> to be queried.
            </param>
            <param name="dictIndex">
            The <see cref="T:System.Collections.IDictionary"/> of indexes.
            </param>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="queryType">
            An enum value that defines whether return array should be values,
            keys or entries.
            </param>
            <param name="sort">
            If <b>true</b>, sort the result-set before returning.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.IComparer"/> to use for sorting (optional).
            </param>
            <returns>
            A collection of the keys/values for entries that satisfy the
            specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.AddIndex(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer,Tangosol.Net.Cache.IObservableCache,System.Collections.IDictionary)">
            <summary>
            Add an index to the given dictionary of indexes, keyed by the given 
            extractor. Also add the index as a listener to the given cache.
            </summary>
            <param name="extractor">
            The IValueExtractor object that is used to extract an indexable 
            property value from a cache entry.
            </param>
            <param name="ordered"> 
            True if the contents of the indexed information should be ordered; 
            false otherwise
            </param>
            <param name="comparator">
            The IComparer object which imposes an ordering on entries in the 
            indexed cache or <c>null</c> if the entries' values natural 
            ordering should be used.
            </param>
            <param name="cache">
            The cache that the newly created ICacheIndex will use for 
            initialization and listen to for changes.
            </param>
            <param name="dictIndex">
            The dictionary of indexes that the newly created ICacheIndex will 
            be added to.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.RemoveIndex(Tangosol.Util.IValueExtractor,Tangosol.Net.Cache.IObservableCache,System.Collections.IDictionary)">
            <summary>
            Remove the index keyed by the given extractor from the given 
            dictionary of indexes. Also, remove the index as a listener from 
            the given cache.
            </summary>
            <param name="extractor">
            The IValueExtractor object that is used to extract an indexable 
            object from a value stored in the cache.
            </param>
            <param name="cache">
            The resource map associated with the index.
            </param>
            <param name="dictIndex">
            The dictionary of indexes to remove the ICacheIndex from.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.EnsureListener(Tangosol.Net.Cache.ICacheIndex)">
            <summary>
            Ensure an ICacheListener for the given index. The listener will 
            route the cache events into the corresponding ICacheIndex calls.
            </summary>
            <param name="index">The index.</param>
            <returns>A listener for given index.</returns>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.InvocableCacheHelper.ENTRY_TO_KEY_CONVERTER">
            <summary>
            Trivial Entry-to-Key converter.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.InvocableCacheHelper.EntryToKeyConverter">
            <summary>
            Trivial Entry-to-Key <see cref="T:Tangosol.Util.IConverter"/>.
            </summary>
        </member>
        <member name="T:Tangosol.Util.IConverter">
            <summary>
            Provide for "pluggable" object conversions.
            </summary>
            <author>Pat McNerthney  2000.04.25</author>
            <author>Ana Cikic  2008.05.28</author>
        </member>
        <member name="M:Tangosol.Util.IConverter.Convert(System.Object)">
            <summary>
            Convert the passed object to another object.
            </summary>
            <param name="o">
            Object to be converted.
            </param>
            <returns>
            The new, converted object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.InvocableCacheHelper.EntryToKeyConverter.Convert(System.Object)">
            <summary>
            Convert the passed object to another object.
            </summary>
            <param name="o">
            Object to be converted.
            </param>
            <returns>
            The new, converted object.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.InvocableCacheHelper.QueryType">
            <summary>
            The enum type used to pass to the method that will query cache
            against one of the <b>QueryType</b> modes.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.InvocableCacheHelper.QueryType.Values">
            <summary>
            The cache will be queried for values.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.InvocableCacheHelper.QueryType.Keys">
            <summary>
            The cache will be queried for keys.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.InvocableCacheHelper.QueryType.Entries">
            <summary>
            The cache will be queried for <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>s.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.IndexAdapter">
            <summary>
            ICacheListener implementation that routes the cache events into the
            corresponding ICacheIndex calls.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.IndexAdapter.#ctor(Tangosol.Net.Cache.ICacheIndex)">
            <summary>
            Construct an IndexAdapter.
            </summary>
            <param name="index">The ICacheIndex being wrapped.</param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.IndexAdapter.EntryInserted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.IndexAdapter.EntryUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been updated.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the update
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.IndexAdapter.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.IndexAdapter.Equals(System.Object)">
            <summary>
            Compare this IndexMapListener with another object for equality.
            </summary>
            <param name="o">An object reference or null.</param>
            <returns><c>true</c> iff the passed object reference is a 
            IndexMapListener object with the same index.</returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.IndexAdapter.GetHashCode">
            <summary>
            Return a hash code value for the IndexMapListener object.
            </summary>
            <returns>
            An integer hash value for this <b>IndexAdapter</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.IndexAdapter.m_index">
            <summary>
            The wrapped index.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.RunnableCacheEvent">
            <summary>
            Wrapper for <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> that implements
            <see cref="T:Tangosol.Net.Messaging.IRunnable"/> and is aware of cache listeners associated
            with wrapped <b>CacheEventArgs</b>.
            </summary>
            <author>Ana Cikic  2006.10.26</author>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.RunnableCacheEvent.Instantiate(Tangosol.Net.Cache.CacheEventArgs,Tangosol.Util.Listeners)">
            <summary>
            Create RunnableCacheEvent instance with specified <b>CacheEvent</b>
            and <b>Listeners</b> objects.
            </summary>
            <param name="evt">
            <b>CacheEvent</b> object.
            </param>
            <param name="listeners">
            <b>Listeners</b> object.
            </param>
            <returns>
            <b>RunnableCacheEvent</b> instance.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.RunnableCacheEvent.Instantiate(Tangosol.Net.Cache.CacheEventArgs,Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Create RunnableCacheEvent instance with specified <b>CacheEvent</b>
            and <b>ICacheListener</b> objects.
            </summary>
            <param name="evt">
            <b>CacheEvent</b> object.
            </param>
            <param name="listener">
            <b>ICacheListener</b> object.
            </param>
            <returns>
            <b>RunnableCacheEvent</b> instance.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.RunnableCacheEvent.Instantiate(Tangosol.Net.Cache.CacheEventArgs,Tangosol.Net.Cache.Support.CacheListenerSupport)">
            <summary>
            Create RunnableCacheEvent instance with specified <b>CacheEvent</b>
            and <b>CacheListenerSupport</b> objects.
            </summary>
            <param name="evt">
            <b>CacheEvent</b> object.
            </param>
            <param name="support">
            <b>CacheListenerSupport</b> object.
            </param>
            <returns>
            <b>RunnableCacheEvent</b> instance.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.RunnableCacheEvent.DispatchSafe(Tangosol.Net.Cache.CacheEventArgs,Tangosol.Util.Listeners,Tangosol.Util.Daemon.QueueProcessor.Queue)">
            <summary>
            Dispatch the specified <see cref="P:Tangosol.Net.Cache.Support.RunnableCacheEvent.CacheEvent"/> to all
            <see cref="T:Tangosol.Net.Cache.Support.CacheListenerSupport.ISynchronousListener"/>
            objects and add to the specified <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Queue"/> for deferred
            execution for standard ones.
            </summary>
            <param name="evt">
            <b>CacheEvent</b> to dispatch.
            </param>
            <param name="listeners">
            <b>Listeners</b> to which the event is dispatched.
            </param>
            <param name="queue">
            <b>Queue</b> to which event will be added.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.RunnableCacheEvent.Run">
            <summary>
            Dispatch event.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.RunnableCacheEvent.ToString">
            <summary>
            Returns sting representation of this object.
            </summary>
            <returns>
            String representation of this object.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.RunnableCacheEvent.m_listeners">
            <summary>
            Optional Listeners object containing ICacheListener objects.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.RunnableCacheEvent.m_listenerSupport">
            <summary>
            Optional CacheListenerSupport object containing
            ICacheListener objects.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.RunnableCacheEvent.m_cacheEvent">
            <summary>
            The actual CacheEventArgs to fire.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Cache.Support.RunnableCacheEvent.m_dictionaryListener">
            <summary>
            Optional ICacheListener object.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.RunnableCacheEvent.Listeners">
            <summary>
            Optional <see cref="P:Tangosol.Net.Cache.Support.RunnableCacheEvent.Listeners"/> object containing
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> objects.
            </summary>
            <value>
            <b>Listeners</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.RunnableCacheEvent.CacheListenerSupport">
            <summary>
            Optional <see cref="P:Tangosol.Net.Cache.Support.RunnableCacheEvent.CacheListenerSupport"/> object
            containing <see cref="T:Tangosol.Net.Cache.ICacheListener"/> objects.
            </summary>
            <value>
            <b>CacheListenerSupport</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.RunnableCacheEvent.CacheEvent">
            <summary>
            The actual <see cref="P:Tangosol.Net.Cache.Support.RunnableCacheEvent.CacheEvent"/> to fire.
            </summary>
            <value>
            The actual <b>CacheEventArgs</b> to fire.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.Support.RunnableCacheEvent.CacheListener">
            <summary>
            Optional <see cref="T:Tangosol.Net.Cache.ICacheListener"/> object.
            </summary>
            <value>
            <b>ICacheListener</b> object.
            </value>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.WindowsFormsCacheListener">
            <summary>
            Ensures that any event handling code that needs to run
            as a response to a cache event is executed on the UI thread.
            </summary>
            <remarks>
            The crucial limiting factor when updating UI elements from a
            background thread is the thread affinity Windows Forms controls
            and forms have to the underlying thread that created them.
            <p/>
            All Windows messages are actually messages between threads,
            and each thread has its own message queue. Each and every thread
            message can only be processed on the thread it belongs to.
            When a thread creates a window, that window's messages are actually
            messages destined for the message queue of the creating thread.
            Consequently, all windows (such as forms and controls) can only
            process messages on the thread that created them. Method calls on
            forms and controls often result internally with posting of at least
            one such message.
            <p/>
            This class allows end users to ignore this fact and handle Coherence
            cache events, which are always raised from a background thread, as
            if they were raised within the UI thread. This class will ensure that
            the call is properly marshalled and executed on the UI thread.
            </remarks>
            <author>Aleksandar Seovic  2006.11.01</author>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.WindowsFormsCacheListener.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="control">
            Control that should be used to determine UI thread
            and marshal events appropriately.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.WindowsFormsCacheListener.Tangosol#Net#Cache#ICacheListener#EntryInserted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a dictionary entry has been inserted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.WindowsFormsCacheListener.Tangosol#Net#Cache#ICacheListener#EntryUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a dictionary entry has been updated.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the update
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.WindowsFormsCacheListener.Tangosol#Net#Cache#ICacheListener#EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a dictionary entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.WpfCacheListener">
            <summary>
            Ensures that any event handling code that needs to run
            as a response to a cache event is executed on the WPF UI thread.
            </summary>
            <remarks>
            This class allows end users to handle Coherence cache events which are
            always raised from a background thread, as if they were raised within
            the WPF UI thread. This class will ensure that the call is properly 
            marshalled and executed on the WPF UI thread.
            </remarks>
            <author>Ivan Cikic  2009.12.10</author>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.WpfCacheListener.#ctor(System.Windows.Threading.DispatcherObject)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="control">
            Control that should be used to determine UI thread
            and marshal events appropriately.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.WpfCacheListener.Tangosol#Net#Cache#ICacheListener#EntryInserted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a dictionary entry has been inserted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.WpfCacheListener.Tangosol#Net#Cache#ICacheListener#EntryUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a dictionary entry has been updated.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the update
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.WpfCacheListener.Tangosol#Net#Cache#ICacheListener#EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a dictionary entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="T:Tangosol.Net.Cache.WrapperNamedCache">
            <summary>
            Wrapper for a given NamedCache.
            </summary>
            <author>lh 2012.06.25</author>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.#ctor(Tangosol.Net.INamedCache)">
            <summary>
            Default constructor.
            </summary>
            <param name="cache">
            The cache to be wrapped.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Contains(System.Object)">
            <summary>
            Determines whether the <b>IDictionary</b> contains an element
            with the specified key.
            </summary>
            <returns>
            <b>true</b> if the <b>IDictionary</b> contains an element with
            the key; otherwise, <b>false</b>.
            </returns>
            <param name="key">
            The key to locate in the <b>IDictionary</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Clear">
            <summary>
            Removes all mappings from this dictionary.
            </summary>
            <remarks>
            Some implementations will attempt to lock the entire dictionary
            (if necessary) before preceeding with the clear operation. For
            such implementations, the entire dictionary has to be either
            already locked or able to be locked for this operation to
            succeed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the
            <b>IDictionary</b> object.
            </summary>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            <param name="key">
            The object to use as the key of the element to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            <b>IDictionary</b> object.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <b>ICollection</b> to an array,
            starting at a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from <b>ICollection</b>.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Tangosol#Net#Cache#ICache#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.GetAll(System.Collections.ICollection)">
            <summary>
            Get the values for all the specified keys, if they are in the
            cache.
            </summary>
            <remarks>
            <p>
            For each key that is in the cache, that key and its corresponding
            value will be placed in the dictionary that is returned by this
            method. The absence of a key in the returned dictionary indicates
            that it was not in the cache, which may imply (for caches that
            can load behind the scenes) that the requested data could not be
            loaded.</p>
            <p>
            The result of this method is defined to be semantically the same
            as the following implementation, without regards to threading
            issues:</p>
            <pre>
            IDictionary dict = new AnyDictionary();
            // could be a Hashtable (but does not have to)
            foreach (object key in colKeys)
            {
                object value = this[key];
                if (value != null || Contains(key))
                {
                    dict[key] = value;
                }
            }
            return dict;
            </pre>
            </remarks>
            <param name="keys">
            A collection of keys that may be in the named cache.
            </param>
            <returns>
            A dictionary of keys to values for the specified keys passed in
            <paramref name="keys"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Insert(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            <p>
            Invoking this method is equivalent to the following call:
            <pre>
            Insert(key, value, CacheExpiration.Default);
            </pre></p>
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c>
            with the specified key, if the implementation supports
            <c>null</c> values.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Insert(System.Object,System.Object,System.Int64)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            This variation of the <see cref="M:Tangosol.Net.Cache.WrapperNamedCache.Insert(System.Object,System.Object)"/>
            method allows the caller to specify an expiry (or "time to live")
            for the cache entry.
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire,
            also referred to as the entry's "time to live"; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT"/> to use the cache's
            default time-to-live setting; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.NEVER"/> to indicate that the
            cache entry should never expire; this milliseconds value is
            <b>not</b> a date/time value, but the amount of time object will
            be kept in the cache.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c> with
            the specified key, if the implementation supports <c>null</c>
            values.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If the requested expiry is a positive value and the
            implementation does not support expiry of cache entries.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.InsertAll(System.Collections.IDictionary)">
            <summary>
            Copies all of the mappings from the specified dictionary to this
            cache (optional operation).
            </summary>
            <remarks>
            These mappings will replace any mappings that this cache had for
            any of the keys currently in the specified dictionary.
            </remarks>
            <param name="dictionary">
            Mappings to be stored in this cache.
             </param>
            <exception cref="T:System.InvalidCastException">
            If the class of a key or value in the specified dictionary
            prevents it from being stored in this cache.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
            <exception cref="T:System.NullReferenceException">
            This cache does not permit <c>null</c> keys or values, and the
            specified key or value is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through cache items.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate through
            cache items.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Release">
            <summary>
            Release local resources associated with this instance of
            INamedCache.
            </summary>
            <remarks>
            <p>
            Releasing a cache makes it no longer usable, but does not affect
            the cache itself. In other words, all other references to the
            cache will still be valid, and the cache data is not affected by
            releasing the reference.
            Any attempt to use this reference afterword will result in an
            exception.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Destroy">
            <summary>
            Release and destroy this instance of INamedCache.
            </summary>
            <remarks>
            <p>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the entire
            cluster to this cache will be invalidated, the cached data will
            be cleared, and all resources will be released.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Truncate">
            <summary>
            Removes all mappings from this instance of INamedCache.
            </summary>
            <remarks>
            Note: the removal of entries caused by this truncate operation will
            not be observable.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Add a standard cache listener that will receive all events
            (inserts, updates, deletes) that occur against the cache, with
            the key, old-value and new-value included.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            AddCacheListener(listener, (IFilter) null, false);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a standard cache listener that previously signed up for
            all events.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            RemoveCacheListener(listener, (IFilter) null);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object,System.Boolean)">
            <summary>
            Add a cache listener for a specific key.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.OldValue"/> and
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.NewValue"/> properties.</p>
            <p>
            To unregister the ICacheListener, use the
            <see cref="M:Tangosol.Net.Cache.WrapperNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)">
            <summary>
            Remove a cache listener that previously signed up for events
            about a specific key.
            </summary>
            <param name="listener">
            The listener to remove.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Add a cache listener that receives events based on a filter
            evaluation.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the <b>OldValue</b> and <b>NewValue</b>
            properties.</p>
            <p>
            To unregister the <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, use the
            <see cref="M:Tangosol.Net.Cache.WrapperNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.</param>
            <param name="filter">
            A filter that will be passed <b>CacheEvent</b> objects to
            select from; a <b>CacheEvent</b> will be delivered to the
            listener only if the filter evaluates to <b>true</b> for that
            <b>CacheEvent</b>; <c>null</c> is equivalent to a filter
            that alway returns <b>true</b>.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)">
            <summary>
            Remove a cache listener that previously signed up for events
            based on a filter evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="filter">
            A filter used to evaluate events; <c>null</c> is equivalent to a
            filter that alway returns <b>true</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Lock(System.Object,System.Int64)">
            <summary>
            Attempt to lock the specified item within the specified period of
            time.
            </summary>
            <remarks>
            <p>
            The item doesn't have to exist to be <i>locked</i>. While the
            item is locked there is known to be a <i>lock holder</i> which
            has an exclusive right to modify (calling put and remove methods)
            that item.</p>
            <p>
            Lock holder is an abstract concept that depends on the
            IConcurrentCache implementation. For example, holder could
            be a cluster member or a thread (or both).</p>
            <p>
            Locking strategy may vary for concrete implementations as well.
            Lock could have an expiration time (this lock is sometimes called
            a "lease") or be held indefinitely (until the lock holder
            terminates).</p>
            <p>
            Some implementations may allow the entire map to be locked. If
            the map is locked in such a way, then only a lock holder is
            allowed to perform any of the "put" or "remove" operations.</p>
            <p>
            Passing the special constant
            <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> as the <i>key</i>
            parameter to indicate the cache lock is not allowed for
            WrapperNamedCache and will cause an exception to be thrown.</p>
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <param name="waitTimeMillis">
            The number of milliseconds to continue trying to obtain a lock;
            pass zero to return immediately; pass -1 to block the calling
            thread until the lock could be obtained.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked within the
            specified time; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Lock(System.Object)">
            <summary>
            Attempt to lock the specified item and return immediately.
            </summary>
            <remarks>
            This method behaves exactly as if it simply performs the call
            <b>Lock(key, 0)</b>.
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Unlock(System.Object)">
            <summary>
            Unlock the specified item.
            </summary>
            <remarks>
            The item doesn't have to exist to be <i>unlocked</i>.
            If the item is currently locked, only the <i>holder</i> of the
            lock could successfully unlock it.
            </remarks>
            <param name="key">
            Key being unlocked.
            </param>
            <returns>
            <b>true</b> if the item was successfully unlocked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.GetKeys(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the keys contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of keys for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.GetValues(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of the values for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.GetValues(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            It is guaranteed that enumerator will traverse the array in such
            a way that the values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.GetEntries(Tangosol.Util.IFilter)">
            <summary>
            Return a collectioin of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.GetEntries(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            <p>
            It is guaranteed that enumerator will traverse the array in such
            a way that the entry values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.AddIndex(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer)">
            <summary>
            Add an index to this IQueryCache.
            </summary>
            <remarks>
            This allows to correlate values stored in this
            <i>indexed cache</i> (or attributes of those values) to the
            corresponding keys in the indexed cache and increase the
            performance of <b>GetKeys</b> and <b>GetEntries</b> methods.
            </remarks>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the indexed
            cache. Must not be <c>null</c>.
            </param>
            <param name="isOrdered">
            <b>true</b> if the contents of the indexed information should be
            ordered; <b>false</b> otherwise.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on entries
            in the indexed cache; or <c>null</c> if the entries' values
            natural ordering should be used.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.RemoveIndex(Tangosol.Util.IValueExtractor)">
            <summary>
            Remove an index from this IQueryCache.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Invoke(System.Object,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the entry
            specified by the passed key, returning the result of the
            invocation.
            </summary>
            <param name="key">
            The key to process; it is not required to exist within the
            cache.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified key.
            </param>
            <returns>
            The result of the invocation as returned from the
            <b>IEntryProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.InvokeAll(System.Collections.ICollection,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entries specified by the passed keys, returning the result of the
            invocation for each.
            </summary>
            <param name="keys">
            The keys to process; these keys are not required to exist within
            the cache.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against each of the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.InvokeAll(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the set
            of entries that are selected by the given <see cref="T:Tangosol.Util.IFilter"/>,
            returning the result of the invocation for each.
            </summary>
            <remarks>
            <p>
            Unless specified otherwise, IInvocableCache implementations
            will perform this operation in two steps: (1) use the filter to
            retrieve a matching entry collection; (2) apply the agent to
            every filtered entry. This algorithm assumes that the agent's
            processing does not affect the result of the specified filter
            evaluation, since the filtering and processing could be
            performed in parallel on different threads.</p>
            <p>
            If this assumption does not hold, the processor logic has to be
            idempotent, or at least re-evaluate the filter. This could be
            easily accomplished by wrapping the processor with the
            <see cref="T:Tangosol.Util.Processor.ConditionalProcessor"/>.</p>
            </remarks>
            <param name="filter">
            An <see cref="T:Tangosol.Util.IFilter"/> that results in the collection of keys to
            be processed.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> to use to process the specified
            keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against the keys that are selected by the
            given <b>IFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Aggregate(System.Collections.ICollection,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the entries specified by
            the passed keys.
            </summary>
            <param name="keys">
            The collection of keys that specify the entries within this cache
            to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the specified entries of this cache.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Aggregate(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the collection of
            entries that are selected by the given <b>IFilter</b>.
            </summary>
            <param name="filter">
            an <see cref="T:Tangosol.Util.IFilter"/> that is used to select entries within
            this cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the selected entries of this cache.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.Dispose">
            <summary>
            Calls <see cref="M:Tangosol.Net.Cache.WrapperNamedCache.Release"/> to release the resources associated with this cache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Cache.WrapperNamedCache.ToString">
            <summary>
            Provide a human-readable representation of this <b>WrapperNamedCache</b>.
            </summary>
            <returns>
            A human-readable representation of this <b>WrapperNamedCache</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Cache.WrapperNamedCache.m_namedCache">
            <summary>
            Actual (wrapped) INamedCache.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Cache.WrapperNamedCache.NamedCache">
            <summary>
            Actual (wrapped) <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <value>
            Wrapped <b>INamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.WrapperNamedCache.CacheName">
            <summary>
            Gets the cache name.
            </summary>
            <value>
            The cache name.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.WrapperNamedCache.CacheService">
            <summary>
            Gets the <see cref="T:Tangosol.Net.ICacheService"/> that this INamedCache
            is a part of.
            </summary>
            <value>
            The cache service this INamedCache is a part of.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.WrapperNamedCache.IsActive">
            <summary>
            Specifies whether or not the INamedCache is active.
            </summary>
            <value>
            <b>true</b> if the INamedCache is active; <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.WrapperNamedCache.Count">
            <summary>
            Returns the number of key-value mappings in this cache.
            </summary>
            <value>
            The number of key-value mappings in this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.WrapperNamedCache.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to this
            object.
            </summary>
            <value>
            An object that can be used to synchronize access to this
            object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.WrapperNamedCache.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <b>ICollection</b>
            is synchronized (thread safe).
            </summary>
            <value>
            <b>true</b> if access to the <b>ICollection</b> is synchronized
            (thread safe); otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.WrapperNamedCache.Item(System.Object)">
            <summary>
            Returns the value to which this cache maps the specified key.
            </summary>
            <remarks>
            <p>
            Returns <c>null</c> if the cache contains no mapping for
            this key. A return value of <c>null</c> does not
            <i>necessarily</i> indicate that the cache contains no mapping
            for the key; it's also possible that the cache explicitly maps
            the key to <c>null</c>.</p>
            <p>
            The <see cref="M:System.Collections.IDictionary.Contains(System.Object)"/> operation may be used to
            distinguish these two cases.</p>
            </remarks>
            <param name="key">
            Key whose associated value is to be returned.
            </param>
            <returns>
            The value to which this cache maps the specified key, or
            <c>null</c> if the cache contains no mapping for this key.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the key is of an inappropriate type for this cache.
            </exception>
            <exception cref="T:System.NullReferenceException">
            If the key is <c>null</c> and this cache does not permit
            <c>null</c> keys.
            </exception>
            <seealso cref="M:System.Collections.IDictionary.Contains(System.Object)"/>
        </member>
        <member name="P:Tangosol.Net.Cache.WrapperNamedCache.Keys">
            <summary>
            Gets an <b>ICollection</b> containing the keys of the
            <b>IDictionary</b>.
            </summary>
            <returns>
            An <b>ICollection</b> object containing the keys of the
            <b>IDictionary</b> object.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.WrapperNamedCache.Values">
            <summary>
            Gets an <b>ICollection</b> containing the values of the
            <b>IDictionary</b>.
            </summary>
            <returns>
            An <b>ICollection</b> object containing the values of the
            <b>IDictionary</b> object.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Cache.WrapperNamedCache.IsReadOnly">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object is
            read-only.
            </summary>
            <value>
            Always <b>true</b> for this <b>INamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.WrapperNamedCache.IsFixedSize">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object has
            a fixed size.
            </summary>
            <value>
            Always <b>false</b> for this <b>INamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Cache.WrapperNamedCache.Entries">
            <summary>
            Gets a collection of <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> instances
            within the cache.
            </summary>
            <value>
            A collection of <b>ICacheEntry</b> objects.
            </value>
        </member>
        <member name="T:Tangosol.Net.CompressionFilter">
            <summary>
            Provides a compression wrapper for an <see cref="T:System.IO.Stream"/>.
            </summary>
            <author>Cameron Purdy  2002.08.20</author>
            <author>Goran Milosavljevic  2008.08.07</author>
        </member>
        <member name="M:Tangosol.Net.CompressionFilter.GetOutputStream(System.IO.Stream)">
            <summary>
            Requests an output <b>Stream</b> that wraps the passed
            <b>Stream</b>.
            </summary>
            <param name="stream">
            The <b>Stream</b> to be wrapped.
            </param>
            <returns>
            A <b>Stream</b> that delegates to ("wraps") the passed
            <b>Stream</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.CompressionFilter.GetInputStream(System.IO.Stream)">
            <summary>
            Requests an input <b>Stream</b> that wraps the passed
            <b>Stream</b>.
            </summary>
            <param name="stream">
            The <b>Stream</b> to be wrapped.
            </param>
            <returns>
            A <b>Stream</b> that delegates to ("wraps") the passed
            <b>Stream</b>.
            </returns>
        </member>
        <member name="T:Tangosol.Net.CompressionFilter.GZipInputStream">
            <summary>
            Provides a wrapper around <see cref="T:System.IO.Compression.GZipStream"/> that supports
            getting a current position within the stream.
            </summary>
        </member>
        <member name="M:Tangosol.Net.CompressionFilter.GZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Constructs new <b>GZipInputStream</b> with decompress option
            set.
            </summary>
            <param name="stream">
            The input stream.
            </param>
        </member>
        <member name="M:Tangosol.Net.CompressionFilter.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a number of decompressed bytes into the specified byte
            array.
            </summary>
            <param name="array">
            The array used to store decompressed bytes.
            </param>
            <param name="offset">
            The location in the array to begin reading.
            </param>
            <param name="count">
            The number of bytes decompressed.
            </param>
            <returns>
            The number of bytes that were decompressed into the byte
            array. If the end of the stream has been reached, zero or the
            number of bytes read is returned.
            </returns>
        </member>
        <member name="F:Tangosol.Net.CompressionFilter.GZipInputStream.m_position">
            <summary>
            Current position within the stream.
            </summary>
        </member>
        <member name="P:Tangosol.Net.CompressionFilter.GZipInputStream.Position">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
        </member>
        <member name="T:Tangosol.Net.CompressionFilter.GZipOutputStream">
            <summary>
            Provides a wrapper around <see cref="T:System.IO.Compression.GZipStream"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.CompressionFilter.GZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Constructs new <b>GZipOutputStream</b> with compress option
            set.
            </summary>
            <param name="stream">
            The output stream.
            </param>
        </member>
        <member name="T:Tangosol.Net.ConfigurableAddressProvider">
            <summary>
            ConfigurableAddressProvider is an implementation of the
            <see cref="T:Tangosol.Net.IAddressProvider"/> interface based on a static list of
            addresses configured in an XML element that contains one or more
            items in the following format:
            <pre>
            &lt;socket-address&gt;
                &lt;address&gt;...&lt;/address&gt;
                &lt;port&gt;...&lt;/port&gt;
            &lt;/socket-address&gt;
            </pre>
            </summary>
            <remarks>
            The order of items in the configured list will be randomized to
            provide basic load balancing.
            This implementation is not thread safe.
            </remarks>
            <author>Gene Gleyzer  2008.08.18</author>
            <author>Ana Cikic  2008.08.22</author>
            <since>Coherence 3.4</since>
        </member>
        <member name="T:Tangosol.Net.IAddressProvider">
            <summary>
            The IAddressProvider is an interface that serves as a means to
            provide addresses to a consumer.
            </summary>
            <remarks>
            Simple implementations could be backed by a static list; more
            complex ones could use dynamic discovery protocols.
            </remarks>
            <author>Gene Gleyzer, Jason Howes  2008.08.14</author>
            <author>Ana Cikic  2008.08.22</author>
            <since>Coherence 3.4</since>
        </member>
        <member name="M:Tangosol.Net.IAddressProvider.Accept">
            <summary>
            This method should be called by the client immediately after it
            determines that it can successfully use an address returned by
            the <see cref="P:Tangosol.Net.IAddressProvider.NextAddress"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.IAddressProvider.Reject(System.Exception)">
            <summary>
            This method should be called by the client immediately after it
            determines that an attempt to use an address returned by the
            <see cref="P:Tangosol.Net.IAddressProvider.NextAddress"/> has failed.
            </summary>
            <param name="eCause">
            (Optional) an exception that carries the reason why the caller
            rejected the previously returned address.
            </param>
        </member>
        <member name="P:Tangosol.Net.IAddressProvider.NextAddress">
            <summary>
            Next available address to use.
            </summary>
            <remarks>
            If the caller can successfully use the returned address (e.g. a
            connection was established), it should call the
            IAddressProvider's <see cref="M:Tangosol.Net.IAddressProvider.Accept"/> method.
            </remarks>
            <value>
            The next available address or <c>null</c> if the list of
            available addresses was exhausted.
            </value>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProvider.#ctor(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Construct an instance of ConfigurableAddressProvider based on the
            specified XML element.
            </summary>
            <remarks>
            Unresolvable addresses will be skipped.
            </remarks>
            <param name="xmlConfig">
            The XML element that contains the configuration info.
            </param>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProvider.#ctor(Tangosol.Run.Xml.IXmlElement,System.Boolean)">
            <summary>
            Construct an instance of ConfigurableAddressProvider based on the
            specified XML element.
            </summary>
            <param name="xmlConfig">
            The XML element that contains the configuration info.
            </param>
            <param name="isSafe">
            True if the provider skips unresolved addresses.
            </param>
            <since>12.2.1</since>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProvider.Accept">
            <summary>
            This method should be called by the client immediately after it
            determines that it can successfully use an address returned by
            the <see cref="P:Tangosol.Net.IAddressProvider.NextAddress"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProvider.Reject(System.Exception)">
            <summary>
            This method should be called by the client immediately after it
            determines that an attempt to use an address returned by the
            <see cref="P:Tangosol.Net.IAddressProvider.NextAddress"/> has failed.
            </summary>
            <param name="eCause">
            (Optional) an exception that carries the reason why the caller
            rejected the previously returned address.
            </param>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProvider.Reset">
            <summary>
            Make all addresses iterable, starting at the first address.
            </summary>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProvider.Reset(System.Int32)">
            <summary>
            Make all addresses iterable, starting at the index after the specified one.
            </summary>
            <param name="iLast">
            The index after which to start.
            </param>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProvider.Configure(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Configure this ConfigurableAddressProvider based on the specified XML.
            </summary>
            <param name="xmlConfig">
            The XML element that contains the configuration info.
            </param>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProvider.SortHolders(System.Collections.Generic.IList{Tangosol.Net.ConfigurableAddressProvider.AddressHolder})">
            <summary>
            Sort the holders in the order to be returned by the 
            NextAddress property.  This implementation randomizes the holder
            list for simple load balancing.
            </summary>
            <param name="list">
            The original list retrieved from the configuration.
            </param>
            <returns>
            The re-ordered list.
            </returns>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProvider.ToString">
            <summary>
            Return a string representation of this
            ConfigurableAddressProvider.
            </summary>
            <returns>
            A string representation of the list of configured addresses.
            </returns>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProvider.ResolveAddress(System.String,System.Int32)">
            <summary>
            Resolve a host and port.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port</param>
            <returns>An <see cref="T:System.Net.IPEndPoint"/> enumerator.</returns>
            <since>12.2.1</since>
        </member>
        <member name="F:Tangosol.Net.ConfigurableAddressProvider.f_listHolders">
            <summary>
            A list of AddressHolder objects.
            </summary>
        </member>
        <member name="F:Tangosol.Net.ConfigurableAddressProvider.m_iterAddr">
            <summary>
            An address iterator for the previously resolved address.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="F:Tangosol.Net.ConfigurableAddressProvider.m_last">
            <summary>
            Index of the last returned address.
            </summary>
        </member>
        <member name="F:Tangosol.Net.ConfigurableAddressProvider.m_isSafe">
            <summary>
            Specifies if the provider is only to return resolved addresses.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.ConfigurableAddressProvider.NextAddress">
            <summary>
            Next available address to use.
            </summary>
            <remarks>
            If the caller can successfully use the returned address (e.g. a
            connection was established), it should call the
            IAddressProvider's <see cref="M:Tangosol.Net.IAddressProvider.Accept"/> method.
            </remarks>
            <value>
            The next available address or <c>null</c> if the list of
            available addresses was exhausted.
            </value>
        </member>
        <member name="T:Tangosol.Net.ConfigurableAddressProvider.AddressHolder">
            <summary>
            A stateful holder for obtaining an <see cref="T:System.Net.IPEndPoint"/> object.
            </summary>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProvider.AddressHolder.#ctor(System.String,System.Int32)">
            <summary>
            Construct an AddressHolder for the specified
            <see cref="T:System.Net.IPEndPoint"/>.
            </summary>
            <param name="host">
            The host name or IP.
            </param>
            <param name="port">
            The port number.
            </param>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProvider.AddressHolder.Validate">
            <summary>
            Throw ArgumentException if any values are invalid.
            </summary>
            <returns>this</returns>
        </member>
        <member name="F:Tangosol.Net.ConfigurableAddressProvider.AddressHolder.f_host">
            <summary>
            The configured address, either hostname or IP address.
            </summary>
        </member>
        <member name="F:Tangosol.Net.ConfigurableAddressProvider.AddressHolder.f_port">
            <summary>
            The configured port.
            </summary>
        </member>
        <member name="F:Tangosol.Net.ConfigurableAddressProvider.AddressHolder.m_isPending">
            <summary>
            A flag indicating that the underlying address has been
            provided to a client, but has not yet been accepted.
            </summary>
        </member>
        <member name="F:Tangosol.Net.ConfigurableAddressProvider.AddressHolder.m_isReported">
            <summary>
            A flag indicating if this address has already been reported as
            unresolved.
            </summary>
        </member>
        <member name="P:Tangosol.Net.ConfigurableAddressProvider.AddressHolder.IsPending">
            <summary>
            Whether the underlying address has been accepted.
            </summary>
            <value>
            <b>true</b> iff the underlying address has not yet been
            accepted.
            </value>
        </member>
        <member name="P:Tangosol.Net.ConfigurableAddressProvider.AddressHolder.IsReported">
            <summary>
            Whether this address has already been reported as unresolvable.
            </summary>
            <value>
            <b>true</b> iff the underlying address has been reported.
            </value>
        </member>
        <member name="P:Tangosol.Net.ConfigurableAddressProvider.AddressHolder.Host">
            <summary>
            The host name.
            </summary>
        </member>
        <member name="P:Tangosol.Net.ConfigurableAddressProvider.AddressHolder.Port">
            <summary>
            The port.
            </summary>
        </member>
        <member name="T:Tangosol.Net.ConfigurableAddressProviderFactory">
            <summary>
            A <see cref="T:Tangosol.Net.IAddressProviderFactory"/> implementation that creates instances of a
            AddressProvider class configured using an XmlElement of the following structure:
            <pre>
            &lt;socket-address&gt;
                &lt;address&gt;...&lt;/address&gt;
                &lt;port&gt;...&lt;/port&gt;
            &lt;/socket-address&gt;
            </pre>
            </summary>
            <author>Wei Lin  2012.04.11</author>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="T:Tangosol.Net.IAddressProviderFactory">
            <summary>
            A factory for <see cref="T:Tangosol.Net.IAddressProvider"/> objects.
            </summary>
            <author>Wei Lin  2012.04.11</author>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="M:Tangosol.Net.IAddressProviderFactory.CreateAddressProvider">
            <summary>
            Create a new <see cref="T:Tangosol.Net.IAddressProvider"/>.
            </summary>
            <returns>
            The new <see cref="T:Tangosol.Net.IAddressProvider"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProviderFactory.CreateAddressProvider">
            <summary>
            Instantiate an <see cref="T:Tangosol.Net.IAddressProvider"/> configured according 
            to the specified XML. The passed XML has to conform to the 
            following format:
            <pre>
              &lt;!ELEMENT ... (socket-address+ | address-provider)&gt;
              &lt;!ELEMENT address-provider
                (class-name | (class-factory-name, method-name), init-params?&gt;
              &lt;!ELEMENT socket-address (address, port)&gt;
            </pre>
            </summary>
            <returns>
            An instance of the corresponding <b>IAddressProvider</b>
            implementation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.ConfigurableAddressProviderFactory.ToString">
            <summary>
            Provide a human-readable representation of this object.
            </summary>
            <returns>
            A string whose contents represent the value of this object.
            </returns>
        </member>
        <member name="P:Tangosol.Net.ConfigurableAddressProviderFactory.Config">
            <summary>
            <see cref="T:Tangosol.Run.Xml.IXmlElement"/> holding configuration information.
            </summary>
            <value>
            <see cref="T:Tangosol.Run.Xml.IXmlElement"/> holding configuration information.
            </value>
        </member>
        <member name="T:Tangosol.Net.DefaultConfigurableCacheFactory">
            <summary>
            The <b>DefaultConfigurableCacheFactory</b> provides a facility to
            access caches declared in a "cache-config.xsd" compliant configuration
            file.
            </summary>
            <remarks>
            <p>
            This class is designed to be easily extendable with a collection of
            factory methods allowing subclasses to customize it by overriding any
            subset of cache instantiation routines or even allowing the addition of
            custom schemes.</p>
            <p>
            There are various ways of using this factory:</p>
            <pre>
            IConfigurableCacheFactory factory =
                new DefaultConfigurableCacheFactory(path);
            INamedCache cacheOne = factory.EnsureCache("one");
            INamedCache cacheTwo = factory.EnsureCache("two");
            </pre>
            <p>
            Using this approach allows an easy customization by extending the
            DefaultConfigurableCacheFactory and changing the instantiation line:
            </p>
            <pre>
            IConfigurableCacheFactory factory =
                new CustomConfigurableCacheFactory();
            ...
            </pre>
            <p>
            Another option is using the static version of the "EnsureCache" call:
            </p>
            <pre>
            INamedCache cacheOne = CacheFactory.GetCache("one");
            INamedCache cacheTwo = CacheFactory.GetCache("two");
            </pre>
            which uses an instance of <see cref="T:Tangosol.Net.IConfigurableCacheFactory"/>
            obtained by the <see cref="P:Tangosol.Net.CacheFactory.ConfigurableCacheFactory"/>.
            </remarks>
            <author>Gene Gleyzer  2003.05.26</author>
            <author>Ana Cikic  2006.09.22</author>
            <since>Coherence 3.2</since>
            <seealso cref="M:Tangosol.Net.CacheFactory.GetCache(System.String)"/>
        </member>
        <member name="T:Tangosol.Net.IConfigurableCacheFactory">
            <summary>
            An interface for XML-driven cache factory.
            </summary>
            <author>Gene Gleyzer  2003.05.26</author>
            <author>Jason Howes  2006.06.28</author>
            <author>Ana Cikic  2006.09.19</author>
            <since>Coherence 2.2</since>
            <seealso cref="T:Tangosol.Net.DefaultConfigurableCacheFactory"/>
        </member>
        <member name="M:Tangosol.Net.IConfigurableCacheFactory.EnsureCache(System.String)">
            <summary>
            Ensure a cache for the given name using the corresponding XML
            configuration.
            </summary>
            <param name="cacheName">
            The cache name.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.INamedCache"/> created according to the
            configuration XML.
            </returns>
        </member>
        <member name="M:Tangosol.Net.IConfigurableCacheFactory.ReleaseCache(Tangosol.Net.INamedCache)">
            <summary>
            Release local resources associated with the specified instance of
            the cache.
            </summary>
            <remarks>
            This invalidates a reference obtained from the factory.
            <p>
            Releasing an <see cref="T:Tangosol.Net.INamedCache"/> reference makes it no
            longer usable, but does not affect the content of the cache. In
            other words, all other references to the cache will still be
            valid, and the cache data is not affected by releasing the
            reference.</p>
            <p>
            The reference that is released using this method can no longer be
            used; any attempt to use the reference will result in an
            exception.</p>
            </remarks>
            <param name="cache">
            The <b>INamedCache</b> object to be released.
            </param>
            <since>Coherence 3.5.1</since>
            <seealso cref="M:Tangosol.Net.IConfigurableCacheFactory.DestroyCache(Tangosol.Net.INamedCache)"/>
        </member>
        <member name="M:Tangosol.Net.IConfigurableCacheFactory.DestroyCache(Tangosol.Net.INamedCache)">
            <summary>
            Releases and destroys the specified <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <remarks>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the entire
            cluster to this cache will be invalidated, the cached data will
            be cleared, and all resources will be released.
            </remarks>
            <param name="cache">
            The <b>INamedCache</b> object to be destroyed.
            </param>
            <since>Coherence 3.5.1</since>
            <seealso cref="M:Tangosol.Net.IConfigurableCacheFactory.ReleaseCache(Tangosol.Net.INamedCache)"/>
        </member>
        <member name="M:Tangosol.Net.IConfigurableCacheFactory.EnsureService(System.String)">
            <summary>
            Ensure a service for the given name using the corresponding XML
            configuration.
            </summary>
            <param name="serviceName">
            The service name.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.IService"/> created according to the configuration
            XML.
            </returns>
        </member>
        <member name="M:Tangosol.Net.IConfigurableCacheFactory.Shutdown">
            <summary>
            Release all resources allocated by this cache factory.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.CACHE_NAME">
            <summary>
            The name of the replaceable parameter representing the cache
            name.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.SCHEME_REF">
            <summary>
            The name of the replaceable parameter representing the scheme
            reference.
            </summary>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.#ctor">
            <summary>
            Construct a default DefaultConfigurableCacheFactory using the
            default configuration file name.
            </summary>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.#ctor(System.String)">
            <summary>
            Construct a DefaultConfigurableCacheFactory using the specified
            path to a "cache-config.xsd" compliant configuration file.
            </summary>
            <param name="path">
            The configuration file path.
            </param>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.#ctor(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Construct a DefaultConfigurableCacheFactory using the specified
            configuration XML.
            </summary>
            <param name="xmlConfig">
            The configuration <see cref="T:Tangosol.Run.Xml.IXmlElement"/>.
            </param>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.EnsureCache(System.String)">
            <summary>
            Ensure a cache for the given name using the corresponding XML
            configuration.
            </summary>
            <param name="cacheName">
            The cache name.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.INamedCache"/> created according to the
            configuration XML.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ReleaseCache(Tangosol.Net.INamedCache)">
            <summary>
            Release local resources associated with the specified cache
            instance.
            </summary>
            <remarks>
            This invalidates a reference obtained from the factory.
            <p>
            Releasing an <see cref="T:Tangosol.Net.INamedCache"/> reference makes it no
            longer usable, but does not affect the content of the cache. In
            other words, all other references to the cache will still be
            valid, and the cache data is not affected by releasing the
            reference.</p>
            <p>
            The reference that is released using this method can no longer be
            used; any attempt to use the reference will result in an
            exception.</p>
            </remarks>
            <param name="cache">
            The <b>INamedCache</b> object to be released.
            </param>
            <since>Coherence 3.5.1</since>
            <seealso cref="M:Tangosol.Net.IConfigurableCacheFactory.DestroyCache(Tangosol.Net.INamedCache)"/>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.DestroyCache(Tangosol.Net.INamedCache)">
            <summary>
            Release and destroy the specified cache.
            </summary>
            <remarks>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the entire
            cluster to this cache will be invalidated, the cached data will
            be cleared, and all resources will be released.
            </remarks>
            <param name="cache">
            The <b>INamedCache</b> object to be destroyed.
            </param>
            <since>Coherence 3.5.1</since>
            <seealso cref="M:Tangosol.Net.IConfigurableCacheFactory.ReleaseCache(Tangosol.Net.INamedCache)"/>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.EnsureService(System.String)">
            <summary>
            Ensure a service for the given name using the corresponding XML
            configuration.
            </summary>
            <param name="serviceName">
            The service name.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.IService"/> created according to the configuration
            XML.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.Shutdown">
            <summary>
            Release all resources allocated by this cache factory.
            </summary>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.LoadDefaultCacheConfig">
            <summary>
            Load and return the default XML cache configuration.
            </summary>
            <returns>
            The default XML cache configuration.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.FindSchemeMapping(System.String)">
            <summary>
            In the configuration XML find a "cache-mapping" element
            associated with a given cache name.
            </summary>
            <param name="cacheName">
            The value of the "cache-name" element to look for.
            </param>
            <returns>
            A <see cref="T:Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo"/> object associated with a given cache
            name.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ResolveScheme(Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo)">
            <summary>
            In the configuration XML find a "scheme" element associated with
            a given cache and resolve it (recursively) using the "scheme-ref"
            elements.
            </summary>
            <remarks>
            The returned XML is always a clone of the actual configuration
            and could be safely modified.
            </remarks>
            <param name="info">
            The cache info.
            </param>
            <returns>
            A resolved "scheme" element associated with a given cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.FindScheme(System.String)">
            <summary>
            In the configuration XML find a "scheme" element associated with
            a given cache name.
            </summary>
            <param name="schemeName">
            The value of the "scheme-name" element to look for.
            </param>
            <returns>
            A "scheme" element associated with a given cache name.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.FindScheme(Tangosol.Run.Xml.IXmlElement,System.String)">
            <summary>
            In the specified configuration XML, find a "scheme" element
            associated with the specified scheme name.
            </summary>
            <param name="xmlConfig">
            The xml configuration.
            </param>
            <param name="schemeName">
            The value of the "scheme-name" element to look for.
            </param>
            <returns>
            A "scheme" element associated with a given scheme name, or
            <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.FindServiceScheme(System.String)">
            <summary>
            In the configuration XML find a "scheme" element associated with
            a given service name.
            </summary>
            <param name="serviceName">
            The value of the "service-name" element to look for.
            </param>
            <returns>
            A "scheme" element associated with a given service name.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ResolveScheme(Tangosol.Run.Xml.IXmlElement,Tangosol.Run.Xml.IXmlElement,Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Resolve the specified "XYZ-scheme" by retrieving the base element
            refered to by the "scheme-ref" element, resolving it recursively,
            and combining it with the specified overrides and cache specific
            attributes.
            </summary>
            <param name="xmlConfig">
            The cache configuration xml.
            </param>
            <param name="xmlScheme">
            A scheme element to resolve.
            </param>
            <param name="info">
            The cache info (optional).
            </param>
            <param name="isChild">
            If <b>true</b>, the actual cache scheme is the only "xyz-scheme"
            child of the specified xmlScheme element; otherwise it's the
            xmlScheme element itself.</param>
            <param name="isRequired">
            If <b>true</b>, the child scheme must be present; <b>false</b>
            otherwise.
            </param>
            <param name="apply">
            If <b>true</b>, apply the specified overrides and cache-specific
            attributes to the base scheme element; otherwise return a
            reference to the base scheme element.
            </param>
            <returns>
            A "scheme" element associated with a given cache name;
            <c>null</c> if the child is missing and is not required.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ResolveScheme(Tangosol.Run.Xml.IXmlElement,Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo,System.Boolean,System.Boolean)">
            <summary>
            Resolve the specified "XYZ-scheme" by retrieving the base element
            refered to by the "scheme-ref" element, resolving it recursively,
            and combining it with the specified overrides and cache specific
            attributes.
            </summary>
            <param name="xmlScheme">
            A scheme element to resolve.
            </param>
            <param name="info">
            The cache info (optional).
            </param>
            <param name="isChild">
            If <b>true</b>, the actual cache scheme is the only "xyz-scheme"
            child of the specified xmlScheme element; otherwise it's the
            xmlScheme element itself.
            </param>
            <param name="isRequired">
            If <b>true</b>, the child scheme must be present; <b>false</b>
            otherwise.
            </param>
            <returns>
            A "scheme" element associated with a given cache name;
            <c>null</c> if the child is missing and is not required.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.EnsureCache(Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Obtain the <see cref="T:Tangosol.Net.INamedCache"/> reference for the cache
            service defined by the specified scheme.
            </summary>
            <param name="info">
            The cache info.
            </param>
            <param name="xmlScheme">
            The scheme element for the cache.
            </param>
            <returns>
            <see cref="T:Tangosol.Net.INamedCache"/> instance.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.EnsureService(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Ensure the service for the specified scheme.
            </summary>
            <param name="xmlScheme">
            The scheme.
            </param>
            <returns>
            Running <see cref="T:Tangosol.Net.IService"/> corresponding to the scheme.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ConfigureCache(Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Ensures a cache for given scheme.
            </summary>
            <param name="info">
            The cache info.
            </param>
            <param name="xmlScheme">
            The corresponding scheme.
            </param>
            <returns>
            A named cache created according to the description in the
            configuration.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.VerifyCacheListener(Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo,Tangosol.Net.Cache.ICache,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Check whether or not an <see cref="T:Tangosol.Net.Cache.ICacheListener"/> has to be
            instantiated and added to an <b>ICache</b> according to a scheme
            definition.
            </summary>
            <param name="info">
            The cache info.
            </param>
            <param name="cache">
            The <b>ICache</b> to add a listener to.
            </param>
            <param name="xmlScheme">
            The corresponding scheme.
            </param>
            <exception cref="T:System.ArgumentException">
            If the listener is required, but the cache does not implement the
            <see cref="T:Tangosol.Net.Cache.IObservableCache"/> interface or if the listener cannot
            be instantiated.
            </exception>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.InstantiateNearCache(Tangosol.Net.Cache.ICache,Tangosol.Net.INamedCache,Tangosol.Net.Cache.CompositeCacheStrategyType)">
            <summary>
            Construct an <see cref="T:Tangosol.Net.Cache.NearCache"/> using the specified
            parameters.
            </summary>
            <remarks>
            This method exposes a corresponding <b>NearCache</b> constructor
            and is provided for the express purpose of allowing its override.
            </remarks>
            <param name="cacheFront">
            <b>ICache</b> to put in front of the back cache.
            </param>
            <param name="cacheBack">
            <b>INamedCache</b> to put behind the front cache.
            </param>
            <param name="strategy">
            Specifies the strategy used for the front cache
            invalidation; valid values are:
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenNone"/>
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenPresent"/>
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenAll"/>
            <see cref="F:Tangosol.Net.Cache.CompositeCacheStrategyType.ListenAuto"/>
            </param>
            <returns>
            A newly instantiated <see cref="T:Tangosol.Net.Cache.NearCache"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ConfigureBackingCache(Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Configures a backing cache according to the scheme.
            </summary>
            <param name="info">
            The cache info.
            </param>
            <param name="xmlScheme">
            The scheme element for cache configuration.
            </param>
            <returns>
            A backing cache configured according to the scheme.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.InstantiateLocalNamedCache(Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Create a backing cache using the "local-scheme" element.
            </summary>
            <param name="info">
            The cache info.
            </param>
            <param name="xmlLocal">
            The "local-scheme" element.
            </param>
            <returns>
            A newly instantiated cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.InstantiateLocalNamedCache(System.Int32,System.Int32)">
            <summary>
            Construct a <see cref="T:Tangosol.Net.Impl.LocalNamedCache"/> using the specified
            parameters.
            </summary>
            <remarks>
            This method exposes a corresponding <b>LocalNamedCache</b>
            constructor and is provided for the express purpose of allowing
            its override.
            </remarks>
            <param name="units">
            The number of units that the cache manager will cache before
            pruning the cache.
            </param>
            <param name="expiryMillis">
            The number of milliseconds that each cache entry lives before
            being automatically expired.
            </param>
            <returns>
            A newly instantiated cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.InstantiateCache(Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Create a backing cache using the "class-scheme" element.
            </summary>
            <remarks>
            This method is a thin wrapper around
            <see cref="M:Tangosol.Net.DefaultConfigurableCacheFactory.InstantiateAny(Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo,Tangosol.Run.Xml.IXmlElement)"/>.
            </remarks>
            <param name="info">
            The cache info.
            </param>
            <param name="xmlClass">
            The "class-scheme" element.
            </param>
            <returns>
            A newly instantiated cache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.InstantiateCacheStore(Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Create an <see cref="T:Tangosol.Net.Cache.ICacheLoader"/> or <see cref="T:Tangosol.Net.Cache.ICacheStore"/>
            using the "class-scheme" element.
            </summary>
            <param name="info">
            The cache info.
            </param>
            <param name="xmlStore">
            The "class-scheme" or "extend-cache-scheme" element for the
            store.
            </param>
            <returns>
            A newly instantiated <b>ICacheStore</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.initializeBundler(Tangosol.Net.Cache.AbstractBundler,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Initialize the specified bundler using the "bundle-config" element.
            </summary>
            <param name="bundler">
            The bundler.
            </param>
            <param name="xmlBundle">
            A "bundle-config" element.
            </param>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.InstantiateBundlingNamedCache(Tangosol.Net.INamedCache,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Create a BundlingNamedCache using the "operation-bundling" element.
            </summary>
            <param name="cache">
            The wrapped cache.
            </param>
            <param name="xmlBundling">
            The "operation-bundling" element.
            </param>
            <returns>
            A newly instantiated BundlingNamedCache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.InstantiateCacheListener(Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Create an <see cref="T:Tangosol.Net.Cache.ICacheListener"/> using the "class-scheme"
            element.
            </summary>
            <param name="info">
            The cache info.
            </param>
            <param name="xmlClass">
            The "class-scheme" element.
            </param>
            <returns>
            A newly instantiated <b>ICacheListener</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.InstantiateAny(Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo,Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Create an object using "class-scheme" element.
            </summary>
            <remarks>
            <p>
            If the value of any "param-value" element contains the literal
            "{cache-name}", replace it with the actual cache name.</p>
            <p>
            Finally, if the value of "param-type" is "{scheme-ref}" then the
            "param-value" should be a name of the scheme that will be used in
            place of the value.</p>
            </remarks>
            <param name="info">
            The cache info.
            </param>
            <param name="xmlClass">
            The "class-scheme" element.
            </param>
            <returns>
            A newly instantiated object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.InstantiateSubtype(System.String,System.Type,System.Object[],Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Construct an instance of the specified type using the specified
            parameters.
            </summary>
            <param name="typeName">
            The type name.
            </param>
            <param name="supType">
            The super type of the newly instantiated type.
            </param>
            <param name="initParams">
            The constructor paramters.
            </param>
            <param name="xmlParams">
            Optional <b>IXmlElement</b> ("init-params").
            </param>
            <returns>
            A newly instantiated object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ReleaseCache(Tangosol.Net.INamedCache,System.Boolean)">
            <summary>
            Release a cache managed by this factory, optionally destroying it.
            </summary>
            <remarks>
            This invalidates a reference obtained from the factory.
            </remarks>
            <param name="cache">
            The <b>INamedCache</b> object to be released.
            </param>
            <param name="destroy">
            True if the cache should also be destroyed.
            </param>
            <since>Coherence 3.5.1</since>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.TranslateSchemeType(System.String)">
            <summary>
            Translate the scheme name into the scheme type.
            </summary>
            <remarks>
            Valid scheme types are any of the <see cref="T:Tangosol.Net.DefaultConfigurableCacheFactory.SchemeType"/>
            enumeration values.
            </remarks>
            <param name="scheme">
            The scheme name.
            </param>
            <returns>
            The scheme type.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.EnsureService(System.String,Tangosol.Net.ServiceType)">
            <summary>
            Ensure the service for the specified service name and type.
            </summary>
            <param name="serviceName">
            Service name.
            </param>
            <param name="serviceType">
            Service type.
            </param>
            <returns>
            An <b>IService</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ValidateConfig(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Check if configuration is valid:
            <list type="bullet">
            <item>service definition must not be duplicated</item>
            </list>
            </summary>
            <param name="config">
            <b>IXmlElement</b> with factory configuration.
            </param>
            <exception cref="T:System.ArgumentException">
            If configuration is not valid.
            </exception>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ConvertInt(Tangosol.Run.Xml.IXmlValue)">
            <summary>
            Convert the value in the specified <see cref="T:Tangosol.Run.Xml.IXmlValue"/> to an int.
            If the conversion fails, a warning will be logged.
            </summary>
            <param name="xmlValue">
            The element expected to contain an int value.
            </param>
            <returns>
            The int value in the provided element, or 0 upon a conversion
            failure.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ConvertInt(Tangosol.Run.Xml.IXmlValue,System.Int32)">
            <summary>
            Convert the value in the specified <see cref="T:Tangosol.Run.Xml.IXmlValue"/> to an int.
            If the conversion fails, a warning will be logged.
            </summary>
            <param name="xmlValue">
            The element expected to contain an int value.
            </param>
            <param name="defaultValue">
            The value that will be returned if the element does not contain
            a value that can be converted to int.
            </param>
            <returns>
            The int value in the provided element, or defaultValue upon a 
            conversion failure.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ReportConversionError(Tangosol.Run.Xml.IXmlValue,System.String,System.String,System.SystemException)">
            <summary>
            Log a failed type conversion.
            </summary>
            <param name="xmlValue">
            Element that contains the value that failed conversion.
            </param>
            <param name="type">
            Type that conversion was attempted to.
            </param>
            <param name="defaultValue">
            Default value that will be substituted.
            </param>
            <param name="e">
            Root cause of failed type conversion.
            </param>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ResolveSerializer(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Resolve and inject service serializer elements based on defaults
            defined in the cache configuration.
            </summary>
            <param name="xmlConfig">
            The configuration element to examine and modify.
            </param>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.s_configResource">
            <summary>
            The default location of the cache configuration file.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.m_xmlConfig">
            <summary>
            The configuration XML.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.m_storeCache">
            <summary>
            Store that holds cache references by name and optionally,
            if configured, IPrincipal.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.m_storeService">
            <summary>
            Store that holds service references by name and optionally,
            if configured, IPrincipal.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.m_operationalContext">
            <summary>
            The IOperationalContext for this DefaultConfigurableCacheFactory.
            </summary>
        </member>
        <member name="P:Tangosol.Net.DefaultConfigurableCacheFactory.DefaultCacheConfigResource">
            <summary>
            The <see cref="T:Tangosol.IO.Resources.IResource"/> for the default XML configuration used
            when one isn't explicitly passed in the constructor for this class.
            </summary>
            <value>
            The <see cref="T:Tangosol.IO.Resources.IResource"/> for the default XML configuration.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultConfigurableCacheFactory.DefaultCacheConfig">
            <summary>
            The default XML configuration used when one isn't explicitly passed
            in the constructor for this class.
            </summary>
            <value>
            The default XML configuration.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultConfigurableCacheFactory.Config">
            <summary>
            The current configuration of the object.
            </summary>
            <value>
            The XML configuration or <c>null</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            When setting, if the object is not in a state that allows the
            configuration to be set; for example, if the object has already
            been configured and cannot be reconfigured.
            </exception>
        </member>
        <member name="P:Tangosol.Net.DefaultConfigurableCacheFactory.OperationalContext">
            <summary>
            The <see cref="T:Tangosol.Net.IOperationalContext"/> for this
            DefaultConfigurableCacheFactory.
            </summary>
            <value>
            An <b>IOperationalContext</b> instance.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultConfigurableCacheFactory.StoreCache">
            <summary>
            Store that holds cache references by name and optionally,
            if configured, IPrincipal.
            </summary>
        </member>
        <member name="P:Tangosol.Net.DefaultConfigurableCacheFactory.StoreService">
            <summary>
            Store that holds cache references by name and optionally,
            if configured, IPrincipal.
            </summary>
        </member>
        <member name="T:Tangosol.Net.DefaultConfigurableCacheFactory.SchemeType">
            <summary>
            Scheme type enumeration.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.SchemeType.Unknown">
            <summary>
            The unknwown scheme type.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.SchemeType.Near">
            <summary>
            The near cache scheme.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.SchemeType.Local">
            <summary>
            The local cache scheme.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.SchemeType.Class">
            <summary>
            The custom class scheme.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.SchemeType.RemoteCache">
            <summary>
            The remote cache scheme.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.SchemeType.RemoteInvocation">
            <summary>
            The remote invocation scheme.
            </summary>
        </member>
        <member name="T:Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo">
            <summary>
            A <b>CacheInfo</b> is a placeholder for cache attributes retrieved
            during parsing the corresponding cache mapping element.
            </summary>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo.#ctor(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Construct a <b>CacheInfo</b> object.
            </summary>
            <param name="cacheName">
            The cache name.
            </param>
            <param name="schemeName">
            The corresponding scheme name.
            </param>
            <param name="attributes">
            The corresponding dictionary of attributes.
            </param>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo.ReplaceAttributes(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Find and replace the attributes names in "{}" format with the
            corresponding values for this cache info.
            </summary>
            <remarks>
            Note: the content of the specified <b>IXmlElement</b> could
            be modified, so the caller is supposed to clone the passed in
            XML if necessary.
            </remarks>
            <param name="xml">
            The <b>IXmlElement</b> to replace "{}" attributes at.
            </param>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo.m_cacheName">
            <summary>
            The cache name.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo.m_schemeName">
            <summary>
            The corresponding scheme name.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo.m_attributes">
            <summary>
            Map of scheme attributes.
            </summary>
        </member>
        <member name="P:Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo.CacheName">
            <summary>
            Obtain the cache name.
            </summary>
            <value>
            The cache name.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo.SchemeName">
            <summary>
            Obtain the scheme name.
            </summary>
            <value>
            The scheme name.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo.Attributes">
            <summary>
            Obtain the attributes dictionary.
            </summary>
            <value>
            The attributes dictionary.
            </value>
        </member>
        <member name="T:Tangosol.Net.DefaultConfigurableCacheFactory.ClassSchemeParameterResolver">
            <summary>
            An <see cref="T:Tangosol.Run.Xml.XmlHelper.IParameterResolver"/> implementation used
            by DefaultConfigurableCacheFactory when resolving class scheme
            configuration.
            </summary>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ClassSchemeParameterResolver.#ctor(Tangosol.Net.DefaultConfigurableCacheFactory,Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo)">
            <summary>
            Create ClassSchemeParameterResolver with specified parent
            DefaultConfigurableCacheFactory and cache info.
            </summary>
            <param name="parent">
            Parent <see cref="T:Tangosol.Net.DefaultConfigurableCacheFactory"/>.
            </param>
            <param name="info">
            <see cref="T:Tangosol.Net.DefaultConfigurableCacheFactory.CacheInfo"/> instance.
            </param>
        </member>
        <member name="M:Tangosol.Net.DefaultConfigurableCacheFactory.ClassSchemeParameterResolver.ResolveParameter(System.String,System.String)">
            <summary>
            Resolve the passed substitutable parameter.
            </summary>
            <param name="type">
            The value of the "param-type" element.
            </param>
            <param name="value">
            The value of the "param-value" element, which is enclosed by
            curly braces, indicating its substitutability.
            </param>
            <returns>
            The object value to use or the
            <see cref="F:Tangosol.Run.Xml.XmlHelper.UNRESOLVED"/> constant.
            </returns>
        </member>
        <member name="T:Tangosol.Net.DefaultOperationalContext">
            <summary>
            The DefaultOperationalContext provides an <see cref="T:Tangosol.Net.IOperationalContext"/>
            with information optained from XML in coherence.xsd format and default
            values.
            </summary>
            <author>Wei Lin  2010.11.3</author>
            <since>Coherence 3.7</since>
        </member>
        <member name="T:Tangosol.Net.IOperationalContext">
            <summary>
            IOperationalConetxt is an interface for providing Oracle Coherence
            operational configuration.
            </summary>
            <author>Wei Lin  2010.11.3</author>
            <since>Coherence 3.7</since>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.DiscoveryTimeToLive">
            <summary>
            The TTL for multicast based discovery.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.Edition">
            <summary>
            The product edition.
            </summary>
            <value>
            The product edition.
            </value>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.EditionName">
            <summary>
            The product edition in a formatted string.
            </summary>
            <value>
            The product edition in a formatted string.
            </value>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.LocalMember">
            <summary>
            An <see cref="T:Tangosol.Net.IMember"/> object representing this process.
            </summary>
            <value>
            The local <see cref="T:Tangosol.Net.IMember"/>.
            </value>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.FilterMap">
            <summary>
            A dictionary of network filter factories.
            </summary>
            <value>
            A dictionary of <see cref="T:Tangosol.IO.IWrapperStreamFactory"/> objects keyed
            by filter name.
            </value>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.SerializerMap">
            <summary>
            A dictionary of serializer factories.
            </summary>
            <value>
            A dictionary of <see cref="T:Tangosol.IO.ISerializerFactory"/> objects keyed
            by serializer name.
            </value>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.AddressProviderMap">
            <summary>
            A dictionary of address provider factories.
            </summary>
            <value>
            A dictionary of <see cref="T:Tangosol.Net.IAddressProviderFactory"/> objects keyed
            by name.
            </value>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.IdentityAsserter">
            <summary>
            An <see cref="T:Tangosol.Net.Security.IIdentityAsserter"/> that can be used to establish a
            user's identity.
            </summary>
            <value>
            The <see cref="T:Tangosol.Net.Security.IIdentityAsserter"/>.
            </value>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.IdentityTransformer">
            <summary>
            An <see cref="T:Tangosol.Net.Security.IIdentityTransformer"/> that can be used to transform
            an IPrincipal into an identity assertion.
            </summary>
            <value>
            The <see cref="T:Tangosol.Net.Security.IIdentityTransformer"/>.
            </value>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.IsPrincipalScopingEnabled">
            <summary>
            Indicates if principal scoping is enabled.
            </summary>
            <value>
            <b>true</b> if principal scoping is enabled.
            </value>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.LogLevel">
            <summary>
            The logging severity level.
            </summary>
            <value>
            The loggng severity level.
            </value>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.LogCharacterLimit">
            <summary>
            The maximum number of characters for a logger daemon to queue
            before truncating.
            </summary>
            <value>
            The maximum number of characters for a logger daemon to queue
            before truncating.
            </value>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.LogMessageFormat">
            <summary>
            The log message format.
            </summary>
            <value>
            The log message format.
            </value>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.LogDestination">
            <summary>
            The destination for log messages.
            </summary>
            <value>
            The destination for log messages.
            </value>
        </member>
        <member name="P:Tangosol.Net.IOperationalContext.LogName">
            <summary>
            The name of the logger.
            </summary>
            <value>
            The name of the logger.
            </value>
        </member>
        <member name="F:Tangosol.Net.DefaultOperationalContext.DEFAULT_EDITION_NAME">
            <summary>
            The default edition name.
            </summary>
        </member>
        <member name="M:Tangosol.Net.DefaultOperationalContext.#cctor">
            <summary>
            Static constructor. Initializes the default location of the
            operational configuration file.
            </summary>
        </member>
        <member name="M:Tangosol.Net.DefaultOperationalContext.#ctor">
            <summary>
            Construct a new DefaultOperationalContext.
            </summary>
        </member>
        <member name="M:Tangosol.Net.DefaultOperationalContext.#ctor(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Construct a new DefaultOperationalContext.
            </summary>
            <param name="config">
            An XML element corresponding to coherence.xsd.
            </param>
        </member>
        <member name="M:Tangosol.Net.DefaultOperationalContext.LoadDefaultOperationalConfig">
            <summary>
            Load and return the default XML operational configuration.
            </summary>
            <returns>
            The default XML operational configuration.
            </returns>
        </member>
        <member name="M:Tangosol.Net.DefaultOperationalContext.ParseEditionConfig">
            <summary>
            Parse and configure product edition information.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the configured edition name is invalid.
            </exception>
        </member>
        <member name="M:Tangosol.Net.DefaultOperationalContext.ParseLoggingConfig">
            <summary>
            Parse and configure logging information.
            </summary>
        </member>
        <member name="M:Tangosol.Net.DefaultOperationalContext.ParseLocalMemberConfig">
            <summary>
            Parse and configure local <see cref="T:Tangosol.Net.IMember"/> information.
            </summary>
        </member>
        <member name="M:Tangosol.Net.DefaultOperationalContext.ParseFilterConfig">
            <summary>
            Parse and configure network filter information.
            </summary>
        </member>
        <member name="M:Tangosol.Net.DefaultOperationalContext.ParseSerializerConfig">
            <summary>
            Parse and configure serializer information.
            </summary>
        </member>
        <member name="M:Tangosol.Net.DefaultOperationalContext.ParseAddressProviderConfig">
            <summary>
            Parse and configure address provider information.
            </summary>
        </member>
        <member name="M:Tangosol.Net.DefaultOperationalContext.ParseSecurityConfig">
            <summary>
            Parse and configure security-related information.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultOperationalContext.s_configResource">
            <summary>
            The default location of the operational configuration file.
            </summary>
        </member>
        <member name="F:Tangosol.Net.DefaultOperationalContext.m_config">
            <summary>
            The configuration XML.
            </summary>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.DefaultOperationalConfigResource">
            <summary>
            The <see cref="T:Tangosol.IO.Resources.IResource"/> for the default XML configuration used
            when one isn't explicitly passed in the constructor for this class.
            </summary>
            <value>
            The <see cref="T:Tangosol.IO.Resources.IResource"/> for the default XML configuration.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.DefaultOperationalConfig">
            <summary>
            The default XML configuration used when one isn't explicitly passed
            in the constructor for this class.
            </summary>
            <value>
            The default XML configuration.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.Config">
            <summary>
            The current configuration of the object.
            </summary>
            <value>
            The XML configuration or <c>null</c>.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.DiscoveryTimeToLive">
            <summary>
            The TTL for multicast based discovery.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.Edition">
            <summary>
            The product edition.
            </summary>
            <value>
            The product edition.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.EditionName">
            <summary>
            The product edition in a formatted string.
            </summary>
            <value>
            The product edition in a formatted string.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.LocalMember">
            <summary>
            An <see cref="T:Tangosol.Net.IMember"/> object representing this process.
            </summary>
            <value>
            The local <see cref="T:Tangosol.Net.IMember"/>.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.FilterMap">
            <summary>
            A dictionary of network filter factories.
            </summary>
            <value>
            A dictionary of <see cref="T:Tangosol.IO.IWrapperStreamFactory"/> objects keyed
            by filter name.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.SerializerMap">
            <summary>
            A dictionary of serializer factories.
            </summary>
            <value>
            A dictionary of <see cref="T:Tangosol.IO.ISerializerFactory"/> objects keyed
            by serializer name.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.AddressProviderMap">
            <summary>
            A dictionary of address provider factories.
            </summary>
            <value>
            A dictionary of <see cref="T:Tangosol.Net.IAddressProviderFactory"/> objects keyed
            by name.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.IdentityAsserter">
            <summary>
            An <see cref="T:Tangosol.Net.Security.IIdentityAsserter"/> that can be used to establish a
            user's identity.
            </summary>
            <value>
            The <see cref="T:Tangosol.Net.Security.IIdentityAsserter"/>.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.IdentityTransformer">
            <summary>
            An <see cref="T:Tangosol.Net.Security.IIdentityTransformer"/> that can be used to transform
            an IPrincipal into an identity assertion.
            </summary>
            <value>
            The <see cref="T:Tangosol.Net.Security.IIdentityTransformer"/>.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.IsPrincipalScopingEnabled">
            <summary>
            Indicates if principal scoping is enabled.
            </summary>
            <value>
            <b>true</b> if principal scoping is enabled.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.LogLevel">
            <summary>
            The logging severity level.
            </summary>
            <value>
            The loggng severity level.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.LogCharacterLimit">
            <summary>
            The maximum number of characters for a logger daemon to queue
            before truncating.
            </summary>
            <value>
            The maximum number of characters for a logger daemon to queue
            before truncating.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.LogMessageFormat">
            <summary>
            The log message format.
            </summary>
            <value>
            The log message format.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.LogDestination">
            <summary>
            The destination for log messages.
            </summary>
            <value>
            The destination for log messages.
            </value>
        </member>
        <member name="P:Tangosol.Net.DefaultOperationalContext.LogName">
            <summary>
            The name of the logger.
            </summary>
            <value>
            The name of the logger.
            </value>
        </member>
        <member name="T:Tangosol.Net.ICacheService">
            <summary>
            An <b>ICacheService</b> is a service providing a collection of
            named caches that hold resources.
            </summary>
            <remarks>
            These resources are expected to be managed in memory, and are
            typically composed of data that are also stored persistently in a
            database, or data that have been assembled or calculated at some
            significant cost, thus these resources are referred to as
            <i>cached</i>.
            </remarks>
            <author>Gene Gleyzer  2002.02.08</author>
            <author>Ana Cikic  2006.09.15</author>
            <since>Coherence 1.1</since>
        </member>
        <member name="T:Tangosol.Net.IService">
            <summary>
            This <see cref="T:Tangosol.Net.IService"/> interface represents a controllable
            service that operates in a clustered network environment.
            </summary>
            <author>Gene Gleyzer  2002.02.08</author>
            <author>Goran Milosavljevic  2006.09.01</author>
        </member>
        <member name="T:Tangosol.Util.IService">
            <summary>
            A IService is a <see cref="T:Tangosol.Util.IControllable"/> that emits service
            lifecycle events.
            </summary>
            <author>Jason Howes  2007.11.12</author>
            <author>Ana Cikic  2007.12.11</author>
        </member>
        <member name="T:Tangosol.Util.IControllable">
            <summary>
            IControllable interface represents an object quite oftenly referred
            to as a <i>service</i> that usually operates on its own thread and
            has a controllable life cycle.
            </summary>
            <author>Gene Gleyzer  2002.02.08, 2003.02.11</author>
            <author>Goran Milosavljevic  2006.08.16</author>
        </member>
        <member name="M:Tangosol.Util.IControllable.Configure(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Configure the controllable service.
            </summary>
            <remarks>
            <p/>
            This method can only be called before the controllable service
            is started.
            </remarks>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/> carrying configuration information
            specific to the IControllable object.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the service is already running.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the configuration information is invalid.
            </exception>
        </member>
        <member name="M:Tangosol.Util.IControllable.Start">
            <summary>
            Start the controllable service.
            </summary>
            <remarks>
            <p/>
            This method should only be called once per the life cycle
            of the IControllable service. This method has no affect if the
            service is already running.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if a service does not support being re-started, and the
            service was already started and subsequently stopped and then
            an attempt is made to start the service again; also thrown if
            the IControllable service has not been configured.
            </exception>
        </member>
        <member name="M:Tangosol.Util.IControllable.Shutdown">
            <summary>
            Stop the controllable service.
            </summary>
            <remarks>
            <p/>
            This is a controlled shut-down, and is preferred to the
            <see cref="M:Tangosol.Util.IControllable.Stop"/> method.
            <p/>
            This method should only be called once per the life cycle
            of the controllable service. Calling this method for a service
            that has already stopped has no effect.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.IControllable.Stop">
            <summary>
            Hard-stop the controllable service.
            </summary>
            <remarks>
            Use <see cref="M:Tangosol.Util.IControllable.Shutdown"/> for normal service termination.
            Calling this method for a service that has already stopped has no
            effect.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.IControllable.IsRunning">
            <summary>
            Determine whether or not the controllable service is running.
            </summary>
            <remarks>
            <p/>
            Returns <b>false</b> before a service is started, while the
            service is starting, while a service is shutting down and after
            the service has stopped. It only returns <b>true</b> after
            completing its start processing and before beginning its shutdown
            processing.
            </remarks>
            <returns>
            <b>true</b> if the service is running; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="E:Tangosol.Util.IService.ServiceStarting">
            <summary>
            Invoked when <see cref="T:Tangosol.Util.IService"/> is starting.
            </summary>
        </member>
        <member name="E:Tangosol.Util.IService.ServiceStarted">
            <summary>
            Invoked when <see cref="T:Tangosol.Util.IService"/> has started.
            </summary>
        </member>
        <member name="E:Tangosol.Util.IService.ServiceStopping">
            <summary>
            Invoked when <see cref="T:Tangosol.Util.IService"/> is stopping.
            </summary>
        </member>
        <member name="E:Tangosol.Util.IService.ServiceStopped">
            <summary>
            Invoked when <see cref="T:Tangosol.Util.IService"/> has stopped.
            </summary>
        </member>
        <member name="P:Tangosol.Net.IService.Info">
            <summary>
            Gets the <see cref="T:Tangosol.Net.IServiceInfo"/> object for this
            <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <value>
            The <b>IServiceInfo</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Net.IService.UserContext">
            <summary>
            Gets or sets the user context object associated with this
            <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <remarks>
            <p/>
            The data type and semantics of this context object are entirely
            application specific and are opaque to the <b>IService</b>
            itself.
            </remarks>
            <value>
            User context object associated with this <b>IService</b>.
            </value>
            <since>Coherence 3.0</since>
        </member>
        <member name="P:Tangosol.Net.IService.Serializer">
            <summary>
            The <see cref="T:Tangosol.IO.ISerializer"/> used to serialize and deserialize
            objects by this <b>IService</b>.
            </summary>
            <value>
            The <b>ISerializer</b> for this <b>IService</b>.
            </value>
        </member>
        <member name="E:Tangosol.Net.IService.MemberJoined">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> has joined the service.
            </summary>
            <remarks>
            <p>
            Note: this event could be called during the service restart on
            in which case the event handler should not attempt to use any
            cache or service functionality.</p>
            <p>
            The most critical situation arises when a number of threads are
            waiting for a local service restart, being blocked by a
            <b>IService</b> object synchronization monitor. Since the Joined
            event should be fired only once, it is called on a client thread
            <b>while holding a synchronization monitor</b>. An attempt to use
            other service functionality during this local event notification
            may result in a deadlock.</p>
            </remarks>
        </member>
        <member name="E:Tangosol.Net.IService.MemberLeaving">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> is leaving the service.
            </summary>
        </member>
        <member name="E:Tangosol.Net.IService.MemberLeft">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> has left the service.
            </summary>
            <remarks>
            Note: this event could be called during the service restart in
            which case the event handler should not attempt to use any cache
            or service functionality.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.ICacheService.EnsureCache(System.String)">
            <summary>
            Obtain an <see cref="T:Tangosol.Net.INamedCache"/> interface that provides a view
            of cached resources.
            </summary>
            <remarks>
            The view is identified by name within this ICacheService.
            Typically, repeated calls to this method with the same view name
            will result in the same view reference being returned.
            </remarks>
            <param name="name">
            The name, within this ICacheService, that uniquely identifies a
            view; <c>null</c> is legal, and may imply a default name.
            </param>
            <returns>
            An <b>INamedCache</b> interface which can be used to access the
            resources of the specified view.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the service is not running.
            </exception>
        </member>
        <member name="M:Tangosol.Net.ICacheService.ReleaseCache(Tangosol.Net.INamedCache)">
            <summary>
            Release local resources associated with the specified instance of
            the cache.
            </summary>
            <remarks>
            <p>
            This invalidates a reference obtained by using the
            <see cref="M:Tangosol.Net.ICacheService.EnsureCache(System.String)"/> method.</p>
            <p>
            Releasing a reference to a cache makes the cache reference no
            longer usable, but does not affect the cache itself. In other
            words, all other references to the cache will still be valid, and
            the cache data is not affected by releasing the reference.</p>
            <p>
            The reference that is released using this method can no longer be
            used; any attempt to use the reference will result in an
            exception.</p>
            </remarks>
            <param name="cache">
            The cache object to be released.
            </param>
            <seealso cref="M:Tangosol.Net.INamedCache.Release"/>
        </member>
        <member name="M:Tangosol.Net.ICacheService.DestroyCache(Tangosol.Net.INamedCache)">
            <summary>
            Release and destroy the specified cache.
            </summary>
            <remarks>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the entire
            cluster to this cache will be invalidated, the cached data will
            be cleared, and all resources will be released.
            </remarks>
            <param name="cache">
            The cache object to be released.
            </param>
            <seealso cref="M:Tangosol.Net.INamedCache.Destroy"/>
        </member>
        <member name="P:Tangosol.Net.ICacheService.CacheNames">
            <summary>
            A collection of string objects, one for each cache name that has
            been previously registered with this ICacheService.
            </summary>
            <value>
            <b>ICollection</b> of cache names.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If the service is not running or has stopped.
            </exception>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNameService">
            <summary>
            <see cref="T:Tangosol.Net.INameService"/> implementation that allows a client to
            use a remote NameService without having to join the Cluster.
            </summary>
            <author>Wei Lin  2012.05.23</author>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteService">
            <summary>
            Service implementation that allows a client to use a remote clustered
            Service without having to join the Cluster.
            </summary>
            <author>Ana Cikic  2006.09.14</author>
        </member>
        <member name="T:Tangosol.Net.IServiceInfo">
            <summary>
            The IServiceInfo represents information about an <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <author>Gene Gleyzer  2002.02.08</author>
            <author>Goran Milosavljevic  2006.09.01</author>
            <since>Coherence 1.1</since>
        </member>
        <member name="P:Tangosol.Net.IServiceInfo.ServiceName">
            <summary>
            Gets the name of the <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <value>
            The name of the <b>IService</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.IServiceInfo.ServiceType">
            <summary>
            Gets the type of the <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <value>
            The type of the <b>IService</b>.
            </value>
            <since>Coherence 2.0</since>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.Configure(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Configure the controllable service.
            </summary>
            <remarks>
            <p/>
            This method can only be called before the controllable service
            is started.
            </remarks>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/> carrying configuration information
            specific to the IControllable object.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the service is already running.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the configuration information is invalid.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.Start">
            <summary>
            Start the controllable service.
            </summary>
            <remarks>
            <p/>
            This method should only be called once per the life cycle
            of the IControllable service. This method has no affect if the
            service is already running.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if a service does not support being re-started, and the
            service was already started and subsequently stopped and then
            an attempt is made to start the service again; also thrown if
            the IControllable service has not been configured.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.Shutdown">
            <summary>
            Stop the controllable service.
            </summary>
            <remarks>
            <p/>
            This is a controlled shut-down, and is preferred to the
            <see cref="M:Tangosol.Util.IControllable.Stop"/> method.
            <p/>
            This method should only be called once per the life cycle
            of the controllable service. Calling this method for a service
            that has already stopped has no effect.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.Stop">
            <summary>
            Hard-stop the controllable service.
            </summary>
            <remarks>
            Use <see cref="M:Tangosol.Util.IControllable.Shutdown"/> for normal service termination.
            Calling this method for a service that has already stopped has no
            effect.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.OnConnectionOpened(System.Object,Tangosol.Net.Messaging.ConnectionEventArgs)">
            <summary>
            Invoked after an <see cref="T:Tangosol.Net.Messaging.IConnection"/> has been successfully
            established.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> that raised an event.
            </param>
            <param name="evt">
            The <see cref="F:Tangosol.Net.Messaging.ConnectionEventType.Opened"/> event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.OnConnectionClosed(System.Object,Tangosol.Net.Messaging.ConnectionEventArgs)">
            <summary>
            Invoked after an <see cref="T:Tangosol.Net.Messaging.IConnection"/> is closed.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> that raised an event.
            </param>
            <param name="evt">
            The <see cref="F:Tangosol.Net.Messaging.ConnectionEventType.Closed"/> event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.OnConnectionError(System.Object,Tangosol.Net.Messaging.ConnectionEventArgs)">
            <summary>
            Invoked when the <see cref="T:Tangosol.Net.Messaging.IConnection"/> detects that the
            underlying communication channel has been severed or become
            unusable.
            </summary>
            <remarks>
            After this event is raised, any attempt to use the
            <b>IConnection</b> (or any <see cref="T:Tangosol.Net.Messaging.IChannel"/> created by the
            <b>IConnection</b>) may result in an exception.
            </remarks>
            <param name="sender">
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> that raised an event.
            </param>
            <param name="evt">
            The <see cref="F:Tangosol.Net.Messaging.ConnectionEventType.Error"/> event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.OnServiceStarting(System.Object,Tangosol.Util.ServiceEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IService"/> is starting.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            A <see cref="F:Tangosol.Util.ServiceEventType.Starting"/> event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.OnServiceStarted(System.Object,Tangosol.Util.ServiceEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IService"/> is starting.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            A <see cref="F:Tangosol.Util.ServiceEventType.Started"/> event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.OnServiceStopping(System.Object,Tangosol.Util.ServiceEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IService"/> is starting.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            A <see cref="F:Tangosol.Util.ServiceEventType.Stopping"/> event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.OnServiceStopped(System.Object,Tangosol.Util.ServiceEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IService"/> is starting.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            A <see cref="F:Tangosol.Util.ServiceEventType.Stopped"/> event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.OpenChannel">
            <summary>
            Open an <b>IChannel</b> to the remote ProxyService.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.DoConfigure(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            The <see cref="M:Tangosol.Net.Impl.RemoteService.Configure(Tangosol.Run.Xml.IXmlElement)"/> implementation method.
            </summary>
            <remarks>
            This method must only be called by a thread that has synchronized
            on this RemoteService.
            </remarks>
            <param name="xml">
            The <see cref="T:Tangosol.Run.Xml.IXmlElement"/> containing the new configuration
            for this RemoteService.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.DoShutdown">
            <summary>
            The <see cref="M:Tangosol.Net.Impl.RemoteService.Shutdown"/> implementation method.
            </summary>
            <remarks>
            This method must only be called by a thread that has synchronized
            on this RemoteService.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.DoStart">
            <summary>
            The <see cref="M:Tangosol.Net.Impl.RemoteService.Start"/> implementation method.
            </summary>
            <remarks>
            This method must only be called by a thread that has synchronized
            on this RemoteService.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.DoStop">
            <summary>
            The <see cref="M:Tangosol.Net.Impl.RemoteService.Stop"/> implementation method.
            </summary>
            <remarks>
            This method must only be called by a thread that has synchronized
            on this RemoteService.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.IsServiceThread(System.Boolean)">
            <summary>
            Return <b>true</b> if the current thread is one of the service
            threads.
            </summary>
            <param name="isStrict">
            If <b>true</b> then only the service thread and event dispatcher
            thread are considered to be service threads, if <b>false</b>,
            then <b>DaemonPool</b> threads are also considered to be service
            threads.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.LookupProxyServiceAddress">
            <summary>
            Obtains the connect address of the ProxyService from a remote NameService.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.EnsureChannel">
            <summary>
            Return the <see cref="T:Tangosol.Net.Messaging.IChannel"/> used by this RemoteService.
            </summary>
            <remarks>
            If the <b>IChannel</b> is <c>null</c> or is not open, a new
            <b>Channel</b> is opened.
            </remarks>
            <returns>
            An <b>IChannel</b> that can be used to exchange Messages with a
            remote ProxyService.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.EnsureEventDispatcher">
            <summary>
            Return a running <see cref="T:Tangosol.Util.Daemon.QueueProcessor.QueueProcessor"/> used to dispatch
            events to registered listeners.
            </summary>
            <returns>
            A running <b>QueueProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.DrainEvents">
            <summary>
            Block the calling thread until the EventDispatcher Queue is empty
            and all outstanding tasks have been executed.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.DispatchMemberEvent(Tangosol.Net.MemberEventType)">
            <summary>
            Create and dispatch a new local <see cref="T:Tangosol.Net.MemberEventArgs"/>
            with the given type to the registered event handlers.
            </summary>
            <param name="eventType">
            The type of <b>MemberEventArgs</b> to create and dispatch.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.DispatchServiceEvent(Tangosol.Util.ServiceEventType)">
            <summary>
            Create and dispatch a new local <see cref="T:Tangosol.Util.ServiceEventArgs"/>
            with the given type to the registered event handlers.
            </summary>
            <param name="eventType">
            The type of <b>ServiceEventArgs</b> to create and dispatch.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.InvokeMemberEvent(Tangosol.Net.MemberEventHandler,Tangosol.Net.MemberEventArgs)">
            <summary>
            Invokes the event, with special remark towards multithreading
            (using local copy of delegate and no inline attribute for method).
            </summary>
            <param name="handler">
            The MemberEventHandler event that's being invoked.
            </param>
            <param name="evt">
            Event arguments.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteService.InvokeServiceEvent(Tangosol.Util.ServiceEventHandler,Tangosol.Util.ServiceEventArgs)">
            <summary>
            Invokes the event, with special remark towards multithreading
            (using local copy of delegate and no inline attribute for method).
            </summary>
            <param name="handler">
            The ServiceEventHandler event that's being invoked.
            </param>
            <param name="evt">
            Event arguments.
            </param>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteService.m_initiator">
            <summary>
            The IConnectionInitiator used to connect to a ProxyService.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteService.m_remoteClusterName">
            <summary>
            The remote cluster name or null.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteService.m_remoteServiceName">
            <summary>
            The remote service name or null.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteService.m_operationalContext">
            <summary>
            The IOperationalContext for this IService.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.Channel">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IChannel"/> used to exchange Messages with a
            remote Service Proxy.
            </summary>
            <value>
            The <see cref="T:Tangosol.Net.Messaging.IChannel"/> used to exchange Messages with a
            remote ProxyService.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.ServiceName">
            <summary>
            Gets the name of the <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <value>
            The name of the <b>IService</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.ServiceType">
            <summary>
            Gets the type of the <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <value>
            The type of the <b>IService</b>.
            </value>
            <since>Coherence 2.0</since>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.ServiceVersion">
            <summary>
            Gets the version of the <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <value>
            The version of the <b>IService</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.IsRunning">
            <summary>
            Determine whether or not the controllable service is running.
            </summary>
            <remarks>
            <p/>
            Returns <b>false</b> before a service is started, while the
            service is starting, while a service is shutting down and after
            the service has stopped. It only returns <b>true</b> after
            completing its start processing and before beginning its shutdown
            processing.
            </remarks>
            <returns>
            <b>true</b> if the service is running; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.Initiator">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IConnectionInitiator"/> used to connect to a
            ProxyService.
            </summary>
            <value>
            The <b>IConnectionInitiator</b> used to connect to a
            ProxyService.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.IsNameServiceAddressProvider">
            <summary>
            Whether the remote AddressProvider addresses are to be used to 
            look up the remote address of the ProxyService.
            </summary>
            <returns>
            <b>true</b> if the remote AddressProvider addresses are to be 
            used; <b>false</b> otherwise.
            </returns>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.OperationalContext">
            <summary>
            The <see cref="T:Tangosol.Net.IOperationalContext"/> for this IService.
            </summary>
            <value>
            An <b>IOperationalContext</b> instance.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.RemoteClusterName">
            <summary>
            The remote cluster name or null.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.RemoteServiceName">
            <summary>
            The remote service name or null.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.ScopeName">
            <summary>
            The scope name of the remote service, or null.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.Xml">
            <summary>
            The XML element used to configure the initiator.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.Info">
            <summary>
            Gets the <see cref="T:Tangosol.Net.IServiceInfo"/> object for this
            <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <value>
            The <b>IServiceInfo</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.UserContext">
            <summary>
            Gets or sets the user context object associated with this
            <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <remarks>
            <p/>
            The data type and semantics of this context object are entirely
            application specific and are opaque to the <b>IService</b>
            itself.
            </remarks>
            <value>
            User context object associated with this <b>IService</b>.
            </value>
            <since>Coherence 3.0</since>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteService.Serializer">
            <summary>
            The <see cref="T:Tangosol.IO.ISerializer"/> used to serialize and deserialize
            objects by this <b>IService</b>.
            </summary>
            <value>
            The <b>ISerializer</b> for this <b>IService</b>.
            </value>
        </member>
        <member name="E:Tangosol.Net.Impl.RemoteService.MemberJoined">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> has joined the service.
            </summary>
            <remarks>
            <p>
            Note: this event could be called during the service restart on
            the local node in which case the listener's code should not
            attempt to use any clustered cache or service functionality.</p>
            <p>
            The most critical situation arises when a number of threads are
            waiting for a local service restart, being blocked by a
            <b>IService</b> object synchronization monitor. Since the Joined
            event should be fired only once, it is called on a client thread
            <b>while holding a synchronization monitor</b>. An attempt to use
            other clustered service functionality during this local event
            notification may result in a deadlock.</p>
            </remarks>
        </member>
        <member name="E:Tangosol.Net.Impl.RemoteService.MemberLeaving">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> is leaving the service.
            </summary>
        </member>
        <member name="E:Tangosol.Net.Impl.RemoteService.MemberLeft">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> has left the service.
            </summary>
            <remarks>
            Note: this event could be called during the service restart on
            the local node in which case the listener's code should not
            attempt to use any clustered cache or service functionality.
            </remarks>
        </member>
        <member name="E:Tangosol.Net.Impl.RemoteService.ServiceStarting">
            <summary>
            Invoked when <see cref="T:Tangosol.Net.IService"/> is starting.
            </summary>
        </member>
        <member name="E:Tangosol.Net.Impl.RemoteService.ServiceStarted">
            <summary>
            Invoked when <see cref="T:Tangosol.Net.IService"/> has started.
            </summary>
        </member>
        <member name="E:Tangosol.Net.Impl.RemoteService.ServiceStopping">
            <summary>
            Invoked when <see cref="T:Tangosol.Net.IService"/> is stopping.
            </summary>
        </member>
        <member name="E:Tangosol.Net.Impl.RemoteService.ServiceStopped">
            <summary>
            Invoked when <see cref="T:Tangosol.Net.IService"/> has stopped.
            </summary>
        </member>
        <member name="T:Tangosol.Net.INameService">
            <summary>
            This <see cref="T:Tangosol.Net.INameService"/> interface represents a service that 
            accepts connections from external clients(e.g. Coherence*Extend) and
            provides a name lookup service.
            </summary>
            <author>Wei Lin  2012.05.22</author>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="M:Tangosol.Net.INameService.Bind(System.String,System.Object)">
            <summary>
            Binds a name to an object.
            </summary>
            <param name="name">
            The name to bind; may not be empty.
            </param>
            <param name="o">
            The object to bind; possibly null.
            </param>
        </member>
        <member name="M:Tangosol.Net.INameService.Lookup(System.String)">
            <summary>
            Retrieves the named object.
            </summary>
            <param name="name">
            The name of the object to look up.
            </param>
            <returns>
            The object bound to name.
            </returns>
        </member>
        <member name="M:Tangosol.Net.INameService.Unbind(System.String)">
            <summary>
            Unbinds the named object.
            </summary>
            <param name="name">
            The name of the object to unbind.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNameService.Bind(System.String,System.Object)">
            <summary>
            Binds a name to an object.
            </summary>
            <param name="name">
            The name to bind; may not be empty.
            </param>
            <param name="o">
            The object to bind; possibly null.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNameService.Lookup(System.String)">
            <summary>
            Retrieves the named object.
            </summary>
            <param name="name">
            The name of the object to look up.
            </param>
            <returns>
            The object bound to name.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNameService.Unbind(System.String)">
            <summary>
            Unbinds the named object.
            </summary>
            <param name="name">
            The name of the object to unbind.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNameService.OpenChannel">
            <summary>
            Open an <b>IChannel</b> to the remote Service proxy.
            </summary>
            <seealso cref="M:Tangosol.Net.Impl.RemoteService.OpenChannel"/>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNameService.DoConfigure(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            The <see cref="M:Tangosol.Net.Impl.RemoteService.Configure(Tangosol.Run.Xml.IXmlElement)"/> implementation method.
            </summary>
            <remarks>
            This method must only be called by a thread that has synchronized
            on this RemoteService.
            </remarks>
            <param name="xml">
            The <b>IXmlElement</b> containing the new configuration for this
            RemoteService.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNameService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNameService.CreateSerializer">
            <summary>
            Create a new <see cref="T:Tangosol.IO.ISerializer"/>.
            </summary>
            <returns>
            The new <see cref="T:Tangosol.IO.ISerializer"/>.
            </returns>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNameService.ServiceType">
            <summary>
            Gets the type of the <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <value>
            The type of the <b>IService</b>.
            </value>
            <since>Coherence 2.0</since>
        </member>
        <member name="T:Tangosol.Net.Internal.NameServicePofContext">
            <summary>
            The NameServicePofContext is a basic <see cref="T:Tangosol.IO.Pof.IPofContext"/> implementation which
            supports the types used to manage Coherence*Extend connections.
            </summary>
            <author>Patrick Fry  2012.04.27</author>
            <since>12.2.1</since>
        </member>
        <member name="M:Tangosol.Net.Internal.NameServicePofContext.#ctor">
            <summary>
            Create a new NameServicePofContext.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Internal.NameServicePofContext.s_instance">
            <summary>
            The lazily instantiated NameServicePofContext singleton.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Internal.NameServicePofContext.INSTANCE">
            <summary>
            The NameServicePofContext singleton.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Internal.ScopedReferenceStore">
            <summary>
            ScopedReferenceStore holds scoped cache or service references.
            </summary>
            <remarks>
            Cache references are scoped by name and, optionally, by Principal.
            Service references are scoped by name and, optionally, by Principal.
            Principal scoping is handled automatically; ScopedReferenceStore
            requires no explicit input about Principals from its clients. Principal
            scoping is configured in the operational configuration and applies only
            to remote caches and remote services.
            <p>
            An instance of ScopedReferenceStore must contain either cache
            references or service references, but not both simultaneously.
            </p>
            <p>
            ScopedReferenceStore is not thread-safe unless a lock is obtained on
            the SyncRoot property; otherwise, multi-threaded clients must
            provide their own locking mechanism.
            </p>
            </remarks>
            <author>David Guy  2010.03.17</author>
            <since>Coherence 3.6</since>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.Clear">
            <summary>
            Remove all referenced objects from this store.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.GetCache(System.String)">
            <summary>
            Retrieve the cache reference associated with the name (and
            Principal if applicable).
            </summary>
            <param name="sCacheName">
            The name of the cache.
            </param>
            <returns>
            The cache reference.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.GetService(System.String)">
            <summary>
            Retrieve the Service reference based on the passed in service name.
            </summary>
            <param name="sServiceName">
            The service name.
            </param>
            <returns>
            The service reference.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.GetAllCaches">
            <summary>
            Retrieve all cache references in the store.
            </summary>
            <returns>
            All cache references.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.GetAllCaches(System.String)">
            <summary>
            Retreive all cache references for this name.
            </summary>
            <param name="sCacheName">
            The name of the cache.
            </param>
            <returns>
            All cache references for this name.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.GetAllServices">
            <summary>
            Retrieve all service references in the store.
            </summary>
            <returns>
            All service references.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.GetNames">
            <summary>
            Retrieve the names of all stored cache or service references.
            </summary>
            <returns>
            The names of all stored references.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.PutCache(Tangosol.Net.INamedCache)">
            <summary>
            Store a cache reference.
            </summary>
            <param name="cache">
            The cache reference.
            </param>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.PutService(Tangosol.Net.IService,System.String,Tangosol.Net.ServiceType)">
            <summary>
            Store a service reference.
            </summary>
            <remarks>
            Service name and type are passed in rather than using
            service.Info because the service may not have been configured
            and started yet, so the Info may not be safely available.
            </remarks>
            <param name="service">
            The referenced service.
            </param>
            <param name="sName">
            The service name.
            </param>
            <param name="serviceType">
            The service type.
            </param>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.ReleaseCache(Tangosol.Net.INamedCache)">
            <summary>
            Remove the cache reference from the store.
            </summary>
            <param name="cache">
            The cache reference.
            </param>
            <returns>
            Whether the item was found.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.Remove(System.String)">
            <summary>
            Remove items referenced by this name.
            </summary>
            <param name="sName">
            The service or cache name.
            </param>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.#ctor(Tangosol.Net.IOperationalContext)">
            <summary>
             constructor takes IOperationalContext
            </summary>
            <param name="operationalContext">
             The OperationalContext for ScopedReferenceStore.
             </param>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.IsRemoteServiceType(Tangosol.Net.ServiceType)">
            <summary>
            Determine if the service type is remote.
            </summary>
            <param name="serviceType">
            The service type.
            </param>
            <returns>
            Whether the service type is remote.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Internal.ScopedReferenceStore.m_mapByName">
            <summary>
            When storing cache references, it is a Dictionary keyed by a cache
            name with a corresponding value being an IINamedCache reference or
            a PrincipalScopedReference that contains a IINamedCache reference.
            <p>
            When storing service references, it is a Dictionary keyed by a service
            name with a corrsponding value being a ICacheService reference or a
            PrincipalScopedReference that contains an ICacheService reference.
            </p>
            </summary>
        </member>
        <member name="F:Tangosol.Net.Internal.ScopedReferenceStore.m_operationalContext">
            <summary>
            The IOperationalContext for this ScopedReferenceStore.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Internal.ScopedReferenceStore.OperationalContext">
            <summary>
            The <see cref="T:Tangosol.Net.IOperationalContext"/> for this ScopedReferenceStore.
            </summary>
            <value>
            An <b>IOperationalContext</b> instance.
            </value>
        </member>
        <member name="T:Tangosol.Net.Internal.ScopedReferenceStore.PrincipalScopedReference">
            <summary>
            PrincipalScopedReference scopes (associates) an object with a
            Principal.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.PrincipalScopedReference.Get">
            <summary>
            Obtain the object referenced by the current principal.
            </summary>
            <returns>
            The referenced object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.PrincipalScopedReference.IsEmpty">
            <summary>
            Determine if there are any referenced objects.
            </summary>
            <returns>
            Whether there are any referenced objects.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.PrincipalScopedReference.Set(System.Object)">
            <summary>
            Add a referenced object based on the current principal.
            </summary>
            <param name="oRef">
            The referenced object.
            </param>
        </member>
        <member name="M:Tangosol.Net.Internal.ScopedReferenceStore.PrincipalScopedReference.Remove">
            <summary>
            Remove the object referenced by the current principal.
            </summary>
            <returns>
            The previously referenced object.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Internal.ScopedReferenceStore.PrincipalScopedReference.m_mapPrincipalScope">
            <summary>
            The Dictionary contains referenced objects keyed by Principal.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Internal.ScopedReferenceStore.PrincipalScopedReference.m_oRef">
            <summary>
            Reference stored when the Principal is null.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Internal.ScopedReferenceStore.PrincipalScopedReference.Caches">
            <summary>
            Obtain all referenced objects.
            </summary>
            <value>
            The enumeration of referenced caches.
            </value>
        </member>
        <member name="P:Tangosol.Net.Internal.ScopedReferenceStore.PrincipalScopedReference.Services">
            <summary>
            Obtain all referenced objects.
            </summary>
            <value>
            The enumeration of referenced services.
            </value>
        </member>
        <member name="T:Tangosol.Net.IStreamProvider">
            <summary>
            IStreamProvider provides an abstraction for configuring an getting
            NetworkStreams for the TcpInitiator.
            <br/>
            INetworkStreamFactories are provided by the StreamProviderFactory.
            </summary>
        </member>
        <member name="M:Tangosol.Net.IStreamProvider.GetStream(System.Net.Sockets.TcpClient)">
            <summary>
            Get a NetworkStream using a <b>TcpClient</b> which is connected.
            </summary>
            <param name="client">A connected <b>TcpClient</b>.</param>
            <returns>A <b>Stream</b></returns>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NameService.LookupRequest">
            <summary>
            The InvocationRequest is an <see cref="T:Tangosol.Net.Messaging.Impl.NameService.NameServiceRequest"/>
            that has the NameService.lookup(String sName) Request message.
            </summary>
            <author>Wei Lin  2012.05.23</author>
            <since>Coherence 12.1.2</since>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NameService.NameServiceRequest"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NameService.NameServiceRequest">
            <summary>
            Base class for all NameService Protocol
            <see cref="T:Tangosol.Net.Messaging.Impl.Request"/> messages.
            </summary>
            <author>Wei Lin  2012.05.23</author>
            <since>Coherence 12.1.2</since>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Request"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NameService.NameServiceProtocol"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.Request">
            <summary>
            Base implementation of <see cref="T:Tangosol.Net.Messaging.IRequest"/>.
            </summary>
            <author>Ana Cikic  2006.08.18</author>
            <seealso cref="T:Tangosol.Net.Messaging.IRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Message"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.Message">
            <summary>
            Base implementation of <see cref="T:Tangosol.Net.Messaging.IMessage"/>.
            </summary>
            <author>Ana Cikic  2006.08.18</author>
            <seealso cref="T:Tangosol.Net.Messaging.IMessage"/>
            <seealso cref="T:Tangosol.IO.Pof.IEvolvablePortableObject"/>
            <seealso cref="T:Tangosol.Net.Messaging.IChannel"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.IMessage">
            <summary>
            IMessage is the root interface for all message objects sent by peer
            endpoints through an <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
            <remarks>
            IMessage objects are created by an <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/>.
            An IMessage object has a type identifier that uniquely identifies the
            IMessage object class and is scoped to the <b>IMessageFactory</b>
            that created the IMessage. In other words, IMessage objects with the
            same type identifier that were created by two different
            <b>IMessageFactory</b> instances may be of different classes, but
            IMessage objects with the same type identifier that were created by
            the same <b>IMessageFactory</b> are guaranteed to be of the same
            type.
            </remarks>
            <author>Jason Howes  2006.04.04</author>
            <author>Goran Milosavljevic  2006.08.15</author>
            <seealso cref="T:Tangosol.Net.Messaging.IChannel"/>
            <seealso cref="T:Tangosol.Net.Messaging.IMessageFactory"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="P:Tangosol.Net.Messaging.IMessage.TypeId">
            <summary>
            Return the identifier for this IMessage object's class.
            </summary>
            <remarks>
            The type identifier is scoped to the <b>IMessageFactory</b> that
            created this IMessage.
            </remarks>
            <value>
            An identifier that uniquely identifies this IMessage object's
            class.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IMessage.Channel">
            <summary>
            Gets or sets the <b>IChannel</b> through which the IMessage will
            be sent, was sent, or was received.
            </summary>
            <value>
            The <b>IChannel</b> through which the IMessage will be sent, was
            sent, or was received.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If the <b>IChannel</b> has already been set.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Messaging.IMessage.ExecuteInOrder">
            <summary>
            Determine if this IMessage should be executed in the same order
            as it was received relative to other messages sent through the
            same <b>IChannel</b>.
            </summary>
            <remarks>
            <p>
            Consider two messages: M1 and M2. Say M1 is received before M2
            but executed on a different execute thread (for example, when the
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> is configured with an execute
            thread pool of size greater than 1). In this case, there is no
            way to guarantee that M1 will finish executing before M2.
            However, if M1 returns <b>true</b> from this method, the
            <b>IConnectionManager</b> will execute M1 on its service thread,
            thus guaranteeing that M1 will execute before M2.</p>
            <p>
            In-order execution should be considered as a very advanced
            feature and implementations that return <b>true</b> from this
            method must exercise extreme caution during execution, since any
            delay or unhandled exceptions will cause a delay or complete
            shutdown of the underlying <b>IConnectionManager</b>.</p>
            </remarks>
            <returns>
            <b>true</b> if the IMessage should be executed in the same order
            as it was received relative to other messages.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Message.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Message.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Message.Run">
            <summary>
            Execute the action specific to the Message implementation.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Message.m_dataVersion">
            <summary>
            The version associated with the data reader from which this
            object was deserialized.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Message.m_futureData">
            <summary>
            The unknown remainder of the data stream from which this object
            was deserialized.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Message.m_implVersion">
            <summary>
            The serialization version supported by the implementing class.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Message.m_channel">
            <summary>
            The IChannel associated with this message.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Message.TypeId">
            <summary>
            Return the identifier for this IMessage object's class.
            </summary>
            <remarks>
            The type identifier is scoped to the <b>IMessageFactory</b> that
            created this IMessage.
            </remarks>
            <value>
            An identifier that uniquely identifies this IMessage object's
            class.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Message.Channel">
            <summary>
            Gets or sets the <b>IChannel</b> through which the IMessage will
            be sent, was sent, or was received.
            </summary>
            <value>
            The <b>IChannel</b> through which the IMessage will be sent, was
            sent, or was received.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If the <b>IChannel</b> has already been set.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Message.ExecuteInOrder">
            <summary>
            Determine if this IMessage should be executed in the same order
            as it was received relative to other messages sent through the
            same <b>IChannel</b>.
            </summary>
            <remarks>
            <p>
            Consider two messages: M1 and M2. Say M1 is received before M2
            but executed on a different execute thread (for example, when the
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> is configured with an execute
            thread pool of size greater than 1). In this case, there is no
            way to guarantee that M1 will finish executing before M2.
            However, if M1 returns <b>true</b> from this method, the
            <b>IConnectionManager</b> will execute M1 on its service thread,
            thus guaranteeing that M1 will execute before M2.</p>
            <p>
            In-order execution should be considered as a very advanced
            feature and implementations that return <b>true</b> from this
            method must exercise extreme caution during execution, since any
            delay or unhandled exceptions will cause a delay or complete
            shutdown of the underlying <b>IConnectionManager</b>.</p>
            </remarks>
            <returns>
            <b>true</b> if the IMessage should be executed in the same order
            as it was received relative to other messages.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Message.DataVersion">
            <summary>
            Gets or sets the version associated with the data stream from
            which this object was deserialized.
            </summary>
            <remarks>
            If the object was constructed (not deserialized), the data
            version is the same as the implementation version.
            </remarks>
            <value>
            The version of the data used to initialize this object, greater
            than or equal to zero.
            </value>
            <exception cref="T:System.ArgumentException">
            If the specified version is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the object is not in a state in which the version can be set,
            for example outside of deserialization.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Message.FutureData">
            <summary>
            Gets or sets all the unknown remainder of the data stream from
            which this object was deserialized.
            </summary>
            <remarks>
            The remainder is unknown because it is data that was originally
            written by a future version of this object's type.
            </remarks>
            <value>
            Future data in binary form.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If the object is not in a state in which the version can be set,
            for example outside of deserialization.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Message.ImplVersion">
            <summary>
            Determine the serialization version supported by the implementing
            type.
            </summary>
            <value>
            The serialization version supported by this object.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.IRequest">
            <summary>
            IRequest is the root interface for all request messages sent by peer
            endpoints through an <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
            <remarks>
            IRequest object is created by an <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> and
            has an identifier that uniquely identifies the
            <see cref="T:Tangosol.Net.Messaging.IMessage"/> instance.
            </remarks>
            <author>Jason Howes  2006.04.05</author>
            <author>Goran Milosavljevic  2006.08.15</author>
            <seealso cref="T:Tangosol.Net.Messaging.IMessageFactory"/>
            <seealso cref="T:Tangosol.Net.Messaging.IMessage"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Net.Messaging.IRequest.EnsureResponse">
            <summary>
            Return the <see cref="T:Tangosol.Net.Messaging.IResponse"/> for this IRequest.
            </summary>
            <remarks>
            If not already available, the <b>IResponse</b> must be created
            using the <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> associated with the
            <see cref="T:Tangosol.Net.Messaging.IChannel"/> that this IRequest was sent through.
            </remarks>
            <returns>
            The <b>IResponse</b>; must not be <c>null</c>.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Messaging.IRequest.Id">
            <summary>
            The unique identifier for this IRequest.
            </summary>
            <value>
            An identifier that uniquely identifies this IRequest object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IRequest.Status">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IStatus"/> for this IRequest that can be used to
            wait for and retrieve the <see cref="T:Tangosol.Net.Messaging.IResponse"/>.
            </summary>
            <value>
            The <b>IStatus</b> object or <c>null</c> if object hasn't been
            initialized.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If the status has already been configured.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Request.EnsureResponse">
            <summary>
            Return the <see cref="T:Tangosol.Net.Messaging.IResponse"/> for this IRequest.
            </summary>
            <remarks>
            If not already available, the <b>IResponse</b> must be created
            using the <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> associated with the
            <see cref="T:Tangosol.Net.Messaging.IChannel"/> that this IRequest was sent through.
            </remarks>
            <returns>
            The <b>IResponse</b>; must not be <c>null</c>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Request.InstantiateResponse(Tangosol.Net.Messaging.IMessageFactory)">
            <summary>
            Create a new <see cref="P:Tangosol.Net.Messaging.Impl.Request.Response"/> for this IRequest.
            </summary>
            <param name="factory">
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that must be used to create the
            returned <b>Response</b>; never <c>null</c>.
            </param>
            <returns>
            A new <b>Response</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Request.OnException(System.Exception)">
            <summary>
            Called when an exception is caught while executing the IRequest.
            </summary>
            <param name="e">
            The unhandled exception.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Request.OnRun(Tangosol.Net.Messaging.Impl.Response)">
            <summary>
            Process this IRequest and update the given <b>Response</b> with
            the result.
            </summary>
            <remarks>
            Implementations of this method are free to throw an exception
            while processing the IRequest. An exception will result in the
            <b>Response</b> being marked as a failure that the
            <b>Response</b> result will be the exception itself.
            </remarks>
            <param name="response">
            The <b>Response</b> that will be sent back to the requestor.
            </param>
            <exception cref="T:System.Exception">
            If exception occurs during execution.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Request.Run">
            <summary>
            Execute the action specific to the <see cref="T:Tangosol.Net.Messaging.Impl.Message"/>
            implementation.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Request.m_id">
            <summary>
            The unique identifier of this IRequest.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Request.m_response">
            <summary>
            The IResponse.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Request.m_status">
            <summary>
            The IStatus of this IRequest.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Request.Response">
            <summary>
            <b>IResponse</b> for this IRequest.
            </summary>
            <value>
            The <b>IResponse</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Request.IsIncoming">
            <summary>
            Determines if an incoming IRequest was sent by a peer.
            </summary>
            <value>
            <b>true</b> if an incoming IRequest was sent by a peer.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Request.Id">
            <summary>
            The unique identifier for this IRequest.
            </summary>
            <value>
            An identifier that uniquely identifies this IRequest object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Request.Status">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IStatus"/> for this IRequest that can be used to
            wait for and retrieve the <see cref="T:Tangosol.Net.Messaging.IResponse"/>.
            </summary>
            <value>
            The <b>IStatus</b> object or <c>null</c> if object hasn't been
            initialized.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If the status has already been configured.
            </exception>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.Request.RequestStatus">
            <summary>
            Implementation of the <see cref="T:Tangosol.Net.Messaging.IStatus"/> interface.
            </summary>
            <author>Ana Cikic  2006.08.21</author>
        </member>
        <member name="T:Tangosol.Net.Messaging.IStatus">
            <summary>
            An IStatus represents an asynchronous <see cref="T:Tangosol.Net.Messaging.IRequest"/>
            sent to a peer.
            </summary>
            <remarks>
            <p>
            The status of the <b>IRequest</b> can be determined by checking the
            value of the <see cref="P:Tangosol.Net.Messaging.IStatus.IsClosed"/> property. If it returns
            <b>false</b>, the request is still in progress. A return value of
            <b>true</b> indicates that the request has either completed
            successfully, completed unsuccessfully, or has been canceled.</p>
            <p>
            When the <b>IRequest</b> completes, the <see cref="T:Tangosol.Net.Messaging.IResponse"/> sent
            by the peer can be retrieved from the <see cref="P:Tangosol.Net.Messaging.IStatus.Response"/>
            property. If this property value is <c>null</c>, the <b>IRequest</b>
            was explicitly canceled (<see cref="M:Tangosol.Net.Messaging.IStatus.Cancel"/>).</p>
            <p/>
            Rather than constantly polling the <b>IRequest</b> for the outcome of
            the <b>IRequest</b>, a thread can alternatively use the IStatus to
            <see cref="M:Tangosol.Net.Messaging.IStatus.WaitForResponse(System.Int64)"/> wait for the <b>IRequest</b> to
            complete.
            </remarks>
            <author>Jason Howes  2006.03.23</author>
            <author>Goran Milosavljevic  2006.08.15</author>
            <seealso cref="T:Tangosol.Net.Messaging.IResponse"/>
            <seealso cref="T:Tangosol.Net.Messaging.IRequest"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Net.Messaging.IStatus.Cancel">
            <summary>
            Cancel the <b>IRequest</b> represented by this IStatus.
            </summary>
            <remarks>
            The requestor can call this method when it is no longer
            interested in an <b>IResponse</b> or outcome of the
            <b>IRequest</b>.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Messaging.IStatus.Cancel(System.Exception)">
            <summary>
            Cancel the <b>IRequest</b> represented by this <b>IStatus</b> due
            to an error condition.
            </summary>
            <remarks>
            After this method is called, the <see cref="P:Tangosol.Net.Messaging.IStatus.Response"/> will
            throw this exception (wrapping it if necessary).
            </remarks>
            <param name="e">
            The reason that the <b>IRequest</b> is being cancelled.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.IStatus.WaitForResponse">
            <summary>
            Block the calling thread until the <b>IRequest</b> is completed
            successfully, completed unsuccessfully, canceled, or a timeout
            occurs.
            </summary>
            <returns>
            The <b>IResponse</b>.
            </returns>
            <exception cref="T:System.Exception">
            If the <b>IRequest</b> is cancelled, a timeout occurs, or the
            waiting thread is interrupted.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.IStatus.WaitForResponse(System.Int64)">
            <summary>
            Block the calling thread until the <b>IRequest</b> is completed
            successfully, completed unsuccessfully, canceled, or a timeout
            occurs.
            </summary>
            <param name="milisec">
            The number of milliseconds to wait for the result of the
            <b>IRequest</b>; pass zero to block the calling thread
            indefinitely.
            </param>
            <returns>
            The <b>IResponse</b>.
            </returns>
            <exception cref="T:System.Exception">
            If the <b>IRequest</b> is cancelled, a timeout occurs, or the
            waiting thread is interrupted.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Messaging.IStatus.IsClosed">
            <summary>
            Determine if the <b>IRequest</b> represented by this IStatus has
            been completed successfully, completed unsuccessfully, or
            canceled.
            </summary>
            <value>
            <b>true</b> if the <b>IRequest</b> has been completed
            successfully, completed unsuccessfully, or canceled; <b>false</b>
            if the <b>IRequest</b> is still pending.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IStatus.Request">
            <summary>
            Return the <b>IRequest</b> represented by this IStatus.
            </summary>
            <value>
            The <b>IRequest</b> represented by this IStatus.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IStatus.Response">
            <summary>
            Return the <b>IResponse</b> sent by the peer.
            </summary>
            <remarks>
            This property has a non-null value if <see cref="P:Tangosol.Net.Messaging.IStatus.IsClosed"/> is
            <b>true</b>.
            </remarks>
            <value>
            The <b>IResponse</b> sent by the peer.
            </value>
            <exception cref="T:System.Exception">
            If the <b>IRequest</b> is cancelled.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Request.RequestStatus.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Request.RequestStatus.Cancel">
            <summary>
            Cancel the <b>IRequest</b> represented by this IStatus.
            </summary>
            <remarks>
            The requestor can call this method when it is no longer
            interested in an <b>IResponse</b> or outcome of the
            <b>IRequest</b>.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Request.RequestStatus.Cancel(System.Exception)">
            <summary>
            Cancel the <b>IRequest</b> represented by this <b>IStatus</b>
            due to an error condition.
            </summary>
            <remarks>
            After this method is called, the <see cref="P:Tangosol.Net.Messaging.Impl.Request.RequestStatus.Response"/> will
            throw this exception (wrapping it if necessary).
            </remarks>
            <param name="e">
            The reason that the <b>IRequest</b> is being cancelled.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Request.RequestStatus.WaitForResponse">
            <summary>
            Block the calling thread until the <b>IRequest</b> is completed
            successfully, completed unsuccessfully, canceled, or a timeout
            occurs.
            </summary>
            <returns>
            The <b>IResponse</b>.
            </returns>
            <exception cref="P:Tangosol.Net.Messaging.Impl.Request.RequestStatus.Exception">
            If the <b>IRequest</b> is cancelled, a timeout occurs, or the
            waiting thread is interrupted.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Request.RequestStatus.WaitForResponse(System.Int64)">
            <summary>
            Block the calling thread until the <b>IRequest</b> is completed
            successfully, completed unsuccessfully, canceled, or a timeout
            occurs.
            </summary>
            <param name="millis">
            The number of milliseconds to wait for the result of the
            <b>IRequest</b>; pass zero to block the calling thread
            indefinitely.
            </param>
            <returns>
            The <b>IResponse</b>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the <b>IRequest</b> is cancelled, a timeout occurs, or the
            waiting thread is interrupted.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Request.RequestStatus.OnCompletion">
            <summary>
            Called after the <b>IRequest</b> represented by this
            RequestStatus has completed (successfully or unsuccessfully) or
            been canceled.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Request.RequestStatus.m_channel">
            <summary>
            The Channel associated with this Status.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Request.RequestStatus.m_isClosed">
            <summary>
            Flag that indicates whether or not the Request represented by
            this Status has completed successfully, completed unsucessfully,
            or been canceled.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Request.RequestStatus.m_defaultTimeoutMillis">
            <summary>
            The default request timeout in milliseconds.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Request.RequestStatus.m_exception">
            <summary>
            The exception associated with a failed or canceled request.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Request.RequestStatus.m_initTimeMillis">
            <summary>
            The time (in millseconds) that this Status object was
            initialized.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Request.RequestStatus.m_request">
            <summary>
            The Request represented by this Status.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Request.RequestStatus.m_response">
            <summary>
            The Response sent by the peer.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Request.RequestStatus.Channel">
            <summary>
            The <see cref="P:Tangosol.Net.Messaging.Impl.Request.RequestStatus.Channel"/> associated with this Status.
            </summary>
            <value>
            The <b>Channel</b> associated with this Status.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Request.RequestStatus.DefaultTimeoutMillis">
            <summary>
            The default request timeout in milliseconds.
            </summary>
            <value>
            The default request timeout in milliseconds.
            </value>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.RequestStatus.WaitForResponse"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Request.RequestStatus.InitTimeMillis">
            <summary>
            The time (in milliseconds) that this Status object was
            initialized.
            </summary>
            <value>
            The time (in milliseconds) that this Status object was
            initialized.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Request.RequestStatus.Request">
            <summary>
            Return the <b>IRequest</b> represented by this IStatus.
            </summary>
            <value>
            The <b>IRequest</b> represented by this IStatus.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Request.RequestStatus.Response">
            <summary>
            Return the <b>IResponse</b> sent by the peer.
            </summary>
            <remarks>
            This property has a non-null value if <see cref="P:Tangosol.Net.Messaging.Impl.Request.RequestStatus.IsClosed"/> is
            <b>true</b>.
            </remarks>
            <value>
            The <b>IResponse</b> sent by the peer.
            </value>
            <exception cref="P:Tangosol.Net.Messaging.Impl.Request.RequestStatus.Exception">
            If the <b>IRequest</b> is cancelled.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Request.RequestStatus.IsClosed">
            <summary>
            Determine if the <b>IRequest</b> represented by this Status has
            been completed successfully, completed unsuccessfully, or
            canceled.
            </summary>
            <value>
            <b>true</b> if the <b>IRequest</b> has been completed
            successfully, completed unsuccessfully, or canceled; <b>false</b>
            if the <b>IRequest</b> is still pending.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Request.RequestStatus.Exception">
            <summary>
            The <b>Exception</b> associated with a failed or canceled
            request.
            </summary>
            <value>
            An <b>Exception</b>.
            </value>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NameService.LookupRequest.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NameService.LookupRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NameService.LookupRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NameService.LookupRequest.TypeId">
            <summary>
            Return the type identifier for this <b>Message</b>.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NameService.LookupRequest.LookupName">
            <summary>
            The name to look up.
            </summary>
            <value>
            The name to look up.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NameService.NameServiceFactory">
            <summary>
            <see cref="T:Tangosol.Net.Messaging.Impl.MessageFactory"/> for version 1 of the NameService
            Protocol.
            </summary>
            <remarks>
            <p>
            The type identifiers of the <see cref="T:Tangosol.Net.Messaging.Impl.Message"/> types instantiated
            by this <b>MessageFactory</b> are organized as follows:</p>
            (0) <see cref="T:Tangosol.Net.Messaging.Impl.NameService.NameServiceResponse"/>
            (1) <see cref="T:Tangosol.Net.Messaging.Impl.NameService.LookupRequest"/>
            </remarks>
            <author>Wei Lin  2012.05.23</author>
            <since>Coherence 12.1.2</since>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.MessageFactory"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NameService.NameServiceProtocol"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.MessageFactory">
            <summary>
            Base implementation of <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/>.
            </summary>
            <author>Ana Cikic  2006.08.19</author>
            <seealso cref="T:Tangosol.Net.Messaging.IMessageFactory"/>
            <seealso cref="T:Tangosol.Net.Messaging.IMessage"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.IMessageFactory">
            <summary>
            An IMessageFactory is a factory for <see cref="T:Tangosol.Net.Messaging.IMessage"/> objects.
            </summary>
            <author>Jason Howes  2006.04.04</author>
            <author>Goran Milosavljevic  2006.08.15</author>
            <seealso cref="T:Tangosol.Net.Messaging.IMessage"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Net.Messaging.IMessageFactory.CreateMessage(System.Int32)">
            <summary>
            Create a new <b>IMessage</b> object of the specified type.
            </summary>
            <param name="type">
            The type identifier of the <b>IMessage</b> class to instantiate.
            </param>
            <returns>
            The new <b>IMessage</b> object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified type is unknown to this IMessageFactory.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Messaging.IMessageFactory.Version">
            <summary>
            Gets the <see cref="T:Tangosol.Net.Messaging.IProtocol"/> version supported by this
            IMessageFactory.
            </summary>
            <value>
            The <b>IProtocol</b> version associated with this
            IMessageFactory.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IMessageFactory.Protocol">
            <summary>
            The <b>IProtocol</b> for which this IMessageFactory creates
            <b>IMessage</b> objects.
            </summary>
            <value>
            The <b>IProtocol</b> associated with this IMessageFactory.
            </value>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.MessageFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.MessageFactory.GetMessageType(System.Int32)">
            <summary>
            Type of the class that is subclass of the <b>Message</b> with
            specified type identifier.
            </summary>
            <param name="typeId">
            The type identifier of class that is subclass of the
            <b>Message</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.MessageFactory.SetMessageType(System.Int32,System.Type)">
            <summary>
            Adds class that is subclass of the <b>Message</b> to the array of
            subclasses that can be created by this MessageFactory.
            </summary>
            <param name="typeId">
            Array index at which class should be inserted. It is also type
            identifier.
            </param>
            <param name="cls">
            Class to be inserted into array of subclasses.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.MessageFactory.InitializeMessageTypes(System.Type[])">
            <summary>
            Initialize an array with subclasses of <b>Message</b> that can be
            created by this MessageFactory so that array is indexed by the
            type identifier.
            </summary>
            <remarks>
            An array is indexed by the <b>Message</b> type identifiers.
            </remarks>
            <param name="types">
            An array containing all subclasses, not indexed in any particular
            manner.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.MessageFactory.CreateMessage(System.Int32)">
            <summary>
            Create a new <b>Message</b> object of the specified type.
            </summary>
            <param name="type">
            The type identifier of the <b>Message</b> class to instantiate.
            </param>
            <returns>
            The new <b>Message</b> object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified type is unknown to this MessageFactory.
            </exception>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.MessageFactory.m_protocol">
            <summary>
            The IProtocol for which this MessageFactory creates Message
            objects.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.MessageFactory.m_version">
            <summary>
            The IProtocol version supported by this MessageFactory.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.MessageFactory.m_messageTypesArray">
            <summary>
            An array of Message classes that can be created by this
            MessageFactory indexed by Message type identifier.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.MessageFactory.Protocol">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IProtocol"/> for which this MessageFactory creates
            <see cref="T:Tangosol.Net.Messaging.IMessage"/> objects.
            </summary>
            <value>
            The <b>IProtocol</b> associated with this MessageFactory.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.MessageFactory.Version">
            <summary>
            Gets the <see cref="T:Tangosol.Net.Messaging.IProtocol"/> version supported by this
            MessageFactory.
            </summary>
            <value>
            The <b>IProtocol</b> version associated with this MessageFactory.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.MessageFactory.MessageTypesArray">
            <summary>
            An array of classes that are subclasses of the <b>Message</b> and
            that can be created by this MessageFactory.
            </summary>
            <remarks>
            An array is indexed by message type identifiers
            (see <see cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>).<p/>
            It needs to be initialized for each MessageFactory implementation
            (<see cref="M:Tangosol.Net.Messaging.Impl.MessageFactory.InitializeMessageTypes(System.Type[])"/>).
            </remarks>
            <value>
            An array of classes that are subclasses of the <b>Message</b>.
            </value>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NameService.NameServiceFactory.#ctor">
            <summary>
            Initialize an array of <see cref="T:Tangosol.Net.Messaging.Impl.Message"/> types that can be
            created by this factory.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NameService.NameServiceFactory.messagingTypes">
            <summary>
            An array of <b>Message</b> types that can be created by this
            factory.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NameService.NameServiceProtocol">
            <summary>
            The NameService Protocol is used to access a remote NameService 
            running within a Coherence cluster.
            </summary>
            <author>Wei Lin  2012.05.23</author>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.Protocol">
            <summary>
            Base implementation of <see cref="T:Tangosol.Net.Messaging.IProtocol"/>.
            </summary>
            <author>Ana Cikic  2006.08.21</author>
            <seealso cref="T:Tangosol.Net.Messaging.IProtocol"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.IProtocol">
            <summary>
            An IProtocol is a binding between a unique name, version information,
            and a set of <see cref="T:Tangosol.Net.Messaging.IMessage"/> types.
            </summary>
            <remarks>
            <p>
            It is used to describe the types of <see cref="T:Tangosol.Net.Messaging.IMessage"/> objects
            (the "dialect", so to speak) that can be exchanged between two
            endpoints through an <see cref="T:Tangosol.Net.Messaging.IChannel"/> via a <see cref="T:Tangosol.Net.Messaging.IConnection"/>.</p>
            <p>
            Before an <b>IConnection</b> can be created or accepted, one or more
            IProtocol instances must be registered with the client and
            server-side <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/>.
            During <b>IConnection</b> establishment, the client's
            <see cref="T:Tangosol.Net.Messaging.IConnectionInitiator"/> sends information about each
            registered IProtocol. A compatable set of IProtocol objects
            (or superset) must be registered with server's
            <b>IConnectionManager</b> in order for the the <b>IConnection</b> to
            be accepted.</p>
            </remarks>
            <author>Jason Howes  2006.04.11</author>
            <author>Goran Milosavljevic  2006.08.15</author>
            <seealso cref="T:Tangosol.Net.Messaging.IChannel"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnection"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnectionAcceptor"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnectionInitiator"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnectionManager"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Net.Messaging.IProtocol.GetMessageFactory(System.Int32)">
            <summary>
            Return an <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that can be used to create
            <b>IMessage</b> objects for the specified version of this
            IProtocol.
            </summary>
            <param name="version">
            The desired IProtocol version.
            </param>
            <returns>
            An <b>IMessageFactory</b> that can create <b>IMessage</b> objects
            for the specified version of this IProtocol.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified protocol version is not supported by this
            IProtocol.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Messaging.IProtocol.Name">
            <summary>
            Gets the unique name of this IProtocol.
            </summary>
            <remarks>
            This name serves as a unique identifier for the IProtocol;
            therefore, only a single instance of an IProtocol with a given
            name may be registered with an <b>IConnectionManager</b>.
            </remarks>
            <value>
            The IProtocol name.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IProtocol.CurrentVersion">
            <summary>
            Determine the newest protocol version supported by this
            IProtocol.
            </summary>
            <value>
            The version number of this IProtocol.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IProtocol.SupportedVersion">
            <summary>
            Determine the oldest protocol version supported by this
            IProtocol.
            </summary>
            <value>
            The oldest protocol version that this IProtocol object supports.
            </value>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Protocol.InstantiateMessageFactory(System.Int32)">
            <summary>
            Instantiate a new <b>MessageFactory</b> for the given version of
            this Protocol.
            </summary>
            <param name="version">
            The version of the Protocol that the returned
            <b>MessageFactory</b> will use.
            </param>
            <returns>
            A new <b>MessageFactory</b> for the given version of this
            Protocol.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Protocol.GetMessageFactory(System.Int32)">
            <summary>
            Return a <b>MessageFactory</b> that can be used to create
            <see cref="T:Tangosol.Net.Messaging.Impl.Message"/> objects for the specified version of this
            Protocol.
            </summary>
            <param name="version">
            The desired Protocol version.
            </param>
            <returns>
            A <b>MessageFactory</b> that can create <b>Message</b> objects
            for the specified version of this Protocol.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified protocol version is not supported by this
            Protocol.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.IProtocol.GetMessageFactory(System.Int32)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Protocol.m_messageFactoryMap">
            <summary>
            A map of MessageFactory objects, keyed by Protocol version.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Protocol.m_name">
            <summary>
            The name of the Protocol.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Protocol.m_currentVersion">
            <summary>
            The newest protocol version supported by this Protocol.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Protocol.m_supportedVersion">
            <summary>
            The oldest protocol version supported by this Protocol.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Protocol.CurrentVersion">
            <summary>
            Determine the newest protocol version supported by this Protocol.
            </summary>
            <value>
            The version number of this Protocol.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.IProtocol.CurrentVersion"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Protocol.MessageFactoryMap">
            <summary>
            A map of <see cref="T:Tangosol.Net.Messaging.Impl.MessageFactory"/> objects, keyed by Protocol
            version.
            </summary>
            <value>
            A map of <b>MessageFactory</b> objects.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Protocol.Name">
            <summary>
            Gets the unique name of this Protocol.
            </summary>
            <value>
            The Protocol name.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.IProtocol.Name"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Protocol.SupportedVersion">
            <summary>
            Determine the oldest protocol version supported by this Protocol.
            </summary>
            <value>
            The oldest protocol version that this Protocol object supports.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.IProtocol.SupportedVersion"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NameService.NameServiceProtocol.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NameService.NameServiceProtocol.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NameService.NameServiceProtocol.InstantiateMessageFactory(System.Int32)">
            <summary>
            Instantiate a new <see cref="T:Tangosol.Net.Messaging.Impl.NameService.NameServiceFactory"/> for the
            given version of this NameServiceProtocol.
            </summary>
            <param name="version">
            The version of the NameServiceProtocol that the returned
            <b>NameServiceFactory</b> will use.
            </param>
            <returns>
            A new <b>NameServiceFactory</b> for the given version of
            this NameServiceProtocol.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NameService.NameServiceProtocol.m_instance">
            <summary>
            The singleton NameServiceProtocol instance.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NameService.NameServiceProtocol.Instance">
            <summary>
            The singleton NameServiceProtocol instance.
            </summary>
            <value>
            The singleton NameServiceProtocol instance.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NameService.NameServiceResponse">
            <summary>
            Generic <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> used for basic NameService
            Protocol Responses.
            </summary>
            <author>Wei Lin  2012.05.23</author>
            <since>Coherence 12.1.2</since>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Response"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NameService.NameServiceProtocol"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.Response">
            <summary>
            Base implementation of <see cref="T:Tangosol.Net.Messaging.IResponse"/>.
            </summary>
            <author>Ana Cikic  2006.08.18</author>
            <seealso cref="T:Tangosol.Net.Messaging.IResponse"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Message"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Request"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.IResponse">
            <summary>
            IResponse is the root interface for all response messages sent by
            peer endpoints through an <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
            <remarks>
            <p>
            IResponse objects are created by an <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> and
            are associated with a corresponding <see cref="T:Tangosol.Net.Messaging.IRequest"/>. The
            status of the IResponse may be determined by reading the
            <see cref="P:Tangosol.Net.Messaging.IResponse.IsFailure"/> property value:
            <list type="bullet">
            <item>
            <description>
            if <b>false</b>, the <b>IRequest</b> was successfully processed by
            the receiver and the IResponse object contains a valid result
            </description>
            </item>
            <item>
            <description>
            if <b>true</b>, an exception occured while processing the
            <b>IRequest</b>
            </description>
            </item>
            </list></p>
            </remarks>
            <author>Jason Howes  2006.04.05</author>
            <author>Goran Milosavljevic  2006.08.15</author>
            <seealso cref="T:Tangosol.Net.Messaging.IMessageFactory"/>
            <seealso cref="T:Tangosol.Net.Messaging.IMessage"/>
            <seealso cref="T:Tangosol.Net.Messaging.IRequest"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="P:Tangosol.Net.Messaging.IResponse.RequestId">
            <summary>
            The unique identifier of the <b>IRequest</b> for which this
            IResponse is being sent.
            </summary>
            <value>
            The unique identifier of the <b>IRequest</b> associated with this
            IResponse.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IResponse.IsFailure">
            <summary>
            Determine if an exception occured while processing the
            <b>IRequest</b>.
            </summary>
            <remarks>
            <p>
            If this property value is <b>false</b>, the result of processing
            the <b>IRequest</b> can be determined by reading the
            <see cref="P:Tangosol.Net.Messaging.IResponse.Result"/> property value.</p>
            <p>
            If this property value is <b>true</b>, <see cref="P:Tangosol.Net.Messaging.IResponse.Result"/> may
            return the cause of the failure (in the form of an
            <b>Exception</b> object).</p>
            </remarks>
            <value>
            <b>false</b> if the <b>IRequest</b> was processed successfully;
            <b>true</b> if an exception occured while processing the
            <b>IRequest</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IResponse.Result">
            <summary>
            The result of processing the <b>IRequest</b>.
            </summary>
            <value>
            The result of processing the <b>IRequest</b> associated with
            this IResponse.
            </value>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Response.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Response.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Response.SetResultAsCollection(System.Collections.ICollection)">
            <summary>
            Set the result of processing the <b>Request</b> as a
            <b>ICollection</b>.
            </summary>
            <param name="result">
            Collection representing the result.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Response.SetResultAsEntrySet(System.Collections.IDictionary)">
            <summary>
            Set the result of processing the <b>Request</b> as a
            <b>IDictionary</b>.
            </summary>
            <param name="result">
            Dictionary representing the result.
            </param>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Response.m_isFailure">
            <summary>
            The status of the Response.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Response.m_requestId">
            <summary>
            The unique identifier of the Request associated with this
            Response.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Response.m_result">
            <summary>
            The result of processing the Request associated with this
            Response.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Response.m_resultFormat">
            <summary>
            The POF format of the result.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Response.RequestId">
            <summary>
            The unique identifier of the <b>IRequest</b> for which this
            IResponse is being sent.
            </summary>
            <value>
            The unique identifier of the <b>IRequest</b> associated with this
            IResponse.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Response.IsFailure">
            <summary>
            Determine if an exception occured while processing the
            <b>IRequest</b>.
            </summary>
            <remarks>
            <p>
            If this property value is <b>false</b>, the result of processing
            the <b>IRequest</b> can be determined by reading the
            <see cref="P:Tangosol.Net.Messaging.Impl.Response.Result"/> property value.</p>
            <p>
            If this property value is <b>true</b>, <see cref="P:Tangosol.Net.Messaging.Impl.Response.Result"/> may
            return the cause of the failure (in the form of an
            <b>Exception</b> object).</p>
            </remarks>
            <value>
            <b>false</b> if the <b>IRequest</b> was processed successfully;
            <b>true</b> if an exception occured while processing the
            <b>IRequest</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Response.Result">
            <summary>
            The result of processing the <b>IRequest</b>.
            </summary>
            <value>
            The result of processing the <b>IRequest</b> associated with
            this IResponse.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Response.ResultFormat">
            <summary>
            The POF format of the result.
            </summary>
            <value>
            One of the <see cref="T:Tangosol.Net.Messaging.Impl.Response.ResultFormatType"/> values.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.Response.ResultFormatType">
            <summary>
            The types of POF format of the result.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Response.ResultFormatType.Generic">
            <summary>
            Result POF format: Generic.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Response.ResultFormatType.Collection">
            <summary>
            Result POF format: Collection.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Response.ResultFormatType.Map">
            <summary>
            Result POF format: Map.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NameService.NameServiceResponse.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NameService.NameServiceResponse.Run">
            <summary>
            Execute the action specific to the <see cref="T:Tangosol.Net.Messaging.Impl.Message"/>
            implementation.
            </summary>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Message.Run"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NameService.NameServiceResponse.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="T:Tangosol.Net.RequestIncompleteException">
            <summary>
            Signals that a request execution in a distributed environment failed to
            complete successfully.
            </summary>
            <remarks>
            For some specific requests this exception could carry a partial
            execution result or failure information.
            </remarks>
            <author>Bin Chen  2013.05.16</author>
            <since>Coherence 12.1.3</since>
            <seealso cref="T:Tangosol.Net.IPriorityTask"/>
        </member>
        <member name="M:Tangosol.Net.RequestIncompleteException.#ctor">
            <summary>
            Constructs a RequestIncompleteException with no detail message.
            </summary>
        </member>
        <member name="M:Tangosol.Net.RequestIncompleteException.#ctor(System.String)">
            <summary>
            Constructs a RequestIncompleteException with the specified detail
            message.
            </summary>
            <param name="s">
            The string that contains a detailed message.
            </param>
        </member>
        <member name="M:Tangosol.Net.RequestIncompleteException.#ctor(System.Exception)">
            <summary>
            Construct a RequestIncompleteException from an <b>Exception</b>
            object.
            </summary>
            <param name="e">
            The <b>Exception</b> object.
            </param>
        </member>
        <member name="M:Tangosol.Net.RequestIncompleteException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a RequestIncompleteException from a <b>Exception</b>
            object and an additional description.
            </summary>
            <param name="s">
            The additional description.
            </param>
            <param name="e">
            The <b>Exception</b> object.
            </param>
        </member>
        <member name="M:Tangosol.Net.RequestIncompleteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct a RequestTimeoutException class with serialized data.
            </summary>
            <param name="info">
            The <b>SerializationInfo</b> that holds the serialized object
            data about the exception being thrown.
            </param>
            <param name="context">
            The <b>StreamingContext</b> that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="M:Tangosol.Net.RequestIncompleteException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <b>SerializationInfo</b> with information about the
            exception.
            </summary>
            <param name="info">
            The <b>SerializationInfo</b> that holds the serialized object
            data about the exception being thrown.
            </param>
            <param name="context">
            The <b>StreamingContext</b> that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="M:Tangosol.Net.RequestIncompleteException.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.RequestIncompleteException.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Net.RequestIncompleteException.m_partialResult">
            <summary>
            Partial execution result (optional).
            </summary>
        </member>
        <member name="P:Tangosol.Net.RequestIncompleteException.PartialResult">
            <summary>
            A partial execution result that may have been assembled prior
            to an exception.
            </summary>
            <value>
            A partial execution result (optional).
            </value>
        </member>
        <member name="T:Tangosol.Net.Security.IIdentityAsserter">
            <summary>
            IdentityAsserter validates a token in order to establish a user's identity. 
            The token is an identity assertion, a statement that asserts an identity.
            </summary>
            <remarks>
            A token is opaque to Coherence. It could be a standard type such as a 
            SAML Assertion or a proprietary type.
            </remarks>
            <author>David Guy  2009.10.30</author>
            <since>Coherence 3.6</since>
        </member>
        <member name="M:Tangosol.Net.Security.IIdentityAsserter.AssertIdentity(System.Object,Tangosol.Net.IService)">
            <summary>
            Asserts an identity based on a token-based identity assertion.
            </summary>
            <param name="oToken">
            The actual token that asserts identity.
            </param>
            <param name="service">
            The IService asserting the identity token.
            </param>
            <returns>
            An IPrincipal representing the identity. 
            </returns>
            <exception cref="T:System.Security.SecurityException">
            If the identity assertion fails.
            </exception>
            <since>
            Coherence 3.7 added service param which intentionally breaks 
            compatibility with Coherence 3.6
            </since>
        </member>
        <member name="T:Tangosol.Net.IInvocationService">
            <summary>
            The <b>IInvocationService</b> is an <see cref="T:Tangosol.Net.IService"/> for
            delivering executable objects to a remote cluster member for
            invocation.
            </summary>
            <remarks>
            The executable objects must implement the <see cref="T:Tangosol.Net.IInvocable"/>
            interface. Using this interface, application code can execute an 
            <b>IInvocable</b> object within the context of a remote cluster.
            </remarks>
            <author>Cameron Purdy  2003.01.05</author>
            <author>Goran Milosavljevic  2006.09.01</author>
            <since>Coherence 2.1</since>
        </member>
        <member name="M:Tangosol.Net.IInvocationService.Query(Tangosol.Net.IInvocable,System.Collections.ICollection)">
            <summary>
            Synchronously invoke the specified task on the cluster member to
            which the client is connected.
            </summary>
            <remarks>
            This method will not return until the cluster member has completed
            its processing, failed in its processing, or died trying.
            </remarks>
            <param name="task">
            The <b>IInvocable</b> object to send to the cluster member in order
            to be invoked on that member.
            </param>
            <param name="col">
            Parameter reserved for future use. Must be null.
            </param>
            <returns>
            An <b>IDictionary</b> of the result of the invocation, keyed by
            the "local" <see cref="T:Tangosol.Net.IMember"/> object.
            </returns>
        </member>
        <member name="T:Tangosol.Net.IMember">
            <summary>
            The IMember interface represents a process connected to or running 
            within a cluster.
            </summary>
            <author>Gene Gleyzer  2002.02.08</author>
            <author>Goran Milosavljevic  2006.09.01</author>
            <since>Coherence 1.1</since>
        </member>
        <member name="P:Tangosol.Net.IMember.ClusterName">
            <summary>
            The name of the cluster with which this member is associated.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.IMember.SiteName">
            <summary>
            Determine the configured name for the site (such as a data
            center) in which this IMember resides.
            </summary>
            <remarks>
            This name is used for logging purposes and to differentiate among
            multiple geographic sites.
            </remarks>
            <returns>
            The configured site name or <c>null</c>.
            </returns>
            <since>Coherence 3.2</since>
        </member>
        <member name="P:Tangosol.Net.IMember.RackName">
            <summary>
            Determine the configured name for the rack (such as a physical
            rack, cage or blade frame) in which this IMember resides.
            </summary>
            <remarks>
            This name is used for logging purposes and to differentiate among
            multiple racks within a particular data center, for example.
            </remarks>
            <value>
            The configured rack name or <c>null</c>.
            </value>
            <since>Coherence 3.2</since>
        </member>
        <member name="P:Tangosol.Net.IMember.MachineName">
            <summary>
            Determine the configured name for the machine (such as a host
            name) in which this IMember resides.
            </summary>
            <remarks>
            This name is used for logging purposes and to differentiate among
            multiple servers, and may be used as the basis for determining
            the MachineId property.
            </remarks>
            <value>
            The configured machine name or <c>null</c>.
            </value>
            <since>Coherence 3.2</since>
        </member>
        <member name="P:Tangosol.Net.IMember.ProcessName">
            <summary>
            Determine the configured name for the process (such as a JVM) in
            which this IMember resides.
            </summary>
            <remarks>
            This name is used for logging purposes and to differentiate among
            multiple processes on a a single machine.
            </remarks>
            <value>
            The configured process name or <c>null</c>.
            </value>
            <since>Coherence 3.2</since>
        </member>
        <member name="P:Tangosol.Net.IMember.MemberName">
            <summary>
            Determine the configured name for the IMember.
            </summary>
            <remarks>
            This name is used for logging purposes and to differentiate among
            members running within a particular process.
            </remarks>
            <value>
            The configured IMember name or <c>null</c>.
            </value>
            <since>Coherence 3.2</since>
        </member>
        <member name="P:Tangosol.Net.IMember.RoleName">
            <summary>
            Determine the configured role name for the IMember.
            </summary>
            <remarks>
            This role is completely definable by the application, and can be
            used to determine what members to use for specific purposes, such
            as to send particular types of work to.
            </remarks>
            <value>
            The configured role name for the IMember or <c>null</c>.
            </value>
            <since>Coherence 3.2</since>
        </member>
        <member name="T:Tangosol.Net.Impl.BundlingNamedCache">
            <summary>
            Bundling NamedCache implementation.
            </summary>
            <see cref="T:Tangosol.Net.Cache.AbstractBundler"/>
            <author>gg 2007.01.28</author>
            <author>lh 2012.05.18</author>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.#ctor(Tangosol.Net.INamedCache)">
            <summary>
            Construct a BundlingNamedCache based on the specified <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <param name="cache">
            The INamedCache that will be wrapped by this BundlingNamedCache
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.EnsureGetBundler(System.Int32)">
            <summary>
            Configure the bundler for the "get" operations. If the bundler does not
            exist and bundling is enabled, it will be instantiated.
            </summary>
            <param name="bundleThreshold">
            The bundle size threshold; pass zero to disable "Get" operation
            bundling.
            </param>
            <returns>
            The "Get" bundler or null if bundling is disabled.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.EnsureInsertBundler(System.Int32)">
            <summary>
            Configure the bundler for the "Insert" operations. If the bundler
            does not exist and bundling is enabled, it will be instantiated.
            </summary>
            <param name="bundleThreshold">
            The bundle size threshold; pass zero to disable "Insert" operation.
            bundling
            </param>
            <returns> 
            The "Insert" bundler or null if bundling is disabled.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.EnsureRemoveBundler(System.Int32)">
            <summary>
            Configure the bundler for the "Remove" operations. If the bundler
            does not exist and bundling is enabled, it will be instantiated.
            </summary>
            <param name="bundleThreshold">
            The bundle size threshold; pass zero to disable "Remove" operation
            bundling.
            </param>
            <returns>
            The "Remove" bundler or null if bundling is disabled.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.Get(System.Object)">
            <summary>
            Get the value for a specified key, if it is in the
            cache.
            </summary>
            <param name="key">
            The key of the element to get.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.BaseGetAll(System.Collections.ICollection)">
            <summary>
            Call the GetAll() method in the base class.
            </summary>
            <param name="colKeys">
            A collection of keys for the GetAll operation.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.GetAll(System.Collections.ICollection)">
            <summary>
            Get the values for all the specified keys, if they are in the
            cache.
            </summary>
            <param name="colKeys">
            A collection of keys for the GetAll operation.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.Insert(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <note>
            This method always returns null.
            </note>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.BaseInsertAll(System.Collections.IDictionary)">
            <summary>
            Call the InsertAll() method in the base class.
            </summary>
            <param name="dictionary">
            Dictionary to be stored in this cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.InsertAll(System.Collections.IDictionary)">
            <summary>
            Copies all of the mappings from the specified dictionary to this
            cache (optional operation).
            </summary>
            <param name="dictionary">
            Dictionary to be stored in this cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.BaseRemove(System.Object)">
            <summary>
            Call the Remove() method in the base class.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
            <note>
            This method always returns null.
            </note>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <b>IDictionary</b>
            object.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
            <note>
            This method always returns null.
            </note>
        </member>
        <member name="P:Tangosol.Net.Impl.BundlingNamedCache.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize calls to a
            method.
            </summary>
            <value>
            An object that can be used to synchronize calls to a
            method.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.BundlingNamedCache.GetBundlerOp">
            <summary>
            The bundler for Get() operations.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.BundlingNamedCache.InsertBundlerOp">
            <summary>
            The bundler for Insert() operations.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.BundlingNamedCache.RemoveBundlerOp">
            <summary>
            The bundler for Remove() operations.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Impl.BundlingNamedCache.GetBundler">
            <summary>
            The bundler for Get operations.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.GetBundler.Bundling(System.Collections.ICollection)">
            <summary>
            A pass through the underlying GetAll operation.
            </summary>
            <param name="colKeys">
            A collection of keys for the GetAll operation.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.GetBundler.Unbundling(System.Object)">
            <summary>
            A pass through the underlying Get operation.
            </summary>
            <param name="key">
            The key of the element to get.
            </param>
        </member>
        <member name="P:Tangosol.Net.Impl.BundlingNamedCache.GetBundler.BundleNamedCache">
            <summary>
            The bundling cache to perform the operation on.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Impl.BundlingNamedCache.InsertBundler">
            <summary>
            The bundler for Insert operations.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.InsertBundler.Bundling(System.Collections.IDictionary)">
            <summary>
            A pass through the underlying InsertAll() operation.
            </summary>
            <param name="dictionary">
            A dictionary to perform the bundled operation for.
            </param>
        </member>
        <member name="P:Tangosol.Net.Impl.BundlingNamedCache.InsertBundler.BundleNamedCache">
            <summary>
            The bundling cache to perform the operation on.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Impl.BundlingNamedCache.RemoveBundler">
            <summary>
            The bundler for Remove operations.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.RemoveBundler.Bundling(System.Collections.ICollection)">
            <summary>
            A pass through the underlying Keys.RemoveAll() operation.
            </summary>
            <param name="colKeys">
            A collection of keys for the RemoveAll operation.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.BundlingNamedCache.RemoveBundler.Unbundling(System.Object)">
            <summary>
            A pass through the underlying Remove() operation.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
        </member>
        <member name="P:Tangosol.Net.Impl.BundlingNamedCache.RemoveBundler.BundleNamedCache">
            <summary>
            The bundling cache to perform the operation on.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Impl.LocalNamedCache">
            <summary>
            <see cref="T:Tangosol.Net.INamedCache"/> wrapper for <see cref="P:Tangosol.Net.Impl.LocalNamedCache.LocalCache"/>.
            </summary>
            <author>Ivan Cikic  2006.11.17</author>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.#ctor">
            <summary>
            Construct the LocalNamedCache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.#ctor(System.Int32)">
            <summary>
            Construct the LocalNamedCache.
            </summary>
            <param name="units">
            The number of units that the underlying <b>LocalCache</b> will
            cache before pruning the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the LocalNamedCache.
            </summary>
            <param name="units">
            The number of units that the underlying <b>LocalCache</b> will
            cache before pruning the cache.
            </param>
            <param name="expiryMillis">
            The number of milliseconds that each cache entry lives before
            being automatically expired.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Construct the LocalNamedCache.
            </summary>
            <param name="units">
            The number of units that the underlying <b>LocalCache</b> will
            cache before pruning the cache.
            </param>
            <param name="expiryMillis">
            The number of milliseconds that each cache entry lives before
            being automatically expired.
            </param>
            <param name="pruneLevel">
            The percentage of the total number of units that will remain
            after the underlying <b>LocalCache</b> prunes the cache (i.e.
            this is the "low water mark" value); this value is in the range
            0.0 to 1.0.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.#ctor(System.Int32,System.Int32,Tangosol.Net.Cache.ICacheLoader)">
            <summary>
            Construct the LocalNamedCache.
            </summary>
            <param name="units">
            The number of units that the underlying <b>LocalCache</b> will
            cache before pruning the cache.
            </param>
            <param name="expiryMillis">
            The number of milliseconds that each cache entry lives before
            being automatically expired.
            </param>
            <param name="loader">
            The <see cref="T:Tangosol.Net.Cache.ICacheLoader"/> or <see cref="T:Tangosol.Net.Cache.ICacheStore"/> to
            use.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Release">
            <summary>
            Release local resources associated with this instance of
            INamedCache.
            </summary>
            <remarks>
            <p>
            Releasing a cache makes it no longer usable, but does not affect
            the cache itself. In other words, all other references to the
            cache will still be valid, and the cache data is not affected by
            releasing the reference.
            Any attempt to use this reference afterword will result in an
            exception.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Destroy">
            <summary>
            Release and destroy this instance of INamedCache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Truncate">
            <summary>
            Truncate is not support for LocalNamedCache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Add a standard cache listener that will receive all events
            (inserts, updates, deletes) that occur against the cache, with
            the key, old-value and new-value included.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            AddCacheListener(listener, (IFilter) null, false);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a standard cache listener that previously signed up for
            all events.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            RemoveCacheListener(listener, (IFilter) null);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object,System.Boolean)">
            <summary>
            Add a cache listener for a specific key.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.OldValue"/> and
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.NewValue"/> properties.</p>
            <p>
            To unregister the ICacheListener, use the
            <see cref="M:Tangosol.Net.Cache.IObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)">
            <summary>
            Remove a cache listener that previously signed up for events
            about a specific key.
            </summary>
            <param name="listener">
            The listener to remove.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Add a cache listener that receives events based on a filter
            evaluation.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the <b>OldValue</b> and <b>NewValue</b>
            properties.</p>
            <p>
            To unregister the <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, use the
            <see cref="M:Tangosol.Net.Cache.IObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.</param>
            <param name="filter">
            A filter that will be passed <b>CacheEventArgs</b> objects to
            select from; a <b>CacheEventArgs</b> will be delivered to the
            listener only if the filter evaluates to <b>true</b> for that
            <b>CacheEventArgs</b>; <c>null</c> is equivalent to a filter
            that alway returns <b>true</b>.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)">
            <summary>
            Remove a cache listener that previously signed up for events
            based on a filter evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="filter">
            A filter used to evaluate events; <c>null</c> is equivalent to a
            filter that alway returns <b>true</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.GetAll(System.Collections.ICollection)">
            <summary>
            Get the values for all the specified keys, if they are in the
            cache.
            </summary>
            <remarks>
            <p>
            For each key that is in the cache, that key and its corresponding
            value will be placed in the dictionary that is returned by this
            method. The absence of a key in the returned dictionary indicates
            that it was not in the cache, which may imply (for caches that
            can load behind the scenes) that the requested data could not be
            loaded.</p>
            <p>
            The result of this method is defined to be semantically the same
            as the following implementation, without regards to threading
            issues:</p>
            <pre>
            IDictionary dict = new AnyDictionary();
            // could be a Hashtable (but does not have to)
            foreach (object key in colKeys)
            {
                object value = this[key];
                if (value != null || Contains(key))
                {
                    dict[key] = value;
                }
            }
            return dict;
            </pre>
            </remarks>
            <param name="keys">
            A collection of keys that may be in the named cache.
            </param>
            <returns>
            A dictionary of keys to values for the specified keys passed in
            <paramref name="keys"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Insert(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            <p>
            Invoking this method is equivalent to the following call:
            <pre>
            Insert(key, value, CacheExpiration.Default);
            </pre></p>
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the dictionary previously associated <c>null</c>
            with the specified key, if the implementation supports
            <c>null</c> values.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Insert(System.Object,System.Object,System.Int64)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            This variation of the <see cref="M:Tangosol.Net.Cache.ICache.Insert(System.Object,System.Object)"/>
            method allows the caller to specify an expiry (or "time to live")
            for the cache entry.
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire,
            also referred to as the entry's "time to live"; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT"/> to use the cache's
            default time-to-live setting; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.NEVER"/> to indicate that the
            cache entry should never expire; this milliseconds value is
            <b>not</b> a date/time value, but the amount of time object will
            be kept in the cache.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c> with
            the specified key, if the implementation supports <c>null</c>
            values.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If the requested expiry is a positive value and the
            implementation does not support expiry of cache entries.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.InsertAll(System.Collections.IDictionary)">
            <summary>
            Copies all of the mappings from the specified dictionary to this
            cache (optional operation).
            </summary>
            <remarks>
            These mappings will replace any mappings that this cache had for
            any of the keys currently in the specified dictionary.
            </remarks>
            <param name="dictionary">
            Mappings to be stored in this cache.
             </param>
            <exception cref="T:System.InvalidCastException">
            If the class of a key or value in the specified dictionary
            prevents it from being stored in this cache.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
            <exception cref="T:System.NullReferenceException">
            This cache does not permit <c>null</c> keys or values, and the
            specified key or value is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Tangosol#Net#Cache#ICache#GetEnumerator">
            <summary>
            Returns an <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> object for the
            <b>ICache</b> instance.
            </summary>
            <returns>An <b>ICacheEnumerator</b> object for the
            <b>ICache</b> instance.</returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"/> object contains
            an element with the specified key.
            </summary>
            <returns>
            <b>true</b> if the <b>IDictionary</b> contains an element with
            the key; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the
            <b>IDictionary</b> object.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Clear">
            <summary>
            Removes all elements from the <b>IDictionary</b> object.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <b>IDictionaryEnumerator</b> object for the
            <b>IDictionary</b> object.
            </summary>
            <returns>
            An <b>IDictionaryEnumerator</b> object for the <b>IDictionary</b>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            <b>IDictionary</b>.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the cache to an array, starting at a
            particular index.
            </summary>
            <param name="array">The one-dimensional array that is the
            destination of the elements copied from the cache.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Lock(System.Object,System.Int64)">
            <summary>
            Attempt to lock the specified item within the specified period of
            time.
            </summary>
            <remarks>
            <p>
            The item doesn't have to exist to be <i>locked</i>. While the
            item is locked there is known to be a <i>lock holder</i> which
            has an exclusive right to modify (calling put and remove methods)
            that item.</p>
            <p>
            Lock holder is an abstract concept that depends on the
            IConcurrentCache implementation. For example, holder could
            be a cluster member or a thread (or both).</p>
            <p>
            Locking strategy may vary for concrete implementations as well.
            Lock could have an expiration time (this lock is sometimes called
            a "lease") or be held indefinitely (until the lock holder
            terminates).</p>
            <p>
            Some implementations may allow the entire cache to be locked. If
            the cache is locked in such a way, then only a lock holder is
            allowed to perform any of the "put" or "remove" operations.</p>
            <p>
            Pass the special constant
            <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> as the <i>key</i>
            parameter to indicate the cache lock.</p>
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <param name="waitTimeMillis">
            The number of milliseconds to continue trying to obtain a lock;
            pass zero to return immediately; pass -1 to block the calling
            thread until the lock could be obtained.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked within the
            specified time; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Lock(System.Object)">
            <summary>
            Attempt to lock the specified item and return immediately.
            </summary>
            <remarks>
            This method behaves exactly as if it simply performs the call
            <b>Lock(key, 0)</b>.
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Unlock(System.Object)">
            <summary>
            Unlock the specified item.
            </summary>
            <remarks>
            The item doesn't have to exist to be <i>unlocked</i>.
            If the item is currently locked, only the <i>holder</i> of the
            lock could successfully unlock it.
            </remarks>
            <param name="key">
            Key being unlocked.
            </param>
            <returns>
            <b>true</b> if the item was successfully unlocked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.GetKeys(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the keys contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of keys for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.GetValues(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of the values for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.GetValues(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            It is guaranteed that enumerator will traverse the array in such
            a way that the values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.GetEntries(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.GetEntries(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            <p>
            It is guaranteed that enumerator will traverse the array in such
            a way that the entry values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.AddIndex(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer)">
            <summary>
            Add an index to this IQueryCache.
            </summary>
            <remarks>
            This allows to correlate values stored in this
            <i>indexed cache</i> (or attributes of those values) to the
            corresponding keys in the indexed dictionary and increase the
            performance of <b>GetKeys</b> and <b>GetEntries</b> methods.
            </remarks>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the indexed
            cache. Must not be <c>null</c>.
            </param>
            <param name="isOrdered">
            <b>true</b> if the contents of the indexed information should be
            ordered; <b>false</b> otherwise.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on entries
            in the indexed cache; or <c>null</c> if the entries' values
            natural ordering should be used.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.RemoveIndex(Tangosol.Util.IValueExtractor)">
            <summary>
            Remove an index from this IQueryCache.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Invoke(System.Object,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the entry
            specified by the passed key, returning the result of the
            invocation.
            </summary>
            <param name="key">
            The key to process; it is not required to exist within the
            dictionary.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified key.
            </param>
            <returns>
            The result of the invocation as returned from the
            <b>IEntryProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.InvokeAll(System.Collections.ICollection,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entries specified by the passed keys, returning the result of the
            invocation for each.
            </summary>
            <param name="keys">
            The keys to process; these keys are not required to exist within
            the dictionary.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against each of the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.InvokeAll(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the set
            of entries that are selected by the given <see cref="T:Tangosol.Util.IFilter"/>,
            returning the result of the invocation for each.
            </summary>
            <remarks>
            <p>
            Unless specified otherwise, IInvocableCache implementations
            will perform this operation in two steps: (1) use the filter to
            retrieve a matching entry collection; (2) apply the agent to
            every filtered entry. This algorithm assumes that the agent's
            processing does not affect the result of the specified filter
            evaluation, since the filtering and processing could be
            performed in parallel on different threads.</p>
            <p>
            If this assumption does not hold, the processor logic has to be
            idempotent, or at least re-evaluate the filter. This could be
            easily accomplished by wrapping the processor with the
            <see cref="T:Tangosol.Util.Processor.ConditionalProcessor"/>.</p>
            </remarks>
            <param name="filter">
            An <see cref="T:Tangosol.Util.IFilter"/> that results in the collection of keys to
            be processed.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> to use to process the specified
            keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against the keys that are selected by the
            given <b>IFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Aggregate(System.Collections.ICollection,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the entries specified by
            the passed keys.
            </summary>
            <param name="keys">
            The collection of keys that specify the entries within this cache
            to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the specified entries of this dictionary.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Aggregate(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the collection of
            entries that are selected by the given <b>IFilter</b>.
            </summary>
            <param name="filter">
            an <see cref="T:Tangosol.Util.IFilter"/> that is used to select entries within
            this cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the selected entries of this dictionary.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.LocalNamedCache.Dispose">
            <summary>
            Calls <see cref="M:Tangosol.Net.Impl.LocalNamedCache.Release"/> to release the resources associated with this cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.LocalNamedCache.m_localCache">
            <summary>
            Actual (wrapped) <see cref="P:Tangosol.Net.Impl.LocalNamedCache.LocalCache"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.LocalNamedCache.m_cacheName">
            <summary>
            The cache name.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.LocalNamedCache.m_cacheService">
            <summary>
            <see cref="T:Tangosol.Net.ICacheService"/> this <see cref="T:Tangosol.Net.INamedCache"/> is
            part of.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.LocalNamedCache.m_isReleased">
            <summary>
            Specifies whether or not the underlying <see cref="P:Tangosol.Net.Impl.LocalNamedCache.LocalCache"/>
            has been explicitly released.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.LocalCache">
            <summary>
            Actual (wrapped) <see cref="P:Tangosol.Net.Impl.LocalNamedCache.LocalCache"/>.
            </summary>
            <value>
            Wrapped <b>LocalCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.CacheName">
            <summary>
            Gets the cache name.
            </summary>
            <value>
            The cache name.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.CacheService">
            <summary>
            Gets the <see cref="T:Tangosol.Net.ICacheService"/> that this LocalCache is a
            part of.
            </summary>
            <value>
            The cache service this LocalCache is a part of.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.IsActive">
            <summary>
            Specifies whether or not the <see cref="P:Tangosol.Net.Impl.LocalNamedCache.LocalCache"/> is active.
            </summary>
            <value>
            <b>true</b> if the <b>LocalCache</b> is active; <b>false</b>
            otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.IsReleased">
            <summary>
            Specifies whether or not the underlying <see cref="P:Tangosol.Net.Impl.LocalNamedCache.LocalCache"/>
            has been explicitly released.
            </summary>
            <value>
            Specifies whether or not the underlying <b>LocalCache</b> has
            been explicitly released.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.Entries">
            <summary>
            Gets a collection of <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> instances
            within the cache.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">
            The key of the element to get or set.
            </param>
            <returns>
            The element with the specified key.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.Keys">
            <summary>
            Gets an <b>ICollection</b> object containing the keys of the
            <b>IDcitionary</b> object.
            </summary>
            <returns>
            An <b>ICollection</b> object containing the keys of the
            <b>IDictionary</b> object.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.Values">
            <summary>
            Gets an <b>ICollection</b> object containing the values in the
            <b>IDictionary</b> object.
            </summary>
            <returns>
            An <b>ICollection</b> object containing the values in the
            <b>IDictionary</b> object.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.IsReadOnly">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object is
            read-only.
            </summary>
            <returns>
            <b>true</b> if the <b>IDictionary</b> object is read-only;
            otherwise, false.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.IsFixedSize">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object has
            a fixed size.
            </summary>
            <returns>
            <b>true</b> if the <b>IDictionary</b> object has a fixed size;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.Count">
            <summary>
            Gets the number of elements contained in the <b>ICollection</b>.
            </summary>
            <returns>
            The number of elements contained in the <b>ICollection</b>.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <b>ICollection</b>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the
            <b>ICollection</b>.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.LocalNamedCache.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <b>ICollection</b>
            is synchronized (thread safe).
            </summary>
            <returns>
            <b>true</b> if access to the <b>ICollection</b> is synchronized
            (thread safe); otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteCacheService">
            <summary>
            <see cref="T:Tangosol.Net.ICacheService"/> implementation that allows a client to
            use a remote CacheService without having to join the Cluster.
            </summary>
            <author>Ana Cikic  2006.09.15</author>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteCacheService.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteCacheService.DestroyCache(Tangosol.Net.INamedCache)">
            <summary>
            Release and destroy the specified cache.
            </summary>
            <remarks>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the entire
            cluster to this cache will be invalidated, the cached data will
            be cleared, and all resources will be released.
            </remarks>
            <param name="cache">
            The cache object to be released.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteCacheService.EnsureCache(System.String)">
            <summary>
            Obtain an <see cref="T:Tangosol.Net.INamedCache"/> interface that provides a view
            of resources shared among members of a cluster.
            </summary>
            <remarks>
            The view is identified by name within this ICacheService.
            Typically, repeated calls to this method with the same view name
            will result in the same view reference being returned.
            </remarks>
            <param name="name">
            The name, within this ICacheService, that uniquely identifies a
            view; <c>null</c> is legal, and may imply a default name.
            </param>
            <returns>
            An <b>INamedCache</b> interface which can be used to access the
            resources of the specified view.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the service is not running.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteCacheService.ReleaseCache(Tangosol.Net.INamedCache)">
            <summary>
            Release local resources associated with the specified instance of
            the cache.
            </summary>
            <remarks>
            <p>
            This invalidates a reference obtained by using the
            <see cref="M:Tangosol.Net.ICacheService.EnsureCache(System.String)"/> method.</p>
            <p>
            Releasing a reference to a cache makes the cache reference no
            longer usable, but does not affect the cache itself. In other
            words, all other references to the cache will still be valid, and
            the cache data is not affected by releasing the reference.</p>
            <p>
            The reference that is released using this method can no longer be
            used; any attempt to use the reference will result in an
            exception.</p>
            </remarks>
            <param name="cache">
            The cache object to be released.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteCacheService.ReleaseCaches">
            <summary>
            Releases all the caches fetched from the store and then clears the store.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteCacheService.DoShutdown">
            <summary>
            Called immediately after the RemoteService is shutdown.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteCacheService.OpenChannel">
            <summary>
            Open an <b>IChannel</b> to the remote Service proxy.
            </summary>
            <seealso cref="M:Tangosol.Net.Impl.RemoteService.OpenChannel"/>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteCacheService.OnConnectionClosed(System.Object,Tangosol.Net.Messaging.ConnectionEventArgs)">
            <summary>
            Invoked after an <see cref="T:Tangosol.Net.Messaging.IConnection"/> is closed.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> that raised an event.
            </param>
            <param name="evt">
            The <see cref="F:Tangosol.Net.Messaging.ConnectionEventType.Closed"/> event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteCacheService.OnConnectionError(System.Object,Tangosol.Net.Messaging.ConnectionEventArgs)">
            <summary>
            Invoked when the <see cref="T:Tangosol.Net.Messaging.IConnection"/> detects that the
            underlying communication channel has been severed or become
            unusable.
            </summary>
            <remarks>
            After this event is raised, any attempt to use the
            <b>IConnection</b> (or any <see cref="T:Tangosol.Net.Messaging.IChannel"/> created by the
            <b>IConnection</b>) may result in an exception.
            </remarks>
            <param name="sender">
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> that raised an event.
            </param>
            <param name="evt">
            The <see cref="F:Tangosol.Net.Messaging.ConnectionEventType.Error"/> event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteCacheService.DoConfigure(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            The <see cref="M:Tangosol.Net.Impl.RemoteService.Configure(Tangosol.Run.Xml.IXmlElement)"/> implementation method.
            </summary>
            <remarks>
            This method must only be called by a thread that has synchronized
            on this RemoteService.
            </remarks>
            <param name="xml">
            The <see cref="T:Tangosol.Run.Xml.IXmlElement"/> containing the new configuration
            for this RemoteService.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteCacheService.CreateRemoteNamedCache(System.String)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Impl.RemoteNamedCache"/> for the given
            <see cref="T:Tangosol.Net.INamedCache"/> name.
            </summary>
            <param name="name">
            The name of the cache.
            </param>
            <returns>
            A new <b>RemoteNamedCache</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteCacheService.DestroyRemoteNamedCache(Tangosol.Net.Impl.RemoteNamedCache)">
            <summary>
            Destroy the given <see cref="T:Tangosol.Net.Impl.RemoteNamedCache"/>.
            </summary>
            <param name="cache">
            The <b>RemoteNamedCache</b> to destroy.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteCacheService.ReleaseRemoteNamedCache(Tangosol.Net.Impl.RemoteNamedCache)">
            <summary>
            Release the given <see cref="T:Tangosol.Net.Impl.RemoteNamedCache"/>.
            </summary>
            <param name="cache">
            The <b>RemoteNamedCache</b> to release.
            </param>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteCacheService.m_storeRemoteNamedCache">
            <summary>
            Store that holds cache references by name and optionally,
            if configured, Principal.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteCacheService.CacheNames">
            <summary>
            A collection of string objects, one for each cache name that has
            been previously registered with this ICacheService.
            </summary>
            <value>
            <b>ICollection</b> of cache names.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If the service is not running or has stopped.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteCacheService.DeferKeyAssociationCheck">
            <summary>
            Whether a key should be checked for <see cref="T:Tangosol.Net.Cache.IKeyAssociation"/>
            by the extend client (false) or deferred until the key is
            received by the PartionedService (true).
            </summary>
            <value>
            Whether a key should be checked for <b>IKeyAssociation</b>
            by the extend client (false) or deferred until the key is
            received by the PartionedService (true).
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteCacheService.StoreRemoteNamedCache">
            <summary>
            Store that holds cache references by name and optionally,
            if configured, Principal.
            </summary>
            <value>
            Store that holds cache references by name and optionally,
            if configured, Principal.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteCacheService.ServiceType">
            <summary>
            Gets the type of the <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <value>
            The type of the <b>IService</b>.
            </value>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteInvocationService">
            <summary>
            <see cref="T:Tangosol.Net.IInvocationService"/> implementation that allows a usage
            of a remote <b>IInvocationService</b> without having to join the
            cluster.
            </summary>
            <author>Goran Milosavljevic  2006.11.08</author>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteInvocationService.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteInvocationService.Query(Tangosol.Net.IInvocable,System.Collections.ICollection)">
            <summary>
            Synchronously invoke the specified task on each of the specified
            members.
            </summary>
            <remarks>
            <p>
            This method will not return until the specified members have
            completed their processing, failed in their processing, or died
            trying.</p>
            <p>
            <b>IMember</b>s that are specified but are not currently running
            the <b>IInvocationService</b> will not invoke the specified
            <see cref="T:Tangosol.Net.IInvocable"/> object.</p>
            <p>
            <b>IMember</b>s that leave (gracefully or otherwise) before the
            invocation completes will not register a result, and the amount
            of processing that completed is indeterminate. <b>IMember</b>s
            that encounter an exception during invocation will not be
            retried; whatever result has been registered by that point by
            that member for that <b>IInvocable</b> object will be returned.
            Specifically, the result for a given member will be null under
            the following conditions:</p>
            <list type="bullet">
            <item>if the member did not exist</item>
            <item>if the member was not running the service at the time that
            the query method was invoked</item>
            <item>if the member left (via the shutdown or stop methods, or
            unexpectedly) before responding</item>
            <item>if the member encountered an exception while processing
            and had not registered a non-null result</item>
            <item>if the member completed successfully but registered no
            result</item>
            <item>if the member completed successfully but explicitly
            registered a result of null</item>
            </list>
            </remarks>
            <param name="task">
            The <b>IInvocable</b> object to distribute to the specified
            members in order to be invoked on those members.
            </param>
            <param name="col">
            Optional collection of cluster members to which the
            <b>IInvocable</b> object will be distributed; if <c>null</c>, the
            <b>IInvocable</b> object will be distributed to all cluster
            members that are running this service.
            </param>
            <returns>
            An <b>IDictionary</b> of result objects keyed by <see cref="T:Tangosol.Net.IMember"/>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteInvocationService.OpenChannel">
            <summary>
            Open an <b>IChannel</b> to the remote ProxyService.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteInvocationService.DoConfigure(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            The <see cref="M:Tangosol.Net.Impl.RemoteService.Configure(Tangosol.Run.Xml.IXmlElement)"/> implementation method.
            </summary>
            <remarks>
            This method must only be called by a thread that has synchronized
            on this RemoteService.
            </remarks>
            <param name="xml">
            The <b>IXmlElement</b> containing the new configuration for this
            RemoteService.
            </param>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteInvocationService.ServiceType">
            <summary>
            Gets the type of the <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <value>
            The type of the <b>IService</b>.
            </value>
            <since>Coherence 2.0</since>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNamedCache">
            <summary>
            <see cref="T:Tangosol.Net.INamedCache"/> implementation that delegates to a remote
            <b>INamedCache</b> using an <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
            <author>Goran Milosavljevic  2006.09.07</author>
        </member>
        <member name="T:Tangosol.Net.Messaging.IReceiver">
            <summary>
            An IReceiver processes unsolicited <see cref="T:Tangosol.Net.Messaging.IMessage"/> objects sent
            via any number of <see cref="T:Tangosol.Net.Messaging.IChannel"/> objects.
            </summary>
            <remarks>
            <p>
            An <b>IReceiver</b> acts as a server-side proxy, in that it can be
            registered with an <see cref="T:Tangosol.Net.Messaging.IConnectionAcceptor"/>, it can be looked
            up, and <b>IChannels</b> from multiple clients can be established to
            it. In this sense, the IReceiver represents server-side state shared
            across any number of client <b>IChannels</b>, and thus provides an
            efficient mechanism for demultiplexing multi-client communication
            into a shared service proxy, and locating state that is shared across
            all of those client <b>IChannels</b>. Conversely, the <b>IChannel</b>
            object represents client-specific state, allowing per-client
            information to be efficiently managed on the server side.</p>
            <p>
            While the IReceiver is particularly useful as a server-side proxy, it
            is also useful on the client, allowing a client to publish named
            services to a server, and in the case of both named services and any
            other <b>IChannels</b> created by a client, it allows a client to
            efficiently manage stateful communication and process unsolicited
            <b>IMessage</b> objects.</p>
            </remarks>
            <author>Cameron Purdy/Jason Howes  2005.04.17</author>
            <author>Ana Cikic  2006.08.15</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Net.Messaging.IReceiver.RegisterChannel(Tangosol.Net.Messaging.IChannel)">
            <summary>
            Notify this IReceiver that it has been associated with a
            <b>IChannel</b>.
            </summary>
            <remarks>
            <p>
            This method is invoked by the <b>IChannel</b> when an IReceiver is
            associated with the <b>IChannel</b>.</p>
            <p>
            Once registered, the IReceiver will receive all unsolicited
            <b>IMessage</b> objects sent through the <b>IChannel</b> until
            the <b>IChannel</b> is unregistered or closed. Without a
            IReceiver, the unsolicited <b>IMessage</b> objects are executed
            with only an <b>IChannel</b> as context; with an IReceiver, the
            IReceiver is given the <b>IMessage</b> to process, and may
            execute the <b>IMessage</b> in turn.</p>
            </remarks>
            <param name="channel">
            An <b>IChannel</b> that has been associated with this IReceiver.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.IReceiver.OnMessage(Tangosol.Net.Messaging.IMessage)">
            <summary>
            Called when an unsolicited (non-Response) <b>IMessage</b> is
            received by an <b>IChannel</b> that had been previously
            registered with this IReceiver.
            </summary>
            <param name="message">
            An unsolicited <b>IMessage</b> received by a registered
            <b>IChannel</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.IReceiver.UnregisterChannel(Tangosol.Net.Messaging.IChannel)">
            <summary>
            Unregister the given <b>IChannel</b> with this IReceiver.
            </summary>
            <remarks>
            <p>
            This method is invoked by the <b>IChannel</b> when an IReceiver is
            disassociated with the <b>IChannel</b>.</p>
            <p>
            Once unregistered, the IReceiver will no longer receive
            unsolicited <b>IMessage</b> objects sent through the
            <b>IChannel</b>.</p>
            </remarks>
            <param name="channel">
            An <b>IChannel</b> that was disassociated with this IReceiver.
            </param>
        </member>
        <member name="P:Tangosol.Net.Messaging.IReceiver.Name">
            <summary>
            The name of this IReceiver.
            </summary>
            <remarks>
            If the IReceiver is registered with a
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/>, the registration and any
            subsequent accesses are by the IReceiver's name, meaning that the
            name must be unique within the domain of the
            <b>IConnectionManager</b>.
            </remarks>
            <value>
            The IReceiver name.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IReceiver.Protocol">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IProtocol"/> understood by the IReceiver.
            </summary>
            <remarks>
            Only <b>IChannel</b> objects with the specified <b>IProtocol</b>
            can be registered with this IReceiver.
            </remarks>
            <value>
            The <b>IProtocol</b> used by this IReceiver.
            </value>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <b>ICollection</b> to an <b>Array</b>,
            starting at a particular index.
            </summary>
            <param name="array">
            The one-dimensional <b>Array</b> that is the destination of the
            elements copied from <b>ICollection</b>.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <b>IDictionaryEnumerator</b> object for the
            <b>IDictionary</b> object.
            </summary>
            <returns>
            An <b>IDictionaryEnumerator</b> object for the <b>IDictionary</b>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the
            <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="value">
            The <see cref="T:System.Object"/> to use as the value of the element to
            add.
            </param>
            <param name="key">
            The <see cref="T:System.Object"/> to use as the key of the element to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Clear">
            <summary>
            Removes all mappings from this cache.
            </summary>
            <remarks>
            Some implementations will attempt to lock the entire cache
            (if necessary) before preceeding with the clear operation. For
            such implementations, the entire cache has to be either
            already locked or able to be locked for this operation to
            succeed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            <b>IDictionary</b> object.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Contains(System.Object)">
            <summary>
            Determines whether the <b>IDictionary</b> object contains an
            element with the specified key.
            </summary>
            <param name="key">
            The key to locate in the <b>IDictionary</b> object.
            </param>
            <returns>
            <b>true</b> if the <b>IDictionary</b> contains an element with
            the key; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Insert(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            <p>
            Invoking this method is equivalent to the following call:
            <pre>
            Insert(key, value, CacheExpiration.Default);
            </pre></p>
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c>
            with the specified key, if the implementation supports
            <c>null</c> values.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Insert(System.Object,System.Object,System.Int64)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            This variation of the <see cref="M:Tangosol.Net.Impl.RemoteNamedCache.Insert(System.Object,System.Object)"/>
            method allows the caller to specify an expiry (or "time to live")
            for the cache entry.
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire,
            also referred to as the entry's "time to live"; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT"/> to use the cache's
            default time-to-live setting; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.NEVER"/> to indicate that the
            cache entry should never expire; this milliseconds value is
            <b>not</b> a date/time value, but the amount of time object will
            be kept in the cache.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c> with
            the specified key, if the implementation supports <c>null</c>
            values.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If the requested expiry is a positive value and the
            implementation does not support expiry of cache entries.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.InsertAll(System.Collections.IDictionary)">
            <summary>
            Copies all of the mappings from the specified dictionary to this
            cache (optional operation).
            </summary>
            <remarks>
            These mappings will replace any mappings that this cache had for
            any of the keys currently in the specified dictionary.
            </remarks>
            <param name="dictionary">
            Mappings to be stored in this cache.
             </param>
            <exception cref="T:System.InvalidCastException">
            If the class of a key or value in the specified dictionary
            prevents it from being stored in this cache.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
            <exception cref="T:System.NullReferenceException">
            This cache does not permit <c>null</c> keys or values, and the
            specified key or value is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.GetAll(System.Collections.ICollection)">
            <summary>
            Get the values for all the specified keys, if they are in the
            cache.
            </summary>
            <remarks>
            <p>
            For each key that is in the cache, that key and its corresponding
            value will be placed in the dictionary that is returned by this
            method. The absence of a key in the returned dictionary indicates
            that it was not in the cache, which may imply (for caches that
            can load behind the scenes) that the requested data could not be
            loaded.</p>
            <p>
            The result of this method is defined to be semantically the same
            as the following implementation, without regards to threading
            issues:</p>
            <pre>
            IDictionary dict = new AnyDictionary();
            // could be a Hashtable (but does not have to)
            foreach (object key in colKeys)
            {
                object value = this[key];
                if (value != null || Contains(key))
                {
                    dict[key] = value;
                }
            }
            return dict;
            </pre>
            </remarks>
            <param name="keys">
            A collection of keys that may be in the named cache.
            </param>
            <returns>
            A dictionary of keys to values for the specified keys passed in
            <paramref name="keys"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.GetEnumerator">
            <summary>
            Returns an <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> object for this
            <b>ICache</b> object.
            </summary>
            <returns>
            An <b>ICacheEnumerator</b> object for this <b>ICache</b>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Release">
            <summary>
            Release local resources associated with this instance of
            INamedCache.
            </summary>
            <remarks>
            <p>
            Releasing a cache makes it no longer usable, but does not affect
            the cache itself. In other words, all other references to the
            cache will still be valid, and the cache data is not affected by
            releasing the reference.
            Any attempt to use this reference afterword will result in an
            exception.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Destroy">
            <summary>
            Release and destroy this instance of <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <remarks>
            <p>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the entire
            cluster to this cache will be invalidated, the cached data will
            be cleared, and all resources will be released.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Truncate">
            <summary>
            Removes all mappings from this cache.
            </summary>
            <remarks>
            Note: the removal of entries caused by this truncate operation will
            not be observable.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.RemoveIndex(Tangosol.Util.IValueExtractor)">
            <summary>
            Remove an index from this IQueryCache.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.GetKeys(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the keys contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of keys for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.GetValues(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the values contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            <p>
            It is guaranteed that enumerator will traverse the array in such
            a way that the entry values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on values
            in the resulting collection; or <c>null</c> if the entries'
            values natural ordering should be used.
            </param>
            <returns>
            A collection of values that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.GetValues(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the values contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of values that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.GetEntries(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            <p>
            It is guaranteed that enumerator will traverse the array in such
            a way that the entry values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on entries
            in the resulting collection; or <c>null</c> if the entries'
            values natural ordering should be used.
            </param>
            <returns>
            An array of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.GetEntries(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.AddIndex(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer)">
            <summary>
            Add an index to this IQueryCache.
            </summary>
            <remarks>
            This allows to correlate values stored in this
            <i>indexed cache</i> (or attributes of those values) to the
            corresponding keys in the indexed cache and increase the
            performance of <b>GetKeys</b> and <b>GetEntries</b> methods.
            </remarks>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the indexed
            cache. Must not be <c>null</c>.
            </param>
            <param name="isOrdered">
            <b>true</b> if the contents of the indexed information should be
            ordered; <b>false</b> otherwise.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on entries
            in the indexed cache; or <c>null</c> if the entries' values
            natural ordering should be used.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a standard cache listener that previously signed up for
            all events.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            RemoveCacheListener(listener, (IFilter) null);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)">
            <summary>
            Remove a cache listener that previously signed up for events
            based on a filter evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="filter">
            A filter used to evaluate events; <c>null</c> is equivalent to a
            filter that alway returns <b>true</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)">
            <summary>
            Remove a cache listener that previously signed up for events
            about a specific key.
            </summary>
            <param name="listener">
            The listener to remove.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Add a standard cache listener that will receive all events
            (inserts, updates, deletes) that occur against the cache, with
            the key, old-value and new-value included.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            AddCacheListener(listener, (IFilter) null, false);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Add a cache listener that receives events based on a filter
            evaluation.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the <b>OldValue</b> and <b>NewValue</b>
            properties.</p>
            <p>
            To unregister the <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, use the
            <see cref="M:Tangosol.Net.Impl.RemoteNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.</param>
            <param name="filter">
            A filter that will be passed <b>CacheEvent</b> objects to
            select from; a <b>CacheEvent</b> will be delivered to the
            listener only if the filter evaluates to <b>true</b> for that
            <b>CacheEvent</b>; <c>null</c> is equivalent to a filter
            that alway returns <b>true</b>.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object,System.Boolean)">
            <summary>
            Add a cache listener for a specific key.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.OldValue"/> and
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.NewValue"/> properties.</p>
            <p>
            To unregister the ICacheListener, use the
            <see cref="M:Tangosol.Net.Impl.RemoteNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Invoke(System.Object,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the entry
            specified by the passed key, returning the result of the
            invocation.
            </summary>
            <param name="key">
            The key to process; it is not required to exist within the
            cache.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified key.
            </param>
            <returns>
            The result of the invocation as returned from the
            <b>IEntryProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.InvokeAll(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the set
            of entries that are selected by the given <see cref="T:Tangosol.Util.IFilter"/>,
            returning the result of the invocation for each.
            </summary>
            <remarks>
            <p>
            Unless specified otherwise, IInvocableCache implementations
            will perform this operation in two steps: (1) use the filter to
            retrieve a matching entry collection; (2) apply the agent to
            every filtered entry. This algorithm assumes that the agent's
            processing does not affect the result of the specified filter
            evaluation, since the filtering and processing could be
            performed in parallel on different threads.</p>
            <p>
            If this assumption does not hold, the processor logic has to be
            idempotent, or at least re-evaluate the filter. This could be
            easily accomplished by wrapping the processor with the
            <see cref="T:Tangosol.Util.Processor.ConditionalProcessor"/>.</p>
            </remarks>
            <param name="filter">
            An <see cref="T:Tangosol.Util.IFilter"/> that results in the collection of keys to
            be processed.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> to use to process the specified
            keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against the keys that are selected by the
            given <b>IFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.InvokeAll(System.Collections.ICollection,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entries specified by the passed keys, returning the result of the
            invocation for each.
            </summary>
            <param name="keys">
            The keys to process; these keys are not required to exist within
            the cache.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against each of the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Aggregate(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the collection of
            entries that are selected by the given <b>IFilter</b>.
            </summary>
            <param name="filter">
            an <see cref="T:Tangosol.Util.IFilter"/> that is used to select entries within
            this cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the selected entries of this cache.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Aggregate(System.Collections.ICollection,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the entries specified by
            the passed keys.
            </summary>
            <param name="keys">
            The collection of keys that specify the entries within this cache
            to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the specified entries of this cache.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Unlock(System.Object)">
            <summary>
            Unlock the specified item.
            </summary>
            <remarks>
            The item doesn't have to exist to be <i>unlocked</i>.
            If the item is currently locked, only the <i>holder</i> of the
            lock could successfully unlock it.
            </remarks>
            <param name="key">
            Key being unlocked.
            </param>
            <returns>
            <b>true</b> if the item was successfully unlocked; <b>false</b>
            otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> is passed
            as <i>key</i> parameter.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Lock(System.Object)">
            <summary>
            Attempt to lock the specified item and return immediately.
            </summary>
            <remarks>
            This method behaves exactly as if it simply performs the call
            <b>Lock(key, 0)</b>.
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked; <b>false</b>
            otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> is passed
            as <i>key</i> parameter.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Lock(System.Object,System.Int64)">
            <summary>
            Attempt to lock the specified item within the specified period of
            time.
            </summary>
            <remarks>
            <p>
            The item doesn't have to exist to be <i>locked</i>. While the
            item is locked there is known to be a <i>lock holder</i> which
            has an exclusive right to modify (calling put and remove methods)
            that item.</p>
            <p>
            Lock holder is an abstract concept that depends on the
            IConcurrentCache implementation. For example, holder could
            be a cluster member or a thread (or both).</p>
            <p>
            Locking strategy may vary for concrete implementations as well.
            Lock could have an expiration time (this lock is sometimes called
            a "lease") or be held indefinitely (until the lock holder
            terminates).</p>
            <p>
            Some implementations may allow the entire map to be locked. If
            the map is locked in such a way, then only a lock holder is
            allowed to perform any of the "put" or "remove" operations.</p>
            <p>
            Passing the special constant
            <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> as the <i>key</i>
            parameter to indicate the cache lock is not allowed for
            SafeNamedCache and will cause an exception to be thrown.</p>
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <param name="waitTimeMillis">
            The number of milliseconds to continue trying to obtain a lock;
            pass zero to return immediately; pass -1 to block the calling
            thread until the lock could be obtained.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked within the
            specified time; <b>false</b> otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> is passed
            as <i>key</i> parameter.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.UnregisterChannel(Tangosol.Net.Messaging.IChannel)">
            <summary>
            Unregister the given <b>IChannel</b> with this IReceiver.
            </summary>
            <remarks>
            <p>
            This method is invoked by the <b>IChannel</b> when an IReceiver is
            disassociated with the <b>IChannel</b>.</p>
            <p>
            Once unregistered, the IReceiver will no longer receive
            unsolicited <b>IMessage</b> objects sent through the
            <b>IChannel</b>.</p>
            </remarks>
            <param name="channel">
            An <b>IChannel</b> that was disassociated with this IReceiver.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.RegisterChannel(Tangosol.Net.Messaging.IChannel)">
            <summary>
            Notify this IReceiver that it has been associated with a
            <b>IChannel</b>.
            </summary>
            <remarks>
            <p>
            This method is invoked by the <b>IChannel</b> when an IReceiver is
            associated with the <b>IChannel</b>.</p>
            <p>
            Once registered, the IReceiver will receive all unsolicited
            <b>IMessage</b> objects sent through the <b>IChannel</b> until
            the <b>IChannel</b> is unregistered or closed. Without a
            IReceiver, the unsolicited <b>IMessage</b> objects are executed
            with only an <b>IChannel</b> as context; with an IReceiver, the
            IReceiver is given the <b>IMessage</b> to process, and may
            execute the <b>IMessage</b> in turn.</p>
            </remarks>
            <param name="channel">
            An <b>IChannel</b> that has been associated with this IReceiver.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.OnMessage(Tangosol.Net.Messaging.IMessage)">
            <summary>
            Called when an unsolicited (non-Response) <b>IMessage</b> is
            received by an <b>IChannel</b> that had been previously
            registered with this IReceiver.
            </summary>
            <param name="message">
            An unsolicited <b>IMessage</b> received by a registered
            <b>IChannel</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.OnInit">
            <summary>
            Initialization method.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.InstantiateConverterListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Instantiate and configure a new <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.ConverterListener"/>
            for the given <see cref="T:Tangosol.Net.Cache.ICacheListener"/>.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to wrap.
            </param>
            <returns>
            A new <b>ConverterListener</b> that wraps the given
            <b>ICacheListener</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.PrintLockDeprecatedMessage">
            <summary>
            Print only once a warning message for deprecated lock API.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.Dispose">
            <summary>
            Calls <see cref="M:Tangosol.Net.Impl.RemoteNamedCache.Release"/> to release the resources associated with this cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.m_channel">
            <summary>
            The Channel used to exchange NamedCache Protocol Messages with
            a remote ProxyService.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.m_deactivationListeners">
            <summary>
            The holder for listeners such as INamedCacheDeactivationListener
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.m_eventDispatcher">
            <summary>
            The QueueProcessor used to dispatch cache events.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.Entries">
            <summary>
            Gets the entries collection.
            </summary>
            <value>
            The collection of <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> objects.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.Keys">
            <summary>
            Gets the keys collection.
            </summary>
            <value>
            The keys collection.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.Values">
            <summary>
            Gets the values collection.
            </summary>
            <value>
            The values collection.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.Protocol">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IProtocol"/> understood by the IReceiver.
            </summary>
            <remarks>
            Only <b>IChannel</b> objects with the specified <b>IProtocol</b>
            can be registered with this IReceiver.
            </remarks>
            <value>
            The <b>IProtocol</b> used by this IReceiver.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.CacheService">
            <summary>
            The <see cref="T:Tangosol.Net.Impl.RemoteCacheService"/> that created this
            RemoteNamedCache.
            </summary>
            <value>
            The <b>RemoteCacheService</b> that created this
            <b>RemoteNamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.Name">
            <summary>
            The name of this <see cref="T:Tangosol.Net.Messaging.IReceiver"/>.
            </summary>
            <remarks>
            If the <b>IReceiver</b> is registered with a
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/>, the registration and any
            subsequent accesses are by the IReceiver's name, meaning that
            the name must be unique within the domain of the
            <b>IConnectionManager</b>.
            </remarks>
            <value>
            The <b>IReceiver</b> name.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.Channel">
            <summary>
            Gets or sets the <see cref="T:Tangosol.Net.Messaging.IChannel"/> used to exchange
            NamedCache Protocol Messages with a remote ProxyService.
            </summary>
            <value>
            The <b>IChannel</b> used for NamedCache protocol messages.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.Count">
            <summary>
            Returns the number of key-value mappings in this cache.
            </summary>
            <remarks>
            Note that this number does not include the items that were
            <i>locked</i> but didn't have corresponding cache entries.
            </remarks>
            <value>
            The number of key-value mappings in this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.Item(System.Object)">
            <summary>
            Returns the value to which this cache maps the specified key.
            </summary>
            <remarks>
            <p>
            Returns <c>null</c> if the cache contains no mapping for
            this key. A return value of <c>null</c> does not
            <i>necessarily</i> indicate that the cache contains no mapping
            for the key; it's also possible that the cache explicitly maps
            the key to <c>null</c>.</p>
            <p>
            The <see cref="M:Tangosol.Net.Impl.RemoteNamedCache.Contains(System.Object)"/> operation may be used to distinguish
            these two cases.</p>
            </remarks>
            <param name="key">
            Key whose associated value is to be returned.
            </param>
            <returns>
            The value to which this cache maps the specified key, or
            <c>null</c> if the cache contains no mapping for this key.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the key is of an inappropriate type for this cache.
            </exception>
            <exception cref="T:System.NullReferenceException">
            If the key is <c>null</c> and this cache does not permit
            <c>null</c> keys.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.EventDispatcher">
            <summary>
            The <see cref="T:Tangosol.Util.Daemon.QueueProcessor.QueueProcessor"/> used to dispatch
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </summary>
            <value>
            The <b>QueueProcessor</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryCache">
            <summary>
            Child <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache"/> instance.
            </summary>
            <value>
            Child <b>BinaryNamedCache</b> instance.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterCache">
            <summary>
            The client view of the <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryCache"/>.
            </summary>
            <value>
            <b>INamedCache</b> instance.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.FromBinaryConverter">
            <summary>
            Child <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.ConverterFromBinary"/> instance.
            </summary>
            <value>
            Child <b>ConverterFromBinary</b> instance.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.KeyToBinaryConverter">
            <summary>
            Child <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.ConverterKeyToBinary"/> instance.
            </summary>
            <value>
            Child <b>ConverterKeyToBinary</b> instance.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.ValueToBinaryConverter">
            <summary>
            Child <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.ConverterValueToBinary"/> instance.
            </summary>
            <value>
            Child <b>ConverterValueToBinary</b> instance.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.DeactivationListeners">
            <summary>
            Holder for listeners such as NamedCacheDeactivationListeners.
            Utilized for implementing cache destroy/release calls across multiple nodes.
            </summary>
            <value>
            Holder for listeners such as NamedCacheDeactivationListeners.
            Utilized for implementing cache destroy/release calls across multiple nodes.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.DeferKeyAssociationCheck">
            <summary>
            Whether a key should be checked for <see cref="T:Tangosol.Net.Cache.IKeyAssociation"/>
            by the extend client (false) or deferred until the key is
            received by the PartionedService (true).
            </summary>
            <value>
            Whether a key should be checked for <b>IKeyAssociation</b> by the
            extend client (false) or deferred until the key is received by
            the PartionedService (true).
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.LockDeprecateWarned">
            <summary>
            Whether we have warned user about the deprecated lock API.
            </summary>
            <value>
            A value of true indicates we have warned user about the deprecated
            lock API; false, otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.IsReadOnly">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object is
            read-only.
            </summary>
            <value>
            Always <b>false</b> for RemoteNamedCache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.IsFixedSize">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object has
            a fixed size.
            </summary>
            <value>
            Always <b>false</b> for RemoteNamedCache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <b>ICollection</b>.
            </summary>
            <value>
            An object that can be used to synchronize access to the
            <b>ICollection</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <b>ICollection</b>
            is synchronized (thread safe).
            </summary>
            <value>
            Always <b>true</b> for RemoteNamedCache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.IsActive">
            <summary>
            Specifies whether or not the <see cref="T:Tangosol.Net.INamedCache"/> is active.
            </summary>
            <value>
            <b>true</b> if the INamedCache is active; <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.CacheName">
            <summary>
            The name of the <see cref="T:Tangosol.Net.INamedCache"/> represented by
            this RemoteNamedCache.
            </summary>
            <value>
            The name of the <see cref="T:Tangosol.Net.INamedCache"/>.
            </value>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToDecoratedBinary">
            <summary>
            <see cref="T:Tangosol.Util.IConverter"/> implementation that deserializes a
            <see cref="T:Tangosol.Util.Binary"/> object using the
            <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToDecoratedBinary.RemoteNamedCache"/> <see cref="T:Tangosol.Net.Messaging.IChannel"/>'s
            serializer and decorates the <see cref="T:Tangosol.Util.Binary"/> using the
            associated key.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToDecoratedBinary.#ctor(Tangosol.Net.Impl.RemoteNamedCache)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToDecoratedBinary.Convert(System.Object)">
            <summary>
            Convert the passed object to another object.
            </summary>
            <param name="o">
            Object to be converted.
            </param>
            <returns>
            The new, converted object.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToDecoratedBinary.m_cache">
            <summary>
            The <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToDecoratedBinary.RemoteNamedCache"/> that created this
            ConverterBinaryToDecoratedBinary.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToDecoratedBinary.RemoteNamedCache">
            <summary>
            Gets the <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToDecoratedBinary.RemoteNamedCache"/> that created this
            ConverterBinaryToDecoratedBinary.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToDecoratedBinary.Serializer">
            <summary>
            <see cref="T:Tangosol.IO.ISerializer"/> instance used to convert objects
            from <see cref="T:Tangosol.Util.Binary"/>.
            </summary>
            <value>
            <b>ISerializer</b> instance used to convert objects from
            <b>Binary</b>.
            </value>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToUndecoratedBinary">
            <summary>
            <see cref="T:Tangosol.Util.IConverter"/> implementation that removes
            an int decoration from a <see cref="T:Tangosol.Util.Binary"/> if present.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToUndecoratedBinary.#ctor(Tangosol.Net.Impl.RemoteNamedCache)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToUndecoratedBinary.Convert(System.Object)">
            <summary>
            Convert the passed object to another object.
            </summary>
            <param name="o">
            Object to be converted.
            </param>
            <returns>
            The new, converted object.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToUndecoratedBinary.m_cache">
            <summary>
            The <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToUndecoratedBinary.RemoteNamedCache"/> that created this
            ConverterBinaryToUndecoratedBinary.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToUndecoratedBinary.RemoteNamedCache">
            <summary>
            Gets the <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToUndecoratedBinary.RemoteNamedCache"/> that created this
            ConverterBinaryToUndecoratedBinary.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToUndecoratedBinary.Serializer">
            <summary>
            <see cref="T:Tangosol.IO.ISerializer"/> instance used to convert objects
            from <see cref="T:Tangosol.Util.Binary"/>.
            </summary>
            <value>
            <b>ISerializer</b> instance used to convert objects from
            <b>Binary</b>.
            </value>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNamedCache.ConverterFromBinary">
            <summary>
            <see cref="T:Tangosol.Util.IConverter"/> implementation that converts objects
            from a <see cref="T:Tangosol.Util.Binary"/> representation via the
            <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.Channel"/>'s serializer.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterFromBinary.Convert(System.Object)">
            <summary>
            Convert the passed object to another object.
            </summary>
            <param name="o">
            Object to be converted.
            </param>
            <returns>
            The new, converted object.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterFromBinary.Serializer">
            <summary>
            <see cref="T:Tangosol.IO.ISerializer"/> instance used to convert objects
            from <see cref="T:Tangosol.Util.Binary"/>.
            </summary>
            <value>
            <b>ISerializer</b> instance used to convert objects from
            <b>Binary</b>.
            </value>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNamedCache.ConverterKeyToBinary">
            <summary>
            <see cref="T:Tangosol.Util.IConverter"/> implementation that converts keys into
            their <see cref="T:Tangosol.Util.Binary"/> representation via the
            <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterKeyToBinary.RemoteNamedCache"/> <see cref="T:Tangosol.Net.Messaging.IChannel"/>'s
            serializer.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterKeyToBinary.#ctor(Tangosol.Net.Impl.RemoteNamedCache)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterKeyToBinary.Convert(System.Object)">
            <summary>
            Convert the passed object to another object.
            </summary>
            <param name="o">
            Object to be converted.
            </param>
            <returns>
            The new, converted object.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.ConverterKeyToBinary.m_cache">
            <summary>
            The <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterKeyToBinary.RemoteNamedCache"/> that created this
            ConverterKeyToBinary.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterKeyToBinary.RemoteNamedCache">
            <summary>
            Gets the <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterKeyToBinary.RemoteNamedCache"/> that created this
            ConverterKeyToBinary.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterKeyToBinary.Serializer">
            <summary>
            <see cref="T:Tangosol.IO.ISerializer"/> instance used to convert objects
            from <see cref="T:Tangosol.Util.Binary"/>.
            </summary>
            <value>
            <b>ISerializer</b> instance used to convert objects from
            <b>Binary</b>.
            </value>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNamedCache.ConverterValueToBinary">
            <summary>
            <see cref="T:Tangosol.Util.IConverter"/> implementation that converts objects to
            a <see cref="T:Tangosol.Util.Binary"/> representation via the
            <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.Channel"/>'s serializer.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterValueToBinary.Convert(System.Object)">
            <summary>
            Convert the passed object to another object.
            </summary>
            <param name="o">
            Object to be converted.
            </param>
            <returns>
            The new, converted object.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterValueToBinary.Serializer">
            <summary>
            <see cref="T:Tangosol.IO.ISerializer"/> instance used to convert objects
            from <see cref="T:Tangosol.Util.Binary"/>.
            </summary>
            <value>
            <b>ISerializer</b> instance used to convert objects from
            <b>Binary</b>.
            </value>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache">
            <summary>
            The internal view of the <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteNamedCache"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.#ctor(Tangosol.Net.Impl.RemoteNamedCache)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.OnInit">
            <summary>
            Initialization method.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.ProcessResponse(Tangosol.Net.Messaging.IResponse)">
            <summary>
            Return the result associated with the given
            <see cref="T:Tangosol.Net.Messaging.IResponse"/>.
            </summary>
            <param name="response">
            The <b>IResponse</b> to process.
            </param>
            <returns>
            The result associated with the given <b>IResponse</b>.
            </returns>
            <exception cref="T:System.Exception">
            If the response was a failure.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Query(Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Perform a remote query.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> used in the query.
            </param>
            <param name="keysOnly">
            If <b>true</b>, only the keys from the result will be
            returned; otherwise, the entries will be returned.
            </param>
            <returns>
            The result of the query.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.AddRemoteCacheListener(Tangosol.Util.IFilter,System.Int64,System.Boolean,Tangosol.Net.Cache.ICacheTrigger,System.Boolean)">
            <summary>
            Send a request to the remote NamedCacheProxy to register a
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> on behalf of this
            <b>INamedCache</b>.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> used to register the remote
            <b>ICacheListener</b>
            </param>
            <param name="filterId">
            The unique positive identifier for the specified
            <see cref="T:Tangosol.Util.IFilter"/>.
            </param>
            <param name="isLite">
            If the remote <b>ICacheListener</b> should be "lite".
            </param>
            <param name="trigger">
            The optional <see cref="T:Tangosol.Net.Cache.ICacheTrigger"/> to associate with
            the request 
            </param>
            <param name="isPriming">
            If the remote <b>ICacheListener</b> is "priming".
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.AddRemoteCacheListener(System.Object,System.Boolean,Tangosol.Net.Cache.ICacheTrigger,System.Boolean)">
            <summary>
            Send a request to the remote NamedCacheProxy to register a
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> on behalf of this
            <b>INamedCache</b>.
            </summary>
            <param name="key">
            The key used to register the remote <b>ICacheListener</b>.
            </param>
            <param name="isLite">
            If the remote <b>ICacheListener</b> should be "lite".
            </param>
            <param name="trigger">
            The optional <see cref="T:Tangosol.Net.Cache.ICacheTrigger"/> to associate with
            the request 
            </param>
            <param name="isPriming">
            If the remote <b>ICacheListener</b> is "priming".
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.ContainsAll(System.Collections.ICollection)">
            <summary>
            Determine if the remote <see cref="T:Tangosol.Net.INamedCache"/> contains
            the specified keys.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            <b>true</b> if the <b>INamedCache</b> contains the specified
            keys.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.ContainsValue(System.Object)">
            <summary>
            Returns <b>true</b> if this cache maps one or more keys to
            the specified value.
            </summary>
            <remarks>
            More formally, returns <b>true</b> if and only if this cache
            contains at least one mapping to a value <b>v</b> such that
            <b>(value == null ? v == null : value.Equals(v))</b>. This
            operation will probably require time linear in the cache size
            for most implementations of the IConcurrentCache interface.
            </remarks>
            <param name="value">
            Value whose presence in this map is to be tested.
            </param>
            <returns>
            <b>true</b> if this map maps one or more keys to the
            specified value.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Dispatch(Tangosol.Net.Cache.CacheEventType,System.Int64[],System.Object,System.Object,System.Object,System.Boolean,System.Int32)">
            <summary>
            Dispatch a <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> created using the
            supplied information to the cache listeners registered with
            this <b>INamedCache</b>.
            </summary>
            <param name="type">
            The type of the <b>CacheEvent</b>, one of
            <see cref="T:Tangosol.Net.Cache.CacheEventType"/> values.
            </param>
            <param name="alFilterIds">
            The positive unique identifier(s) of the <b>IFilter</b> that
            caused this <b>CacheEvent</b> to be dispatched.
            </param>
            <param name="key">
            The key associated with the <b>CacheEvent</b>.
            </param>
            <param name="valueOld">
            The old value associated with the <b>CacheEvent</b>.
            </param>
            <param name="valueNew">
            The new value associated with the <b>CacheEvent</b>.
            </param>
            <param name="isSynthetic">
            <b>true</b> if the <b>CacheEvent</b> occured because of
            internal cache processing.
            </param>
            <param name="intTransformState">
            The transformation state of the event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.EnsureChannel">
            <summary>
            Returns the <see cref="T:Tangosol.Net.Messaging.IChannel"/> used by this
            <b>INamedCache</b>.
            </summary>
            <remarks>
            If the <b>IChannel</b> is <c>null</c> or
            is not open, this method throws an <see cref="T:System.Exception"/>.
            </remarks>
            <returns>
            An <b>IChannel</b> that can be used to exchange
            <see cref="T:Tangosol.Net.INamedCache"/> Protocol Messages with a remote
            ProxyService.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.GetFilterId(Tangosol.Util.IFilter)">
            <summary>
            Return the unique positivie identifier that the specified
            <see cref="T:Tangosol.Util.IFilter"/> was registered with or 0 if the
            specified <b>IFilter</b> has not been registered.
            </summary>
            <remarks>
            Note: all calls to this method should be synchronized using
            the <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.CacheListenerSupport"/> object.
            </remarks>
            <param name="filter">
            The <b>IFilter</b>.
            </param>
            <returns>
            The unique identifier that the specified <b>IFilter</b> was
            registered with.
            </returns>
            <seealso cref="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RegisterFilter(Tangosol.Util.IFilter)"/>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.GetKeysPage(Tangosol.Util.Binary)">
            <summary>
            Return the next page of keys.
            </summary>
            <param name="binCookie">
            The optional opaque cookie returned from the last call to
            this method.
            </param>
            <returns>
            A <see cref="T:Tangosol.Net.Messaging.Impl.PartialResponse"/> containing the next set of
            keys.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Insert(System.Object,System.Object,System.Int64,System.Boolean)">
            <summary>
            Associate the specified value with the specified key and
            expiry delay in the remote <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <param name="key">
            The entry key.
            </param>
            <param name="value">
            The entry value.
            </param>
            <param name="millis">
            The entry expiry delay.
            </param>
            <param name="isReturnRequired">
            If <b>true</b>, the old value will be returned.
            </param>
            <returns>
            The old value associated with the given key; only applicable
            if <paramref name="isReturnRequired"/> is <b>true</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RegisterFilter(Tangosol.Util.IFilter)">
            <summary>
            Create a unqiue positive identifier for the specified
            <see cref="T:Tangosol.Util.IFilter"/>.
            </summary>
            <remarks>
            Note: all calls to this method should be synchronized using
            the <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.CacheListenerSupport"/> object.
            </remarks>
            <param name="filter">
            The <b>IFilter</b>.
            </param>
            <returns>
            The unique identifier that the specified <b>IFilter</b> was
            registered with.
            </returns>
            <seealso cref="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.GetFilterId(Tangosol.Util.IFilter)"/>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Remove(System.Object,System.Boolean)">
            <summary>
            Remove the entry with the given key from the remote
            <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <param name="key">
            The key to remove.
            </param>
            <param name="isReturnRequired">
            If <b>true</b>, the removed value will be returned.
            </param>
            <returns>
            If <paramref name="isReturnRequired"/> is <b>true</b>,
            returns the removed value.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoveAll(System.Collections.ICollection)">
            <summary>
            Remove the entries with the specified keys from the remote
            <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <param name="keys">
            The keys to remove.
            </param>
            <returns>
            <b>true</b> if the INamedCache was modified as a result of
            this call.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoveRemoteCacheListener(Tangosol.Util.IFilter,System.Int64,System.Boolean,Tangosol.Net.Cache.ICacheTrigger,System.Boolean)">
            <summary>
            Send a request to the remote NamedCacheProxy to unregister a
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> on behalf of this
            <b>INamedCache</b>.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> used to unregister the remote
            <b>ICacheListener</b>.
            </param>
            <param name="filterId">
            The unqiue positive identifier for the specified
            <b>IFilter</b>.
            </param>
            <param name="isSync">
            If the remote <b>ICacheListener</b> is a
            <see cref="T:Tangosol.Net.Cache.Support.CacheListenerSupport.ISynchronousListener"/>.
            </param>
            <param name="trigger">
            The optional <see cref="T:Tangosol.Net.Cache.ICacheTrigger"/> to associate with
            the request.
            </param>
            <param name="isPriming">
            If the remote <b>ICacheListener</b> is "priming".
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoveRemoteCacheListener(System.Object,System.Boolean,Tangosol.Net.Cache.ICacheTrigger,System.Boolean)">
            <summary>
            Send a request to the remote NamedCacheProxy to unregister a
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> on behalf of this
            <b>INamedCache</b>.
            </summary>
            <param name="key">
            The key used to unregister the remote <b>ICacheListener</b>.
            </param>
            <param name="isSync">
            If the remote <b>ICacheListener</b> is a
            <see cref="T:Tangosol.Net.Cache.Support.CacheListenerSupport.ISynchronousListener"/>.
            </param>
            <param name="trigger">
            The optional <see cref="T:Tangosol.Net.Cache.ICacheTrigger"/> to associate with
            the request.
            </param>
            <param name="isPriming">
            If the remote <b>ICacheListener</b> is "priming".
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Release">
            <summary>
            Release local resources associated with this instance of
            INamedCache.
            </summary>
            <remarks>
            <p>
            Releasing a cache makes it no longer usable, but does not
            affect the cache itself. In other words, all other references
            to the cache will still be valid, and the cache data is not
            affected by releasing the reference.
            Any attempt to use this reference afterword will result in an
            exception.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Destroy">
            <summary>
            Release and destroy this instance of
            <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <remarks>
            <p>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the
            entire cluster to this cache will be invalidated, the cached
            data will be cleared, and all resources will be released.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Add a standard cache listener that will receive all events
            (inserts, updates, deletes) that occur against the cache,
            with the key, old-value and new-value included.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            AddCacheListener(listener, (IFilter) null, false);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a standard cache listener that previously signed up
            for all events.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            RemoveCacheListener(listener, (IFilter) null);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object,System.Boolean)">
            <summary>
            Add a cache listener for a specific key.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects, but if <paramref name="isLite"/> is passed as
            <b>true</b>, they <i>might</i> not contain the
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.OldValue"/> and
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.NewValue"/> properties.</p>
            <p>
            To unregister the ICacheListener, use the
            <see cref="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow
            optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)">
            <summary>
            Remove a cache listener that previously signed up for events
            based on a filter evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="filter">
            A filter used to evaluate events; <c>null</c> is equivalent
            to a filter that alway returns <b>true</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Add a cache listener that receives events based on a filter
            evaluation.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects, but if <paramref name="isLite"/> is passed as
            <b>true</b>, they <i>might</i> not contain the
            <b>OldValue</b> and <b>NewValue</b> properties.</p>
            <p>
            To unregister the <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, use the
            <see cref="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.</param>
            <param name="filter">
            A filter that will be passed <b>CacheEvent</b> objects to
            select from; a <b>CacheEvent</b> will be delivered to the
            listener only if the filter evaluates to <b>true</b> for
            that <b>CacheEvent</b>; <c>null</c> is equivalent to a filter
            that alway returns <b>true</b>.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow
            optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)">
            <summary>
            Remove a cache listener that previously signed up for events
            about a specific key.
            </summary>
            <param name="listener">
            The listener to remove.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.GetAll(System.Collections.ICollection)">
            <summary>
            Get the values for all the specified keys, if they are in the
            cache.
            </summary>
            <remarks>
            <p>
            For each key that is in the cache, that key and its
            corresponding value will be placed in the dictionary that is
            returned by this method. The absence of a key in the returned
            dictionary indicates that it was not in the cache, which may
            imply (for caches that can load behind the scenes) that the
            requested data could not be loaded.</p>
            <p>
            The result of this method is defined to be semantically the
            same as the following implementation, without regards to
            threading issues:</p>
            <pre>
            IDictionary dict = new AnyDictionary();
            // could be a Hashtable (but does not have to)
            foreach (object key in colKeys)
            {
                object value = this[key];
                if (value != null || Contains(key))
                {
                    dict[key] = value;
                }
            }
            return dict;
            </pre>
            </remarks>
            <param name="keys">
            A collection of keys that may be in the named cache.
            </param>
            <returns>
            A dictionary of keys to values for the specified keys passed
            in <paramref name="keys"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Insert(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the
            old value is replaced.</p>
            <p>
            Invoking this method is equivalent to the following call:
            <pre>
            Insert(key, value, CacheExpiration.Default);
            </pre></p>
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c>
            if there was no mapping for key. A <c>null</c> return can
            also indicate that the cache previously associated
            <c>null</c> with the specified key, if the implementation
            supports <c>null</c> values.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Insert(System.Object,System.Object,System.Int64)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the
            old value is replaced.</p>
            This variation of the <see cref="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Insert(System.Object,System.Object)"/>
            method allows the caller to specify an expiry (or "time to
            live") for the cache entry.
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire,
            also referred to as the entry's "time to live"; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT"/> to use the cache's
            default time-to-live setting; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.NEVER"/> to indicate that the
            cache entry should never expire; this milliseconds value is
            <b>not</b> a date/time value, but the amount of time object
            will be kept in the cache.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c>
            if there was no mapping for key. A <c>null</c> return can
            also indicate that the cache previously associated
            <c>null</c> with the specified key, if the implementation
            supports <c>null</c> values.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If the requested expiry is a positive value and the
            implementation does not support expiry of cache entries.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.InsertAll(System.Collections.IDictionary)">
            <summary>
            Copies all of the mappings from the specified dictionary to
            this cache (optional operation).
            </summary>
            <remarks>
            These mappings will replace any mappings that this cache had
            for any of the keys currently in the specified dictionary.
            </remarks>
            <param name="dictionary">
            Mappings to be stored in this cache.
             </param>
            <exception cref="T:System.InvalidCastException">
            If the class of a key or value in the specified dictionary
            prevents it from being stored in this cache.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
            <exception cref="T:System.NullReferenceException">
            This cache does not permit <c>null</c> keys or values, and
            the specified key or value is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.GetEnumerator">
            <summary>
            Returns an <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> object for this
            <b>ICache</b> object.
            </summary>
            <returns>
            An <b>ICacheEnumerator</b> object for this <b>ICache</b>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Contains(System.Object)">
            <summary>
            Determines whether the <b>IDictionary</b> object contains an
            element with the specified key.
            </summary>
            <param name="key">
            The key to locate in the <b>IDictionary</b> object.
            </param>
            <returns>
            <b>true</b> if the <b>IDictionary</b> contains an element
            with the key; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the
            <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="value">
            The <see cref="T:System.Object"/> to use as the value of the element
            to add.
            </param>
            <param name="key">
            The <see cref="T:System.Object"/> to use as the key of the element to
            add.
            </param>
            <seealso cref="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Insert(System.Object,System.Object)"/>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Clear">
            <summary>
            Removes all mappings from this cache.
            </summary>
            <remarks>
            Some implementations will attempt to lock the entire cache
            (if necessary) before preceeding with the clear operation.
            For such implementations, the entire cache has to be either
            already locked or able to be locked for this operation to
            succeed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Truncate">
            <summary>
            Removes all mappings from this cache.
            </summary>
            <remarks>
            Note: the removal of entries caused by this truncate operation will
            not be observable.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <b>IDictionaryEnumerator</b> object for the
            <b>IDictionary</b> object.
            </summary>
            <returns>
            An <b>IDictionaryEnumerator</b> object for the
            <b>IDictionary</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            <b>IDictionary</b> object.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
            <seealso cref="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Remove(System.Object,System.Boolean)"/>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <b>ICollection</b> to an
            <b>Array</b>, starting at a particular index.
            </summary>
            <param name="array">
            The one-dimensional <b>Array</b> that is the destination of
            the elements copied from <b>ICollection</b>.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Lock(System.Object)">
            <summary>
            Attempt to lock the specified item and return immediately.
            </summary>
            <remarks>
            This method behaves exactly as if it simply performs the call
            <b>Lock(key, 0)</b>.
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Lock(System.Object,System.Int64)">
            <summary>
            Attempt to lock the specified item within the specified
            period of time.
            </summary>
            <remarks>
            <p>
            The item doesn't have to exist to be <i>locked</i>. While the
            item is locked there is known to be a <i>lock holder</i>
            which has an exclusive right to modify (calling put and
            remove methods) that item.</p>
            <p>
            Lock holder is an abstract concept that depends on the
            IConcurrentCache implementation. For example, holder could
            be a cluster member or a thread (or both).</p>
            <p>
            Locking strategy may vary for concrete implementations as
            well. Lock could have an expiration time (this lock is
            sometimes called a "lease") or be held indefinitely (until
            the lock holder terminates).</p>
            <p>
            Some implementations may allow the entire map to be locked.
            If the map is locked in such a way, then only a lock holder
            is allowed to perform any of the "put" or "remove"
            operations.</p>
            <p>
            Passing the special constant
            <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> as the <i>key</i>
            parameter to indicate the cache lock is not allowed for
            SafeNamedCache and will cause an exception to be thrown.</p>
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <param name="waitTimeMillis">
            The number of milliseconds to continue trying to obtain a
            lock; pass zero to return immediately; pass -1 to block the
            calling thread until the lock could be obtained.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked within the
            specified time; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Unlock(System.Object)">
            <summary>
            Unlock the specified item.
            </summary>
            <remarks>
            The item doesn't have to exist to be <i>unlocked</i>.
            If the item is currently locked, only the <i>holder</i> of
            the lock could successfully unlock it.
            </remarks>
            <param name="key">
            Key being unlocked.
            </param>
            <returns>
            <b>true</b> if the item was successfully unlocked;
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.GetKeys(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the keys contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of keys for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.GetValues(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the values contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            <p>
            It is guaranteed that enumerator will traverse the array in
            such a way that the entry values come up in ascending order,
            sorted by the specified comparer or according to the
            <i>natural ordering</i>.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on
            values in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of values that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.GetValues(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the values contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of values that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.GetEntries(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            <p>
            It is guaranteed that enumerator will traverse the array in
            such a way that the entry values come up in ascending order,
            sorted by the specified comparer or according to the
            <i>natural ordering</i>.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            An array of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.GetEntries(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.AddIndex(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer)">
            <summary>
            Add an index to this IQueryCache.
            </summary>
            <remarks>
            This allows to correlate values stored in this
            <i>indexed cache</i> (or attributes of those values) to the
            corresponding keys in the indexed cache and increase the
            performance of <b>GetKeys</b> and <b>GetEntries</b> methods.
            </remarks>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to
            extract an indexable object from a value stored in the
            indexed cache. Must not be <c>null</c>.
            </param>
            <param name="isOrdered">
            <b>true</b> if the contents of the indexed information should
            be ordered; <b>false</b> otherwise.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on
            entries in the indexed cache; or <c>null</c> if the entries'
            values natural ordering should be used.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoveIndex(Tangosol.Util.IValueExtractor)">
            <summary>
            Remove an index from this IQueryCache.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to
            extract an indexable object from a value stored in the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Invoke(System.Object,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entry specified by the passed key, returning the result of
            the invocation.
            </summary>
            <param name="key">
            The key to process; it is not required to exist within the
            cache.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified
            key.
            </param>
            <returns>
            The result of the invocation as returned from the
            <b>IEntryProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.InvokeAll(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            set of entries that are selected by the given
            <see cref="T:Tangosol.Util.IFilter"/>, returning the result of the invocation
            for each.
            </summary>
            <remarks>
            <p>
            Unless specified otherwise, IInvocableCache implementations
            will perform this operation in two steps: (1) use the filter
            to retrieve a matching entry collection; (2) apply the agent
            to every filtered entry. This algorithm assumes that the
            agent's processing does not affect the result of the
            specified filter evaluation, since the filtering and
            processing could be performed in parallel on different
            threads.</p>
            <p>
            If this assumption does not hold, the processor logic has to
            be idempotent, or at least re-evaluate the filter. This could
            be easily accomplished by wrapping the processor with the
            <see cref="T:Tangosol.Util.Processor.ConditionalProcessor"/>.</p>
            </remarks>
            <param name="filter">
            An <see cref="T:Tangosol.Util.IFilter"/> that results in the collection of
            keys to be processed.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> to use to process the
            specified keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against the keys that are selected by
            the given <b>IFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.InvokeAll(System.Collections.ICollection,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entries specified by the passed keys, returning the result of
            the invocation for each.
            </summary>
            <param name="keys">
            The keys to process; these keys are not required to exist
            within the cache.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified
            keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against each of the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Aggregate(System.Collections.ICollection,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the entries
            specified by the passed keys.
            </summary>
            <param name="keys">
            The collection of keys that specify the entries within this
            cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the specified entries of this cache.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Aggregate(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the collection of
            entries that are selected by the given <b>IFilter</b>.
            </summary>
            <param name="filter">
            an <see cref="T:Tangosol.Util.IFilter"/> that is used to select entries
            within this cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the selected entries of this cache.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Dispose">
            <summary>
            Calls <see cref="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Release"/> to release the resources associated with this cache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.m_cache">
            <summary>
            The RemoteNamedCache that created this BinaryNamedCache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.m_channel">
            <summary>
            The Channel used to exchange NamedCache Protocol Messages with
            a remote ProxyService.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.m_entries">
            <summary>
            The entries collection.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.m_keys">
            <summary>
            The keys collection.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.m_values">
            <summary>
            The values collection.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.m_filterArray">
            <summary>
            An ILongArray of Filter objects indexed by the unique filter
            id.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.m_cacheListenerSupport">
            <summary>
            CacheListenerSupport used by this BinaryCache to dispatch
            cache events to registered ICacheListeners.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.m_eventDispatcher">
            <summary>
            The QueueProcessor used to dispatch cache events.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteNamedCache">
            <summary>
            Gets the <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteNamedCache"/> that created this
            BinaryNamedCache.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Channel">
            <summary>
            Gets or sets the <see cref="T:Tangosol.Net.Messaging.IChannel"/> used to exchange
            NamedCache Protocol messages with a remote ProxyService.
            </summary>
            <value>
            The <b>IChannel</b> used for NamedCache protocol messages.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.BinaryToDecoratedBinaryConverter">
            <summary>
            <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToDecoratedBinary"/> instance.
            </summary>
            <value>
            <b>ConverterBinaryToDecoratedBinary</b> instance.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.BinaryToUndecoratedBinaryConverter">
            <summary>
            <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.ConverterBinaryToUndecoratedBinary"/> instance.
            </summary>
            <value>
            <b>ConverterBinaryToUndecoratedBinary</b> instance.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.EventDispatcher">
            <summary>
            The <see cref="T:Tangosol.Util.Daemon.QueueProcessor.QueueProcessor"/> used to dispatch
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </summary>
            <value>
            The <b>QueueProcessor</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.FilterArray">
            <summary>
            Gets or sets an <see cref="T:Tangosol.Util.ILongArray"/> of
            <see cref="T:Tangosol.Util.IFilter"/> objects indexed by the unique filter
            id.
            </summary>
            <remarks>
            These filter id values are used by the
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> message to specify what filters
            caused a cache event.
            Note: all access (for update) to this array should be
            synchronized on the CacheListenerSupport object.
            </remarks>
            <value>
            <b>ILongArray</b> of filters.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.CacheListenerSupport">
            <summary>
            <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.CacheListenerSupport"/> used by this
            <see cref="T:Tangosol.Net.INamedCache"/> to dispatch
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>s to registered
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/>s.
            </summary>
            <value>
            <b>CacheListenerSupport</b> instance.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.CacheName">
            <summary>
            Gets the cache name.
            </summary>
            <value>
            The cache name.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.CacheService">
            <summary>
            Gets the <see cref="T:Tangosol.Net.ICacheService"/> that this INamedCache is
            a part of.
            </summary>
            <value>
            The cache service this INamedCache is a part of.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.IsActive">
            <summary>
            Specifies whether or not the <see cref="T:Tangosol.Net.INamedCache"/> is
            active.
            </summary>
            <value>
            <b>true</b> if the INamedCache is active; <b>false</b>
            otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Entries">
            <summary>
            Gets the entries collection.
            </summary>
            <value>
            The collection of <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> objects.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Item(System.Object)">
            <summary>
            Returns the value to which this cache maps the specified key.
            </summary>
            <remarks>
            <p>
            Returns <c>null</c> if the cache contains no mapping for
            this key. A return value of <c>null</c> does not
            <i>necessarily</i> indicate that the cache contains no
            mapping for the key; it's also possible that the cache
            explicitly maps the key to <c>null</c>.</p>
            <p>
            The <see cref="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Contains(System.Object)"/> operation may be used to
            distinguish these two cases.</p>
            </remarks>
            <param name="key">
            Key whose associated value is to be returned.
            </param>
            <returns>
            The value to which this cache maps the specified key, or
            <c>null</c> if the cache contains no mapping for this key.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the key is of an inappropriate type for this cache.
            </exception>
            <exception cref="T:System.NullReferenceException">
            If the key is <c>null</c> and this cache does not permit
            <c>null</c> keys.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Keys">
            <summary>
            Gets the keys collection.
            </summary>
            <value>
            The keys collection.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Values">
            <summary>
            Gets the values collection.
            </summary>
            <value>
            The values collection.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.IsReadOnly">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object
            is read-only.
            </summary>
            <value>
            Always <b>false</b> for BinaryCache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.IsFixedSize">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object
            has a fixed size.
            </summary>
            <value>
            Always <b>false</b> for BinaryCache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Count">
            <summary>
            Returns the number of key-value mappings in this cache.
            </summary>
            <remarks>
            Note that this number does not include the items that were
            <i>locked</i> but didn't have corresponding cache entries.
            </remarks>
            <value>
            The number of key-value mappings in this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <b>ICollection</b>.
            </summary>
            <value>
            An object that can be used to synchronize access to the
            <b>ICollection</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <b>ICollection</b> is synchronized (thread safe).
            </summary>
            <value>
            Always <b>false</b> for BinaryCache.
            </value>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollectionType">
            <summary>
            Remote collection type enumeration.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Enumerator">
            <summary>
            <b>IEnumerator</b> implementation for BinaryNamedCache
            entries.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Enumerator.m_key">
            <summary>
            Last key that was iterated.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Enumerator.m_keyEnumerator">
            <summary>
            An iterator over the keys returned by
            BinaryNamedCache.Keys.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Enumerator.#ctor(Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache)">
            <summary>
            Sets parent <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache"/>.
            </summary>
            <param name="cache">
            Sets parent <b>BinaryNamedCache</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the
            collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to
            the next element; <b>false</b> if the enumerator has passed
            the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before
            the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Enumerator.Key">
            <summary>
            Last key that was iterated.
            </summary>
            <value>
            Last key that was iterated.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Enumerator.Value">
            <summary>
            The value of the current cache entry.
            </summary>
            <value>
            The value of the current cache entry.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
            <summary>
            The key and the value of the current dictionary entry.
            </summary>
            <value>
            The key and the value of the current dictionary entry.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Enumerator.Entry">
            <summary>
            The key and the value of the current cache entry.
            </summary>
            <value>
            The key and the value of the current cache entry.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Enumerator.KeyEnumerator">
            <summary>
            An iterator over the keys returned by
            <see cref="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Keys"/>.
            </summary>
            <value>
            An iterator over the keys returned by
            <b>BinaryNamedCache.Keys</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Enumerator.BinaryCache">
            <summary>
            The parent <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache"/>.
            </summary>
            <value>
            The parent <b>BinaryNamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value>
            The current element in the collection.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of
            the collection or after the last element.
            </exception>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection">
            <summary>
            Represents remote collection of cache keys, values or entries.
            </summary>
            <author>Ana Cikic  2006.09.11</author>
            <author>Aleksandar Seovic  2006.11.11</author>
            <seealso cref="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache"/>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.m_binaryCache">
            <summary>
            Parent BinaryNamedCache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.m_type">
            <summary>
            The remote collection type.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.#ctor(Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache,Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollectionType)">
            <summary>
            Initializes <b>RemoteCollection</b>.
            </summary>
            <param name="parent">
            Parent <b>BinaryNamedCache</b>.
            </param>
            <param name="type">
            Type of the remote collection, one of
            <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollectionType"/> values.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array,
            starting at a particular index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the
            elements copied from the collection. The array must have
            zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Array is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero -or- index is equal to or greater
            than the length of array.
            </exception>
            <exception cref="T:System.ArgumentException">
            Array is multidimensional -or- the number of elements in
            the source collection is greater than the available space
            from index to the end of the destination array.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>
            The number of elements contained in the collection.
            </value>
            <seealso cref="P:System.Collections.ICollection.Count"/>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.SyncRoot">
             <summary>
             Gets an object that can be used to synchronize access to
             the collection.
            </summary>
             <value>
             An object that can be used to synchronize access to the
             collection.
             </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection
            is synchronized (thread safe).
            </summary>
            <value>
            <b>true</b> if access to the collection is synchronized
            (thread safe); otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.RemoteEnumerator">
            <summary>
            <b>IEnumerator</b> implementation for
            <b>RemoteCollection</b>.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.RemoteEnumerator.m_keyEnumerator">
            <summary>
            An iterator over the keys returned by
            BinaryNamedCache.Keys.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.RemoteEnumerator.m_binaryCache">
            <summary>
            The BinaryNamedCache that created the parent virtual
            collection.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.RemoteEnumerator.m_type">
            <summary>
            The remote collection type. Determines whether key,
            value or an entry should be returned by the Current
            property.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.RemoteEnumerator.#ctor(Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache,Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollectionType)">
            <summary>
            Sets <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache"/> that created the
            parent RemoteCollection.
            </summary>
            <param name="cache">
            The <b>BinaryNamedCache</b> that created parent
            collection.
            </param>
            <param name="type">
            Type of the remote collection, one of the
            <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollectionType"/> values.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.RemoteEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the
            collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully
            advanced to the next element; <b>false</b> if the
            enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was
            created.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.RemoteEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is
            before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was
            created.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.RemoteCollection.RemoteEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value>
            The current element in the collection.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element
            of the collection or after the last element.
            </exception>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Advancer">
            <summary>
            <see cref="T:Tangosol.Util.PagedEnumerator.IAdvancer"/> implementation used
            to page remote collection keys.
            </summary>
        </member>
        <member name="T:Tangosol.Util.PagedEnumerator.IAdvancer">
            <summary>
            Advancer is a pluggable component that knows how to load a new
            page (collection) of objects to be used by the enclosing
            <see cref="T:Tangosol.Util.PagedEnumerator"/>.
            </summary>
        </member>
        <member name="T:Tangosol.Util.PagedEnumerator">
            <summary>
            PagedEnumerator is an <see cref="T:System.Collections.IEnumerator"/> implementation based
            on a concept of a <i>page Advancer</i> - a pluggable component that
            knows how to supply a next page of objects to iterate through.
            </summary>
            <remarks>
            As common to iterators, this implementation is not thread safe.
            </remarks>
            <author>Gene Gleyzer  2008.01.25</author>
            <author>Ana Cikic  2008.08.11</author>
            <since>Coherence 3.4</since>
        </member>
        <member name="M:Tangosol.Util.PagedEnumerator.#ctor(Tangosol.Util.PagedEnumerator.IAdvancer)">
            <summary>
            Construct a PagedEnumerator based on the specified
            <see cref="T:Tangosol.Util.PagedEnumerator.IAdvancer"/>.
            </summary>
            <param name="advancer">
            The underlying <b>IAdvancer</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.PagedEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to the
            next element; <b>false</b> if the enumerator has passed the end
            of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Tangosol.Util.PagedEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the
            first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="F:Tangosol.Util.PagedEnumerator.m_advancer">
            <summary>
            The underlying IAdvancer.
            </summary>
        </member>
        <member name="F:Tangosol.Util.PagedEnumerator.m_enumPage">
            <summary>
            An IEnumerator for the current page.
            </summary>
        </member>
        <member name="F:Tangosol.Util.PagedEnumerator.m_curr">
            <summary>
            Currently "Active" object.
            </summary>
        </member>
        <member name="P:Tangosol.Util.PagedEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the
            collection or after the last element.
            </exception>
        </member>
        <member name="T:Tangosol.Util.PagedEnumerator.IAdvancer">
            <summary>
            Advancer is a pluggable component that knows how to load a new
            page (collection) of objects to be used by the enclosing
            <see cref="T:Tangosol.Util.PagedEnumerator"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.PagedEnumerator.IAdvancer.NextPage">
            <summary>
            Obtain a new page of objects to be used by the enclosing
            <see cref="T:Tangosol.Util.PagedEnumerator"/>.
            </summary>
            <returns>
            A collection of objects or <c>null</c> if the advancer is
            exhausted.
            </returns>
        </member>
        <member name="M:Tangosol.Util.PagedEnumerator.IAdvancer.Reset">
            <summary>
            Sets the advancer to its initial position, which is before
            the first page.
            </summary>
        </member>
        <member name="M:Tangosol.Util.PagedEnumerator.IAdvancer.Remove(System.Object)">
            <summary>
            Remove the specified object from the underlying collection.
            </summary>
            <remarks>
            Naturally, only an object from the very last non-empty page
            could be removed.
            </remarks>
            <param name="curr">
            Currently "active" item to be removed from an underlying
            collection.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Advancer.#ctor(Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache)">
            <summary>
            Construct an Advancer with specified parent
            <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache"/>.
            </summary>
            <param name="binaryCache">
            Parent <b>BinaryNamedCache</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Advancer.NextPage">
            <summary>
            Obtain a new page of objects to be used by the enclosing
            <see cref="T:Tangosol.Util.PagedEnumerator"/>.
            </summary>
            <returns>
            A collection of objects or <c>null</c> if the advancer is
            exhausted.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Advancer.Reset">
            <summary>
            Sets the advancer to its initial position, which is
            before the first page.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Advancer.Remove(System.Object)">
            <summary>
            Remove the specified object from the underlying collection.
            </summary>
            <remarks>
            Naturally, only an object from the very last non-empty page
            could be removed.
            </remarks>
            <param name="curr">
            Currently "active" item to be removed from an underlying
            collection.
            </param>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Advancer.BinaryCache">
            <summary>
            The <see cref="T:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache"/> that is being
            iterated.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Advancer.Cookie">
            <summary>
            Opaque cookie used for streaming.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.BinaryNamedCache.Advancer.IsExhausted">
            <summary>
            <b>true</b> iff the Advancer has been exhausted.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Impl.RemoteNamedCache.ConverterListener">
            <summary>
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> implementation that wraps another
            <b>ICacheListener</b> and converts dispatched cache events using
            the <see cref="T:Tangosol.Net.Impl.RemoteNamedCache"/>'s converters.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterListener.EntryInserted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterListener.EntryUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been updated.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the update
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterListener.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterListener.Dispatch(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Dispatch the given <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> to the
            delegate <see cref="T:Tangosol.Net.Cache.ICacheListener"/>.
            </summary>
            <param name="evt">
            The <b>CacheEventArgs</b> to dispatch.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterListener.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the
            current object.
            </summary>
            <param name="o">
            The object to compare to this object.
            </param>
            <returns>
            <b>true</b> if specified object is equal to this object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterListener.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>
            A hash code for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.RemoteNamedCache.ConverterListener.ToString">
            <summary>
            Returns string representation of this object.
            </summary>
            <returns>
            String representation of this object.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Impl.RemoteNamedCache.ConverterListener.m_listener">
            <summary>
            The delegate ICacheListener.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterListener.Converter">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to convert
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </summary>
            <value>
            The <b>IConverter</b> used to convert <b>CacheEventArgs</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterListener.Listener">
            <summary>
            The delegate <see cref="T:Tangosol.Net.Cache.ICacheListener"/>.
            </summary>
            <value>
            The delegate <b>ICacheListener</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.RemoteNamedCache.ConverterListener.NamedCache">
            <summary>
            The <see cref="T:Tangosol.Net.INamedCache"/> that is the source of converted
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </summary>
            <value>
            The <b>INamedCache</b> that is the source of converted
            <b>CacheEventArgs</b>.
            </value>
        </member>
        <member name="T:Tangosol.Net.Impl.SafeCacheService">
            <summary>
            "Safe" wrapper for <see cref="T:Tangosol.Net.Impl.RemoteCacheService"/>.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Impl.SafeService">
            <summary>
            Base class for remote services safe-wrapping.
            </summary>
            <remarks>
            These "Safe" wrappers are responsible for ensuring that the wrapped
            component is always usable. For example, if the connection between
            the Coherence*Extend client and proxy service is ever severed, the
            messaging framework alerts the "Remote" service (via a
            ConnectionListener), and the "Remote" service transitions itself to
            a stopped state. During the next use of the "Remote" service (via the
            "Safe" wrapper), the "Safe" wrapper detects that the wrapped service
            has stopped and attempts to restart it.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.Configure(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Configure the controllable service.
            </summary>
            <remarks>
            <p/>
            This method can only be called before the controllable service
            is started.
            </remarks>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/> carrying configuration information
            specific to the IControllable object.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the service is already running.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the configuration information is invalid.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.Start">
            <summary>
            Start the controllable service.
            </summary>
            <remarks>
            <p/>
            This method should only be called once per the life cycle
            of the IControllable service. This method has no affect if the
            service is already running.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if a service does not support being re-started, and the
            service was already started and subsequently stopped and then
            an attempt is made to start the service again; also thrown if
            the IControllable service has not been configured.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.Shutdown">
            <summary>
            Stop the controllable service.
            </summary>
            <remarks>
            <p/>
            This is a controlled shut-down, and is preferred to the
            <see cref="M:Tangosol.Util.IControllable.Stop"/> method.
            <p/>
            This method should only be called once per the life cycle
            of the controllable service. Calling this method for a service
            that has already stopped has no effect.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.Stop">
            <summary>
            Hard-stop the controllable service.
            </summary>
            <remarks>
            Use <see cref="M:Tangosol.Util.IControllable.Shutdown"/> for normal service
            termination. Calling this method for a service that has already
            stopped has no effect.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.OnMemberJoined(System.Object,Tangosol.Net.MemberEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> has joined the service.
            </summary>
            <remarks>
            <p>
            Note: this event could be called during the service restart on
            the local node in which case the listener's code should not
            attempt to use any clustered cache or service functionality.</p>
            <p>
            The most critical situation arises when a number of threads are
            waiting for a local service restart, being blocked by a
            <b>IService</b> object synchronization monitor. Since the Joined
            event should be fired only once, it is called on a client thread
            <b>while holding a synchronization monitor</b>. An attempt to use
            other clustered service functionality during this local event
            notification may result in a deadlock.</p>
            </remarks>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            An event which indicates that membership has changed.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.OnMemberLeaving(System.Object,Tangosol.Net.MemberEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> is leaving the service.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            An event which indicates that membership has changed.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.OnMemberLeft(System.Object,Tangosol.Net.MemberEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> has left the service.
            </summary>
            <remarks>
            Note: this event could be called during the service restart on
            the local node in which case the listener's code should not
            attempt to use any clustered cache or service functionality.
            </remarks>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            An event which indicates that membership has changed.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.OnServiceStarting(System.Object,Tangosol.Util.ServiceEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IService"/> is starting.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            A <see cref="F:Tangosol.Util.ServiceEventType.Starting"/> event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.OnServiceStarted(System.Object,Tangosol.Util.ServiceEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IService"/> is starting.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            A <see cref="F:Tangosol.Util.ServiceEventType.Started"/> event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.OnServiceStopping(System.Object,Tangosol.Util.ServiceEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IService"/> is starting.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            A <see cref="F:Tangosol.Util.ServiceEventType.Stopping"/> event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.OnServiceStopped(System.Object,Tangosol.Util.ServiceEventArgs)">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IService"/> is starting.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="evt">
            A <see cref="F:Tangosol.Util.ServiceEventType.Stopped"/> event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.EnsureRunningService(System.Boolean)">
            <summary>
            Return the wrapped <b>IService</b>.
            </summary>
            <remarks>
            This method ensures that the returned <b>IService</b> is running
            before returning it. If the <b>IService</b> is not running and has
            not been explicitly stopped, the <b>IService</b> is restarted.
            </remarks>
            <param name="drain">
            If true and the wrapped <b>IService</b> is restarted, the calling
            thread will be blocked until the wrapped <b>IService</b> event
            dispatcher queue is empty and all outstanding tasks have been
            executed.
            </param>
            <returns>
            The running wrapped <b>IService</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.DrainEvents">
            <summary>
            Block the calling thread until the wrapped <b>IService</b> event
            dispatcher queue is empty and all outstanding tasks have been
            executed.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.Cleanup">
            <summary>
            Cleanup used resources.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.RestartService">
            <summary>
            Restart <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <returns>
            Running <b>IService</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.StartService(Tangosol.Util.IService)">
            <summary>
            Start the <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <param name="service">
            The <b>IService</b> object to start.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.TranslateEvent(Tangosol.Net.MemberEventArgs)">
            <summary>
            Translate the specified member event into another
            <see cref="T:Tangosol.Net.MemberEventArgs"/> with a source set to this
            service.
            </summary>
            <param name="evt">
            The <b>MemberEventArgs</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.TranslateEvent(Tangosol.Util.ServiceEventArgs)">
            <summary>
            Translate the specified service event into another
            <see cref="T:Tangosol.Util.ServiceEventArgs"/> with a source set to this
            service.
            </summary>
            <param name="evt">
            The <b>ServiceEventArgs</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.DispatchMemberEvent(Tangosol.Net.MemberEventArgs)">
            <summary>
            Dispatch a <see cref="T:Tangosol.Net.MemberEventArgs"/> to the registered
            event handlers.
            </summary>
            <param name="evt">
            <b>MemberEventArgs</b> to dispatch.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.DispatchServiceEvent(Tangosol.Util.ServiceEventArgs)">
            <summary>
            Dispatch a <see cref="T:Tangosol.Util.ServiceEventArgs"/> to the registered
            event handlers.
            </summary>
            <param name="evt">
            <b>ServiceEventArgs</b> to dispatch.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.InvokeMemberEvent(Tangosol.Net.MemberEventHandler,Tangosol.Net.MemberEventArgs)">
            <summary>
            Invokes the event, with special remark towards multithreading
            (using local copy of delegate and no inline attribute for method).
            </summary>
            <param name="handler">
            The MemberEventHandler event that's being invoked.
            </param>
            <param name="evt">
            Event arguments.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.InvokeServiceEvent(Tangosol.Util.ServiceEventHandler,Tangosol.Util.ServiceEventArgs)">
            <summary>
            Invokes the event, with special remark towards multithreading
            (using local copy of delegate and no inline attribute for method).
            </summary>
            <param name="handler">
            The ServiceEventHandler event that's being invoked.
            </param>
            <param name="evt">
            Event arguments.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeService.ToString">
            <summary>
            Provide a human-readable representation of this SafeService.
            </summary>
            <returns>
            A human-readable representation of this SafeService.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeService.m_config">
            <summary>
            The configuration data.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeService.m_operationalContext">
            <summary>
            The IOperationalContext for this IService.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeService.m_safeServiceState">
            <summary>
            The state of the SafeService; one of the ServiceState enum
            values.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeService.m_service">
            <summary>
            The actual (wrapped) IService.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeService.m_serviceName">
            <summary>
            Service name.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeService.m_serviceType">
            <summary>
            Service type.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeService.m_userContext">
            <summary>
            User context object associated with this IService.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeService.m_memberJoined">
            
             MemberEvent handlers.
            
        </member>
        <member name="F:Tangosol.Net.Impl.SafeService.m_serviceStarting">
            <summary>
            ServiceEvent handlers.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeService.m_principal">
            <summary>
            The <b>IPrincipal</b> associated with the service.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeService.Config">
            <summary>
            The configuration data.
            </summary>
            <value>
            The <see cref="T:Tangosol.Run.Xml.IXmlElement"/> holding configuration data.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeService.OperationalContext">
            <summary>
            The <see cref="T:Tangosol.Net.IOperationalContext"/> for this IService
            </summary>
            <value>
            An <b>IOperationalContext</b> instance.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeService.RunningService">
            <summary>
            Calculated property that returns the running wrapped
            <b>IService</b>.
            </summary>
            <value>
            The wrapped <b>IService</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeService.SafeServiceState">
            <summary>
            The state of the SafeService.
            </summary>
            <value>
            One of the <see cref="T:Tangosol.Net.Impl.ServiceState"/> enum values.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeService.Service">
            <summary>
            The actual (wrapped) <see cref="T:Tangosol.Util.IService"/>.
            </summary>
            <value>
            Wrapped <b>IService</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeService.ServiceName">
            <summary>
            Service name.
            </summary>
            <value>
            Service name.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeService.ServiceType">
            <summary>
            Service type.
            </summary>
            <value>
            Service type.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeService.IsRunning">
            <summary>
            Determine whether or not the controllable service is running.
            </summary>
            <remarks>
            <p/>
            Returns <b>false</b> before a service is started, while the
            service is starting, while a service is shutting down and after
            the service has stopped. It only returns <b>true</b> after
            completing its start processing and before beginning its shutdown
            processing.
            </remarks>
            <returns>
            <b>true</b> if the service is running; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeService.Principal">
            <summary>
            The optional <b>IPrincipal</b> object associated with this
            service.
            </summary>
            <remarks>
            If an <b>IPrincipal</b> is associated with this service,
            RestartService will be done on behalf of this <b>IPrincipal</b>.
            </remarks>
            <value>
            The <b>IPrincipal</b> associated with this service.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeService.Info">
            <summary>
            Gets the <see cref="T:Tangosol.Net.IServiceInfo"/> object for this
            <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <value>
            The <b>IServiceInfo</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeService.UserContext">
            <summary>
            Gets or sets the user context object associated with this
            <see cref="T:Tangosol.Net.IService"/>.
            </summary>
            <remarks>
            <p/>
            The data type and semantics of this context object are entirely
            application specific and are opaque to the <b>IService</b>
            itself.
            </remarks>
            <value>
            User context object associated with this <b>IService</b>.
            </value>
            <since>Coherence 3.0</since>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeService.Serializer">
            <summary>
            The <see cref="T:Tangosol.IO.ISerializer"/> used to serialize and deserialize
            objects by this <b>IService</b>.
            </summary>
            <value>
            The <b>ISerializer</b> for this <b>IService</b>.
            </value>
        </member>
        <member name="E:Tangosol.Net.Impl.SafeService.MemberJoined">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> has joined the service.
            </summary>
            <remarks>
            <p>
            Note: this event could be called during the service restart on
            the local node in which case the listener's code should not
            attempt to use any clustered cache or service functionality.</p>
            <p>
            The most critical situation arises when a number of threads are
            waiting for a local service restart, being blocked by a
            <b>IService</b> object synchronization monitor. Since the Joined
            event should be fired only once, it is called on a client thread
            <b>while holding a synchronization monitor</b>. An attempt to use
            other clustered service functionality during this local event
            notification may result in a deadlock.</p>
            </remarks>
        </member>
        <member name="E:Tangosol.Net.Impl.SafeService.MemberLeaving">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> is leaving the service.
            </summary>
        </member>
        <member name="E:Tangosol.Net.Impl.SafeService.MemberLeft">
            <summary>
            Invoked when an <see cref="T:Tangosol.Net.IMember"/> has left the service.
            </summary>
            <remarks>
            Note: this event could be called during the service restart on
            the local node in which case the listener's code should not
            attempt to use any clustered cache or service functionality.
            </remarks>
        </member>
        <member name="E:Tangosol.Net.Impl.SafeService.ServiceStarting">
            <summary>
            Invoked when <see cref="T:Tangosol.Net.IService"/> is starting.
            </summary>
        </member>
        <member name="E:Tangosol.Net.Impl.SafeService.ServiceStarted">
            <summary>
            Invoked when <see cref="T:Tangosol.Net.IService"/> has started.
            </summary>
        </member>
        <member name="E:Tangosol.Net.Impl.SafeService.ServiceStopping">
            <summary>
            Invoked when <see cref="T:Tangosol.Net.IService"/> is stopping.
            </summary>
        </member>
        <member name="E:Tangosol.Net.Impl.SafeService.ServiceStopped">
            <summary>
            Invoked when <see cref="T:Tangosol.Net.IService"/> has stopped.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeCacheService.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeCacheService.EnsureCache(System.String)">
            <summary>
            Obtain an <see cref="T:Tangosol.Net.INamedCache"/> interface that provides a view
            of resources shared among members of a cluster.
            </summary>
            <remarks>
            The view is identified by name within this ICacheService.
            Typically, repeated calls to this method with the same view name
            will result in the same view reference being returned.
            </remarks>
            <param name="name">
            The name, within this ICacheService, that uniquely identifies a
            view; <c>null</c> is legal, and may imply a default name.
            </param>
            <returns>
            An <b>INamedCache</b> interface which can be used to access the
            resources of the specified view.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the service is not running.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeCacheService.ReleaseCache(Tangosol.Net.INamedCache)">
            <summary>
            Release local resources associated with the specified instance of
            the cache.
            </summary>
            <remarks>
            <p>
            This invalidates a reference obtained by using the
            <see cref="M:Tangosol.Net.ICacheService.EnsureCache(System.String)"/> method.</p>
            <p>
            Releasing a map reference to a cache makes the map reference no
            longer usable, but does not affect the cache itself. In other
            words, all other references to the cache will still be valid, and
            the cache data is not affected by releasing the reference.</p>
            <p>
            The reference that is released using this method can no longer be
            used; any attempt to use the reference will result in an
            exception.</p>
            </remarks>
            <param name="cache">
            The cache object to be released.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeCacheService.DestroyCache(Tangosol.Net.INamedCache)">
            <summary>
            Release and destroy the specified cache.
            </summary>
            <remarks>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the entire
            cluster to this cache will be invalidated, the cached data will
            be cleared, and all resources will be released.
            </remarks>
            <param name="cache">
            The cache object to be released.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeCacheService.Cleanup">
            <summary>
            Cleanup used resources.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeCacheService.EnsureRunningCacheService(System.Boolean)">
            <summary>
            Return the wrapped <b>ICacheService</b>.
            </summary>
            <remarks>
            This method ensures that the returned <b>ICacheService</b> is
            running before returning it. If the <b>ICacheService</b> is not
            running and has not been explicitly stopped, the
            <b>ICacheService</b> is restarted.
            </remarks>
            <param name="drain">
            If true and the wrapped <b>ICacheService</b> is restarted, the
            calling thread will be blocked until the wrapped
            <b>ICacheService</b> event dispatcher queue is empty and all
            outstanding tasks have been executed.
            </param>
            <returns>
            The running wrapped <b>ICacheService</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeCacheService.RemoveCacheReference(Tangosol.Net.Impl.SafeNamedCache)">
            <summary>
            Removes <see cref="T:Tangosol.Net.Impl.SafeNamedCache"/> from the
            <see cref="T:Tangosol.Net.Internal.ScopedReferenceStore"/>.
            </summary>
            <param name="cacheSafe">
            <b>SafeNamedCache</b> to be removed.
            </param>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeCacheService.m_storeSafeNamedCache">
            <summary>
            Store that holds cache references by name and optionally,
            if configured, Subject.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeCacheService.CacheNames">
            <summary>
            A collection of string objects, one for each cache name that has
            been previously registered with this ICacheService.
            </summary>
            <value>
            <b>ICollection</b> of cache names.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If the service is not running or has stopped.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeCacheService.RunningCacheService">
            <summary>
            Calculated property that returns the running wrapped
            <b>ICacheService</b>.
            </summary>
            <value>
            The wrapped <b>ICacheService</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeCacheService.CacheService">
            <summary>
            The actual (wrapped) <see cref="T:Tangosol.Net.ICacheService"/>.
            </summary>
            <value>
            <b>ICacheService</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeCacheService.StoreSafeNamedCache">
            <summary>
            Store that holds cache references by name and optionally,
            if configured, Principal.
            </summary>
            <value>
            Store that holds cache references by name and optionally,
            if configured, Principal.
            </value>
        </member>
        <member name="T:Tangosol.Net.Impl.SafeInvocationService">
            <summary>
            "Safe" wrapper for Remote Invocation service.
            </summary>
            <author>Goran Milosavljevic  2006.11.08</author>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeInvocationService.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeInvocationService.Query(Tangosol.Net.IInvocable,System.Collections.ICollection)">
            <summary>
            Synchronously invoke the specified task on each of the specified
            members.
            </summary>
            <remarks>
            <p>
            This method will not return until the specified members have
            completed their processing, failed in their processing, or died
            trying.</p>
            <p>
            <b>IMember</b>s that are specified but are not currently running
            the <b>IInvocationService</b> will not invoke the specified
            <see cref="T:Tangosol.Net.IInvocable"/> object.</p>
            <p>
            <b>IMember</b>s that leave (gracefully or otherwise) before the
            invocation completes will not register a result, and the amount
            of processing that completed is indeterminate. <b>IMember</b>s
            that encounter an exception during invocation will not be
            retried; whatever result has been registered by that point by
            that member for that <b>IInvocable</b> object will be returned.
            Specifically, the result for a given member will be null under
            the following conditions:</p>
            <list type="bullet">
            <item>if the member did not exist</item>
            <item>if the member was not running the service at the time that
            the query method was invoked</item>
            <item>if the member left (via the shutdown or stop methods, or
            unexpectedly) before responding</item>
            <item>if the member encountered an exception while processing
            and had not registered a non-null result</item>
            <item>if the member completed successfully but registered no
            result</item>
            <item>if the member completed successfully but explicitly
            registered a result of null</item>
            </list>
            </remarks>
            <param name="task">
            The <b>IInvocable</b> object to distribute to the specified
            members in order to be invoked on those members.
            </param>
            <param name="col">
            Optional collection of cluster members to which the
            <b>IInvocable</b> object will be distributed; if <c>null</c>, the
            <b>IInvocable</b> object will be distributed to all cluster
            members that are running this service.
            </param>
            <returns>
            An <b>IDictionary</b> of result objects keyed by <see cref="T:Tangosol.Net.IMember"/>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeInvocationService.EnsureRunningInvocationService(System.Boolean)">
            <summary>
            Return the wrapped <b>IInvocationService</b>.
            </summary>
            <remarks>
            This method ensures that the returned <b>IInvocationService</b> is
            running before returning it. If the <b>IInvocationService</b> is
            not running and has not been explicitly stopped, the
            <b>IInvocationService</b> is restarted.
            </remarks>
            <param name="drain">
            If true and the wrapped <b>IInvocationService</b> is restarted,
            the calling thread will be blocked until the wrapped
            <b>IInvocationService</b> event dispatcher queue is empty and all
            outstanding tasks have been executed.
            </param>
            <returns>
            The running wrapped <b>IInvocationService</b>.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeInvocationService.RunningInvocationService">
            <summary>
            Calculated property that returns the running wrapped
            <b>IInvocationService</b>.
            </summary>
            <value>
            The wrapped <b>IInvocationService</b>.
            </value>
        </member>
        <member name="T:Tangosol.Net.Impl.SafeNamedCache">
            <summary>
            "Safe" wrapper for <see cref="T:Tangosol.Net.Impl.RemoteNamedCache"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Contains(System.Object)">
            <summary>
            Determines whether the <b>IDictionary</b> contains an element
            with the specified key.
            </summary>
            <returns>
            <b>true</b> if the <b>IDictionary</b> contains an element with
            the key; otherwise, <b>false</b>.
            </returns>
            <param name="key">
            The key to locate in the <b>IDictionary</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Clear">
            <summary>
            Removes all mappings from this dictionary.
            </summary>
            <remarks>
            Some implementations will attempt to lock the entire dictionary
            (if necessary) before preceeding with the clear operation. For
            such implementations, the entire dictionary has to be either
            already locked or able to be locked for this operation to
            succeed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the
            <b>IDictionary</b> object.
            </summary>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            <param name="key">
            The object to use as the key of the element to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            <b>IDictionary</b> object.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <b>ICollection</b> to an array,
            starting at a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements
            copied from <b>ICollection</b>.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Tangosol#Net#Cache#ICache#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.GetAll(System.Collections.ICollection)">
            <summary>
            Get the values for all the specified keys, if they are in the
            cache.
            </summary>
            <remarks>
            <p>
            For each key that is in the cache, that key and its corresponding
            value will be placed in the dictionary that is returned by this
            method. The absence of a key in the returned dictionary indicates
            that it was not in the cache, which may imply (for caches that
            can load behind the scenes) that the requested data could not be
            loaded.</p>
            <p>
            The result of this method is defined to be semantically the same
            as the following implementation, without regards to threading
            issues:</p>
            <pre>
            IDictionary dict = new AnyDictionary();
            // could be a Hashtable (but does not have to)
            foreach (object key in colKeys)
            {
                object value = this[key];
                if (value != null || Contains(key))
                {
                    dict[key] = value;
                }
            }
            return dict;
            </pre>
            </remarks>
            <param name="keys">
            A collection of keys that may be in the named cache.
            </param>
            <returns>
            A dictionary of keys to values for the specified keys passed in
            <paramref name="keys"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Insert(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            <p>
            Invoking this method is equivalent to the following call:
            <pre>
            Insert(key, value, CacheExpiration.Default);
            </pre></p>
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c>
            with the specified key, if the implementation supports
            <c>null</c> values.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Insert(System.Object,System.Object,System.Int64)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            This variation of the <see cref="M:Tangosol.Net.Impl.SafeNamedCache.Insert(System.Object,System.Object)"/>
            method allows the caller to specify an expiry (or "time to live")
            for the cache entry.
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire,
            also referred to as the entry's "time to live"; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT"/> to use the cache's
            default time-to-live setting; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.NEVER"/> to indicate that the
            cache entry should never expire; this milliseconds value is
            <b>not</b> a date/time value, but the amount of time object will
            be kept in the cache.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c> with
            the specified key, if the implementation supports <c>null</c>
            values.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If the requested expiry is a positive value and the
            implementation does not support expiry of cache entries.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.InsertAll(System.Collections.IDictionary)">
            <summary>
            Copies all of the mappings from the specified dictionary to this
            cache (optional operation).
            </summary>
            <remarks>
            These mappings will replace any mappings that this cache had for
            any of the keys currently in the specified dictionary.
            </remarks>
            <param name="dictionary">
            Mappings to be stored in this cache.
             </param>
            <exception cref="T:System.InvalidCastException">
            If the class of a key or value in the specified dictionary
            prevents it from being stored in this cache.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
            <exception cref="T:System.NullReferenceException">
            This cache does not permit <c>null</c> keys or values, and the
            specified key or value is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through cache items.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate through
            cache items.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Release">
            <summary>
            Release local resources associated with this instance of
            INamedCache.
            </summary>
            <remarks>
            <p>
            Releasing a cache makes it no longer usable, but does not affect
            the cache itself. In other words, all other references to the
            cache will still be valid, and the cache data is not affected by
            releasing the reference.
            Any attempt to use this reference afterword will result in an
            exception.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Destroy">
            <summary>
            Release and destroy this instance of INamedCache.
            </summary>
            <remarks>
            <p>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the entire
            cluster to this cache will be invalidated, the cached data will
            be cleared, and all resources will be released.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Truncate">
            <summary>
            Removes all mappings from this cache.
            </summary>
            <remarks>
            Note: the removal of entries caused by this truncate operation will
            not be observable.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Add a standard cache listener that will receive all events
            (inserts, updates, deletes) that occur against the cache, with
            the key, old-value and new-value included.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            AddCacheListener(listener, (IFilter) null, false);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a standard cache listener that previously signed up for
            all events.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            RemoveCacheListener(listener, (IFilter) null);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object,System.Boolean)">
            <summary>
            Add a cache listener for a specific key.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.OldValue"/> and
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.NewValue"/> properties.</p>
            <p>
            To unregister the ICacheListener, use the
            <see cref="M:Tangosol.Net.Impl.SafeNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)">
            <summary>
            Remove a cache listener that previously signed up for events
            about a specific key.
            </summary>
            <param name="listener">
            The listener to remove.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Add a cache listener that receives events based on a filter
            evaluation.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the <b>OldValue</b> and <b>NewValue</b>
            properties.</p>
            <p>
            To unregister the <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, use the
            <see cref="M:Tangosol.Net.Impl.SafeNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.</param>
            <param name="filter">
            A filter that will be passed <b>CacheEvent</b> objects to
            select from; a <b>CacheEvent</b> will be delivered to the
            listener only if the filter evaluates to <b>true</b> for that
            <b>CacheEvent</b>; <c>null</c> is equivalent to a filter
            that alway returns <b>true</b>.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)">
            <summary>
            Remove a cache listener that previously signed up for events
            based on a filter evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="filter">
            A filter used to evaluate events; <c>null</c> is equivalent to a
            filter that alway returns <b>true</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Lock(System.Object,System.Int64)">
            <summary>
            Attempt to lock the specified item within the specified period of
            time.
            </summary>
            <remarks>
            <p>
            The item doesn't have to exist to be <i>locked</i>. While the
            item is locked there is known to be a <i>lock holder</i> which
            has an exclusive right to modify (calling put and remove methods)
            that item.</p>
            <p>
            Lock holder is an abstract concept that depends on the
            IConcurrentCache implementation. For example, holder could
            be a cluster member or a thread (or both).</p>
            <p>
            Locking strategy may vary for concrete implementations as well.
            Lock could have an expiration time (this lock is sometimes called
            a "lease") or be held indefinitely (until the lock holder
            terminates).</p>
            <p>
            Some implementations may allow the entire map to be locked. If
            the map is locked in such a way, then only a lock holder is
            allowed to perform any of the "put" or "remove" operations.</p>
            <p>
            Passing the special constant
            <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> as the <i>key</i>
            parameter to indicate the cache lock is not allowed for
            SafeNamedCache and will cause an exception to be thrown.</p>
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <param name="waitTimeMillis">
            The number of milliseconds to continue trying to obtain a lock;
            pass zero to return immediately; pass -1 to block the calling
            thread until the lock could be obtained.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked within the
            specified time; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Lock(System.Object)">
            <summary>
            Attempt to lock the specified item and return immediately.
            </summary>
            <remarks>
            This method behaves exactly as if it simply performs the call
            <b>Lock(key, 0)</b>.
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Unlock(System.Object)">
            <summary>
            Unlock the specified item.
            </summary>
            <remarks>
            The item doesn't have to exist to be <i>unlocked</i>.
            If the item is currently locked, only the <i>holder</i> of the
            lock could successfully unlock it.
            </remarks>
            <param name="key">
            Key being unlocked.
            </param>
            <returns>
            <b>true</b> if the item was successfully unlocked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.GetKeys(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the keys contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of keys for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.GetValues(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of the values for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.GetValues(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            It is guaranteed that enumerator will traverse the array in such
            a way that the values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.GetEntries(Tangosol.Util.IFilter)">
            <summary>
            Return a collectioin of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.GetEntries(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            <p>
            It is guaranteed that enumerator will traverse the array in such
            a way that the entry values come up in ascending order, sorted by
            the specified comparer or according to the
            <i>natural ordering</i>.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria that
            the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.AddIndex(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer)">
            <summary>
            Add an index to this IQueryCache.
            </summary>
            <remarks>
            This allows to correlate values stored in this
            <i>indexed cache</i> (or attributes of those values) to the
            corresponding keys in the indexed cache and increase the
            performance of <b>GetKeys</b> and <b>GetEntries</b> methods.
            </remarks>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the indexed
            cache. Must not be <c>null</c>.
            </param>
            <param name="isOrdered">
            <b>true</b> if the contents of the indexed information should be
            ordered; <b>false</b> otherwise.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on entries
            in the indexed cache; or <c>null</c> if the entries' values
            natural ordering should be used.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.RemoveIndex(Tangosol.Util.IValueExtractor)">
            <summary>
            Remove an index from this IQueryCache.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the cache.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Invoke(System.Object,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the entry
            specified by the passed key, returning the result of the
            invocation.
            </summary>
            <param name="key">
            The key to process; it is not required to exist within the
            cache.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified key.
            </param>
            <returns>
            The result of the invocation as returned from the
            <b>IEntryProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.InvokeAll(System.Collections.ICollection,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entries specified by the passed keys, returning the result of the
            invocation for each.
            </summary>
            <param name="keys">
            The keys to process; these keys are not required to exist within
            the cache.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against each of the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.InvokeAll(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the set
            of entries that are selected by the given <see cref="T:Tangosol.Util.IFilter"/>,
            returning the result of the invocation for each.
            </summary>
            <remarks>
            <p>
            Unless specified otherwise, IInvocableCache implementations
            will perform this operation in two steps: (1) use the filter to
            retrieve a matching entry collection; (2) apply the agent to
            every filtered entry. This algorithm assumes that the agent's
            processing does not affect the result of the specified filter
            evaluation, since the filtering and processing could be
            performed in parallel on different threads.</p>
            <p>
            If this assumption does not hold, the processor logic has to be
            idempotent, or at least re-evaluate the filter. This could be
            easily accomplished by wrapping the processor with the
            <see cref="T:Tangosol.Util.Processor.ConditionalProcessor"/>.</p>
            </remarks>
            <param name="filter">
            An <see cref="T:Tangosol.Util.IFilter"/> that results in the collection of keys to
            be processed.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> to use to process the specified
            keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against the keys that are selected by the
            given <b>IFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Aggregate(System.Collections.ICollection,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the entries specified by
            the passed keys.
            </summary>
            <param name="keys">
            The collection of keys that specify the entries within this cache
            to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the specified entries of this cache.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Aggregate(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the collection of
            entries that are selected by the given <b>IFilter</b>.
            </summary>
            <param name="filter">
            an <see cref="T:Tangosol.Util.IFilter"/> that is used to select entries within
            this cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the selected entries of this cache.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.EntryInserted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.EntryUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been updated.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the update
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.Dispose">
            <summary>
            Calls <see cref="M:Tangosol.Net.Impl.SafeNamedCache.Release"/> to release the resources associated with this cache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.TranslateCacheEvent(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Convert <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> into new one with all
            properties copied except <see cref="P:Tangosol.Net.Cache.CacheEventArgs.Cache"/> which
            is set to this cache.
            </summary>
            <param name="evt">
            <b>CacheEventArgs</b> object.
            </param>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.ReleaseListeners">
            <summary>
            Release all <see cref="T:Tangosol.Net.Cache.ICacheListener"/> instances registered
            with this cache.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.RestartNamedCache">
            <summary>
            Restarts underlying <b>RemoteNamedCache</b>.
            </summary>
            <returns>
            Active instance of SafeNamedCache.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Impl.SafeNamedCache.ToString">
            <summary>
            Provide a human-readable representation of this <b>SafeNamedCache</b>.
            </summary>
            <returns>
            A human-readable representation of this <b>SafeNamedCache</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeNamedCache.m_namedCache">
            <summary>
            Actual (wrapped) INamedCache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeNamedCache.m_cacheName">
            <summary>
            The cache name.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeNamedCache.m_cacheService">
            <summary>
            SafeCacheService this INamedCache is part of.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeNamedCache.m_isReleased">
            <summary>
            Specifies whether or not the underlying INamedCache has been
            explicitly released.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeNamedCache.m_cacheListenerSupport">
            <summary>
            CacheListenerSupport used by this INamedCache to dispatch
            CacheEventArgs to registered IDictionaryListeners.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.SafeNamedCache.m_principal">
            <summary>
            The <b>IPrincipal</b> associated with the cache.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.NamedCache">
            <summary>
            Actual (wrapped) <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <value>
            Wrapped <b>INamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.CacheName">
            <summary>
            Gets the cache name.
            </summary>
            <value>
            The cache name.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.CacheService">
            <summary>
            Gets the <see cref="T:Tangosol.Net.ICacheService"/> that this INamedCache is a
            part of.
            </summary>
            <value>
            The cache service this INamedCache is a part of.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.SafeCacheService">
            <summary>
            Gets the <see cref="T:Tangosol.Net.Impl.RemoteCacheService"/> that this INamedCache
            is a part of.
            </summary>
            <value>
            The cache service this INamedCache is a part of.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.IsActive">
            <summary>
            Specifies whether or not the INamedCache is active.
            </summary>
            <value>
            <b>true</b> if the INamedCache is active; <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.IsReleased">
            <summary>
            Specifies whether or not the underlying <see cref="T:Tangosol.Net.INamedCache"/>
            has been explicitly released.
            </summary>
            <value>
            Specifies whether or not the underlying <b>INamedCache</b> has
            been explicitly released.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.RunningNamedCache">
            <summary>
            Calculated property that returns the running wrapped
            <b>INamedCache</b>.
            </summary>
            <value>
            The wrapped <b>INamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.Count">
            <summary>
            Returns the number of key-value mappings in this cache.
            </summary>
            <remarks>
            Note that this number does not include the items that were
            <i>locked</i> but didn't have corresponding cache entries.
            </remarks>
            <value>
            The number of key-value mappings in this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <b>ICollection</b>.
            </summary>
            <value>
            An object that can be used to synchronize access to the
            <b>ICollection</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <b>ICollection</b>
            is synchronized (thread safe).
            </summary>
            <value>
            <b>true</b> if access to the <b>ICollection</b> is synchronized
            (thread safe); otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.Item(System.Object)">
            <summary>
            Returns the value to which this cache maps the specified key.
            </summary>
            <remarks>
            <p>
            Returns <c>null</c> if the cache contains no mapping for
            this key. A return value of <c>null</c> does not
            <i>necessarily</i> indicate that the cache contains no mapping
            for the key; it's also possible that the cache explicitly maps
            the key to <c>null</c>.</p>
            <p>
            The <see cref="M:System.Collections.IDictionary.Contains(System.Object)"/> operation may be used to
            distinguish these two cases.</p>
            </remarks>
            <param name="key">
            Key whose associated value is to be returned.
            </param>
            <returns>
            The value to which this cache maps the specified key, or
            <c>null</c> if the cache contains no mapping for this key.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the key is of an inappropriate type for this cache.
            </exception>
            <exception cref="T:System.NullReferenceException">
            If the key is <c>null</c> and this cache does not permit
            <c>null</c> keys.
            </exception>
            <seealso cref="M:System.Collections.IDictionary.Contains(System.Object)"/>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.Keys">
            <summary>
            Gets an <b>ICollection</b> containing the keys of the
            <b>IDictionary</b>.
            </summary>
            <returns>
            An <b>ICollection</b> object containing the keys of the
            <b>IDictionary</b> object.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.Values">
            <summary>
            Gets an <b>ICollection</b> containing the values of the
            <b>IDictionary</b>.
            </summary>
            <returns>
            An <b>ICollection</b> object containing the values of the
            <b>IDictionary</b> object.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.IsReadOnly">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object is
            read-only.
            </summary>
            <value>
            Always <b>true</b> for this <b>INamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.IsFixedSize">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object has
            a fixed size.
            </summary>
            <value>
            Always <b>false</b> for this <b>INamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.CacheListenerSupport">
            <summary>
            <see cref="P:Tangosol.Net.Impl.SafeNamedCache.CacheListenerSupport"/> used by this
            <see cref="T:Tangosol.Net.INamedCache"/> to dispatch
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>s to registered
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/>s.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.Principal">
            <summary>
            The optional <b>IPrincipal</b> object associated with this
            cache.
            </summary>
            <remarks>
            If an <b>IPrincipal</b> is associated with this cache, 
            RestartNamedCache will be done on behalf of this <b>IPrincipal</b>.
            </remarks>
            <value>
            The <b>IPrincipal</b> associated with this cache.
            </value>
        </member>
        <member name="P:Tangosol.Net.Impl.SafeNamedCache.Entries">
            <summary>
            Gets a collection of <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> instances
            within the cache.
            </summary>
            <value>
            A collection of <b>ICacheEntry</b> objects.
            </value>
        </member>
        <member name="T:Tangosol.Net.Impl.ServiceState">
            <summary>
            Service state enum.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.ServiceState.Initial">
            <summary>
            The SafeService has been created but has not been started yet.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.ServiceState.Started">
            <summary>
            The SafeService has been started.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Impl.ServiceState.Stopped">
            <summary>
            The SafeService has beed explicitely stopped.
            </summary>
        </member>
        <member name="T:Tangosol.Net.PriorityTaskScheduling">
            <summary>
            <see cref="T:Tangosol.Net.IPriorityTask"/> scheduling priority constants.
            </summary>
        </member>
        <member name="F:Tangosol.Net.PriorityTaskScheduling.Standard">
            <summary>
            Scheduling value indicating that this task is to be queued and
            executed in a natural (based on the request arrival time) order.
            </summary>
        </member>
        <member name="F:Tangosol.Net.PriorityTaskScheduling.First">
            <summary>
            Scheduling value indicating that this task is to be queued in
            front of any equal or lower scheduling priority tasks and
            executed as soon as any of the worker threads become available.
            </summary>
        </member>
        <member name="F:Tangosol.Net.PriorityTaskScheduling.Immediate">
            <summary>
            Scheduling value indicating that this task is to be immediately
            executed by any idle worker thread; if all of them are active, a
            new thread will be created to execute this task.
            </summary>
        </member>
        <member name="T:Tangosol.Net.PriorityTaskTimeout">
            <summary>
            <see cref="T:Tangosol.Net.IPriorityTask"/> timeout constants.
            </summary>
        </member>
        <member name="F:Tangosol.Net.PriorityTaskTimeout.Default">
            <summary>
            A special timeout value to indicate that the corresponding
            service's default timeout value should be used. 
            </summary>
        </member>
        <member name="F:Tangosol.Net.PriorityTaskTimeout.None">
            <summary>
            A special timeout value to indicate that this task or request can
            run indefinitely.
            </summary>
        </member>
        <member name="T:Tangosol.Net.MemberEventHandler">
            <summary>
            Represents the method that will handle member event.
            </summary>
            <remarks>
            <p>
            MemberEventHandler will be invoked in the order in which they are registered.</p>
            </remarks>
            <param name="sender">
            <see cref="T:Tangosol.Net.IService"/> that raised an event.
            </param>
            <param name="args">
            Event arguments.
            </param>
        </member>
        <member name="T:Tangosol.Net.ServiceType">
            <summary>
            Service type constants.
            </summary>
        </member>
        <member name="F:Tangosol.Net.ServiceType.LocalCache">
            <summary>
            The local cache service type constant.
            </summary>
            <remarks>
            A local cache service provides the means for handling a collection
            of resources limited to a single client with concurrent access
            control.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.ServiceType.RemoteCache">
            <summary>
            The remote cache service type constant.
            </summary>
            <remarks>
            A remote cache service provides the means for handling a
            collection of resources managed by a remote cluster with
            concurrent access control.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.ServiceType.RemoteInvocation">
            <summary>
            The remote invocation service type constant.
            </summary>
            <remarks>
            A remote invocation service enables the execution of invocable
            objects by a remote cluster member.
            </remarks>
        </member>
        <member name="F:Tangosol.Net.ServiceType.RemoteNameService">
            <summary>
            The remote name service type constant.
            </summary>
            <remarks>
            A remote name service allows a JVM to use a remote NameService 
            without having to join the Cluster.
            </remarks>
        </member>
        <member name="T:Tangosol.Net.LocalMember">
            <summary>
            Simple <see cref="T:Tangosol.Net.IMember"/> implementation used as "local" member
            for <see cref="T:Tangosol.Net.Impl.RemoteService"/> instances started by
            <see cref="T:Tangosol.Net.IConfigurableCacheFactory"/>.
            </summary>
            <seealso cref="T:Tangosol.Net.IMember"/>
            <author>Ana Cikic  2006.11.14</author>
        </member>
        <member name="M:Tangosol.Net.LocalMember.GetLocationInfo">
            <summary>
            Returns a string representation of the location information
            for this IMember object.
            </summary>
            <returns>
            A string representation of the location information for this
            IMember object.
            </returns>
            <since>Coherence 3.7</since>
        </member>
        <member name="M:Tangosol.Net.LocalMember.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.LocalMember.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.LocalMember.ToString">
            <summary>
            Returns a string representation of this IMember object.
            </summary>
            <returns>
            A string representation of this IMember object.
            </returns>
        </member>
        <member name="P:Tangosol.Net.LocalMember.ClusterName">
            <summary>
            The name of the cluster with which this member is associated.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.LocalMember.SiteName">
            <summary>
            Determine the configured name for the site (such as a data
            center) in which this IMember resides.
            </summary>
            <remarks>
            This name is used for logging purposes and to differentiate among
            multiple geographic sites.
            </remarks>
            <returns>
            The configured site name or <c>null</c>.
            </returns>
            <since>Coherence 3.2</since>
        </member>
        <member name="P:Tangosol.Net.LocalMember.RackName">
            <summary>
            Determine the configured name for the rack (such as a physical
            rack, cage or blade frame) in which this IMember resides.
            </summary>
            <remarks>
            This name is used for logging purposes and to differentiate among
            multiple racks within a particular data center, for example.
            </remarks>
            <value>
            The configured rack name or <c>null</c>.
            </value>
            <since>Coherence 3.2</since>
        </member>
        <member name="P:Tangosol.Net.LocalMember.MachineName">
            <summary>
            Determine the configured name for the machine (such as a host
            name) in which this IMember resides.
            </summary>
            <remarks>
            This name is used for logging purposes and to differentiate among
            multiple servers, and may be used as the basis for determining
            the MachineId property.
            </remarks>
            <value>
            The configured machine name or <c>null</c>.
            </value>
            <since>Coherence 3.2</since>
        </member>
        <member name="P:Tangosol.Net.LocalMember.ProcessName">
            <summary>
            Determine the configured name for the process in which this
            IMember resides.
            </summary>
            <remarks>
            This name is used for logging purposes and to differentiate among
            multiple processes on a a single machine.
            </remarks>
            <value>
            The configured process name or <c>null</c>.
            </value>
            <since>Coherence 3.2</since>
        </member>
        <member name="P:Tangosol.Net.LocalMember.MemberName">
            <summary>
            Determine the configured name for the IMember.
            </summary>
            <remarks>
            This name is used for logging purposes and to differentiate among
            members running within a particular process.
            </remarks>
            <value>
            The configured IMember name or <c>null</c>.
            </value>
            <since>Coherence 3.2</since>
        </member>
        <member name="P:Tangosol.Net.LocalMember.RoleName">
            <summary>
            Determine the configured role name for the IMember.
            </summary>
            <remarks>
            This role is completely definable by the application, and can be
            used to determine what members to use for specific purposes, such
            as to send particular types of work to.
            </remarks>
            <value>
            The configured role name for the IMember or <c>null</c>.
            </value>
            <since>Coherence 3.2</since>
        </member>
        <member name="T:Tangosol.Net.MemberEventArgs">
            <summary>
            An event which indicates that membership has changed.
            </summary>
            <remarks>
            Possible event types are:
            <list type="bullet">
            <item>
            An <see cref="T:Tangosol.Net.IMember"/> has joined.
            </item>
            <item>
            An <see cref="T:Tangosol.Net.IMember"/> is leaving.
            </item>
            <item>
            An <see cref="T:Tangosol.Net.IMember"/> has left.
            </item>
            </list>
            <p>
            A MemberEventArgs object is sent as an argument to the
            <see cref="T:Tangosol.Net.MemberEventHandler"/> methods.</p>
            </remarks>
            <author>Cameron Purdy  2002.12.12</author>
            <author>Ana Cikic  2006.11.08</author>
        </member>
        <member name="M:Tangosol.Net.MemberEventArgs.#ctor(Tangosol.Net.IService,Tangosol.Net.MemberEventType,Tangosol.Net.IMember)">
            <summary>
            Constructs a new MemberEventArgs.
            </summary>
            <param name="source">
            The source object that fired the event (a
            <see cref="T:Tangosol.Net.IService"/>).
            </param>
            <param name="eventType">
            This event's type.
            </param>
            <param name="member">
            The <see cref="T:Tangosol.Net.IMember"/> for which the event applies.
            </param>
        </member>
        <member name="M:Tangosol.Net.MemberEventArgs.ToString">
            <summary>
            Returns a string representation of this MemberEventArgs object.
            </summary>
            <returns>
            A string representation of this MemberEventArgs object.
            </returns>
        </member>
        <member name="F:Tangosol.Net.MemberEventArgs.m_source">
            <summary>
            IService object that fired the event.
            </summary>
        </member>
        <member name="F:Tangosol.Net.MemberEventArgs.m_eventType">
            <summary>
            This event's type.
            </summary>
        </member>
        <member name="F:Tangosol.Net.MemberEventArgs.m_member">
            <summary>
            Gets an IMember associated with this event.
            </summary>
        </member>
        <member name="F:Tangosol.Net.MemberEventArgs.DESCRIPTIONS">
            <summary>
            Descriptions of the various event types.
            </summary>
        </member>
        <member name="P:Tangosol.Net.MemberEventArgs.Service">
            <summary>
            Gets the <see cref="T:Tangosol.Net.IService"/> object that fired the event.
            </summary>
            <value>
            An object on which this event has occured.
            </value>
        </member>
        <member name="P:Tangosol.Net.MemberEventArgs.EventType">
            <summary>
            Gets this event's type.
            </summary>
            <remarks>
            The event type is one of the <see cref="T:Tangosol.Net.MemberEventType"/>
            enumerated constants.
            </remarks>
            <value>
            An event type.
            </value>
        </member>
        <member name="P:Tangosol.Net.MemberEventArgs.Member">
            <summary>
            Gets the <see cref="T:Tangosol.Net.IMember"/> associated with this event.
            </summary>
            <value>
            An <b>IMember</b>.
            </value>
        </member>
        <member name="T:Tangosol.Net.MemberEventType">
            <summary>
            Member event type enumeration.
            </summary>
        </member>
        <member name="F:Tangosol.Net.MemberEventType.Joined">
            <summary>
            This event indicates that an <b>IMember</b> has joined.
            </summary>
        </member>
        <member name="F:Tangosol.Net.MemberEventType.Leaving">
            <summary>
            This event indicates that an <b>IMember</b> is leaving.
            </summary>
        </member>
        <member name="F:Tangosol.Net.MemberEventType.Left">
            <summary>
            This event indicates that an <b>IMember</b> has left.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Messaging.ConnectionEventArgs">
            <summary>
            An event which indicates that an <see cref="T:Tangosol.Net.Messaging.IConnection"/> was:
            <list type="bullet">
            <item>opened</item>
            <item>closed</item>
            <item>determined to be unusable</item>
            </list>
            </summary>
            <author>Jason Howes  2006.03.28</author>
            <author>Ivan Cikic  2006.11.08</author>
            <since>Coherence 3.2</since>
            <seealso cref="T:Tangosol.Net.Messaging.ConnectionEventHandler"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.ConnectionEventArgs.#ctor(Tangosol.Net.Messaging.IConnection,Tangosol.Net.Messaging.ConnectionEventType)">
            <summary>
            Construct a new <b>ConnectionEventArgs</b>.
            </summary>
            <param name="connection">
            The <see cref="T:Tangosol.Net.Messaging.IConnection"/> for which the event applies.
            </param>
            <param name="eventType">
            The event's type, one of <see cref="T:Tangosol.Net.Messaging.ConnectionEventType"/>
            enumeration values.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.ConnectionEventArgs.#ctor(Tangosol.Net.Messaging.IConnection,Tangosol.Net.Messaging.ConnectionEventType,System.Exception)">
            <summary>
            Construct a new <b>ConnectionEventArgs</b>.
            </summary>
            <param name="connection">
            The <see cref="T:Tangosol.Net.Messaging.IConnection"/> for which the event applies.
            </param>
            <param name="eventType">
            The event's type, one of <see cref="T:Tangosol.Net.Messaging.ConnectionEventType"/>
            enumeration values.
            </param>
            <param name="exc">
            An optional <b>Exception</b> associated with the event.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.ConnectionEventArgs.ToString">
            <summary>
            Return a string representation of this ConnectionEventArgs
            object.
            </summary>
            <returns>
            A string representation of this object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.ConnectionEventArgs.GetDescription">
            <summary>
            Get the event's description.
            </summary>
            <returns>
            This event's description.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Messaging.ConnectionEventArgs.m_connection">
            <summary>
            The <b>IConnection</b> for which the event applies.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.ConnectionEventArgs.m_eventType">
            <summary>
            The event identifier.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.ConnectionEventArgs.m_exception">
            <summary>
            An optional <b>Exception</b> associated with the event.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.ConnectionEventArgs.DESCRIPTIONS">
            <summary>
            Descriptions of the various event types.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.ConnectionEventArgs.Connection">
            <summary>
            Return the <see cref="T:Tangosol.Net.Messaging.IConnection"/> associated with this event.
            </summary>
            <value>
            The <see cref="T:Tangosol.Net.Messaging.IConnection"/>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.ConnectionEventArgs.EventType">
            <summary>
            Return connection event type.
            </summary>
            <value>
            The event type, one of <see cref="T:Tangosol.Net.Messaging.ConnectionEventType"/>
            enumeration values.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.ConnectionEventArgs.Exception">
            <summary>
            Return the optional <b>Exception</b> associated with this event.
            </summary>
            <value>
            This method will usually return a <c>null</c> value if the event
            identifier is anything but
            <see cref="F:Tangosol.Net.Messaging.ConnectionEventType.Error"/>.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.ConnectionEventType">
            <summary>
            Connect event type enumeration.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.ConnectionEventType.Opened">
            <summary>
            This event identifier indicates that an <see cref="T:Tangosol.Net.Messaging.IConnection"/>
            has been established.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.ConnectionEventType.Closed">
            <summary>
            This event identifier indicates that an <see cref="T:Tangosol.Net.Messaging.IConnection"/>
            was closed.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.ConnectionEventType.Error">
            <summary>
            This event identifier indicates that an <see cref="T:Tangosol.Net.Messaging.IConnection"/>
            has failed.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Messaging.ConnectionException">
            <summary>
            Signals that an underlying communication channel used by a
            <see cref="T:Tangosol.Net.Messaging.IConnection"/> may have been closed, severed, or become
            unusable.
            </summary>
            <remarks>
            After this exception is thrown, any attempt to use the
            <b>IConnection</b> (or any <see cref="T:Tangosol.Net.Messaging.IChannel"/> created by the
            <b>IConnection</b>) may result in an exception.
            </remarks>
            <author>Jason Howes  2006.06.08</author>
            <author>Goran Milosavljevic  2006.08.15</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Net.Messaging.ConnectionException.#ctor">
            <summary>
            Construct a ConnectionException with no detail message.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.ConnectionException.#ctor(System.String)">
            <summary>
            Construct a ConnectionException with the specified detail
            message.
            </summary>
            <param name="s">
            The string that contains a detailed message.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.ConnectionException.#ctor(System.String,Tangosol.Net.Messaging.IConnection)">
            <summary>
            Construct a ConnectionException with the specified detail
            message.
            </summary>
            <param name="s">
            The string that contains a detailed message.
            </param>
            <param name="connection">
            The connection where the error occured
            </param>        
        </member>
        <member name="M:Tangosol.Net.Messaging.ConnectionException.#ctor(System.Exception)">
            <summary>
            Construct a ConnectionException from an <b>Exception</b> object.
            </summary>
            <param name="e">
            The Exception object.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.ConnectionException.#ctor(System.Exception,Tangosol.Net.Messaging.IConnection)">
            <summary>
            Construct a ConnectionException from an <b>Exception</b> object.
            </summary>
            <param name="e">
            The Exception object.
            </param>
            <param name="connection">
            The connection where the error occured
            </param> 
        </member>
        <member name="M:Tangosol.Net.Messaging.ConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a ConnectionException from an <b>Exception</b> object
            and an additional description.
            </summary>
            <param name="s">
            The additional description.
            </param>
            <param name="e">
            The <b>Exception</b> object.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.ConnectionException.#ctor(System.String,System.Exception,Tangosol.Net.Messaging.IConnection)">
            <summary>
            Construct a ConnectionException from an <b>Exception</b> object
            and an additional description.
            </summary>
            <param name="s">
            The additional description.
            </param>
            <param name="e">
            The <b>Exception</b> object.
            </param>
            <param name="connection">
            The connection where the error occured
            </param> 
        </member>
        <member name="M:Tangosol.Net.Messaging.ConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct a ConnectionException class with serialized data.
            </summary>
            <param name="info">
            The <b>SerializationInfo</b> that holds the serialized object
            data about the exception being thrown.
            </param>
            <param name="context">
            The <b>StreamingContext</b> that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="T:Tangosol.Net.Messaging.IChannel">
            <summary>
            An IChannel is a communication construct that allows one or more
            threads to send and receive <see cref="T:Tangosol.Net.Messaging.IMessage"/> objects via a
            <see cref="T:Tangosol.Net.Messaging.IConnection"/>.
            </summary>
            <remarks>
            IChannel objects are created from an <b>IConnection</b>. Once created,
            an IChannel can be used to:
            <list type="bullet">
            <item>
            <description>
            asynchronously <see cref="M:Tangosol.Net.Messaging.IChannel.Send(Tangosol.Net.Messaging.IMessage)"/> send an <b>IMessage</b>
            </description>
            </item>
            <item>
            <description>
            asynchronously <see cref="M:Tangosol.Net.Messaging.IChannel.Send(Tangosol.Net.Messaging.IRequest)"/> send an <b>IRequest</b>
            </description>
            </item>
            <item>
            <description>
            synchronously <see cref="M:Tangosol.Net.Messaging.IChannel.Request(Tangosol.Net.Messaging.IRequest)"/> send an <b>IRequest</b>
            </description>
            </item>
            <item>
            <description>
            asynchronously <see cref="P:Tangosol.Net.Messaging.IChannel.Receiver"/> receive an <b>IMessage</b>
            </description>
            </item>
            </list>
            <p>
            Once an IChannel has been closed, any attempt to send a
            <b>IMessage</b> using the IChannel may result in an exception.</p>
            <p>
            All IChannel implementations must be fully thread-safe.</p>
            </remarks>
            <author>Jason Howes  2006.03.23</author>
            <author>Ana Cikic  2006.08.15</author>
            <seealso cref="T:Tangosol.Net.Messaging.IConnection"/>
            <seealso cref="T:Tangosol.Net.Messaging.IMessage"/>
            <seealso cref="T:Tangosol.Net.Messaging.IRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.IResponse"/>
            <seealso cref="T:Tangosol.Net.Messaging.IReceiver"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Net.Messaging.IChannel.Close">
            <summary>
            Close the IChannel and reclaim all resources held by the
            IChannel.
            </summary>
            <remarks>
            <p>
            When this method is invoked, it will not return until
            <b>IMessage</b> processing has been shut down in an orderly
            fashion. This means that the <see cref="T:Tangosol.Net.Messaging.IReceiver"/> object
            associated with this IChannel (if any) have finished processing
            and that all pending requests are completed or canceled. If the
            <b>IReceiver</b> is processing an <b>IMessage</b> at the time when
            close is invoked, all the facilities of the <b>IChannel</b> must
            remain available until it finishes.</p>
            <p>
            If the IChannel is not open, calling this method has no effect.
            </p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Messaging.IChannel.GetAttribute(System.String)">
            <summary>
            Return the object bound with the specified name to this IChannel,
            or <c>null</c> if no object is bound with that name.
            </summary>
            <param name="name">
            The name with which the object was bound.
            </param>
            <returns>
            The object bound with the given name or <c>null</c> if no such
            binding exists.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.IChannel.GetAttributes">
            <summary>
            Return the map of IChannel attributes.
            </summary>
            <remarks>
            <p>
            The keys of the map are the names with which the corresponding
            values have been bound to the IChannel.</p>
            <p>
            The client should assume that the returned map is an immutable
            snapshot of the actual map of attribute objects maintained by
            this IChannel.</p>
            </remarks>
            <returns>
            A map of attributes bound to this IChannel.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.IChannel.SetAttribute(System.String,System.Object)">
            <summary>
            Bind an object to the specified name in this IChannel.
            </summary>
            <remarks>
            <p>
            If an object is already bound to the specified name, it is
            replaced with the given object.</p>
            <p>
            IChannel attributes are local to the binding peer's IChannel. In
            other words, attributes bound to this IChannel object will not be
            bound to the peer's IChannel object.</p>
            </remarks>
            <param name="name">
            The name with which to bind the object
            </param>
            <param name="value">
            The object to bind.
            </param>
            <returns>
            The object that the newly bound object replaced (if
            any).
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.IChannel.RemoveAttribute(System.String)">
            <summary>
            Unbind the object that was bound with the specified name to this
            IChannel.
            </summary>
            <param name="name">
            The name with which the object was bound.
            </param>
            <returns>
            The object that was unbound.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.IChannel.Send(Tangosol.Net.Messaging.IMessage)">
            <summary>
            Asynchronously send an <b>IMessage</b> to the peer endpoint
            through this IChannel over the underlying <b>IConnection</b>.
            </summary>
            <param name="message">
            The <b>IMessage</b> to send.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.IChannel.Send(Tangosol.Net.Messaging.IRequest)">
            <summary>
            Asynchronously send an <b>IRequest</b> to the peer endpoint
            through this IChannel over the underlying <b>IConnection</b>.
            </summary>
            <param name="request">
            The <b>IRequest</b> to send.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.Messaging.IStatus"/> object representing the asynchronous
            <b>IRequest</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.IChannel.Request(Tangosol.Net.Messaging.IRequest)">
            <summary>
            Synchronously send an <b>IRequest</b> to the peer endpoint through
            this IChannel over the underlying <b>IConnection</b> and return
            the result of processing the <b>IRequest</b>.
            </summary>
            <param name="request">
            The <b>IRequest</b> to send.
            </param>
            <returns>
            The result sent by the peer.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.IChannel.Request(Tangosol.Net.Messaging.IRequest,System.Int64)">
            <summary>
            Synchronously send an <b>IRequest</b> to the peer endpoint through
            this IChannel over the underlying <b>IConnection</b> and return
            the result of processing the <b>IRequest</b>.
            </summary>
            <param name="request">
            The <b>IRequest</b> to send.
            </param>
            <param name="millis">
            The number of milliseconds to wait for the result; pass zero to
            block the calling thread indefinitely.
            </param>
            <returns>
            The result sent by the peer.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.IChannel.GetRequest(System.Int64)">
            <summary>
            Return the outstanding <b>IRequest</b> with the given identifier
            or <c>null</c> if no such <b>IRequest</b> exists.
            </summary>
            <remarks>
            This method can be used during <b>IResponse</b> execution to
            correlate the <b>IResponse</b> with the <b>IRequest</b> for which
            the <b>IResponse</b> was sent.
            </remarks>
            <param name="id">
            The unique identifer of the outstanding <b>IRequest</b>.
            </param>
            <returns>
            The outstanding <b>IRequest</b> with the given identifer or
            <c>null</c> if no such <b>IRequest</b> exists.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Messaging.IChannel.Connection">
            <summary>
            The <b>IConnection</b> that created this IChannel.
            </summary>
            <value>
            The <b>IConnection</b> that created this IChannel.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IChannel.Id">
            <summary>
            The unique identifier for this IChannel.
            </summary>
            <remarks>
            The returned identifier is only unique among IChannel objects
            created from the same underlying <b>IConnection</b>. In other
            words, IChannel objects created by different <b>IConnection</b>
            objects may have the same unique identifier, but IChannel objects
            created by the same <b>IConnection</b> cannot.
            </remarks>
            <value>
            A unique integer identifier for this IChannel.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IChannel.IsOpen">
            <summary>
            Return <b>true</b> if this IChannel is open.
            </summary>
            <value>
            <b>true</b> if this IChannel is open.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IChannel.MessageFactory">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> used to create <b>IMessage</b>
            objects that may be sent through this IChannel over the
            underlying <b>IConnection</b>.
            </summary>
            <value>
            The <b>IMessageFactory</b> for this IChannel.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IChannel.Serializer">
            <summary>
            The <see cref="T:Tangosol.IO.ISerializer"/> used to serialize and deserialize
            payload objects carried by <b>IMessage</b> objects sent through
            this IChannel.
            </summary>
            <value>
            The <b>ISerializer</b> for this IChannel.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IChannel.Receiver">
            <summary>
            The optional <see cref="T:Tangosol.Net.Messaging.IReceiver"/> that processes unsolicited
            <b>IMessage</b> objects sent through this IChannel over the
            underlying <b>IConnection</b>.
            </summary>
            <value>
            The <b>IReceiver</b> for this IChannel or <c>null</c> if a
            <b>IReceiver</b> has not been associated with this IChannel.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IChannel.Principal">
            <summary>
            The optional <b>IPrincipal</b> object associated with this
            IChannel.
            </summary>
            <remarks>
            If an <b>IPrincipal</b> is associated with this IChannel, any
            operation performed upon receipt of an <b>IMessage</b> sent
            through this IChannel will be done on behalf of the
            <b>IPrincipal</b>.
            </remarks>
            <value>
            The <b>IPrincipal</b> associated with this IChannel.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.ICodec">
            <summary>
            An ICodec converts an <see cref="T:Tangosol.Net.Messaging.IMessage"/> object to and from a
            binary representation.
            </summary>
            <author>Cameron Purdy/Jason Howes  2006.04.18</author>
            <author>Ana Cikic  2006.08.15</author>
            <since>Coherence 3.2</since>
            <seealso cref="T:Tangosol.Net.Messaging.IMessage"/>
            <seealso cref="T:Tangosol.Net.Messaging.IChannel"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.ICodec.Encode(Tangosol.Net.Messaging.IChannel,Tangosol.Net.Messaging.IMessage,Tangosol.IO.DataWriter)">
            <summary>
            Encode and write a binary representation of the given
            <b>IMessage</b> to the given <see cref="T:Tangosol.IO.DataWriter"/>.
            </summary>
            <remarks>
            Using the passed <see cref="T:Tangosol.Net.Messaging.IChannel"/>, the ICodec has access to
            both the <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> for the <b>IChannel</b>
            and the underlying <see cref="T:Tangosol.Net.Messaging.IConnection"/>.
            </remarks>
            <param name="channel">
            The <b>IChannel</b> object through which the binary-encoded
            <b>IMessage</b> was passed.
            </param>
            <param name="message">
            The <b>IMessage</b> to encode.
            </param>
            <param name="writer">
            The <b>DataWriter</b> to write the binary representation of the
            <b>IMessage</b> to.
            </param>
            <exception cref="T:System.IO.IOException">
            If an error occurs encoding or writing the <b>IMessage</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.ICodec.Decode(Tangosol.Net.Messaging.IChannel,Tangosol.IO.DataReader)">
            <summary>
            Reads a binary-encoded <b>IMessage</b> from the passed
            <see cref="T:Tangosol.IO.DataReader"/> object.
            </summary>
            <remarks>
            Using the passed <see cref="T:Tangosol.Net.Messaging.IChannel"/>, the ICodec has access to
            both the <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> for the <b>IChannel</b>
            and the underlying <see cref="T:Tangosol.Net.Messaging.IConnection"/>.
            </remarks>
            <param name="channel">
            The <b>IChannel</b> object through which the binary-encoded
            <b>IMessage</b> was passed.
            </param>
            <param name="reader">
            The <b>DataReader</b> containing the binary-encoded
            <b>IMessage</b>.
            </param>
            <returns>
            The <b>IMessage</b> object encoded in the given
            <b>DataReader</b>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an error occurs reading or decoding the <b>IMessage</b>.
            </exception>
        </member>
        <member name="T:Tangosol.Net.Messaging.IConnection">
            <summary>
            An IConnection represents a bi-directional communication channel for
            exchanging <see cref="T:Tangosol.Net.Messaging.IMessage"/> objects between two endpoints.
            </summary>
            <remarks>
            <p>
            An IConnection is created by an <see cref="T:Tangosol.Net.Messaging.IConnectionInitiator"/>
            running on a client. Before an IConnection can be established, the
            server must initialize and start an <see cref="T:Tangosol.Net.Messaging.IConnectionAcceptor"/>.
            Creating the IConnection results in a handshake between the client
            and the server (including <see cref="T:Tangosol.Net.Messaging.IProtocol"/> negotiation); if
            the handshake is successful, the IConnection will be transitioned to
            the open state.</p>
            <p>
            An IConnection itself is not used to send and receive <b>IMessage</b>
            objects. Rather, one or more <see cref="T:Tangosol.Net.Messaging.IChannel"/> objects may be
            created from the IConnection and used to exchange <b>IMessage</b>
            objects of a known <b>IProtocol</b> with a peer. An <b>IChannel</b>
            may be <see cref="M:Tangosol.Net.Messaging.IConnection.OpenChannel(Tangosol.Net.Messaging.IProtocol,System.String,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/> opened to a named
            <see cref="T:Tangosol.Net.Messaging.IReceiver"/> registered by the peer.
            Alternatively, an "anonymous" <b>IChannel</b> (a back-Channel) may be
            <see cref="M:Tangosol.Net.Messaging.IConnection.CreateChannel(Tangosol.Net.Messaging.IProtocol,Tangosol.Net.Messaging.IReceiver)"/> created by one peer and returned to the
            other, where it must be <see cref="M:Tangosol.Net.Messaging.IConnection.AcceptChannel(System.Uri,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/> accepted
            before it can be used.</p>
            <p>
            Once finished with the IConnection, an application should release all
            resources held by the IConnection by calling the
            <see cref="M:Tangosol.Net.Messaging.IConnection.Close"/> method. Closing an IConnection also closes all
            <b>IChannel</b> objects created by the IConnection and renders the
            IConnection unusable. Attempting to use a closed IConnection or any
            <b>IChannel</b> created by a closed IConnection may result in an
            exception.</p>
            <p>
            All IConnection implementations must be fully thread-safe.</p>
            </remarks>
            <author>Jason Howes  2006.03.22</author>
            <author>Ana Cikic  2006.08.16</author>
            <seealso cref="T:Tangosol.Net.Messaging.IChannel"/>
            <seealso cref="T:Tangosol.Net.Messaging.IReceiver"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnectionAcceptor"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnectionInitiator"/>
            <seealso cref="T:Tangosol.Net.Messaging.IMessage"/>
            <seealso cref="T:Tangosol.Net.Messaging.IProtocol"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Net.Messaging.IConnection.Close">
            <summary>
            Close the IConnection.
            </summary>
            <remarks>
            <p>
            Closing an IConnection also reclaims all resources held by the
            IConnection, so there is no need to close <b>IChannel</b> objects
            of a closed IConnection.</p>
            <p>
            If the IConnection is already closed, calling this method has no
            effect.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Messaging.IConnection.OpenChannel(Tangosol.Net.Messaging.IProtocol,System.String,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)">
            <summary>
            Create an <b>IChannel</b> using a specific <b>IProtocol</b>
            through this IConnection to a named <b>IReceiver</b> on the other
            end of the IConnection, optionally providing an <b>IPrincipal</b>
            to indicate the identity that will be utilizing the
            <b>IChannel</b>, and optionally providing an <b>IReceiver</b> that
            will process unsolicited <b>IMessage</b> objects on this end of
            the <b>IChannel</b>.
            </summary>
            <remarks>
            Conceptually, this is how an <b>IChannel</b> is established to an
            existing named "service" (e.g. an <b>IReceiver</b>) on the peer;
            note that either peer can register named services and either peer
            can use this method to find a named service on its peer.
            </remarks>
            <param name="protocol">
            The <b>IProtocol</b> that will be used to communicate through the
            <b>IChannel</b>; the <b>IProtocol</b> is used to verify that the
            <b>IReceiver</b> on the peer with the specified name is capable
            of communicating using that <b>IProtocol</b>.
            </param>
            <param name="name">
            The name that the <b>IReceiver</b> was registered with, on the
            other end of this IConnection; an <b>IReceiver</b> with the
            specified name must have been registered with the peer's
            <b>IConnectionManager</b> prior to calling this method (see
            <see cref="M:Tangosol.Net.Messaging.IConnectionManager.RegisterReceiver(Tangosol.Net.Messaging.IReceiver)"/>).
            </param>
            <param name="receiver">
            An optional <b>IReceiver</b> to associate with this
            <b>IChannel</b> that will process any unsolicited <b>IMessage</b>
            objects sent back through the <b>IChannel</b> by the peer.
            </param>
            <param name="principal">
            An optional <b>IPrincipal</b> to associate with this
            <b>IChannel</b>; if specified, any operation performed upon
            receipt of an <b>IMessage</b> sent using the returned
            <b>IChannel</b> will be done on behalf of the specified
            <b>IPrincipal</b>.
            </param>
            <returns>
            A new <b>IChannel</b> object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IProtocol</b> has not been registered with
            the underlying <b>IConnectionManager</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If an <b>IReceiver</b> with the given name has not been registered
            with the peer's <b>IConnectionManager</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IReceiver</b> does not use the same
            <b>IProtocol</b> as the one registered on the peer.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IReceiver</b> does not use the specified
            <b>IProtocol</b>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the IConnection is not open.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.IConnection.CreateChannel(Tangosol.Net.Messaging.IProtocol,Tangosol.Net.Messaging.IReceiver)">
            <summary>
            Create a back-Channel to expose another service to the peer.
            </summary>
            <remarks>
            <p>
            This method is particularly useful for building a Response
            Message to send back a new <b>IChannel</b> that can be used by
            the peer. In practice, this means that when a call to a stub is
            made, it can easily return a new stub that has its own
            <b>IChannel</b>; for example, a stub representing one service can
            return a stub representing a different service.</p>
            <p>
            The new <b>IChannel</b> cannot be used until the returned
            <b>Uri</b> is
            <see cref="M:Tangosol.Net.Messaging.IConnection.AcceptChannel(System.Uri,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/> accepted by the peer.</p>
            </remarks>
            <param name="protocol">
            The <b>IProtocol</b> that will be used to communicate through the
            new <b>IChannel</b>.
            </param>
            <param name="receiver">
            An optional <b>IReceiver</b> to associate with the new
            <b>IChannel</b> that will process any unsolicited <b>IMessage</b>
            objects sent back through the <b>IChannel</b> by the peer.
            </param>
            <returns>
            A <b>Uri</b> that represents the new <b>IChannel</b> object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IProtocol</b> has not been registered with
            the underlying <b>IConnectionManager</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IReceiver</b> does not use the specified
            <b>IProtocol</b>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the IConnection is not open.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.IConnection.AcceptChannel(System.Uri,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.IConnection.AcceptChannel(System.Uri,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)">
            <summary>
            Accept a newly created back-Channel that was spawned by the peer.
            </summary>
            <remarks>
            Before a spawned <b>IChannel</b> can be used to send and receive
            <b>IMessage</b> objects, its <b>Uri</b> must be accepted by the
            peer.
            </remarks>
            <param name="uri">
            The <b>Uri</b> of an <b>IChannel</b> that was spawned by the peer.
            </param>
            <param name="receiver">
            An optional <b>IReceiver</b> to associate with the new
            <b>IChannel</b> that will process any unsolicited <b>IMessage</b>
            objects sent back through the <b>IChannel</b> by the peer.
            </param>
            <param name="principal">
            An optional <b>IPrincipal</b> to associate with the new
            <b>IChannel</b>; if specified, any operation performed upon
            receipt of an <b>IMessage</b> sent using the accepted
            <b>IChannel</b> will be done on behalf of the specified
            <b>IPrincipal</b>.
            </param>
            <returns>
            The newly accepted <b>IChannel</b>.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IReceiver</b> does not use the same
            <b>IProtocol</b> as the spawned <b>IChannel</b> (as described by
            its <b>Uri</b>).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the IConnection is not open.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.IConnection.CreateChannel(Tangosol.Net.Messaging.IProtocol,Tangosol.Net.Messaging.IReceiver)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.IConnection.GetChannel(System.Int32)">
            <summary>
            Return the open <b>IChannel</b> object with the given identifier.
            </summary>
            <remarks>
            If an <b>IChannel</b> object with the specified identifier does
            not exist or has been closed, <c>null</c> is returned.
            </remarks>
            <param name="id">
            The unique <b>IChannel</b> identifier.
            </param>
            <returns>
            The open <b>IChannel</b> object with the specified identifer or
            <c>null</c> if no such open <b>IChannel</b> exists.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.IConnection.GetChannels">
            <summary>
            Return the collection of open <b>IChannel</b> objects through
            this IConnection.
            </summary>
            <remarks>
            The client should assume that the returned collection is an
            immutable snapshot of the actual collection of open
            <b>IChannel</b> objects maintained by this IConnection.
            </remarks>
            <returns>
            The collection of open <b>IChannel</b> objects.
            </returns>
        </member>
        <member name="P:Tangosol.Net.Messaging.IConnection.ConnectionManager">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> that created or accepted
            this IConnection.
            </summary>
            <value>
            The <b>IConnectionManager</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IConnection.Id">
            <summary>
            The unique identifier of this IConnection.
            </summary>
            <value>
            The unique identifier of this IConnection or <c>null</c> if the
            IConnection has not been accepted.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IConnection.PeerId">
            <summary>
            The unique identifier of the peer to which this IConnection
            object is connected.
            </summary>
            <value>
            The unique identifier of the peer or <c>null</c> if the
            IConnection has not been accepted.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IConnection.IsOpen">
            <summary>
            Return <b>true</b> if this IConnection is open.
            </summary>
            <remarks>
            An IConnection can only be used to exchange data when it is open.
            </remarks>
            <value>
            <b>true</b> if this IConnection is open.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.IConnectionAcceptor">
            <summary>
            An IConnectionAcceptor represents an <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/>
            running on a server, and as a server, it is responsible for accepting
            a connection request initiated by a
            <see cref="T:Tangosol.Net.Messaging.IConnectionInitiator"/>.
            </summary>
            <remarks>
            <p>
            Before a connection can be accepted, the IConnectionAcceptor must be
            started using the <see cref="M:Tangosol.Util.IControllable.Start"/> method. Calling
            this method allocates any necessary resources and transitions the
            IConnectionAcceptor to the running state. The IConnectionAcceptor
            will then accept new connections, which are represented by
            <see cref="T:Tangosol.Net.Messaging.IConnection"/> object. The IConnectionAcceptor maintains
            references to accepted <b>IConnection</b> objects until they are
            closed or the IConnectionAcceptor is
            <see cref="M:Tangosol.Util.IControllable.Shutdown"/> or
            <see cref="M:Tangosol.Util.IControllable.Stop"/> terminated. Terminating a
            IConnectionAcceptor also closes all accepted <b>IConnection</b>
            objects.</p>
            <p>
            All IConnectionAcceptor implementations must be fully thread-safe.
            </p>
            </remarks>
            <author>Jason Howes  2006.03.23</author>
            <author>Goran Milosavljevic  2006.08.15</author>
            <seealso cref="T:Tangosol.Net.Messaging.IConnection"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnectionInitiator"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnectionManager"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="T:Tangosol.Net.Messaging.IConnectionManager">
            <summary>
            The IConnectionManager is the base SPI (Service Provider Interface)
            for both <see cref="T:Tangosol.Net.Messaging.IConnectionAcceptor"/> and
            <see cref="T:Tangosol.Net.Messaging.IConnectionInitiator"/> implementations.
            </summary>
            <remarks>
            <p>
            Implementations of this interface use a provider-specific mechanism
            to establish a bi-directional communication channel between two
            endpoints, represented by an <see cref="T:Tangosol.Net.Messaging.IConnection"/>. Some
            implementations restrict data transfer between endpoints within a
            single JVM, whereas others enable two processes to exchange data.
            Advanced implementations allow communication between processes on
            different machines, for example using TCP sockets or JMS.</p>
            <p>
            Before an <b>IConnection</b> can be established between a
            <b>IConnectionInitiator</b> (client) and <b>IConnectionAcceptor</b>
            (server), one or more <see cref="T:Tangosol.Net.Messaging.IProtocol"/> instances must be
            registered with the IConnectionManager on each. During
            <b>IConnection</b> establishment, the <b>IConnectionInitiator</b>
            sends information about each registered <b>IProtocol</b>. A
            compatable set of <b>IProtocol</b> instances (or superset) must
            be registered with the acceptor's IConnectionManager in order for the
            <b>IConnection</b> to be established.</p>
            <p>
            Establishing an <b>IConnection</b> is assumed to be a heavyweight
            operation that may allocate significant resources within and outside
            the JVM. For example, a TCP-based implementation of this interface
            may implement an <b>IConnection</b> using a persistent Socket
            connection with a remote server. However, once established,
            successive uses of the same <b>IConnection</b> should be relatively
            lightweight. In other words, an <b>IConnection</b> object, once
            opened, should appear to be persistent from the perspective of the
            user until closed. Additionally, underlying transports used by
            implementations must be both reliable and ordered.</p>
            <p>
            Once an <b>IConnection</b> is established, either client or server may
            open an <see cref="T:Tangosol.Net.Messaging.IChannel"/> to an <see cref="T:Tangosol.Net.Messaging.IReceiver"/> registered
            by its peer and use it to send and receive <see cref="T:Tangosol.Net.Messaging.IMessage"/>
            objects to/from the peer.</p>
            </remarks>
            <author>Jason Howes  2006.03.30</author>
            <author>Goran Milosavljevic  2006.08.15</author>
            <seealso cref="T:Tangosol.Net.Messaging.IChannel"/>
            <seealso cref="T:Tangosol.Net.Messaging.IReceiver"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnection"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnectionAcceptor"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnectionInitiator"/>
            <seealso cref="T:Tangosol.Net.Messaging.IProtocol"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Net.Messaging.IConnectionManager.GetProtocol(System.String)">
            <summary>
            Gets an <b>IProtocol</b> that was registered with this
            IConnectionManager.
            </summary>
            <param name="name">
            The name of the registered <b>IProtocol</b>.
            </param>
            <returns>
            The registered <b>IProtocol</b> or <c>null</c> if a
            <b>IProtocol</b> with the given name is not registered with this
            IConnectionManager.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.IConnectionManager.RegisterProtocol(Tangosol.Net.Messaging.IProtocol)">
            <summary>
            Register an <b>IProtocol</b> with this IConnectionManager.
            </summary>
            <remarks>
            This method may only be called before the IConnectionManager
            is started.
            </remarks>
            <param name="protocol">
            The new <b>IProtocol</b> to register; if the <b>IProtocol</b> has
            already been registered, this method has no effect.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If the IConnectionManager is running.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.IConnectionManager.GetReceiver(System.String)">
            <summary>
            Return an <b>IReceiver</b> that was registered with this
            IConnectionManager.
            </summary>
            <remarks>
            The client should assume that the returned map is an immutable
            snapshot of the actual map of <b>IReceiver</b> objects maintained
            by this IConnectionManager.
            </remarks>
            <param name="name">
            The name of the registered <b>IReceiver</b>.
            </param>
            <returns>
            The registered <b>IReceiver</b> or <c>null</c> if a
            <b>IReceiver</b> with the given name is not registered with this
            IConnectionManager.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.IConnectionManager.RegisterReceiver(Tangosol.Net.Messaging.IReceiver)">
            <summary>
            Register an <b>IReceiver</b> that will received unsolicited
            <b>IMessage</b> objects sent through <b>IChannel</b> objects
            associated with the <b>IReceiver</b> name and <b>IProtocol</b>.
            </summary>
            <remarks>
            This method may only be called before the IConnectionManager is
            started.
            </remarks>
            <param name="receiver">
            The new <b>IReceiver</b> to register; if the <b>IReceiver</b> has
            already been registered, this method has no effect.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If the IConnectionManager is running.
            </exception>
        </member>
        <member name="P:Tangosol.Net.Messaging.IConnectionManager.OperationalContext">
            <summary>
            The <see cref="T:Tangosol.Net.IOperationalContext"/> used by this
            <b>IConnectionManager</b>.
            </summary>
            <value>
            The <see cref="T:Tangosol.Net.IOperationalContext"/> used by this
            <b>IConnectionManager</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IConnectionManager.Protocols">
            <summary>
            Gets a map of <b>IProtocol</b> names to <b>IProtocol</b> objects.
            </summary>
            <remarks>
            The client should assume that the returned map is an immutable
            snapshot of the actual map of <b>IProtocol</b> objects maintained
            by this IConnectionManager.
            </remarks>
            <value>
            A map of all registered <b>IProtocol</b> objects, keyed by the
            <b>IProtocol</b> name.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IConnectionManager.Receivers">
            <summary>
            Gets a map of <b>IReceiver</b> names to <b>IReceiver</b> objects.
            </summary>
            <remarks>
            The client should assume that the returned map is an immutable
            snapshot of the actual map of <b>IReceiver</b> objects maintained
            by this IConnectionManager.
            </remarks>
            <value>
            A map of all registered <b>IReceiver</b> objects, keyed by the
            <b>IReceiver</b> name.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.IConnectionManager.Codec">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.ICodec"/> that will be used to encode and decode
            <b>IMessages</b> sent through <b>IConnections</b> managed by this
            IConnectionManager.
            </summary>
            <value>
            The <see cref="T:Tangosol.Net.Messaging.ICodec"/> object.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If the IConnectionManager is running.
            </exception>
        </member>
        <member name="E:Tangosol.Net.Messaging.IConnectionManager.ConnectionOpened">
            <summary>
            Invoked after an <see cref="T:Tangosol.Net.Messaging.IConnection"/> has been successfully
            established.
            </summary>
        </member>
        <member name="E:Tangosol.Net.Messaging.IConnectionManager.ConnectionClosed">
            <summary>
            Invoked after an <see cref="T:Tangosol.Net.Messaging.IConnection"/> is closed.
            </summary>
            <remarks>s
            After this event is raised, any attempt to use the
            <b>IConnection</b> (or any <b>IChannel</b> created by the
            <b>IConnection</b>) may result in an exception.
            </remarks>
        </member>
        <member name="E:Tangosol.Net.Messaging.IConnectionManager.ConnectionError">
            <summary>
            Invoked when the <b>IConnectionManager</b> detects that the
            underlying communication channel has been closed by the peer,
            severed, or become unusable.
            </summary>
            <remarks>
            After this event is raised, any attempt to use the
            <b>IConnection</b> (or any <b>IChannel</b> created by the
            <b>IConnection</b>) may result in an exception.
            </remarks>
        </member>
        <member name="P:Tangosol.Net.Messaging.IConnectionAcceptor.Connections">
            <summary>
            The collection of open <b>IConnection</b> objects accepted by
            this IConnectionAcceptor.
            </summary>
            <remarks>
            The client should assume that the returned collection is an
            immutable snapshot of the actual set of <b>IConnection</b>
            objects maintained by this IConnectionAcceptor.
            </remarks>
            <value>
            The collection of open <b>IConnection</b> objects.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.IConnectionInitiator">
            <summary>
            An IConnectionInitiator represents an <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/>
            running on a client, and as a client, it is responsible for
            initiating the connection process.
            </summary>
            <remarks>
            <p>
            Before a connection can be established, the IConnectionInitiator must
            be started using the <see cref="M:Tangosol.Util.IControllable.Start"/> method.
            Calling this method allocates any necessary resources and transitions
            the IConnectionInitiator to the running state. Additionally, the
            server endpoint must have initialized and started a
            <see cref="T:Tangosol.Net.Messaging.IConnectionAcceptor"/>. The IConnectionInitiator can then
            be used to establish a connection to the server's
            <b>IConnectionAcceptor</b>, which is represented by a single
            <see cref="T:Tangosol.Net.Messaging.IConnection"/> object, obtained by calling
            <see cref="M:Tangosol.Net.Messaging.IConnectionInitiator.EnsureConnection"/>. The IConnectionInitiator maintains
            a reference to the <b>IConnection</b> object until it is closed or
            the IConnectionInitiator is <see cref="M:Tangosol.Util.IControllable.Shutdown"/> or
            <see cref="M:Tangosol.Util.IControllable.Stop"/> terminated.</p>
            <p>
            All IConnectionInitiator implementations must be fully thread-safe.
            </p>
            </remarks>
            <author>Jason Howes  2006.03.2</author>
            <author>Goran Milosavljevic  2006.08.15</author>
            <seealso cref="T:Tangosol.Net.Messaging.IConnection"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnectionAcceptor"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnectionManager"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Net.Messaging.IConnectionInitiator.EnsureConnection">
            <summary>
            Create a new or return the existing <b>IConnection</b> object.
            </summary>
            <remarks>
            <p>
            An <b>IConnection</b> object has a one-way state transition from
            open to closed; this method will always return an open
            <b>IConnection</b> object. If the previously existing
            <b>IConnection</b> object has transitioned to a closed state,
            this method will return a new <b>IConnectin</b> object in the
            open state.</p>
            </remarks>
            <returns>
            An <b>IConnection</b> object representing a client's connection to
            a server.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the IConnectionInitiator is not running.
            </exception>
        </member>
        <member name="T:Tangosol.Net.Messaging.ConnectionEventHandler">
            <summary>
            Represents the method that will handle connection event.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> that raised an event.
            </param>
            <param name="args">
            Event arguments.
            </param>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceFactory">
            <summary>
            <see cref="T:Tangosol.Net.Messaging.Impl.MessageFactory"/> implementation for version 1 of the
            CacheService Protocol.
            </summary>
            <remarks>
            <p>
            The type identifiers of the <see cref="T:Tangosol.Net.Messaging.Impl.Message"/> types instantiated
            by this <b>MessageFactory</b> are organized as follows:</p>
            (0) <see cref="T:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceResponse"/>
            (1) <see cref="T:Tangosol.Net.Messaging.Impl.CacheService.EnsureCacheRequest"/>
            (2) <see cref="T:Tangosol.Net.Messaging.Impl.CacheService.DestroyCacheRequest"/>
            </remarks>
            <author>Ana Cikic  2006.08.25</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.MessageFactory"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceProtocol"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceFactory.#ctor">
            <summary>
            Initialize an array of <see cref="T:Tangosol.Net.Messaging.Impl.Message"/> types that can be
            created by this factory.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceFactory.messagingTypes">
            <summary>
            An array of Message types that can be created by this factory.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceProtocol">
            <summary>
            The CacheService Protocol is used to obtain, release, and destroy
            remote references to a NamedCache running within a Coherence cluster.
            </summary>
            <author>Ivan Cikic  2006.08.25</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Protocol"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceProtocol.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceProtocol.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceProtocol.InstantiateMessageFactory(System.Int32)">
            <summary>
            Instantiate a new <see cref="T:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceFactory"/> for the given
            version of this CacheServiceProtocol.
            </summary>
            <param name="version">
            The version of the CacheServiceProtocol that the returned
            <b>CacheServiceFactory</b> will use.
            </param>
            <returns>
            A new <b>CacheServiceFactory</b> for the given version of this
            CacheServiceProtocol.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceProtocol.m_instance">
            <summary>
            The singleton CacheServiceProtocol instance.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceProtocol.Instance">
            <summary>
            The singleton CacheServiceProtocol instance.
            </summary>
            <value>
            The singleton CacheServiceProtocol instance.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceRequest">
            <summary>
            Base class for all CacheService Protocol <see cref="T:Tangosol.Net.Messaging.Impl.Request"/>
            messages.
            </summary>
            <author>Ana Cikic  2006.08.25</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Request"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceProtocol"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Message.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Message.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceRequest.m_cacheName">
            <summary>
            The name of the target NamedCache.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceRequest.CacheName">
            <summary>
            The name of the target NamedCache.
            </summary>
            <value>
            The name of the target NamedCache.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceResponse">
            <summary>
            Generic <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> used for all CacheService Protocol
            Responses.
            </summary>
            <author>Ana Cikic  2006.08.25</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Response"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceResponse.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceResponse.Run">
            <summary>
            Execute the action specific to the <see cref="T:Tangosol.Net.Messaging.Impl.Message"/>
            implementation.
            </summary>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Message.Run"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceResponse.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.CacheService.DestroyCacheRequest">
            <summary>
            The DestroyCacheRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceRequest"/> sent
            to destroy a NamedCache running within a Coherence cluster.
            </summary>
            <author>Ivan Cikic  2006.08.28</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceRequest"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.CacheService.DestroyCacheRequest.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.CacheService.DestroyCacheRequest.TypeId">
            <summary>
            Return the type identifier for this <b>Message</b>.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.CacheService.EnsureCacheRequest">
            <summary>
            The EnsureCacheRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceRequest"/> sent to
            obtain a remote reference (i.e. a <see cref="T:Tangosol.Net.Messaging.Impl.Channel"/>) to a
            NamedCache running within a Coherence cluster.
            </summary>
            <author>Ivan Cikic  2006.08.28</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.CacheService.CacheServiceRequest"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.CacheService.EnsureCacheRequest.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.CacheService.EnsureCacheRequest.TypeId">
            <summary>
            Return the type identifier for this <b>Message</b>.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.Channel">
            <summary>
            <see cref="T:Tangosol.Net.Messaging.IChannel"/> implementation.
            </summary>
            <remarks>
            A Channel is a communication construct that allows one or more
            threads to send and receive <see cref="T:Tangosol.Net.Messaging.IMessage"/> objects via a
            <see cref="T:Tangosol.Net.Messaging.IConnection"/>.
            </remarks>
            <author>Goran Milosavljevic  2006.08.21</author>
            <seealso cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer"/>
            <seealso cref="T:Tangosol.IO.Pof.IPofContext"/>
            <seealso cref="T:Tangosol.IO.Pof.IPofSerializer"/>
            <seealso cref="T:Tangosol.Net.Messaging.IChannel"/>
            <seealso cref="T:Tangosol.Net.Messaging.IMessage"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnection"/>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.CalculateRequestTimeout(Tangosol.Net.Messaging.IRequest)">
            <summary>
            Calculate the default timeout in milliseconds for the given
            <see cref="T:Tangosol.Net.Messaging.IRequest"/>.
            </summary>
            <param name="request">
            The <b>IRequest</b>.
            </param>
            <returns>
            The default timeout for the given <b>IRequest</b> in
            milliseconds.
            </returns>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Channel.RegisterRequest(Tangosol.Net.Messaging.IRequest)"/>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Channel.Request(Tangosol.Net.Messaging.IRequest)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Close">
            <summary>
            Close the Channel and reclaim all resources held by the
            Channel.
            </summary>
            <remarks>
            <p>
            When this method is invoked, it will not return until
            <b>IMessage</b> processing has been shut down in an orderly
            fashion. This means that the <see cref="T:Tangosol.Net.Messaging.IReceiver"/> object
            associated with this Channel (if any) have finished processing
            and that all pending requests are completed or canceled. If the
            <b>IReceiver</b> is processing an <b>IMessage</b> at the time when
            close is invoked, all the facilities of the Channel must remain
            available until it finishes.</p>
            <p>
            If the Channel is not open, calling this method has no effect.
            </p>
            </remarks>
            <seealso cref="M:Tangosol.Net.Messaging.IChannel.Close"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Close(System.Boolean,System.Exception)">
            <summary>
            Close the <b>Channel</b>.
            </summary>
            <param name="notify">
            If <b>true</b>, the peer should be notified when the
            Channel is closed.
            </param>
            <param name="e">
            The optional reason why the Channel is being closed.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.CloseInternal(System.Boolean,System.Exception,System.Int32)">
            <summary>
            The <see cref="M:Tangosol.Net.Messaging.Impl.Channel.Close"/> implementation method. This method is
            called on the service thread.
            </summary>
            <param name="notify">
            if <b>true</b>, notify the peer that the <b>IChannel</b> is being
            closed.
            </param>
            <param name="e">
            The optional reason why the <b>IChannel</b> is being closed.
            </param>
            <param name="millis">
            The number of milliseconds to wait for the <b>IChannel</b> to
            close; pass 0 to perform a non-blocking close or -1 to wait
            forever.
            </param>
            <returns>
            <b>true</b> if the invocation of this method closed the
            <b>IChannel</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GateClose(System.Int32)">
            <summary>
            Attempt to close the Channel <b>Gate</b>.
            </summary>
            <param name="millis">
            The number of milliseconds to wait for the <b>Gate</b> to
            close; pass 0 to perform a non-blocking close or -1 to wait
            forever.
            </param>
            <returns>
            <b>true</b> if the Channel <b>Gate</b> was closed;
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GateOpen">
            <summary>
            Open the <b>IChannel</b> <b>Gate</b>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.CreateMessage(System.Int32)">
            <summary>
            Create a new <b>IMessage</b> of the specified type using this
            Channel's <b>MessageFactory</b>.
            </summary>
            <param name="type">
            The type identifier of the <b>IMessage</b> to create.
            </param>
            <returns>
            A new <b>IMessage</b> of the specified type.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GenerateRequestId">
            <summary>
            Generate and return a new unique request identifier.
            </summary>
            <returns>
            The new unique request identifier.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GetAttribute(System.String)">
            <summary>
            Return the object bound with the specified name to this
            Channel, or <c>null</c> if no object is bound with that
            name.
            </summary>
            <param name="name">
            The name with which the object was bound.
            </param>
            <returns>
            The object bound with the given name or <c>null</c> if no such
            binding exists.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.SetAttribute(System.String,System.Object)">
            <summary>
            Bind an object to the specified name in this Channel.
            </summary>
            <remarks>
            <p>
            If an object is already bound to the specified name, it is
            replaced with the given object.</p>
            <p>
            Channel attributes are local to the binding peer's Channel. In
            other words, attributes bound to this IChannel object will not be
            bound to the peer's Channel object.</p>
            </remarks>
            <param name="name">
            The name with which to bind the object
            </param>
            <param name="value">
            The object to bind.
            </param>
            <returns>
            The object that the newly bound object replaced (if
            any).
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If argument name passed is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GetAttributes">
            <summary>
            Return the map of Channel attributes.
            </summary>
            <remarks>
            <p>
            The keys of the map are the names with which the corresponding
            values have been bound to the Channel.</p>
            <p>
            The client should assume that the returned map is an immutable
            snapshot of the actual map of attribute objects maintained by
            this Channel.</p>
            </remarks>
            <returns>
            A map of attributes bound to this Channel.
            </returns>
            <seealso cref="M:Tangosol.Net.Messaging.IChannel.GetAttributes"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.RemoveAttribute(System.String)">
            <summary>
            Unbind the object that was bound with the specified name to this
            Channel.
            </summary>
            <param name="name">
            The name with which the object was bound.
            </param>
            <returns>
            The object that was unbound.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Post(Tangosol.Net.Messaging.IMessage)">
            <summary>
            Asynchronous <b>IMessage</b> send implementation.
            </summary>
            <param name="message">
            The <b>IMessage</b> to send asynchronously.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.AssertOpen">
            <summary>
            Throws <b>ConnectionException</b> if the Channel is closed or
            closing.
            </summary>
            <exception cref="T:Tangosol.Net.Messaging.ConnectionException">
            Throws <b>ConnectionException</b> if the Channel is closed or
            closing.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GateEnter">
            <summary>
            Enter the <b>Connection</b> and Channel <b>Gate</b>
            (in that order).
            </summary>
            <exception cref="T:Tangosol.Net.Messaging.ConnectionException">
            If the <b>Connection</b> or Channel is closing or closed.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GateExit">
            <summary>
            Exit the Channel and <b>Connection</b> <b>Gate</b> (in that
            order).
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Open">
            <summary>
            Opens the Channel and process.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.OpenInternal">
            <summary>
            The <see cref="M:Tangosol.Net.Messaging.Impl.Channel.Open"/> implementation method.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Execute(Tangosol.Net.Messaging.IMessage)">
            <summary>
            Execute the given <b>IMessage</b>.
            </summary>
            <param name="message">
            The <b>IMessage</b> to execute.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Receive(Tangosol.Net.Messaging.IMessage)">
            <summary>
            Called when a <b>IMessage</b> is received via this
            Channel. This method is called on the service thread
            ("Channel0" Messages) or on a daemon thread.
            </summary>
            <param name="message">
            Received <b>IMessage</b>.
            </param>
            <seealso cref="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Send(Tangosol.Net.Messaging.IMessage)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.OnRequestCompleted(Tangosol.Net.Messaging.IStatus)">
            <summary>
            Called after a <b>Request</b> has completed either successfully
            or unsuccessfully.
            </summary>
            <param name="status">
            The <b>IStatus</b> representing the asynchronous <b>Request</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.UnregisterRequest(Tangosol.Net.Messaging.IStatus)">
            <summary>
            Unregister the given <b>RequestStatus</b> from the
            <see cref="P:Tangosol.Net.Messaging.Impl.Channel.RequestStatusArray"/>.
            </summary>
            <param name="status">
            The <b>RequestStatus</b> to unregister; must not be <c>null</c>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Send(Tangosol.Net.Messaging.IMessage)">
            <summary>
            Asynchronously send an <b>IMessage</b> to the peer endpoint
            through this IChannel over the underlying <b>IConnection</b>.
            </summary>
            <param name="message">
            The <b>IMessage</b> to send.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <b>IMessage</b> passed is <c>null</c>.
            </exception>
            <exception cref="T:Tangosol.Net.Messaging.ConnectionException">
            Thrown if Channel is closed.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.IChannel.Send(Tangosol.Net.Messaging.IMessage)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Send(Tangosol.Net.Messaging.IRequest)">
            <summary>
            Asynchronously send an <b>IRequest</b> to the peer endpoint
            through this Channel over the underlying <b>IConnection</b>.
            </summary>
            <param name="request">
            The <b>IRequest</b> to send.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.Messaging.IStatus"/> object representing the asynchronous
            <b>IRequest</b>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <b>IRequest</b> passed is <c>null</c>.
            </exception>
            <exception cref="T:Tangosol.Net.Messaging.ConnectionException">
            Thrown if Channel is closed.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.RegisterRequest(Tangosol.Net.Messaging.IRequest)">
            <summary>
            Create a <b>RequestStatus</b> for the given <b>IRequest</b> and
            register the <b>RequestStatus</b> in the
            <see cref="P:Tangosol.Net.Messaging.Impl.Channel.RequestStatusArray"/>.
            </summary>
            <param name="request">
            The <b>IRequest</b> to register; must not be <c>null</c>.
            </param>
            <returns>
            The new <b>RequestStatus</b> that represents the asynchronous
            <b>Request</b>.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the <b>IRequest</b> has already been registered.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Request(Tangosol.Net.Messaging.IRequest)">
            <summary>
            Synchronously send an <b>IRequest</b> to the peer endpoint through
            this Channel over the underlying <b>IConnection</b> and return
            the result of processing the <b>IRequest</b>.
            </summary>
            <param name="request">
            The <b>IRequest</b> to send.
            </param>
            <returns>
            The result sent by the peer.
            </returns>
            <seealso cref="M:Tangosol.Net.Messaging.IChannel.Request(Tangosol.Net.Messaging.IRequest)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Request(Tangosol.Net.Messaging.IRequest,System.Int64)">
            <summary>
            Synchronously send an <b>IRequest</b> to the peer endpoint through
            this Channel over the underlying <b>IConnection</b> and return
            the result of processing the <b>IRequest</b>.
            </summary>
            <param name="request">
            The <b>IRequest</b> to send.
            </param>
            <param name="millis">
            The number of milliseconds to wait for the result; pass zero to
            block the calling thread indefinitely.
            </param>
            <returns>
            The result sent by the peer.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <b>IRequest</b> argument is <c>null</c>.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.IChannel.Request(Tangosol.Net.Messaging.IRequest,System.Int64)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GetRequest(System.Int64)">
            <summary>
            Return the outstanding <b>IRequest</b> with the given identifier
            or <c>null</c> if no such <b>IRequest</b> exists.
            </summary>
            <remarks>
            This method can be used during <b>IResponse</b> execution to
            correlate the <b>IResponse</b> with the <b>IRequest</b> for which
            the <b>IResponse</b> was sent.
            </remarks>
            <param name="id">
            The unique identifer of the outstanding <b>IRequest</b>.
            </param>
            <returns>
            The outstanding <b>IRequest</b> with the given identifer or
            <c>null</c> if no such <b>IRequest</b> exists.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)">
            <summary>
            Serialize a user type instance to a POF stream by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for writing out an object of a
            user type:
            <ol>
            <li>If the object is evolvable, the implementation must set the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.</li>
            <li>The implementation may write any combination of the
            properties of the user type by using the "write" methods of the
            <b>IPofWriter</b>, but it must do so in the order of the property
            indexes.</li>
            <li>After all desired properties of the user type have been
            written, the implementation must terminate the writing of the
            user type by calling <see cref="M:Tangosol.IO.Pof.IPofWriter.WriteRemainder(Tangosol.Util.Binary)"/>.
            </li>
            </ol>
            </remarks>
            <param name="writer">
            The <see cref="T:Tangosol.IO.Pof.IPofWriter"/> with which to write the object's
            state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.IO.Pof.IPofSerializer.Serialize(Tangosol.IO.Pof.IPofWriter,System.Object)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Deserialize(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize a user type instance from a POF stream by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            An implementation of <b>IPofSerializer</b> is required to follow
            the following steps in sequence for reading in an object of a
            user type:
            <ol>
            <li>If the object is evolvable, the implementation must get the
            version by calling <see cref="P:Tangosol.IO.Pof.IPofWriter.VersionId"/>.</li>
            <li>The implementation may read any combination of the
            properties of the user type by using "read" methods of the
            <b>IPofReader</b>, but it must do so in the order of the property
            indexes.</li>
            <li>After all desired properties of the user type have been read,
            the implementation must terminate the reading of the user type by
            calling <see cref="M:Tangosol.IO.Pof.IPofReader.ReadRemainder"/>.</li>
            </ol>
            </remarks>
            <param name="reader">
            The <see cref="T:Tangosol.IO.Pof.IPofReader"/> with which to read the object's
            state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.IO.Pof.IPofSerializer.Deserialize(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GetPofSerializer(System.Int32)">
            <summary>
            Return an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> that can be used to
            serialize and deserialize an object of the specified user type to
            and from a POF stream.
            </summary>
            <param name="typeId">
            The type identifier of the user type that can be serialized and
            deserialized using the returned <b>IPofSerializer</b>; must be
            non-negative.
            </param>
            <returns>
            An <b>IPofSerializer</b> for the specified user type.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GetUserTypeIdentifier(System.Object)">
            <summary>
            Determine the user type identifier associated with the given
            object.
            </summary>
            <param name="o">
            An instance of a user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given object is unknown to
            this <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GetUserTypeIdentifier(System.Type)">
            <summary>
            Determine the user type identifier associated with the given
            type.
            </summary>
            <param name="type">
            A user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given type is unknown to
            this <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GetUserTypeIdentifier(System.String)">
            <summary>
            Determine the user type identifier associated with the given type
            name.
            </summary>
            <param name="typeName">
            The name of a user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type name.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given type name is unknown
            to this <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GetTypeName(System.Int32)">
            <summary>
            Determine the name of the type associated with a user type
            identifier.
            </summary>
            <param name="typeId">
            The user type identifier; must be non-negative.
            </param>
            <returns>
            The name of the type associated with the specified user type
            identifier.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.GetType(System.Int32)">
            <summary>
            Determine the type associated with the given user type
            identifier.
            </summary>
            <param name="typeId">
            The user type identifier; must be non-negative.
            </param>
            <returns>
            The type associated with the specified user type identifier.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.IsUserType(System.Object)">
            <summary>
            Determine if the given object is of a user type known to this
            <b>IPofContext</b>.
            </summary>
            <param name="o">
            The object to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the specified object is of a valid user type.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.IsUserType(System.Type)">
            <summary>
            Determine if the given type is a user type known to this
            <b>IPofContext</b>.
            </summary>
            <param name="type">
            The type to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the specified type is a valid user type.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.IsUserType(System.String)">
            <summary>
            Determine if the type with the given name is a user type known to
            this <b>IPofContext</b>.
            </summary>
            <param name="typeName">
            The name of the type to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the type with the specified name is a valid user
            type.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Serialize(Tangosol.IO.DataWriter,System.Object)">
            <summary>
            Serialize an object to a stream by writing its state using the
            specified <see cref="T:Tangosol.IO.DataWriter"/> object.
            </summary>
            <param name="writer">
            The <b>DataWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.Deserialize(Tangosol.IO.DataReader)">
            <summary>
            Deserialize an object from a stream by reading its state using
            the specified <see cref="T:Tangosol.IO.DataReader"/> object.
            </summary>
            <param name="reader">
            The <b>DataReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.m_closeNotify">
            <summary>
            Peer notification flag used when the Channel is closed upon
            exiting the Gate (see <see cref="P:Tangosol.Net.Messaging.Impl.Channel.CloseOnExit"/> property).
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.m_closeOnExit">
            <summary>
            If <b>true</b>, the Thread that is currently executing within the
            Channel should close it immedately upon exiting the Channel's
            Gate.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.m_requestId">
            <summary>
            A counter used to generate unique identifiers for Requests sent
            through this Channel.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.m_closeException">
            <summary>
            The Throwable to pass to the <see cref="M:Tangosol.Net.Messaging.Impl.Channel.Close"/> method when
            the Channel is closed upon exiting the Gate (see
            <see cref="P:Tangosol.Net.Messaging.Impl.Channel.CloseOnExit"/> property).
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.m_connection">
            <summary>
            The <b>IConnection</b> that created this Channel.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.m_id">
            <summary>
            The unique identifier for this Channel.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.m_messageFactory">
            <summary>
            The <b>IMessageFactory</b> used to create <b>IMessage</b> objects
            that may be sent through this Channel.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.m_isOpen">
            <summary>
            <b>true</b> if the Channel is open; <b>false</b> otherwise.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.m_receiver">
            <summary>
            The optional <b>IReceiver</b> that processes unsolicited
            <b>IMessage</b> objects sent through this Channel.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.m_serializer">
            <summary>
            The <b>ISerializer</b> used to serialize and deserialize payload
            objects carried by Messages sent through this Channel.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.m_principal">
            <summary>
            The optional <b>IPrincipal</b> associated with the Channel.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.m_gate">
            <summary>
            A Gate used to prevent concurrent use of this Channel while
            it is being opened and closed.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.Connection">
            <summary>
            The <b>IConnection</b> that created this Channel.
            </summary>
            <value>
            The <b>IConnection</b> that created this Channel.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.IChannel.Connection"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.ConnectionManager">
            <summary>
            The <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer"/> that created
            this <b>IChannel</b> or <c>null</c> if the <b>IChannel</b> has
            been closed.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.Id">
            <summary>
            The unique identifier for this Channel.
            </summary>
            <remarks>
            The returned identifier is only unique among Channel objects
            created from the same underlying <b>IConnection</b>. In other
            words, Channel objects created by different <b>IConnection</b>
            objects may have the same unique identifier, but Channel objects
            created by the same <b>IConnection</b> cannot.
            </remarks>
            <value>
            A unique integer identifier for this Channel.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.IChannel.Id"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.IsOpen">
            <summary>
            Return <b>true</b> if this Channel is open.
            </summary>
            <value>
            <b>true</b> if this Channel is open.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.IChannel.IsOpen"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.CloseOnExit">
            <summary>
            If <b>true</b>, the <b>Thread</b> that is currently executing
            within the Channel should close it immedately upon exiting the
            Channel's <b>Gate</b>.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.IsActiveThread">
            <summary>
            Return <b>true</b> if the calling thread is currently executing
            within the Channel's Gate.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.CloseNotify">
            <summary>
            Peer notification flag used when the Channel is closed
            upon exiting the <b>Gate</b> (<see cref="P:Tangosol.Net.Messaging.Impl.Channel.CloseOnExit"/>).
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.RequestId">
            <summary>
            A counter used to generate unique identifiers for <b>Requests</b>
            sent through this Channel.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.MessageFactory">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> used to create <b>IMessage</b>
            objects that may be sent through this Channel over the
            underlying <b>IConnection</b>.
            </summary>
            <value>
            The <b>IMessageFactory</b> for this Channel.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.IChannel.MessageFactory"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.Serializer">
            <summary>
            The <see cref="T:Tangosol.IO.ISerializer"/> used to serialize and deserialize
            payload objects carried by <b>IMessage</b> objects sent through
            this Channel.
            </summary>
            <value>
            The <b>ISerializer</b> for this Channel.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.IChannel.Serializer"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.Receiver">
            <summary>
            The optional <see cref="T:Tangosol.Net.Messaging.IReceiver"/> that processes unsolicited
            <b>IMessage</b> objects sent through this Channel over the
            underlying <b>IConnection</b>.
            </summary>
            <value>
            The <b>IReceiver</b> for this Channel or <c>null</c> if a
            <b>IReceiver</b> has not been associated with this
            Channel.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.IChannel.Receiver"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.Attributes">
            <summary>
            Gets or sets the map used to store Channel attributes.
            </summary>
            <value>
            A map with Channel attributes.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.RequestStatusArray">
            <summary>
            An <see cref="T:Tangosol.Util.ILongArray"/> with
            <see cref="T:Tangosol.Net.Messaging.Impl.Request.RequestStatus"/> objects, keyed by
            <b>Request</b> identifier.
            </summary>
            <value>
            An <b>ILongArray</b> with <b>RequestStatus</b> objects.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.RequestTimeout">
            <summary>
            The maximum number of milliseconds to wait for a
            <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> before a <b>Request</b> times out.
            </summary>
            <remarks>
            A timeout of 0 is interpreted as an infinite timeout.
            </remarks>
            <value>
            The maximum number of milliseconds to wait for a
            <b>Response</b> before a <b>Request</b> times out.
            </value>
            <seealso cref="M:Tangosol.Net.Messaging.IChannel.Request(Tangosol.Net.Messaging.IRequest,System.Int64)"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.Principal">
            <summary>
            The optional <b>IPrincipal</b> object associated with this
            Channel.
            </summary>
            <remarks>
            If an <b>IPrincipal</b> is associated with this Channel, any
            operation performed upon receipt of an <b>IMessage</b> sent
            through this Channel will be done on behalf of the
            <b>IPrincipal</b>.
            </remarks>
            <value>
            The <b>IPrincipal</b> associated with this Channel.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.IChannel.Principal"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.Gate">
            <summary>
            A <see cref="P:Tangosol.Net.Messaging.Impl.Channel.Gate"/> used to prevent concurrent use of this
            Channel while it is being opened and closed.
            </summary>
            <value>
            A <b>Gate</b> used to prevent concurrent use of this
            Channel while it is being opened and closed.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.CloseException">
            <summary>
            The <b>Exception</b> to pass to the
            <see cref="M:Tangosol.Net.Messaging.Impl.Channel.Close(System.Boolean,System.Exception)"/> method when the
            <b>IChannel</b> is closed upon exiting the <b>Gate</b>
            (see <see cref="P:Tangosol.Net.Messaging.Impl.Channel.CloseOnExit"/> property).
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.IsSecureContext">
            <summary>
            True if either the channel principal or the proxy service principal 
            exist. When both are null, we can optimize out the MessageAction.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.Channel.MessageAction">
            <summary>
            Implementation used to process a received <see cref="T:Tangosol.Net.Messaging.IMessage"/>
            on behalf of a <see cref="P:Tangosol.Net.Messaging.Impl.Channel.MessageAction.Principal"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.MessageAction.ToString">
            <summary>
            Returns a human-readable description of this object.
            </summary>
            <returns>
            Human-readable description of this object.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Channel.MessageAction.Run">
            <summary>
             Execute this <b>MessageAction</b>.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.MessageAction.m_message">
            <summary>
            The Message to process.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.MessageAction.m_receiver">
            <summary>
            The optional Receiver that will process the Message.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Channel.MessageAction.m_principal">
            <summary>
            The <b>IPrincipal</b> used to execute this message.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.MessageAction.Message">
            <summary>
            Gets or sets the Message to process.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.MessageAction.Receiver">
            <summary>
            Gets or sets the optional Receiver that will process the
            Message.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Channel.MessageAction.Principal">
            <summary>
            Gets or sets the <b>IPrincipal</b> used to execute this
            <b>IMessage</b>.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.Codec">
            <summary>
            The default <see cref="T:Tangosol.Net.Messaging.ICodec"/> implementation used by the
            <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> if one was not explicitly configured on the
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> that created the <b>Connection</b>.
            </summary>
            <author>Ana Cikic  2006.08.21</author>
            <seealso cref="T:Tangosol.Net.Messaging.ICodec"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Connection"/>
            <seealso cref="T:Tangosol.Net.Messaging.IConnectionManager"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Codec.Encode(Tangosol.Net.Messaging.IChannel,Tangosol.Net.Messaging.IMessage,Tangosol.IO.DataWriter)">
            <summary>
            Encode and write a binary representation of the given
            <b>IMessage</b> to the given <see cref="T:Tangosol.IO.DataWriter"/>.
            </summary>
            <remarks>
            Using the passed <see cref="T:Tangosol.Net.Messaging.IChannel"/>, the Codec has access to
            both the <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> for the <b>IChannel</b>
            and the underlying <see cref="T:Tangosol.Net.Messaging.IConnection"/>.
            </remarks>
            <param name="channel">
            The <b>IChannel</b> object through which the binary-encoded
            <b>IMessage</b> was passed.
            </param>
            <param name="message">
            The <b>IMessage</b> to encode.
            </param>
            <param name="writer">
            The <b>DataWriter</b> to write the binary representation of the
            <b>IMessage</b> to.
            </param>
            <exception cref="T:System.IO.IOException">
            If an error occurs encoding or writing the <b>IMessage</b>.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.ICodec.Encode(Tangosol.Net.Messaging.IChannel,Tangosol.Net.Messaging.IMessage,Tangosol.IO.DataWriter)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Codec.Decode(Tangosol.Net.Messaging.IChannel,Tangosol.IO.DataReader)">
            <summary>
            Reads a binary-encoded <b>IMessage</b> from the passed
            <see cref="T:Tangosol.IO.DataReader"/> object.
            </summary>
            <remarks>
            Using the passed <see cref="T:Tangosol.Net.Messaging.IChannel"/>, the Codec has access to
            both the <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> for the <b>IChannel</b>
            and the underlying <see cref="T:Tangosol.Net.Messaging.IConnection"/>.
            </remarks>
            <param name="channel">
            The <b>IChannel</b> object through which the binary-encoded
            <b>IMessage</b> was passed.
            </param>
            <param name="reader">
            The <b>DataReader</b> containing the binary-encoded
            <b>IMessage</b>.
            </param>
            <returns>
            The <b>IMessage</b> object encoded in the given
            <b>DataReader</b>.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an error occurs reading or decoding the <b>IMessage</b>.
            </exception>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.Connection">
            <summary>
            Base definition of an <see cref="T:Tangosol.Net.Messaging.IConnection"/>.
            </summary>
            <author>Ana Cikic  2006.08.18</author>
            <author>Goran Milosavljevic  2007.01.14</author>
            <seealso cref="T:Tangosol.Net.Messaging.IConnection"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.MAX_PENDING_CHANNELS">
            <summary>
            The maximum number of pending new IChannel objects. If the limit
            is reached, a pending IChannel will be discarded.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.#ctor">
            <summary>
            Initialize channel maps and create new Connection.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.Close">
            <summary>
            Close the Connection.
            </summary>
            <remarks>
            <p>
            Closing a Connection also reclaims all resources held by the
            Connection, so there is no need to close <b>IChannel</b> objects
            of a closed Connection.</p>
            <p>
            If the Connection is already closed, calling this method has no
            effect.</p>
            </remarks>
            <seealso cref="M:Tangosol.Net.Messaging.IConnection.Close"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.Close(System.Boolean,System.Exception)">
            <summary>
            Close the Connection.
            </summary>
            <param name="notify">
            If <b>true</b>, notify the peer that the Connection is being
            closed.
            </param>
            <param name="e">
            The optional reason why the Connection is being closed.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.Close(System.Boolean,System.Exception,System.Boolean)">
            <summary>
            Close the Connection.
            </summary>
            <param name="notify">
            If <b>true</b>, notify the peer that the Connection is being
            closed.
            </param>
            <param name="e">
            The optional reason why the Connection is being closed.
            </param>
            <param name="wait">
            if true wait for the ConnectionManager to close the Connection
            when called on a client thread. This method will always wait
            for the ConnectionManager to close the Connection if called on
            the service thread.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.CloseInternal(System.Boolean,System.Exception,System.Int32)">
            <summary>
            The <see cref="M:Tangosol.Net.Messaging.Impl.Connection.Close"/> implementation method.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
            <param name="notify">
            if <b>true</b>, notify the peer that the Connection is being
            closed.
            </param>
            <param name="e">
            The optional reason why the Connection is being closed.
            </param>
            <param name="millis">
            The number of milliseconds to wait for the Connection to close;
            pass 0 to perform a non-blocking close or -1 to wait forever.
            </param>
            <returns>
            <b>true</b> if the invocation of this method closed the
            Connection.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.OpenChannel(Tangosol.Net.Messaging.IProtocol,System.String,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)">
            <summary>
            Create an <b>IChannel</b> using a specific <b>IProtocol</b>
            through this IConnection to a named <b>IReceiver</b> on the other
            end of the IConnection, optionally providing an <b>IPrincipal</b>
            to indicate the identity that will be utilizing the
            <b>IChannel</b>, and optionally providing an <b>IReceiver</b>
            that will process unsolicited <b>IMessage</b> objects on this end
            of the <b>IChannel</b>.
            </summary>
            <remarks>
            Conceptually, this is how an <b>IChannel</b> is established to an
            existing named "service" (e.g. an <b>IReceiver</b>) on the peer;
            note that either peer can register named services and either peer
            can use this method to find a named service on its peer.
            </remarks>
            <param name="protocol">
            The <b>IProtocol</b> that will be used to communicate through the
            <b>IChannel</b>; the <b>IProtocol</b> is used to verify that the
            <b>IReceiver</b> on the peer with the specified name is capable
            of communicating using that <b>IProtocol</b>.
            </param>
            <param name="name">
            The name that the <b>IReceiver</b> was registered with, on the
            other end of this IConnection; an <b>IReceiver</b> with the
            specified name must have been registered with the peer's
            <b>IConnectionManager</b> prior to calling this method (see
            <see cref="M:Tangosol.Net.Messaging.IConnectionManager.RegisterReceiver(Tangosol.Net.Messaging.IReceiver)"/>).
            </param>
            <param name="receiver">
            An optional <b>IReceiver</b> to associate with this
            <b>IChannel</b> that will process any unsolicited <b>IMessage</b>
            objects sent back through the <b>IChannel</b> by the peer.
            </param>
            <param name="principal">
            An optional <b>IPrincipal</b> to associate with this
            <b>IChannel</b>; if specified, any operation performed upon
            receipt of an <b>IMessage</b> sent using the returned
            <b>IChannel</b> will be done on behalf of the specified
            <b>IPrincipal</b>.
            </param>
            <returns>
            A new <b>IChannel</b> object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IProtocol</b> has not been registered with
            the underlying <b>IConnectionManager</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If an <b>IReceiver</b> with the given name has not been
            registered with the peer's <b>IConnectionManager</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IReceiver</b> does not use the same
            <b>IProtocol</b> as the one registered on the peer.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IReceiver</b> does not use the specified
            <b>IProtocol</b>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the IConnection is not open.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.IConnection.OpenChannel(Tangosol.Net.Messaging.IProtocol,System.String,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.OpenChannelInternal(Tangosol.Net.Messaging.IProtocol,System.String,Tangosol.IO.ISerializer,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal,System.Byte[])">
            <summary>
            The <see cref="M:Tangosol.Net.Messaging.Impl.Connection.OpenChannel(Tangosol.Net.Messaging.IProtocol,System.String,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/> implementation method.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
            <param name="protocol">
            The <b>IProtocol</b> that will be used to communicate through the
            <b>IChannel</b>; the <b>IProtocol</b> is used to verify that the
            <b>IReceiver</b> on the peer with the specified name is capable
            of communicating using that <b>IProtocol</b>.
            </param>
            <param name="name">
            The name that the <b>IReceiver</b> was registered with, on the
            other end of this IConnection; an <b>IReceiver</b> with the
            specified name must have been registered with the peer's
            <b>IConnectionManager</b> prior to calling this method (see
            <see cref="M:Tangosol.Net.Messaging.IConnectionManager.RegisterReceiver(Tangosol.Net.Messaging.IReceiver)"/>).
            </param>
            <param name="serializer">
            An optional <b>ISerializer</b> to associate with this
            <b>IChannel</b>.
            </param>
            <param name="receiver">
            An optional <b>IReceiver</b> to associate with this
            <b>IChannel</b> that will process any unsolicited <b>IMessage</b>
            objects sent back through the <b>IChannel</b> by the peer.
            </param>
            <param name="principal">
            An optional <b>IPrincipal</b> to associate with this
            <b>IChannel</b>; if specified, any operation performed upon
            receipt of an <b>IMessage</b> sent using the returned
            <b>IChannel</b> will be done on behalf of the specified
            <b>IPrincipal</b>.
            </param>
            <param name="identityToken">
            An optional token representing <b>IPrincipal</b> to associate
            with this <b>IChannel</b>.
            </param>
            <returns></returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.OpenChannelRequest(System.String,Tangosol.IO.ISerializer,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)">
            <summary>
            The <see cref="M:Tangosol.Net.Messaging.Impl.Connection.OpenChannel(Tangosol.Net.Messaging.IProtocol,System.String,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/> recipient implementation method.
            </summary>
            <remarks>
            This method is called on the service thread in response to a
            <b>ChannelOpenRequest</b>.
            </remarks>
            <param name="protocol">
            The <b>IProtocol</b> that will be used to communicate through the
            <b>IChannel</b>; the <b>IProtocol</b> is used to verify that the
            <b>IReceiver</b> on the peer with the specified name is capable
            of communicating using that <b>IProtocol</b>.
            </param>
            <param name="serializer">
            An optional <b>ISerializer</b> to associate with this
            <b>IChannel</b>.
            </param>
            <param name="receiver">
            An optional <b>IReceiver</b> to associate with this
            <b>IChannel</b> that will process any unsolicited <b>IMessage</b>
            objects sent back through the <b>IChannel</b> by the peer.
            </param>
            <param name="principal">
            An optional <b>IPrincipal</b> to associate with this
            <b>IChannel</b>; if specified, any operation performed upon
            receipt of an <b>IMessage</b> sent using the returned
            <b>IChannel</b> will be done on behalf of the specified
            <b>IPrincipal</b>.
            </param>
            <returns>
            The identifier of the newly opened Channel.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.OpenChannelResponse(System.Int32,Tangosol.Net.Messaging.IMessageFactory,Tangosol.IO.ISerializer,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)">
            <summary>
            The <see cref="M:Tangosol.Net.Messaging.Impl.Connection.OpenChannel(Tangosol.Net.Messaging.IProtocol,System.String,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/> initiator implementation method.
            </summary>
            <remarks>
            This method is called on the service thread in response to a
            <b>ChannelOpenResponse</b>.
            </remarks>
            <param name="id">
            Id of the new Channel.
            </param>
            <param name="factory">
            An optional <b>IMessageFactory</b> to associate with this
            <b>IChannel</b>.
            </param>
            <param name="serializer">
            An optional <b>ISerializer</b> to associate with this
            <b>IChannel</b>.
            </param>
            <param name="receiver">
            An optional <b>IReceiver</b> to associate with this
            <b>IChannel</b> that will process any unsolicited <b>IMessage</b>
            objects sent back through the <b>IChannel</b> by the peer.
            </param>
            <param name="principal">
            An optional <b>IPrincipal</b> to associate with this
            <b>IChannel</b>; if specified, any operation performed upon
            receipt of an <b>IMessage</b> sent using the returned
            <b>IChannel</b> will be done on behalf of the specified
            <b>IPrincipal</b>.
            </param>
            <returns></returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.OpenInternal">
            <summary>
            The <see cref="M:Tangosol.Net.Messaging.Impl.Connection.Open"/> implementation method.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.Ping">
            <summary>
            Send a <b>PingRequest</b> via "Channel0" and update the
            <b>PingLastMillis</b> property.
            </summary>
            <remarks>
            This method will only send a <b>PingRequest</b> if one is not
            already outstanding.
            </remarks>
            <returns>
            <b>true</b> if a <b>PingRequest</b> was sent.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.CreateChannel(Tangosol.Net.Messaging.IProtocol,Tangosol.Net.Messaging.IReceiver)">
            <summary>
            Create a back-Channel to expose another service to the peer.
            </summary>
            <remarks>
            <p>
            This method is particularly useful for building a Response
            Message to send back a new <b>IChannel</b> that can be used by
            the peer. In practice, this means that when a call to a stub is
            made, it can easily return a new stub that has its own
            <b>IChannel</b>; for example, a stub representing one service can
            return a stub representing a different service.</p>
            <p>
            The new <b>IChannel</b> cannot be used until the returned
            <b>Uri</b> is
            <see cref="M:Tangosol.Net.Messaging.Impl.Connection.AcceptChannel(System.Uri,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/> accepted by the peer.</p>
            </remarks>
            <param name="protocol">
            The <b>IProtocol</b> that will be used to communicate through the
            new <b>IChannel</b>.
            </param>
            <param name="receiver">
            An optional <b>IReceiver</b> to associate with the new
            <b>IChannel</b> that will process any unsolicited <b>IMessage</b>
            objects sent back through the <b>IChannel</b> by the peer.
            </param>
            <returns>
            A <b>Uri</b> that represents the new <b>IChannel</b> object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IProtocol</b> has not been registered with
            the underlying <b>IConnectionManager</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IReceiver</b> does not use the specified
            <b>IProtocol</b>.
            </exception>
            <exception cref="T:Tangosol.Net.Messaging.ConnectionException">
            If the Connection is not open.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Connection.AcceptChannel(System.Uri,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.CreateChannelInternal(Tangosol.Net.Messaging.IProtocol,Tangosol.IO.ISerializer,Tangosol.Net.Messaging.IReceiver)">
            <summary>
            The <see cref="M:Tangosol.Net.Messaging.Impl.Connection.CreateChannel(Tangosol.Net.Messaging.IProtocol,Tangosol.Net.Messaging.IReceiver)"/> implementation method.
            </summary>
            <remarks>
            <p>
            This method is called on the service thread.
            </p>
            </remarks>
            <param name="protocol">
            The <b>IProtocol</b> that will be used to communicate through the
            new <b>IChannel</b>.
            </param>
            <param name="serializer">
            </param>
            <param name="receiver">
            An optional <b>IReceiver</b> to associate with the new
            <b>IChannel</b> that will process any unsolicited <b>IMessage</b>
            objects sent back through the <b>IChannel</b> by the peer.
            </param>
            <returns>
            A <b>Uri</b> that represents the new <b>IChannel</b> object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IProtocol</b> has not been registered with
            the underlying <b>IConnectionManager</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IReceiver</b> does not use the specified
            <b>IProtocol</b>.
            </exception>
            <exception cref="T:Tangosol.Net.Messaging.ConnectionException">
            If the Connection is not open.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Connection.AcceptChannel(System.Uri,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.GateClose(System.Int32)">
            <summary>
            Attempt to close the Connection <b>Gate</b>.
            </summary>
            <param name="millis">
            The number of milliseconds to wait for the <b>Gate</b> to
            close; pass 0 to perform a non-blocking close or -1 to wait
            forever.
            </param>
            <returns>
            <b>true</b> if the Connection Gate was closed;
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.GateEnter">
            <summary>
            Enter the Connection <b>Gate</b>.
            </summary>
            <exception cref="T:Tangosol.Net.Messaging.ConnectionException">
            If the Connection is closing or closed.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.GateExit">
            <summary>
            Exit the Connection <b>Gate</b>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.GateOpen">
            <summary>
            Open the Connection <b>Gate</b>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.AcceptChannel(System.Uri,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)">
            <summary>
            Accept a newly created back-Channel that was spawned by the peer.
            </summary>
            <remarks>
            Before a spawned <b>IChannel</b> can be used to send and receive
            <b>IMessage</b> objects, its <b>Uri</b> must be accepted by the
            peer.
            </remarks>
            <param name="uri">
            The <b>Uri</b> of an <b>IChannel</b> that was spawned by the
            peer.
            </param>
            <param name="receiver">
            An optional <b>IReceiver</b> to associate with the new
            <b>IChannel</b> that will process any unsolicited <b>IMessage</b>
            objects sent back through the <b>IChannel</b> by the peer.
            </param>
            <param name="principal">
            An optional <b>IPrincipal</b> to associate with the new
            <b>IChannel</b>; if specified, any operation performed upon
            receipt of an <b>IMessage</b> sent using the accepted
            <b>IChannel</b> will be done on behalf of the specified
            <b>IPrincipal</b>.
            </param>
            <returns>
            The newly accepted <b>IChannel</b>.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified <b>IReceiver</b> does not use the same
            <b>IProtocol</b> as the spawned <b>IChannel</b> (as described by
            its <b>Uri</b>).
            </exception>
            <exception cref="T:Tangosol.Net.Messaging.ConnectionException">
            If the Connection is not open.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Connection.CreateChannel(Tangosol.Net.Messaging.IProtocol,Tangosol.Net.Messaging.IReceiver)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.AcceptChannelInternal(System.Uri,Tangosol.IO.ISerializer,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal,System.Byte[])">
            <summary>
            The <see cref="M:Tangosol.Net.Messaging.Impl.Connection.AcceptChannel(System.Uri,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/> implementation method.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
            <param name="uri">
            The <b>Uri</b> of an <b>IChannel</b> that was spawned by the
            peer.
            </param>
            <param name="serializer"></param>
            <param name="receiver">
            An optional <b>IReceiver</b> to associate with the new
            <b>IChannel</b> that will process any unsolicited <b>IMessage</b>
            objects sent back through the <b>IChannel</b> by the peer.
            </param>
            <param name="principal">
            An optional <b>IPrincipal</b> to associate with the new
            <b>IChannel</b>; if specified, any operation performed upon
            receipt of an <b>IMessage</b> sent using the accepted
            <b>IChannel</b> will be done on behalf of the specified
            <b>IPrincipal</b>.
            </param>
            <param name="identityToken">
            An optional token representing an <b>IPrincipal</b> to
            associate with the <b>Channel</b>.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.Messaging.IStatus"/> object representing the asynchronous
            <b>IRequest</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.AcceptChannelRequest(System.Int32,System.Security.Principal.IPrincipal)">
            <summary>
            The <see cref="M:Tangosol.Net.Messaging.Impl.Connection.AcceptChannel(System.Uri,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/> recipient implementation method.
            </summary>
            <remarks>
            This method is called on the service thread in response to a 
            <b>ChannelAcceptRequest</b>.
            </remarks>
            <param name="id">
            Id of the new <b>IChannel</b>.
            </param>
            <param name="principal">
            An optional <b>IPrincipal</b> to associate with the new
            <b>IChannel</b>; if specified, any operation performed upon
            receipt of an <b>IMessage</b> sent using the accepted
            <b>IChannel</b> will be done on behalf of the specified
            <b>IPrincipal</b>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.AcceptChannelResponse(System.Int32,Tangosol.Net.Messaging.IMessageFactory,Tangosol.IO.ISerializer,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)">
            <summary>
            The <see cref="M:Tangosol.Net.Messaging.Impl.Connection.AcceptChannel(System.Uri,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/> initiator implementation method.
            </summary>
            <remarks>
            This method is called on the service thread in response to a
            <b>ChannelAcceptResponse</b>.
            </remarks>
            <param name="id">
            Id of the new <b>IChannel</b>.
            </param>
            <param name="factory">
            An optional <b>IMessageFactory</b> to associate with the new
            Channel.
            </param>
            <param name="serializer">
            An optional <b>ISerializer</b> to associate with the new
            Channel.
            </param>
            <param name="receiver">
            An optional <b>IReceiver</b> to associate with the new Channel
            that will process any unsolicited <b>IMessage</b> objects sent
            back through the <b>Channel</b> by the peer.
            </param>
            <param name="principal">
            An optional <b>IPrincipal</b> to associate with the new Channel;
            If specified, any operation performed upon receipt of a
            <b>IMessage</b> sent using the accepted Channel will be done
            on behalf of the specified <b>IPrincipal</b>.
            </param>
            <returns>
            The newly accepted Channel.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.AssertOpen">
            <summary>
            Asserts if the Connection is open.
            </summary>
            <exception cref="T:Tangosol.Net.Messaging.ConnectionException">
            If the Connection is closed or closing.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.GetChannel(System.Int32)">
            <summary>
            Return the open <b>IChannel</b> object with the given identifier.
            </summary>
            <remarks>
            If an <b>IChannel</b> object with the specified identifier does
            not exist or has been closed, <c>null</c> is returned.
            </remarks>
            <param name="id">
            The unique <b>IChannel</b> identifier.
            </param>
            <returns>
            The open <b>IChannel</b> object with the specified identifer or
            <c>null</c> if no such open <b>IChannel</b> exists.
            </returns>
            <seealso cref="M:Tangosol.Net.Messaging.IConnection.GetChannel(System.Int32)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.GetChannels">
            <summary>
            Return the collection of open <b>IChannel</b> objects through
            this Connection.
            </summary>
            <remarks>
            The client should assume that the returned collection is an
            immutable snapshot of the actual collection of open
            <b>IChannel</b> objects maintained by this Connection.
            </remarks>
            <returns>
            The collection of open <b>IChannel</b> objects.
            </returns>
            <seealso cref="M:Tangosol.Net.Messaging.IConnection.GetChannels"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.GetDescription">
            <summary>
            Return a human-readable description of this Connection.
            </summary>
            <returns>
            A string representation of this Connection.
            </returns>
            <since>Coherence 3.7</since>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.GenerateChannelId">
            <summary>
            Generate a new unique <b>IChannel</b> identifier.
            </summary>
            <remarks>
            If the <b>IConnectionManager</b> that created this
            <b>IChannel</b> is an <b>IConnectionAcceptor</b>, the returned
            value will be in the range:
            [-Int32.MaxValue, 0).
            If the <b>IConnectionManager</b> that created this
            <b>IChannel</b> is an <b>IConnectionInitiator</b>, the returned
            value will be in the range:
            (0, Int32.MaxValue).
            The space of identifiers must be partitioned in order to prevent
            collisions.
            </remarks>
            <returns>
            A new unique <b>IChannel</b> identifier.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.Open">
            <summary>
            Open this Connection.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.RegisterChannel(Tangosol.Net.Messaging.IChannel)">
            <summary>
            Register the given <b>IChannel</b> in the map of channels.
            </summary>
            <param name="channel">
            The <b>IChannel</b> to register; must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentException">
            If the <b>IChannel</b> has already been registered.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.ResetStats">
            <summary>
            Reset the Connection statistics.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.Send(Tangosol.IO.DataWriter)">
            <summary>
            Send the given <b>DataWriter</b> through this Connection.
            </summary>
            <param name="writer">
            The <b>DataWriter</b> to send.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.UnregisterChannel(Tangosol.Net.Messaging.IChannel)">
            <summary>
            Unregister the given <b>IChannel</b> from the array of
            <b>IChannel</b>s.
            </summary>
            <param name="channel">
            The <b>IChannel</b> to unregister; must not be <c>null</c>.
            </param>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.Connection.ToString">
            <summary>
            Returns a string representation of this Connection.
            </summary>
            <returns>
            A string representation of this Connection.
            </returns>
            <since>Coherence 3.7</since>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_closeNotify">
            <summary>
            Peer notification flag used when the Connection is closed upon
            exiting the <b>Gate</b> (see <see cref="P:Tangosol.Net.Messaging.Impl.Connection.CloseOnExit"/>
            property).
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_closeOnExit">
            <summary>
            If <b>true</b>, the <b>Thread</b> that is currently executing
            within the Connection should close the Connection immedately
            upon exiting the Connection's <b>Gate</b>.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_closeException">
            <summary>
            The <b>Exception</b> to pass to the <see cref="M:Tangosol.Net.Messaging.Impl.Connection.Close"/> method
            when the Connection is closed upon exiting the Gate
            (see <see cref="P:Tangosol.Net.Messaging.Impl.Connection.CloseOnExit"/> property).
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_codec">
            <summary>
            The ICodec used by the Connection to convert IMessage objects to
            and from a binary representation.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_connectionManager">
            <summary>
            The IConnectionManager that created or accepted this Connection.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_id">
            <summary>
            The unique identifier of the process using this Connection
            object.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_member">
            <summary>
            The IMember object associated with this Connection.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_messageFactoryMap">
            <summary>
            A dictionary of <b>IMessageFactory</b> objects that may be used
            by <b>IChannel</b> objects created by this Connection, keyed by 
            <b>IProtocol</b> name.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_isOpen">
            <summary>
            Determine if the Connection is open.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_pingLastMillis">
            <summary>
            The send time of the last outstanding <b>PingRequest</b> or 0 if
            a <b>PingRequest</b> is not outstanding.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_statsBytesReceived">
            <summary>
            Statistics: total number of bytes received over this Connection.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_statsBytesSent">
            <summary>
            Statistics: total number of bytes sent over this Connection.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_statsReceived">
            <summary>
            Statistics: total number of <b>IMessages</b> received over this
            Connection.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_statsReset">
            <summary>
            Statistics: date/time value that the stats have been reset.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.Connection.m_statsSent">
            <summary>
            Statistics: total number of messages sent over this Connection.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.Channels">
            <summary>
            An <see cref="T:Tangosol.Util.ILongArray"/> of open <see cref="T:Tangosol.Net.Messaging.IChannel"/>
            objects created by this Connection, keyed by <b>IChannel</b>
            identifier.
            </summary>
            <value>
            An <b>ILongArray</b> of open <b>IChannel</b> objects.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.ChannelsPending">
            <summary>
            An <see cref="T:Tangosol.Util.ILongArray"/> of newly created <b>IChannel</b>
            objects that are waiting to be accepted by the peer, keyed by
            <b>IChannel</b> identifier.
            </summary>
            <value>
            An <b>ILongArray</b> of newly created <b>IChannel</b> objects
            that are waiting to be accepted by the peer.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.Codec">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.ICodec"/> used by the Connection to convert
            <see cref="T:Tangosol.Net.Messaging.IMessage"/> objects to and from a binary
            representation.
            </summary>
            <value>
            The <b>ICodec</b> used to encode/decode <b>IMessage</b> objects.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.ConnectionManager">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> that created or accepted
            this Connection.
            </summary>
            <value>
            The <b>IConnectionManager</b> that manages this Connection.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.IConnection.ConnectionManager"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.Id">
            <summary>
            The unique identifier of this IConnection.
            </summary>
            <value>
            The unique identifier of this IConnection or <c>null</c> if the
            IConnection has not been accepted.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.IConnection.Id"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.Member">
            <summary>
            The IMember object for this IConnection.
            </summary>
            <value>
            The IMember object for this IConnection or <c>null</c> if the
            IConnection has not been opened.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.MessageFactoryMap">
            <summary>
            A map of <b>IMessageFactory</b> objects that may be used by
            <b>IChannel</b> objects created by this Connection, keyed by
            <b>IProtocol</b> name.
            </summary>
            <value>
            A map of <b>IMessageFactory</b> objects that may be used by
            <b>IChannel</b> objects created by this Connection.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.PeerId">
            <summary>
            The unique identifier of the peer to which this Connection
            object is connected.
            </summary>
            <value>
            The unique identifier of the peer or <c>null</c> if the
            Connection is not open.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.IConnection.PeerId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.IsActiveThread">
            <summary>
            Returns <b>true</b> if the calling thread is currently executing
            within the Connection's <b>Gate</b>.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.IsOpen">
            <summary>
            Return <b>true</b> if this Connection is open.
            </summary>
            <remarks>
            A Connection can only be used to exchange data when it is open.
            </remarks>
            <value>
            <b>true</b> if this Connection is open.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.CloseNotify">
            <summary>
            Peer notification flag used when the Connection is closed upon
            exiting the <b>Gate</b> (see  <see cref="P:Tangosol.Net.Messaging.Impl.Connection.CloseOnExit"/>
            property).
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.CloseOnExit">
            <summary>
            If <b>true</b>, the Thread that is currently executing within the
            Connection should close the Connection immedately upon exiting
            the Connection's <b>Gate</b>.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.CloseException">
            <summary>
            The <b>Exception</b> to pass to the <see cref="M:Tangosol.Net.Messaging.Impl.Connection.Close"/> method
            when the Connection is closed upon exiting the Gate
            (see <see cref="P:Tangosol.Net.Messaging.Impl.Connection.CloseOnExit"/> property).
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.PeerEdition">
            <summary>
            The product edition used by the peer.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.PingLastMillis">
            <summary>
            The send time of the last outstanding <b>PingRequest</b> or 0
            if a <b>PingRequest</b> is not outstanding.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.StatsBytesReceived">
            <summary>
            Statistics: total number of bytes received over this Connection.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.StatsBytesSent">
            <summary>
            Statistics: total number of bytes sent over this Connection.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.StatsReceived">
            <summary>
            Statistics: total number of Messages received over this
            Connection.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.StatsReset">
            <summary>
            Statistics: date/time value that the stats have been reset.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.StatsSent">
            <summary>
            Statistics: total number of messages sent over this Connection.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.Connection.Gate">
            <summary>
            A <see cref="P:Tangosol.Net.Messaging.Impl.Connection.Gate"/> used to prevent concurrent use of this
            Connection while it is being opened and closed.
            </summary>
            <value>
            A <b>Gate</b> used to prevent concurrent use of this
            Connection while it is being opened and closed.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.InvocationService.InvocationRequest">
            <summary>
            The InvocationRequest is an <see cref="T:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceRequest"/>
            sent to execute an <see cref="T:Tangosol.Net.IInvocable"/> object on the server.
            </summary>
            <author>Goran Milosavljevic  2006.09.01</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceRequest"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceRequest">
            <summary>
            Base class for all InvocationService Protocol
            <see cref="T:Tangosol.Net.Messaging.Impl.Request"/> messages.
            </summary>
            <author>Goran Milosavljevic  2006.09.01</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Request"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.InvocationService.InvocationRequest.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.InvocationService.InvocationRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.InvocationService.InvocationRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.InvocationService.InvocationRequest.TypeId">
            <summary>
            Return the type identifier for this <b>Message</b>.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.InvocationService.InvocationRequest.Task">
            <summary>
            The <see cref="T:Tangosol.Net.IInvocable"/> task to execute.
            </summary>
            <value>
            The <b>IInvocable</b> task to execute.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.InvocationService.InvocationResponse">
            <summary>
            Generic <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> used for basic InvocationService
            Protocol Responses.
            </summary>
            <author>Goran Milosavljevic  2006.09.01</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Response"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.InvocationService.InvocationResponse.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.InvocationService.InvocationResponse.Run">
            <summary>
            Execute the action specific to the <see cref="T:Tangosol.Net.Messaging.Impl.Message"/>
            implementation.
            </summary>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Message.Run"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.InvocationService.InvocationResponse.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceFactory">
            <summary>
            <see cref="T:Tangosol.Net.Messaging.Impl.MessageFactory"/> for version 1 of the InvocationService
            Protocol.
            </summary>
            <remarks>
            <p>
            The type identifiers of the <see cref="T:Tangosol.Net.Messaging.Impl.Message"/> types instantiated
            by this <b>MessageFactory</b> are organized as follows:</p>
            (0) <see cref="T:Tangosol.Net.Messaging.Impl.InvocationService.InvocationResponse"/>
            (1) <see cref="T:Tangosol.Net.Messaging.Impl.InvocationService.InvocationRequest"/>
            </remarks>
            <author>Goran Milosavljevic  2006.09.01</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.MessageFactory"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceProtocol"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceFactory.#ctor">
            <summary>
            Initialize an array of <see cref="T:Tangosol.Net.Messaging.Impl.Message"/> types that can be
            created by this factory.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceFactory.messagingTypes">
            <summary>
            An array of <b>Message</b> types that can be created by this
            factory.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceProtocol">
            <summary>
            The InvocationService Protocol is used to execute Invocable tasks
            within a remote Coherence cluster.
            </summary>
            <author>Goran Milosavljevic  2006.09.01</author>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceProtocol.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceProtocol.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceProtocol.InstantiateMessageFactory(System.Int32)">
            <summary>
            Instantiate a new <see cref="T:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceFactory"/> for the
            given version of this InvocationServiceProtocol.
            </summary>
            <param name="version">
            The version of the InvocationServiceProtocol that the returned
            <b>InvocationServiceFactory</b> will use.
            </param>
            <returns>
            A new <b>InvocationServiceFactory</b> for the given version of
            this InvocationServiceProtocol.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceProtocol.m_instance">
            <summary>
            The singleton InvocationServiceProtocol instance.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.InvocationService.InvocationServiceProtocol.Instance">
            <summary>
            The singleton InvocationServiceProtocol instance.
            </summary>
            <value>
            The singleton InvocationServiceProtocol instance.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.AggregateAllRequest">
            <summary>
            The AggregateAllRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest"/> sent to
            aggregate one or more entries (specified using their keys) in a
            remote NamedCache.
            </summary>
            <author>Goran Milosavljevic  2006.09.04</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest"/>
            <seealso cref="T:Tangosol.Net.Cache.IEntryAggregator"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest">
            <summary>
            Base class for all NamedCache Protocol
            <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/> messages that include a collection of
            keys.
            </summary>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/>
            <author>Ivan Cikic  2006.08.30</author>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest">
            <summary>
            Base class for all NamedCache Protocol <see cref="T:Tangosol.Net.Messaging.Impl.Request"/>
            messages.
            </summary>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Request"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
            <author>Ivan Cikic  2006.08.25</author>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest.m_keys">
            <summary>
            The collection of keys associated with this KeySetRequest.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest.Keys">
            <summary>
            The collection of keys associated with this KeySetRequest.
            </summary>
            <value>
            The collection of keys associated with this KeySetRequest.
            </value>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.AggregateAllRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.AggregateAllRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.AggregateAllRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.AggregateAllRequest.Aggregator">
            <summary>
            The EntryAggregator.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.AggregateAllRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.AggregateFilterRequest">
            <summary>
            The AggregateFilterRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.FilterRequest"/> sent to
            aggregate one or more entries (specified by a Filter) in a remote
            NamedCache.
            </summary>
            <author>Goran Milosavljevic  2006.09.04</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.FilterRequest"/>
            <seealso cref="T:Tangosol.Net.Cache.IEntryAggregator"/>
            <seealso cref="T:Tangosol.Util.IFilter"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.FilterRequest">
            <summary>
            Base class for all NamedCache Protocol
            <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/> messages that include a
            <see cref="T:Tangosol.Util.IFilter"/>.
            </summary>
            <author>Goran Milosavljevic  2006.09.04</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.FilterRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.FilterRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.FilterRequest.m_filter">
            <summary>
            The IFilter associated with this FilterRequest.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.FilterRequest.Filter">
            <summary>
            The <see cref="T:Tangosol.Util.IFilter"/> associated with this FilterRequest.
            </summary>
            <value>
            The <b>IFilter</b> associated with this FilterRequest.
            </value>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.AggregateFilterRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.AggregateFilterRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.AggregateFilterRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.AggregateFilterRequest.Aggregator">
            <summary>
            The EntryAggregator.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.AggregateFilterRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent">
            <summary>
            <see cref="T:Tangosol.Net.Messaging.Impl.Message"/> that encapsulates the information in a
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </summary>
            <remarks>
            This message is sent by an <see cref="T:Tangosol.Net.Cache.ICacheListener"/>
            registered on the remote <see cref="T:Tangosol.Net.INamedCache"/> by the peer
            NamedCacheProxy.
            </remarks>
            <author>Goran Milosavljevic  2006.09.04</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Message"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.Run">
            <summary>
            Execute the action specific to the Message implementation.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.m_filterId">
            <summary>
            If positive, identifies the IFilter that caused the
            CacheEvent to be raised.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.m_filterIds">
            <summary>
            If positive, identifies the array of IFilters that caused the
            CacheEvent to be raised.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.m_type">
            <summary>
            The CacheEventType identifier.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.m_key">
            <summary>
            The key associated with the CacheEvent.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.m_isSynthetic">
            <summary>
            true if the CacheEvent was caused by the cache internal
            processing such as eviction or loading.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.m_transformationState">
            <summary>
            The transformation value of the event.
            See CacheEvent$TransformatioState enum.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.m_isTruncate">
            <summary>
            The value of true indicates that this is a cache truncate request.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.m_valueNew">
            <summary>
            The new value (for insert and update events).
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.m_valueOld">
            <summary>
            The old value (for update and delete events).
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.FilterId">
            <summary>
            If positive, identifies the <see cref="T:Tangosol.Util.IFilter"/> that caused the
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> to be raised.
            </summary>
            <value>
            The identifier of the <b>IFilter</b> that caused the event.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.FilterIds">
            <summary>
            If positive, identifies the array of <see cref="T:Tangosol.Util.IFilter"/> that caused the
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> to be raised.
            </summary>
            <value>
            The array of identifiers of the <b>IFilter</b> that caused the event.
            </value>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.EventType">
            <summary>
            The cache event type, one of <see cref="T:Tangosol.Net.Cache.CacheEventType"/> values.
            </summary>
            <value>
            <b>CacheEventType</b> of the event.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.Key">
            <summary>
            The key associated with the <b>CacheEvent</b>.
            </summary>
            <value>
            The key associated with the <b>CacheEvent</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.IsSynthetic">
            <summary>
            <b>true</b> if the <b>CacheEvent</b> was caused by the cache
            internal processing such as eviction or loading.
            </summary>
            <value>
            <b>true</b> if the <b>CacheEvent</b> was caused by the cache
            internal processing such as eviction or loading.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.TransformState">
            <summary>
            Getter for property TransformState.
            The TransformationState value of the event.
            </summary>
            <value>
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs.TransformationState"/> value of the event.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.IsTruncate">
            <summary>
            <b>true</b> if this is a cache truncate request.
            <b>false</b> if this is a cache clear request.
            </summary>
            <value>
            <b>true</b> if is is a truncate request.
            <b>false</b> if it is clear request.
            </value>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.ValueNew">
            <summary>
            The new value (for insert and update events).
            </summary>
            <value>
            The new value.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.ValueOld">
            <summary>
            The old value (for update and delete events).
            </summary>
            <value>
            The old value.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent.ExecuteInOrder">
            <summary>
            Determine if this IMessage should be executed in the same order
            as it was received relative to other messages sent through the
            same <b>IChannel</b>.
            </summary>
            <remarks>
            <p>
            Consider two messages: M1 and M2. Say M1 is received before M2
            but executed on a different execute thread (for example, when the
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> is configured with an execute
            thread pool of size greater than 1). In this case, there is no
            way to guarantee that M1 will finish executing before M2.
            However, if M1 returns <b>true</b> from this method, the
            <b>IConnectionManager</b> will execute M1 on its service thread,
            thus guaranteeing that M1 will execute before M2.</p>
            <p>
            In-order execution should be considered as a very advanced
            feature and implementations that return <b>true</b> from this
            method must exercise extreme caution during execution, since any
            delay or unhandled exceptions will cause a delay or complete
            shutdown of the underlying <b>IConnectionManager</b>.</p>
            </remarks>
            <returns>
            <b>true</b> if the IMessage should be executed in the same order
            as it was received relative to other messages.
            </returns>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.ClearRequest">
            <summary>
            The ClearRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/> sent to remove
            all mappings in a remote NamedCache.
            </summary>
            <author>Ivan Cikic  2006.08.30</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ClearRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.ClearRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.ClearRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ClearRequest.m_isTruncate">
            <summary>
            The value of true indicates that this is a cache truncate request.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ClearRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ClearRequest.IsTruncate">
            <summary>
            <b>true</b> if this is a cache truncate request.
            <b>false</b> if this is a cache clear request.
            </summary>
            <value>
            <b>true</b> if is is a truncate request.
            <b>false</b> if it is clear request.
            </value>
            <since>12.2.1</since>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.ContainsAllRequest">
            <summary>
            The ContainsAllRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest"/> sent to
            determine if a remote NamedCache contains mappings for one or more
            specified keys.
            </summary>
            <author>Ivan Cikic  2006.08.30</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ContainsAllRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ContainsAllRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.ContainsKeyRequest">
            <summary>
            The ContainsKeyRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/> sent to
            determine if a remote NamedCache contains a mapping for a specific
            key.
            </summary>
            <author>Ivan Cikic  2006.08.30</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest">
            <summary>
            Base class for all NamedCache Protocol
            <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/> messages that include a key.
            </summary>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/>
            <author>Ivan Cikic  2006.08.28</author>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest.m_key">
            <summary>
            The key associated with the KeyRequest.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest.Key">
            <summary>
            The key associated with the KeyRequest.
            </summary>
            <value>
            The key associated with the KeyRequest.
            </value>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ContainsKeyRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ContainsKeyRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.ContainsValueRequest">
            <summary>
            The ContainsValueRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/> sent to
            determine if a remote NamedCache contains a mapping for a specific
            value.
            </summary>
            <author>Ivan Cikic  2006.08.30</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ContainsValueRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.ContainsValueRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.ContainsValueRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ContainsValueRequest.m_value">
            <summary>
            The entry value.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ContainsValueRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ContainsValueRequest.Value">
            <summary>
            The entry value for which mapping is searched in NamedCache.
            </summary>
            <value>
            The entry value for which mapping is searched in NamedCache.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.GetAllRequest">
            <summary>
            The GetAllRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest"/> sent to obtain the
            values mapped to one or more specified keys in a remote NamedCache.
            </summary>
            <author>Ivan Cikic  2006.08.30</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.GetAllRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.GetAllRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.GetRequest">
            <summary>
            The GetRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/> sent to obtain a value
            mapped to a specified key in a remote NamedCache.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.GetRequest.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.GetRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest">
            <summary>
            The IndexRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/> sent to add or
            remove an index on a remote NamedCache.
            </summary>
            <author>Ivan Cikic  2006.08.30</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.t.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">"&gt;
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest.m_add">
            <summary>
            If true, add an index; otherwise remove it.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest.m_comparer">
            <summary>
            The Comparer object which imposes an ordering on entries in
            the indexed map; or null if the entries' values natural ordering
            should be used.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest.m_extractor">
            <summary>
            The ValueExtractor object that is used to extract an indexable
            object from a value stored in the indexed map.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest.m_isOrdered">
            <summary>
            If true, the contents of the indexed information should be
            ordered.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest.Comparer">
            <summary>
            The <b>IComparer</b> object which imposes an ordering on entries
            in the indexed map; or <c>null</c> if the entries' values natural
            ordering should be used.
            </summary>
            <value>
            The <b>IComparer</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest.Add">
            <summary>
            If <b>true</b>, add an index; otherwise remove it.
            </summary>
            <value>
            <b>true</b> to add an index, <b>false</b> to remove it.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest.Extractor">
            <summary>
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to extract
            an indexable object from a value stored in the indexed map.
            </summary>
            <value>
            The <b>IValueExtractor</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest.IsOrdered">
            <summary>
            If <b>true</b>, the contents of the indexed information should be
            ordered.
            </summary>
            <value>
            <b>true</b> if the contents of the indexed information should be
            ordered, <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.InvokeAllRequest">
            <summary>
            The InvokeRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest"/> sent to process
            one or more entries (specified by their keys) in a remote NamedCache.
            </summary>
            <author>Goran Milosavljevic  2006.09.04</author>
            <seealso cref="T:Tangosol.Net.Cache.IEntryProcessor"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.InvokeAllRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.InvokeAllRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.InvokeAllRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.InvokeAllRequest.m_processor">
            <summary>
            The EntryProcessor.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.InvokeAllRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.InvokeAllRequest.Processor">
            <summary>
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> used to process entries in a
            remote cache.
            </summary>
            <value>
            <b>IEntryProcessor</b> object.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.InvokeFilterRequest">
            <summary>
            The InvokeFilterRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.FilterRequest"/> sent to
            process one or more entries (specified by a Filter) in a remote
            NamedCache.
            </summary>
            <author>Goran Milosavljevic  2006.09.04</author>
            <seealso cref="T:Tangosol.Net.Cache.IEntryProcessor"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.FilterRequest"/>
            <seealso cref="T:Tangosol.Util.IFilter"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.InvokeFilterRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.InvokeFilterRequest.InstantiateResponse(Tangosol.Net.Messaging.IMessageFactory)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> for this IRequest.
            </summary>
            <param name="factory">
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that must be used to create the
            returned <b>Response</b>; never <c>null</c>.
            </param>
            <returns>
            A new <b>Response</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.InvokeFilterRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.InvokeFilterRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.InvokeFilterRequest.m_processor">
            <summary>
            The EntryProcessor.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.InvokeFilterRequest.m_cookie">
            <summary>
            Opaque cookie used to support streaming.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.InvokeFilterRequest.Cookie">
            <summary>
            Opaque cookie used to support streaming.
            </summary>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.PartialResponse.Cookie"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.InvokeFilterRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.InvokeFilterRequest.Processor">
            <summary>
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> used to process entries in a
            remote cache.
            </summary>
            <value>
            <b>IEntryProcessor</b> object.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.InvokeRequest">
            <summary>
            The InvokeRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/> sent to process an
            entry in a remote NamedCache.
            </summary>
            <author>Goran Milosavljevic  2006.09.04</author>
            <seealso cref="T:Tangosol.Net.Cache.IEntryProcessor"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.InvokeRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.InvokeRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.InvokeRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.InvokeRequest.m_processor">
            <summary>
            The EntryProcessor.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.InvokeRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.InvokeRequest.Processor">
            <summary>
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> used to process entries in a
            remote cache.
            </summary>
            <value>
            <b>IEntryProcessor</b> object.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest">
            <summary>
            The ListenerFilterRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.FilterRequest"/> sent to
            register or deregister interest in events that pass a specified
            <see cref="T:Tangosol.Util.IFilter"/> on a remote NamedCache.
            </summary>
            <author>Goran Milosavljevic  2006.09.04</author>
            <seealso cref="T:Tangosol.Util.IFilter"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.FilterRequest"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.m_add">
            <summary>
            <b>true</b> to add an ICacheListener, <b>false</b> to remove
            an ICacheListener.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.m_filterId">
            <summary>
            A unique identifier for the IFilter associated with this
            <b>ListenerFilterRequest</b>.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.m_isLite">
            <summary>
            <b>true</b> if the ICacheListener is "lite", <b>false</b> if
            it is a standard ICacheListener.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.m_trigger">
            <summary>
            An optional ICacheTrigger object associated with this request.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.m_isPriming">
            <summary>
            Support for the NearCache priming listener. The value of true 
            indicates that the listener registration should force a synthetic 
            event containing the current value to the requesting client. This 
            property was added to Coherence 12.2.1 (protocol version 6) for 
            COH-4615 implementation.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.Add">
            <summary>
            <b>true</b> to add an <see cref="T:Tangosol.Net.Cache.ICacheListener"/>,
            <b>false</b> to remove <b>ICacheListener</b>.
            </summary>
            <value>
            <b>true</b> to add an <b>ICacheListener</b>, <b>false</b> to
            remove <b>ICacheListener</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.FilterId">
            <summary>
            A unique identifier for the <see cref="T:Tangosol.Util.IFilter"/> associated with
            this ListenerFilterRequest.
            </summary>
            <value>
            <b>IFilter</b> unique identifier.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.Trigger">
            <summary>
            An optional <see cref="T:Tangosol.Net.Cache.ICacheTrigger"/> object associated with
            this request.
            </summary>
            <value>
            An <b>ICacheTrigger</b> object associated with this request.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.IsLite">
            <summary>
            <b>true</b> if the <b>ICacheListener</b> is "lite",
            <b>false</b> if it is a standard <b>ICacheListener</b>.
            </summary>
            <value>
            <b>true</b> if the <b>ICacheListener</b> is "lite",
            <b>false</b> if it is a standard <b>ICacheListener</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest.IsPriming">
            <summary>
            <b>true</b> if the <b>ICacheListener</b> is "priming",
            <b>false</b> if it is a non-priming <b>ICacheListener</b>.
            </summary>
            <value>
            <b>true</b> if the <b>ICacheListener</b> is "priming",
            <b>false</b> if it is a non-priming <b>ICacheListener</b>.
            </value>
            <since>12.2.1</since>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest">
            <summary>
            The ListenerKeyRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/> sent to register
            or deregister interest in events that pass a specified
            <see cref="T:Tangosol.Util.IFilter"/> on a remote NamedCache.
            </summary>
            <author>Goran Milosavljevic  2006.09.04</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest.m_add">
            <summary>
            <b>true</b> to add an ICacheListener, <b>false</b> to remove
            an ICacheListener.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest.m_isLite">
            <summary>
            <b>true</b> if the ICacheListener is "lite", <b>false</b> if
            it is a standard ICacheListener.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest.m_trigger">
            <summary>
            An optional ICacheTrigger object associated with this request.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest.m_isPriming">
            <summary>
            Support for the NearCache priming listener. The value of true 
            indicates that the listener registration should force a synthetic 
            event containing the current value to the requesting client. This 
            property was added to Coherence 12.2.1 (protocol version 6) for 
            COH-4615 implementation.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest.Add">
            <summary>
            <b>true</b> to add an <see cref="T:Tangosol.Net.Cache.ICacheListener"/>,
            <b>false</b> to remove <b>ICacheListener</b>.
            </summary>
            <value>
            <b>true</b> to add an <b>ICacheListener</b>, <b>false</b> to
            remove <b>ICacheListener</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest.Trigger">
            <summary>
            An optional <see cref="T:Tangosol.Net.Cache.ICacheTrigger"/> object associated with
            this request.
            </summary>
            <value>
            An <b>ICacheTrigger</b> object associated with this request.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest.IsLite">
            <summary>
            <b>true</b> if the <b>ICacheListener</b> is "lite",
            <b>false</b> if it is a standard <b>ICacheListener</b>.
            </summary>
            <value>
            <b>true</b> if the <b>ICacheListener</b> is "lite",
            <b>false</b> if it is a standard <b>ICacheListener</b>.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest.IsPriming">
            <summary>
            <b>true</b> if the <b>ICacheListener</b> is "priming",
            <b>false</b> if it is a non-priming <b>ICacheListener</b>.
            </summary>
            <value>
            <b>true</b> if the <b>ICacheListener</b> is "priming",
            <b>false</b> if it is a non-priming <b>ICacheListener</b>.
            </value>
            <since>12.2.1</since>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.LockRequest">
            <summary>
            The LockRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/> sent to lock a
            specified key in a remote NamedCache.
            </summary>
            <author>Goran Milosavljevic  2006.08.31</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.LockRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.LockRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.LockRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.LockRequest.m_timeoutMillis">
            <summary>
            The number of milliseconds to wait to obtain the lock;
            0 to return immediately; -1 to wait indefinitely.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.LockRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.LockRequest.TimeoutMillis">
            <summary>
            The number of milliseconds to wait to obtain the lock;
            0 to return immediately; -1 to wait indefinitely.
            </summary>
            <value>
            Number of milliseconds to wait for the lock; 0 to return
            immediately, -1 to wait indefinetely.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheFactory">
             <summary>
             <see cref="T:Tangosol.Net.Messaging.Impl.MessageFactory"/> for version 2 of the NamedCache
             Protocol.
             </summary>
             <remarks>
             The type identifiers of the <see cref="T:Tangosol.Net.Messaging.Impl.Message"/> classes
             instantiated by this <b>MessageFactory</b> are organized as follows:
             (1-10):
            
             (1) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.SizeRequest"/>
             (2) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.ContainsKeyRequest"/>
             (3) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.ContainsValueRequest"/>
             (4) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.GetRequest"/>
             (5) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.PutRequest"/>
             (6) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.RemoveRequest"/>
             (7) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.PutAllRequest"/>
             (8) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.ClearRequest"/>
             (9) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.ContainsAllRequest"/>
             (10) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.RemoveAllRequest"/>
            
             IObservableCache (11-20):
            
             (11) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.ListenerKeyRequest"/>
             (12) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.ListenerFilterRequest"/>
             (13) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.CacheEvent"/>
            
             ICache (21-30):
            
             (21) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.GetAllRequest"/>
            
             IConcurrentCache (31-40):
            
             (31) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.LockRequest"/>
            
             IQueryCache (41-50):
            
             (41) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.QueryRequest"/>
             (42) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.IndexRequest"/>
            
             IInvocableCache (51-60):
            
             (51) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.AggregateAllRequest"/>
             (52) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.AggregateFilterRequest"/>
             (53) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.InvokeRequest"/>
             (54) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.InvokeAllRequest"/>
             (55) <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.InvokeFilterRequest"/>
             </remarks>
             <author>Ivan Cikic  2006.08.25</author>
             <seealso cref="T:Tangosol.Net.Messaging.Impl.MessageFactory"/>
             <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheFactory.#ctor">
            <summary>
            Initialize an array of <see cref="T:Tangosol.Net.Messaging.Impl.Message"/> subclasses that can
            be created by this factory.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheFactory.messagingTypes">
            <summary>
            An array of <b>Message</b> subclasses that can be created by this
            factory.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCachePartialResponse">
            <summary>
            Generic <see cref="T:Tangosol.Net.Messaging.IResponse"/> used for partial
            <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/> responses.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.PartialResponse">
            <summary>
            Abstract <see cref="T:Tangosol.Net.Messaging.IResponse"/> implementation that carries a
            partial result.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.PartialResponse.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.PartialResponse.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.PartialResponse.m_cookie">
            <summary>
            Opaque cookie used to support streaming.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.PartialResponse.Cookie">
            <summary>
            Opaque cookie used to support streaming.
            </summary>
            <remarks>
            If non-null, this PartialResponse contains a partial result. The
            receiver of a PartialResponse can accumulate or iterate the
            entire result by sending additional Request(s) until this
            property is <c>null</c>.
            </remarks>
            <value>
            <see cref="T:Tangosol.Util.Binary"/> representing cookie used to support
            streaming.
            </value>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.NamedCachePartialResponse.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.NamedCachePartialResponse.Run">
            <summary>
            Execute the action specific to the <see cref="T:Tangosol.Net.Messaging.Impl.Message"/>
            implementation.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.NamedCachePartialResponse.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.NamedCachePartialResponse.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.NamedCachePartialResponse.m_filter">
            <summary>
            The filter to be returned. This is only used for QueryRequests
            that carry a LimitFilter.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.NamedCachePartialResponse.m_filterCookie">
            <summary>
            The cookie used by the returned LimitFilter (see <b>Filter</b> proporty).
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.NamedCachePartialResponse.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.NamedCachePartialResponse.Filter">
            <summary>
            Return the filter used with the request. This is only used for QueryRequests
            that carry a LimitFilter.
            </summary>
            <value>
            A filter returned with the response.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.NamedCachePartialResponse.FilterCookie">
            <summary>
            Return the cookie used by the returned filter (See <b>Filter</b> property).
            </summary>
            <value>
            A filter cookie returned with the response.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol">
            <summary>
            The NamedCache Protocol is used to manipulate a remote NamedCache
            running within a Coherence cluster.
            </summary>
            <author>Ivan Cikic  2006.08.25</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Protocol"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol.InstantiateMessageFactory(System.Int32)">
            <summary>
            Instantiate a new <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheFactory"/> for the given
            version of this NamedCacheProtocol.
            </summary>
            <param name="version">
            The version of the NamedCacheProtocol that the returned
            <b>NamedCacheFactory</b> will use.
            </param>
            <returns>
            A new <b>NamedCacheFactory</b> for the given version of this
            NamedCacheProtocol.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol.m_instance">
            <summary>
            The singleton NamedCacheProtocol instance.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol.Instance">
            <summary>
            The singleton NamedCacheProtocol instance.
            </summary>
            <value>
            The singleton NamedCacheProtocol instance.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheResponse">
            <summary>
            Generic <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> used for basic NamedCache Protocol
            Responses.
            </summary>
            <author>Ana Cikic  2006.08.25</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Response"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheResponse.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheResponse.Run">
            <summary>
            Execute the action specific to the <see cref="T:Tangosol.Net.Messaging.Impl.Message"/>
            implementation.
            </summary>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Message.Run"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheResponse.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.PutAllRequest">
            <summary>
            The PutAllRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/> sent to update
            one or more mappings in a remote NamedCache.
            </summary>
            <author>Goran Milosavljevic  2006.08.31</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.PutAllRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.PutAllRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.PutAllRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.PutAllRequest.m_map">
            <summary>
            The map of entries to be updated when this message is
            processed.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.PutAllRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.PutAllRequest.Map">
            <summary>
            The map of entries to be updated when this message is processed.
            </summary>
            <value>
            The map of entries to be updated when this message is processed.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.PutRequest">
            <summary>
            The PutRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/> sent to map a key to a
            value in a remote NamedCache.
            </summary>
            <author>Ivan Cikic  2006.08.30</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.PutRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.PutRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.PutRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.PutRequest.m_expiryDelay">
            <summary>
            The entry expiration value.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.PutRequest.m_isReturnRequired">
            <summary>
            If true this PutRequest should return the old value back
            to the caller; otherwise the return value will be ignored.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.PutRequest.m_Value">
            <summary>
            The new entry value.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.PutRequest.ExpiryDelay">
            <summary>
            The entry expiration value.
            </summary>
            <value>
            The entry expiration value.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.PutRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.PutRequest.Value">
            <summary>
            The new entry value.
            </summary>
            <value>
            The new entry value.
            </value>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.PutRequest.IsReturnRequired">
            <summary>
            If <b>true</b>, this PutRequest should return the old value back
            to the caller; otherwise the return value will be ignored.
            </summary>
            <value>
            <b>true</b> if this PutRequest should return the old value back
            to the caller; <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.QueryRequest">
            <summary>
            The QueryRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.FilterRequest"/> sent to retrieve a
            set of keys or entries in a remote NamedCache.
            </summary>
            <author>Goran Milosavljevic  2006.09.04</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.FilterRequest"/>
            <seealso cref="T:Tangosol.Util.IFilter"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.QueryRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.QueryRequest.InstantiateResponse(Tangosol.Net.Messaging.IMessageFactory)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> for this IRequest.
            </summary>
            <param name="factory">
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that must be used to create the
            returned <b>Response</b>; never <c>null</c>.
            </param>
            <returns>
            A new <b>Response</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.QueryRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.QueryRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.QueryRequest.m_keysOnly">
            <summary>
            Specifies what kind of response is required: if <b>true</b>,
            a keys collection is sent back; otherwise an entries collection.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.QueryRequest.m_cookie">
            <summary>
            Opaque cookie used to support streaming.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.QueryRequest.m_filterCookie">
            <summary>
            The cookie used by a LimitFilter (see <b>Filter</b> proporty).
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.QueryRequest.Cookie">
            <summary>
            Opaque cookie used to support streaming.
            </summary>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.PartialResponse.Cookie"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.QueryRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.QueryRequest.KeysOnly">
            <summary>
            Specifies what kind of response is required: if <b>true</b>,
            a keys collection is sent back; otherwise an entries collection.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.QueryRequest.FilterCookie">
            <summary>
            The cookie used by a request that uses a LimitFilter (See <b>Filter</b> property).
            </summary>
            <value>
            A filter cookie for the request.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.RemoveAllRequest">
            <summary>
            The RemoveAllRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest"/> sent to remove
            one or more mappings in a remote NamedCache.
            </summary>
            <author>Goran Milosavljevic  2006.08.31</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeySetRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.RemoveAllRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.RemoveAllRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.RemoveRequest">
            <summary>
            The RemoveRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/> sent to remove a
            mapping in a remote NamedCache.
            </summary>
            <author>Goran Milosavljevic  2006.09.04</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.RemoveRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.RemoveRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.ReadExternal(Tangosol.IO.Pof.IPofReader)"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.NamedCache.RemoveRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
            <seealso cref="M:Tangosol.Net.Messaging.Impl.Request.WriteExternal(Tangosol.IO.Pof.IPofWriter)"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.RemoveRequest.m_isReturnRequired">
            <summary>
            If <b>true</b>, this RemoveRequest should return the old value
            back to the caller; otherwise the return value will be ignored.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.RemoveRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.RemoveRequest.IsReturnRequired">
            <summary>
            If <b>true</b>, this RemoveRequest should return the old value
            back to the caller; otherwise the return value will be ignored.
            </summary>
            <value>
            <b>true</b> if this RemoveRequest should return the old value
            back to the caller; <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.SizeRequest">
            <summary>
            The SizeRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/> sent to obtain
            the current size of a remote NamedCache.
            </summary>
            <author>Ivan Cikic  2006.08.31</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.SizeRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.SizeRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.NamedCache.UnlockRequest">
            <summary>
            The LockRequest is a <see cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/> sent to unlock a
            specified key in a remote NamedCache.
            </summary>
            <author>Goran Milosavljevic  2006.08.31</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.KeyRequest"/>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.NamedCache.NamedCacheProtocol"/>
        </member>
        <member name="F:Tangosol.Net.Messaging.Impl.NamedCache.UnlockRequest.TYPE_ID">
            <summary>
            The type identifier for this Message class.
            </summary>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.NamedCache.UnlockRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
            <seealso cref="P:Tangosol.Net.Messaging.Impl.Message.TypeId"/>
        </member>
        <member name="T:Tangosol.Net.Messaging.Impl.TcpConnection">
            <summary>
            <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> implementation that wraps a TCP/IP Socket.
            </summary>
            <author>Ana Cikic  2006.08.23</author>
            <seealso cref="T:Tangosol.Net.Messaging.Impl.Connection"/>
        </member>
        <member name="M:Tangosol.Net.Messaging.Impl.TcpConnection.GetDescription">
            <summary>
            Return a human-readable description of this TcpConnection.
            </summary>
            <returns>
            A string representation of this TcpConnection.
            </returns>
            <since>Coherence 3.7</since>
        </member>
        <member name="P:Tangosol.Net.Messaging.Impl.TcpConnection.Client">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tangosol.Net.Partition.PartitionSet">
            <summary>
            PartitionSet is a light-weight data structure that represents a set of
            partitions that are used in parallel processing. This set quite often
            accompanies a result of partial parallel execution and is used to determine
            whether or not the entire set of partitions was successfully processed.
            
            Note that all PartitionSet operations that take another set as an argument
            assume that both sets have the same partition count.
            
            <author>tb 2011.05.26</author>
            <since>Coherence 3.7.1</since>
            </summary>
        </member>
        <member name="M:Tangosol.Net.Partition.PartitionSet.#ctor">
            <summary>
            Default constructor (necessary for IPortableObject interface).
            </summary>
        </member>
        <member name="M:Tangosol.Net.Partition.PartitionSet.Add(System.Int32)">
            <summary>
            Add the specified partition to the set.
            </summary>
            <param name="nPartition">
            The partition to add.
            </param>
            <returns>
            True if the specified partition was actually added as a result
            of this call; false otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Partition.PartitionSet.Add(Tangosol.Net.Partition.PartitionSet)">
            <summary>
            Add the specified PartitionSet to this set.
            </summary>
            <param name="partitions">
            The PartitionSet to add.
            </param>
            <returns>
            True if all of the partitions were actually added as a result
            of this call; false otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Partition.PartitionSet.Fill">
            <summary>
            Fill the set to contain all the partitions.
            </summary>
        </member>
        <member name="M:Tangosol.Net.Partition.PartitionSet.Next(System.Int32)">
            <summary>
            Return an index of the first marked partition that is greater than or
            equal to the specified partition. If no such partition exists then -1 is
            returned.
            
            This method could be used to iterate over all marked partitions:
            <pre>
            for (int i = ps.Next(0); i &gt;= 0; i = ps.Next(i+1))
                {
                // process partition
                }
            </pre>
            
            </summary>
            <param name="nPartition">
            The partition to start checking from (inclusive).
            </param>
            <returns>
            The next marked partition, or -1 if no next marked partition
            exists in the set
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            If the specified partition is invalid.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Partition.PartitionSet.getTrailingZeroCount(System.Int64)">
            <summary>
            Determine the number of trailing zero bits in the passed long value.
            </summary>
            <param name="l">
            A long value.
            </param>
            <returns>
            The number of trailing zero bits in the value, from 0
            (indicating that the least significant bit is set) to 64
            (indicating that no bits are set).
            </returns>
        </member>
        <member name="M:Tangosol.Net.Partition.PartitionSet.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Partition.PartitionSet.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Net.Partition.PartitionSet.ToString">
            <summary>
            Returns a string representation of the <b>PartitionSet</b>.
            </summary>
            <returns>
            A string representation of the <b>PartitionSet</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Partition.PartitionSet.m_cPartitions">
            <summary>
            Total partition count.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Partition.PartitionSet.m_alBits">
            <summary>
            A bit array representing the partitions, stored as an array of longs.
            </summary> 
        </member>
        <member name="F:Tangosol.Net.Partition.PartitionSet.m_lTailMask">
            <summary>
            A mask for the last long that indicates what bits get used.
            </summary> 
        </member>
        <member name="F:Tangosol.Net.Partition.PartitionSet.m_cMarked">
            <summary>
            A cached count of marked partitions; -1 indicates that the value must 
            be recalculated.
            </summary> 
        </member>
        <member name="T:Tangosol.Net.Partition.PartitionSet.Format">
            <summary>
            Serialization format indicator.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Partition.PartitionSet.Format.MarkedNone">
            <summary>
            Indicates that no partitions are marked; 
            MarkedNone requires no additional data.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Partition.PartitionSet.Format.MarkedFew">
            <summary>
            Indicates that a small number of partitions are marked; 
            followed by stream of packed integers indicating gaps 
            between each marked partition, terminated with a -1.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Partition.PartitionSet.Format.MarkedMany">
            <summary>
            Indicates that a large number of partitions are marked; 
            followed by a sequence of 64-bit values sufficient to 
            represent the cardinality of the PartitionSet.
            </summary>
        </member>
        <member name="F:Tangosol.Net.Partition.PartitionSet.Format.MarkedAll">
            <summary>
            Indicates that all partitions are marked; 
            MarkedAll requires no additional data.
            </summary>
        </member>
        <member name="T:Tangosol.Net.RequestTimeoutException">
            <summary>
            Signals that a request execution in a clustered environment did not
            complete in a pre-determined amount of time.
            </summary>
            <remarks>
            For some specific requests this exception could carry a partial
            execution result.
            </remarks>
            <author>Gene Gleyzer  2006.11.02</author>
            <author>Ana Cikic  2007.12.13</author>
            <since>Coherence 3.3</since>
            <seealso cref="T:Tangosol.Net.IPriorityTask"/>
        </member>
        <member name="M:Tangosol.Net.RequestTimeoutException.#ctor">
            <summary>
            Constructs a RequestTimeoutException with no detail message.
            </summary>
        </member>
        <member name="M:Tangosol.Net.RequestTimeoutException.#ctor(System.String)">
            <summary>
            Constructs a RequestTimeoutException with the specified detail
            message.
            </summary>
            <param name="s">
            The string that contains a detailed message.
            </param>
        </member>
        <member name="M:Tangosol.Net.RequestTimeoutException.#ctor(System.Exception)">
            <summary>
            Construct a RequestTimeoutException from an <b>Exception</b>
            object.
            </summary>
            <param name="e">
            The <b>Exception</b> object.
            </param>
        </member>
        <member name="M:Tangosol.Net.RequestTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a RequestTimeoutException from a <b>Exception</b>
            object and an additional description.
            </summary>
            <param name="s">
            The additional description.
            </param>
            <param name="e">
            The <b>Exception</b> object.
            </param>
        </member>
        <member name="M:Tangosol.Net.RequestTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct a RequestTimeoutException class with serialized data.
            </summary>
            <param name="info">
            The <b>SerializationInfo</b> that holds the serialized object
            data about the exception being thrown.
            </param>
            <param name="context">
            The <b>StreamingContext</b> that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="T:Tangosol.Net.Security.IIdentityTransformer">
            <summary>
            An IIdentityTransformer transforms an IPrincipal to a token that asserts 
            identity.
            </summary>
            <author>David Guy  2009.12.04</author>
            <since>Coherence 3.6</since>
        </member>
        <member name="M:Tangosol.Net.Security.IIdentityTransformer.TransformIdentity(System.Security.Principal.IPrincipal,Tangosol.Net.IService)">
            <summary>
            Transform a Subject to a token that asserts an identity.
            </summary>
            <param name="principal">
            The IPrincipal representing a user.
            </param>
            <param name="service">
            The IService requesting an identity token.
            </param>
            <returns>
            The token that asserts identity. 
            </returns>
            <exception cref="T:System.Security.SecurityException">
            If the identity transformation fails.
            </exception>
            <since>
            Coherence 3.7 added service param which intentionally breaks 
            compatibility with Coherence 3.6
            </since>
        </member>
        <member name="T:Tangosol.Net.Security.Impl.DefaultIdentityAsserter">
            <summary>
            The default implementation of the IIdentityAsserter.
            </summary>
            <remarks>
            The default implementation asserts that the token is an IPrincipal.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Security.Impl.DefaultIdentityAsserter.AssertIdentity(System.Object,Tangosol.Net.IService)">
            <summary>
            Asserts identity <see cref="M:Tangosol.Net.Security.IIdentityAsserter.AssertIdentity(System.Object,Tangosol.Net.IService)"/>
            </summary>
            <param name="oToken">
            Identity token.
            </param>
            <param name="service">
            The service the identity is asserted for.
            </param>
            <returns>
            The <b>IPrincipal</b> token; could be null.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Security.Impl.DefaultIdentityAsserter.Instance">
            <summary>
            An instance of the DefaultIdentityAsserter.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Security.Impl.DefaultIdentityTransformer">
            <summary>
            The default implementation of the IIdentityTransformer.
            </summary>
            <remarks>
            The default implementation returns the IPrincipal that it receives.
            </remarks>
        </member>
        <member name="M:Tangosol.Net.Security.Impl.DefaultIdentityTransformer.TransformIdentity(System.Security.Principal.IPrincipal,Tangosol.Net.IService)">
            <summary>
            Transforms identity <see cref="M:Tangosol.Net.Security.IIdentityTransformer.TransformIdentity(System.Security.Principal.IPrincipal,Tangosol.Net.IService)"/>
            </summary>
            <param name="principal">
            An <b>IPrincipal</b>.
            </param>
            <param name="service">
            The service the principal is for.
            </param>
            <returns>
            The <b>IPrincipal</b> it receives; could be null.
            </returns>
        </member>
        <member name="F:Tangosol.Net.Security.Impl.DefaultIdentityTransformer.Instance">
            <summary>
            An instance of the DefaultIdentityTransformer.
            </summary>
        </member>
        <member name="T:Tangosol.Net.Security.Impl.SimplePrincipal">
            <summary>
            Simple <see cref="T:System.Security.Principal.IPrincipal"/> implementation that extends <see cref="T:System.Security.Principal.GenericPrincipal"/>,
            implementing only <b>Equals</b> and <b>GetHashCode</b>.
            For hash code generation and equality comparison, <b>SimplePrincipal</b> uses
            only the <b>Identity.Name</b> property.
            </summary>
            <author>Pat Rollman  2013.12.2</author>
            <since>Coherence 3.7.1.11</since>
        </member>
        <member name="M:Tangosol.Net.Security.Impl.SimplePrincipal.#ctor(System.Security.Principal.IIdentity,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="id">
            <b>IIdentity </b> a generic user representation.
            </param>
            <param name="roles">
            A list of roles to which the user represented by IIdentity belongs.
            </param>
        </member>
        <member name="M:Tangosol.Net.Security.Impl.SimplePrincipal.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">
            The object to compare with the current object.
            </param>
            <returns>
            <b>true</b> if obj is a <b>SimplePrincipal</b> and its <b>Identity.Name</b> matches that of the current object.
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Net.Security.Impl.SimplePrincipal.GetHashCode">
            <summary>
            Obtain the hashcode for this object.
            </summary>
            <returns>
            The integer hashcode of the <b>Identity.Name</b> property.
            </returns>
        </member>
        <member name="T:Tangosol.Net.SingleAddressProvider">
            <summary>
            SingleAddressProvider is is an implementation of the
            <see cref="T:Tangosol.Net.IAddressProvider"/> interface that wraps a single address 
            dynamically added to this provider.
            </summary>
            <author>Wei Lin  2012.05.31</author>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="M:Tangosol.Net.SingleAddressProvider.#ctor(System.Net.IPEndPoint)">
            <summary>
            Set the SocketAddress for this <see cref="T:Tangosol.Net.IAddressProvider"/>.
            </summary>
            <param name="address">
            the address which will be returned by this <see cref="T:Tangosol.Net.IAddressProvider"/>
            </param>
        </member>
        <member name="M:Tangosol.Net.SingleAddressProvider.Accept">
            <summary>
            This method should be called by the client immediately after it
            determines that it can successfully use an address returned by
            the <see cref="P:Tangosol.Net.IAddressProvider.NextAddress"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Net.SingleAddressProvider.Reject(System.Exception)">
            <summary>
            This method should be called by the client immediately after it
            determines that an attempt to use an address returned by the
            <see cref="P:Tangosol.Net.IAddressProvider.NextAddress"/> has failed.
            </summary>
            <param name="eCause">
            (Optional) an exception that carries the reason why the caller
            rejected the previously returned address.
            </param>
        </member>
        <member name="M:Tangosol.Net.SingleAddressProvider.ToString">
            <summary>
            Return a string representation of this
            ConfigurableAddressProvider.
            </summary>
            <returns>
            A string representation of the list of configured addresses.
            </returns>
        </member>
        <member name="F:Tangosol.Net.SingleAddressProvider.m_address">
            <summary>
            The address returned by this <see cref="T:Tangosol.Net.IAddressProvider"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Net.SingleAddressProvider.m_isAddressGiven">
            <summary>
            Whether the address has already been returned.
            </summary>
        </member>
        <member name="P:Tangosol.Net.SingleAddressProvider.NextAddress">
            <summary>
            Next available address to use.
            </summary>
            <remarks>
            If the caller can successfully use the returned address (e.g. a
            connection was established), it should call the
            IAddressProvider's <see cref="M:Tangosol.Net.IAddressProvider.Accept"/> method.
            </remarks>
            <value>
            The next available address or <c>null</c> if the list of
            available addresses was exhausted.
            </value>
        </member>
        <member name="T:Tangosol.Net.SslStreamProvider">
            <summary>
             Provide a secured network stream (SslStream) for a given connected TcpClient. 
            </summary>
        </member>
        <member name="M:Tangosol.Net.SslStreamProvider.LocalCertificatePicker(System.Object,System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Cryptography.X509Certificates.X509Certificate,System.String[])">
            <summary>
            Selects the local Secure Sockets Layer (SSL) certificate used for authentication.
            </summary>
            <param name="sender">An object that contains state information for this validation.</param>
            <param name="targetHost">The host server specified by the client.</param>
            <param name="localCertificates">An X509CertificateCollection containing local certificates.</param>
            <param name="remoteCertificate">The certificate used to authenticate the remote party.</param>
            <param name="acceptableIssuers">A String array of certificate issuers acceptable to the remote party.</param>
            <returns>An X509Certificate used for establishing an SSL connection.</returns>
        </member>
        <member name="M:Tangosol.Net.SslStreamProvider.StrictCertificateValidation(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Verifies the remote Secure Sockets Layer (SSL) certificate used for authentication.
            </summary>
            <param name="sender">An object that contains state information for this validation.</param>
            <param name="certificate">The certificate used to authenticate the remote party.</param>
            <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
            <param name="sslPolicyErrors">One or more errors associated with the remote certificate.</param>
            <returns>A Boolean value that determines whether the specified certificate is accepted for authentication.</returns>
        </member>
        <member name="M:Tangosol.Net.SslStreamProvider.DefaultCertificateValidation(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Verifies the remote Secure Sockets Layer (SSL) certificate used for authentication. This callback
            ignores the content of the Common Name for the certificate during the validation.
            </summary>
            <param name="sender">An object that contains state information for this validation.</param>
            <param name="certificate">The certificate used to authenticate the remote party.</param>
            <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
            <param name="sslPolicyErrors">One or more errors associated with the remote certificate.</param>
            <returns>A Boolean value that determines whether the specified certificate is accepted for authentication.</returns>
        </member>
        <member name="M:Tangosol.Net.SslStreamProvider.GetStream(System.Net.Sockets.TcpClient)">
            <summary>
            Get a secured stream (SSLStream) from an established connection (TcpClient).
            </summary>
            <param name="client">A connected TcpClient, used to establish a secured connection.</param>
            <returns>A SSLStream connected to the remote host.</returns>
        </member>
        <member name="F:Tangosol.Net.SslStreamProvider.m_xmlConfiguration">
            <summary>
            Contains the configuration for this stream provider
            </summary>
        </member>
        <member name="P:Tangosol.Net.SslStreamProvider.ServerName">
            <summary>
            Gets or sets the host server specified by the client.
            </summary>
        </member>
        <member name="P:Tangosol.Net.SslStreamProvider.Protocols">
            <summary>
            Gets or sets a value that indicates the security protocol used to 
            authenticate this connection.
            </summary>
        </member>
        <member name="P:Tangosol.Net.SslStreamProvider.ClientCertificates">
            <summary>
            Gets or sets a X509CertificateCollection containing local 
            certificates.
            </summary>
        </member>
        <member name="P:Tangosol.Net.SslStreamProvider.LocalCertificateSelector">
            <summary>
            Gets or sets the delegate used to select the local Secure Sockets 
            Layer (SSL) certificate used for authentication.
            </summary>
        </member>
        <member name="P:Tangosol.Net.SslStreamProvider.RemoteCertificateValidator">
            <summary>
            Get or sets the delegate used to verify the remote Secure Sockets 
            Layer (SSL) certificate used for authentication.
            </summary>
        </member>
        <member name="P:Tangosol.Net.SslStreamProvider.Config">
            <summary>
            The current configuration of the object.
            </summary>
            <value>
            The XML configuration or <c>null</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            When setting, if the object is not in a state that allows the
            configuration to be set; for example, if the object has already
            been configured and cannot be reconfigured.
            </exception>
        </member>
        <member name="T:Tangosol.Net.StreamProviderFactory">
            <summary>
            Provides a mechanism for creating StreamProviders.
            </summary>
        </member>
        <member name="M:Tangosol.Net.StreamProviderFactory.CreateProvider(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Create the configured <b>IStreamProvider</b> used to provide
            a network stream.
            </summary>
            <param name="xml">An <b>IXmlElement</b> containing configuraiton for the StreamProviderFactory.</param>
            <returns>An <b>IStreamProvider</b>.</returns>
        </member>
        <member name="T:Tangosol.Net.SystemStreamProvider">
            <summary>
            Will retrun the default (unsecure) network stream.
            </summary>
        </member>
        <member name="M:Tangosol.Net.SystemStreamProvider.GetStream(System.Net.Sockets.TcpClient)">
            <summary>
            Get a default unsecure stream (NetworkStream) from an established connection (TcpClient).
            </summary>
            <param name="client">A connected TcpClient, used to establish a unsecure connection.</param>
            <returns>A NetworkStream connected to the remote host.</returns>
        </member>
        <member name="P:Tangosol.Net.SystemStreamProvider.Config">
            <summary>
            The current configuration of the object.
            </summary>
            <value>
            The XML configuration or <c>null</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            When setting, if the object is not in a state that allows the
            configuration to be set; for example, if the object has already
            been configured and cannot be reconfigured.
            </exception>
        </member>
        <member name="T:Tangosol.Run.Xml.IXmlDocument">
            <summary>
            An interface for XML document access.
            </summary>
            <remarks>
            The IXmlDocumnet interface represents the document as both the root
            element (through the underlying IXmlElement interface) and the
            properties specific to a document, such as DOCTYPE.
            </remarks>
            <author>Cameron Purdy  2001.07.11</author>
            <author>Ana Cikic  2009.08.25</author>
        </member>
        <member name="T:Tangosol.Run.Xml.IXmlElement">
            <summary>
            An interface for XML element access.
            </summary>
            <remarks>
            The IXmlElement interface represents both the element and its content
            (through the underlying IXmlValue interface).
            </remarks>
            <author>Cameron Purdy  2000.10.12</author>
            <author>Ana Cikic  2009.08.25</author>
        </member>
        <member name="T:Tangosol.Run.Xml.IXmlValue">
            <summary>
            An interface for XML element content and element attribute values.
            </summary>
            <author>Cameron Purdy  2000.10.18</author>
            <author>Ana Cikic  2008.08.25</author>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetBoolean">
            <summary>
            Get the value as a <b>boolean</b>.
            </summary>
            <returns>
            The value as a boolean.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.SetBoolean(System.Boolean)">
            <summary>
            Set the <b>boolean</b> value.
            </summary>
            <param name="val">
            A new value of type boolean.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetInt">
            <summary>
            Get the value as an <b>int</b>.
            </summary>
            <returns>
            The value as an int.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.SetInt(System.Int32)">
            <summary>
            Set the <b>int</b> value.
            </summary>
            <param name="val">
            A new value of type int.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetLong">
            <summary>
            Get the value as a <b>long</b>.
            </summary>
            <returns>
            The value as a long.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.SetLong(System.Int64)">
            <summary>
            Set the <b>long</b> value.
            </summary>
            <param name="val">
            A new value of type long.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetDouble">
            <summary>
            Get the value as a <b>double</b>.
            </summary>
            <returns>
            The value as a double.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.SetDouble(System.Double)">
            <summary>
            Set the <b>double</b> value.
            </summary>
            <param name="val">
            A new value of type double.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetDecimal">
            <summary>
            Get the value as a <b>decimal</b>.
            </summary>
            <returns>
            The value as a decimal.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.SetDecimal(System.Decimal)">
            <summary>
            Set the <b>decimal</b> value.
            </summary>
            <param name="val">
            A new value of type decimal.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetString">
            <summary>
            Get the value as a <b>string</b>.
            </summary>
            <returns>
            The value as a string.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.SetString(System.String)">
            <summary>
            Set the <b>string</b> value.
            </summary>
            <param name="val">
            A new value of type string.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetBinary">
            <summary>
            Get the value as <see cref="T:Tangosol.Util.Binary"/>.
            </summary>
            <remarks>
            The XML format is expected to be Base64.
            </remarks>
            <returns>
            The value as a Binary object.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.SetBinary(Tangosol.Util.Binary)">
            <summary>
            Set the <see cref="T:Tangosol.Util.Binary"/> value.
            </summary>
            <param name="val">
            A new value of type Binary.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetDateTime">
            <summary>
            Get the value as a <b>DateTime</b>.
            </summary>
            <returns>
            The value as a DateTime.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.SetDateTime(System.DateTime)">
            <summary>
            Set the value as a <b>DateTime</b>.
            </summary>
            <param name="val">
            A new value of type DateTime.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetBoolean(System.Boolean)">
            <summary>
            Get the value as a <b>boolean</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type boolean.
            </param>
            <returns>
            The value as a boolean.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetInt(System.Int32)">
            <summary>
            Get the value as an <b>int</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type int.
            </param>
            <returns>
            The value as an int.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetLong(System.Int64)">
            <summary>
            Get the value as a <b>long</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type long.
            </param>
            <returns>
            The value as a long.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetDouble(System.Double)">
            <summary>
            Get the value as a <b>double</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type double.
            </param>
            <returns>
            The value as a double.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetDecimal(System.Decimal)">
            <summary>
            Get the value as a <b>decimal</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type decimal.
            </param>
            <returns>
            The value as a decimal.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetString(System.String)">
            <summary>
            Get the value as a <b>string</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type string.
            </param>
            <returns>
            The value as a string.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetBinary(Tangosol.Util.Binary)">
            <summary>
            Get the value as <see cref="T:Tangosol.Util.Binary"/>.
            </summary>
            <remarks>
            The XML format is expected to be Base64.
            </remarks>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type Binary.
            </param>
            <returns>
            The value as a Binary object.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetDateTime(System.DateTime)">
            <summary>
            Get the value as a <b>DateTime</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type DateTime.
            </param>
            <returns>
            The value as a DateTime.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.WriteValue(System.IO.TextWriter,System.Boolean)">
            <summary>
            Write the value as it will appear in XML.
            </summary>
            <param name="writer">
            A <b>TextWriter</b> object to use to write to.
            </param>
            <param name="isPretty">
            <b>true</b> to specify that the output is intended to be as human
            readable as possible.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.ToString">
            <summary>
            Format the XML value into a string in a display format.
            </summary>
            <returns>
            A string representation of the XML value.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.GetHashCode">
            <summary>
            Provide a hash value for this XML value.
            </summary>
            <remarks>
            The hash value is defined as one of the following:
            <list type="number">
            <item>0 if Value is <c>null</c></item>
            <item>otherwise the hash value is the GetHashCode() of the string
            representation of the value</item>
            </list>
            </remarks>
            <returns>
            The hash value for this XML value.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlValue.Equals(System.Object)">
            <summary>
            Compare this XML value with another XML value for equality.
            </summary>
            <param name="o">
            The XML value object to compare to.
            </param>
            <returns>
            <b>true</b> if the values are equal, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlValue.Value">
            <summary>
            Get the value as an object.
            </summary>
            <remarks>
            The following types are supported:
            <list type="bullet">
            <item>Boolean</item>
            <item>Integer</item>
            <item>Long</item>
            <item>Double</item>
            <item>Decimal</item>
            <item>String</item>
            <item>Binary</item>
            <item>DateTime</item>
            </list>
            It is always legal for an implementation to return the value as a
            string, for example returning a binary value in a Base64
            encoding. This method exists to allow one value to copy from
            another value.
            </remarks>
            <value>
            The value as an object or <c>null</c> if the IXmlValue does not
            have a value; attributes never have a <c>null</c> value.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlValue.Parent">
            <summary>
            Get or set the parent element of this value.
            </summary>
            <remarks>
            The parent can not be modified once set.
            </remarks>
            <value>
            The parent element, or <c>null</c> if this value has no parent.
            </value>
            <exception cref="T:System.ArgumentNullException">
            If the specified parent is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If trying to set parent that is already set.
            </exception>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlValue.IsEmpty">
            <summary>
            Determine if the value is empty.
            </summary>
            <value>
            <b>true</b> if the value is empty.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlValue.IsAttribute">
            <summary>
            Determine if this value is an element attribute.
            </summary>
            <value>
            <b>true</b> if this value is an element attribute, otherwise
            <b>false</b>.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlValue.IsContent">
            <summary>
            Determine if this value is an element's content.
            </summary>
            <value>
            <b>true</b> if this value is an element's content, otherwise
            <b>false</b>.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlValue.IsMutable">
            <summary>
            Determine if this value can be modified.
            </summary>
            <remarks>
            If the value can not be modified, all mutating methods are
            required to throw an <b>InvalidOperationException</b>.
            </remarks>
            <value>
            <b>true</b> if this value can be modified, otherwise <b>false</b>
            to indicate that this value is read-only.
            </value>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlElement.GetElement(System.String)">
            <summary>
            Get a child element.
            </summary>
            <remarks>
            This is a convenience method. Elements are accessed and
            manipulated via the list returned from
            <see cref="P:Tangosol.Run.Xml.IXmlElement.ElementList"/>.<br/>
            If multiple child elements exist that have the specified name,
            then the behavior of this method is undefined, and it is
            permitted to return any one of the matching elements, to return
            <c>null</c>, or to throw an arbitrary runtime exception.
            </remarks>
            <param name="name">
            The name of child element.
            </param>
            <returns>
            The specified element as an object implementing IXmlElement, or
            <c>null</c> if the specified child element does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlElement.GetElements(System.String)">
            <summary>
            Get an enumerator of child elements that have a specific name.
            </summary>
            <remarks>
            This is a convenience method. Elements are accessed and
            manipulated via the list returned from
            <see cref="P:Tangosol.Run.Xml.IXmlElement.ElementList"/>.
            </remarks>
            <param name="name">
            The name of child elements.
            </param>
            <returns>
            An enumerator containing all child elements of the specified
            name.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlElement.AddElement(System.String)">
            <summary>
            Create a new element and add it as a child element to this
            element.
            </summary>
            <remarks>
            This is a convenience method. Elements are accessed and
            manipulated via the list returned from
            <see cref="P:Tangosol.Run.Xml.IXmlElement.ElementList"/>.
            </remarks>
            <param name="name">
            The name for the new element.
            </param>
            <returns>
            The new IXmlElement object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the name is <c>null</c> or if the name is not a legal XML tag
            name.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If this element is immutable or otherwise can not add a child
            element.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlElement.FindElement(System.String)">
            <summary>
            Find a child element with the specified '/'-delimited path.
            </summary>
            <remarks>
            This is based on a subset of the XPath specification, supporting:
            <list type="bullet">
            <item>Leading '/' to specify root</item>
            <item>Use of '/' as a path delimiter</item>
            <item>Use of '..' to specify parent</item>
            </list>
            This is a convenience method. Elements are accessed and
            manipulated via the list returned from
            <see cref="P:Tangosol.Run.Xml.IXmlElement.ElementList"/>.<br/>
            If multiple child elements exist that have the specified name,
            then the behavior of this method is undefined, and it is
            permitted to return any one of the matching elements, to return
            <c>null</c>, or to throw an arbitrary runtime exception.
            </remarks>
            <param name="path">
            Element path.
            </param>
            <returns>
            The specified element as an object implementing IXmlElement, or
            <c>null</c> if the specified child element does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlElement.GetSafeElement(System.String)">
            <summary>
            Return the specified child element using the same path notation
            as supported by <see cref="M:Tangosol.Run.Xml.IXmlElement.FindElement(System.String)"/>, but return a
            read-only element if the specified element does not exist.
            </summary>
            <remarks>
            <b>This method never returns <c>null</c>.</b><br/>
            This is a convenience method. Elements are accessed and
            manipulated via the list returned from
            <see cref="P:Tangosol.Run.Xml.IXmlElement.ElementList"/>.<br/>
            If multiple child elements exist that have the specified name,
            then the behavior of this method is undefined, and it is
            permitted to return any one of the matching elements, to return
            <c>null</c>, or to throw an arbitrary runtime exception.
            </remarks>
            <param name="path">
            Element path.
            </param>
            <returns>
            The specified element (never <c>null</c>) as an object
            implementing IXmlElement for read-only use.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlElement.EnsureElement(System.String)">
            <summary>
            Ensure that a child element exists.
            </summary>
            <remarks>
            This is a convenience method. It combines the functionality of
            <see cref="M:Tangosol.Run.Xml.IXmlElement.FindElement(System.String)"/> and
            <see cref="M:Tangosol.Run.Xml.IXmlElement.AddElement(System.String)"/>. If any part of the path does
            not exist create new child elements to match the path.
            </remarks>
            <param name="path">
            Element path.
            </param>
            <returns>
            The existing or new IXmlElement object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the name is <c>null</c> or if any part of the path is not a
            legal XML tag name.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If any element in the path is immutable or otherwise can not add
            a child element.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlElement.GetAttribute(System.String)">
            <summary>
            Get an attribute value.
            </summary>
            <remarks>
            This is a convenience method. Attributes are accessed and
            manipulated via the dictionary returned from
            <see cref="P:Tangosol.Run.Xml.IXmlElement.Attributes"/>.
            </remarks>
            <param name="name">
            The name of the attribute.
            </param>
            <returns>
            The value of the specified attribute, or <c>null</c> if the
            attribute does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlElement.SetAttribute(System.String,Tangosol.Run.Xml.IXmlValue)">
            <summary>
            Set an attribute value.
            </summary>
            <remarks>
            If the attribute does not already exist, and the new value is
            non-null, then the attribute is added and its value is set to the
            passed value. If the attribute does exist, and the new value is
            non-null, then the attribute's value is updated to the passed
            value. If the attribute does exist, but the new value is
            <c>null</c>, then the attribute and its corresponding value are
            removed.<br/>
            This is a convenience method. Attributes are accessed and
            manipulated via the dictionary returned from
            <see cref="P:Tangosol.Run.Xml.IXmlElement.Attributes"/>.
            </remarks>
            <param name="name">
            The name of the attribute.
            </param>
            <param name="value">
            The new value for the attribute; <c>null</c> indicates that the
            attribute should be removed.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlElement.AddAttribute(System.String)">
            <summary>
            Provides a means to add a new attribute value.
            </summary>
            <remarks>
            If the attribute of the same name already exists, it is returned,
            otherwise a new value is created and added as an attribute.<br/>
            This is a convenience method. Attributes are accessed and
            manipulated via the dictionary returned from
            <see cref="P:Tangosol.Run.Xml.IXmlElement.Attributes"/>.
            </remarks>
            <param name="name">
            The name of the attribute.
            </param>
            <returns>
            The newly added attribute value.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlElement.GetSafeAttribute(System.String)">
            <summary>
            Get an attribute value, and return a temporary value if the
            attribute does not exist.
            </summary>
            This is a convenience method. Attributes are accessed and
            manipulated via the dictionary returned from
            <see cref="P:Tangosol.Run.Xml.IXmlElement.Attributes"/>.
            <param name="name">
            The name of the attribute.
            </param>
            <returns>
            The value of the specified attribute, or a temporary value if
            the attribute does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlElement.WriteXml(System.IO.TextWriter,System.Boolean)">
            <summary>
            Write the element as it will appear in XML.
            </summary>
            <param name="writer">
            A <b>TextWriter</b> object to use to write to.
            </param>
            <param name="isPretty">
            <b>true</b> to specify that the output is intended to be as human
            readable as possible.
            </param>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlElement.Name">
            <summary>
            Get or set the name of the element.
            </summary>
            <remarks>
            Setter is intended primarily to be utilized to configure a newly
            instantiated element before adding it as a child element to
            another element.<br/>
            Implementations of this interface that support read-only
            documents are expected to throw <b>InvalidOperationException</b>
            from this method if the document (or this element) is in a
            read-only state.<br/>
            If this IXmlElement has a parent IXmlElement, then the
            implementation of this interface is permitted to throw
            <b>InvalidOperationException</b> from this method. This results
            from typical document implementations in which the name of an
            element that is a child of another element is immutable; the W3C
            DOM interfaces are one example.
            </remarks>
            <value>
            The element name.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlElement.Root">
            <summary>
            Get the root element.
            </summary>
            <remarks>
            This is a convenience property. Parent element is retrived using
            <see cref="P:Tangosol.Run.Xml.IXmlValue.Parent"/>.
            </remarks>
            <value>
            The root element for this element.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlElement.AbsolutePath">
            <summary>
            Get the '/'-delimited path of the element starting from the root
            element.
            </summary>
            <remarks>
            This is a convenience property. Elements are retrieved by simple
            name using <see cref="P:Tangosol.Run.Xml.IXmlElement.Name"/>.
            </remarks>
            <returns>
            The element path.
            </returns>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlElement.ElementList">
            <summary>
            Get the list of all child elements.
            </summary>
            <remarks>
            The contents of the list implement the <see cref="T:Tangosol.Run.Xml.IXmlValue"/>
            interface. If this IXmlElement is mutable, then the list returned
            from this method is expected to be mutable as well.<br/>
            An element should be fully configured before it is added to the
            list:
            <list type="bullet">
            <item>The IList implementation is permitted (and most
            implementations are expected) to instantiate its own copy of any
            IXmlElement objects added to it.</item>
            <item>Certain properties of an element (such as
            <see cref="P:Tangosol.Run.Xml.IXmlElement.Name"/>) may not be settable once the element has been
            added.</item>
            </list>
            </remarks>
            <value>
            An <b>IList</b> containing all elements of this IXmlElement.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlElement.Comment">
            <summary>
            Get or set the text of any comments that are in the XML element.
            </summary>
            <remarks>
            <b>The XML specification does not allow a comment to contain the
            string "--".</b><br/>
            An element can contain many comments interspersed randomly with
            textual values and child elements. In reality, comments are
            rarely used. The purpose of this method and the corresponding
            mutator are to ensure that if comments do exist, that their text
            will be accessible through this interface and not lost through a
            transfer from one instance of this interface to another.
            </remarks>
            <value>
            The comment text from this element (not including the "<!--" and
            "-->") or <c>null</c> if there was no comment.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlElement.Attributes">
            <summary>
            Get the dictionary of all attributes.
            </summary>
            <remarks>
            The dictionary is keyed by attribute names. The corresponding
            values are non-null objects that implement the <b>IXmlValue</b>
            interface.
            </remarks>
            <value>
            A <b>IDictionary</b> containing all attributes of this
            IXmlElement; the return value will never be <c>null</c>, although
            it may be an empty dictionary.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlDocument.DtdUri">
            <summary>
            Get or set the URI of the DTD (DOCTYPE) for the document.
            </summary>
            <remarks>
            This is referred to as the System Identifier by the XML
            specification.
            </remarks>
            <example>
            http://java.sun.com/j2ee/dtds/web-app_2_2.dtd
            </example>
            <value>
            The document type URI.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlDocument.DtdName">
            <summary>
            Get or set the public identifier of the DTD (DOCTYPE) for the
            document.
            </summary>
            <example>
            -//Sun Microsystems, Inc.//DTD Web Application 1.2//EN
            </example>
            <value>
            The DTD public identifier.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlDocument.Encoding">
            <summary>
            Get or set the encoding string for the XML document.
            </summary>
            <remarks>
            Documents that are parsed may or may not have the encoding string
            from the persistent form of the document.
            </remarks>
            <value>
            The encoding set for the document.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.IXmlDocument.DocumentComment">
            <summary>
            Get or set the XML comment that appears outside of the root
            element.
            </summary>
            <remarks>
            This differs from the <see cref="P:Tangosol.Run.Xml.IXmlElement.Comment"/> property
            of this object, which refers to the comment within the root
            element.
            </remarks>
            <value>
            The document comment.
            </value>
        </member>
        <member name="T:Tangosol.Run.Xml.IXmlDocumentExtension">
            <summary>
            An extension to the IXmlDocument to iterate through all nodes and perform
            task.
            </summary>
            <author>Luk Ho  2015.11.5</author>
            <since>Coherence  12.2.1.0.1</since>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlDocumentExtension.IterateThroughAllNodes(Tangosol.Run.Xml.IXmlDocument,System.Action{Tangosol.Run.Xml.IXmlElement})">
            <summary>
            Takes an IXmlDocument and iterate through all nodes to perform action
            on each node.
            </summary>
            <param name="doc">The <see cref="T:Tangosol.Run.Xml.IXmlDocument"/>.</param>
            <param name="elementVisitor">The action to perform.</param>
        </member>
        <member name="M:Tangosol.Run.Xml.IXmlDocumentExtension.processChildren(Tangosol.Run.Xml.IXmlElement,System.Action{Tangosol.Run.Xml.IXmlElement})">
            <summary>
            Perform the action and recursively iterate through its children.
            </summary>
            <param name="node">The XML node to iterate through.</param>
            <param name="elementVisitor">The action to perform.</param>
        </member>
        <member name="T:Tangosol.Run.Xml.SimpleDocument">
            <summary>
            A simple implementation of the IXmlDocument interface.
            </summary>
            <remarks>
            Protected methods are provided to support inheriting classes.
            </remarks>
            <author>Cameron Purdy  2000.10.20</author>
            <author>Ana Cikic  2009.08.27</author>
        </member>
        <member name="T:Tangosol.Run.Xml.SimpleElement">
            <summary>
            A simple implementation of the IXmlElement interface.
            </summary>
            <remarks>
            Protected methods are provided to support inheriting classes.
            </remarks>
            <author>Cameron Purdy  2000.10.20</author>
            <author>Ana Cikic  2009.08.27</author>
        </member>
        <member name="T:Tangosol.Run.Xml.SimpleValue">
            <summary>
            A simple implementation of the <see cref="T:Tangosol.Run.Xml.IXmlValue"/> interface.
            </summary>
            <remarks>
            Protected methods are provided to support inheriting classes.
            </remarks>
            <author>Cameron Purdy  2000.10.18</author>
            <author>Ana Cikic  2009.08.25</author>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.#ctor">
            <summary>
            Construct an empty SimpleValue.
            </summary>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.#ctor(System.Object)">
            <summary>
            Construct a SimpleValue.
            </summary>
            <remarks>
            Constructs an element's content value from the passed object
            value. If the object is a string, then the string should be
            un-escaped by this point; it must not still be in the form of
            the CDATA construct.
            </remarks>
            <param name="value">
            The initial value for this SimpleValue.
            </param>
            <exception cref="T:System.ArgumentException">
            If the string value is illegal.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.#ctor(System.Object,System.Boolean)">
            <summary>
            Construct a SimpleValue.
            </summary>
            <remarks>
            Constructs an element's content or attribute value from the
            passed string value. The string should be un-escaped by this
            point; it must not still be in the form of the CDATA construct.
            </remarks>
            <param name="value">
            The initial value for this SimpleValue.
            </param>
            <param name="isAttribute">
            <b>true</b> if this SimpleValue is an element attribute value;
            <b>false</b> if an element's content's value.
            </param>
            <exception cref="T:System.ArgumentException">
            If the string value is illegal.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.#ctor(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Construct a SimpleValue.
            </summary>
            <remarks>
            Constructs an element's content or attribute value from the
            passed string value, and also allows the caller to specify that
            the value is immutable. The string should be un-escaped by this
            point; it must not still be in the form of the CDATA construct.
            </remarks>
            <param name="value">
            The initial value for this SimpleValue.
            </param>
            <param name="isAttribute">
            <b>true</b> if this SimpleValue is an element attribute value;
            <b>false</b> if an element's content's value.
            </param>
            <param name="isReadOnly">
            <b>true</b> if this SimpleValue is intended to be read-only once
            the constructor has finished.
            </param>
            <exception cref="T:System.ArgumentException">
            If the string value is illegal.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetBoolean">
            <summary>
            Get the value as a <b>boolean</b>.
            </summary>
            <returns>
            The value as a boolean.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetBoolean(System.Boolean)">
            <summary>
            Get the value as a <b>boolean</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type boolean.
            </param>
            <returns>
            The value as a boolean.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.SetBoolean(System.Boolean)">
            <summary>
            Set the <b>boolean</b> value.
            </summary>
            <param name="val">
            A new value of type boolean.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetInt">
            <summary>
            Get the value as an <b>int</b>.
            </summary>
            <returns>
            The value as an int.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetInt(System.Int32)">
            <summary>
            Get the value as an <b>int</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type int.
            </param>
            <returns>
            The value as an int.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.SetInt(System.Int32)">
            <summary>
            Set the <b>int</b> value.
            </summary>
            <param name="val">
            A new value of type int.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetLong">
            <summary>
            Get the value as a <b>long</b>.
            </summary>
            <returns>
            The value as a long.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetLong(System.Int64)">
            <summary>
            Get the value as a <b>long</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type long.
            </param>
            <returns>
            The value as a long.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.SetLong(System.Int64)">
            <summary>
            Set the <b>long</b> value.
            </summary>
            <param name="val">
            A new value of type long.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetDouble">
            <summary>
            Get the value as a <b>double</b>.
            </summary>
            <returns>
            The value as a double.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetDouble(System.Double)">
            <summary>
            Get the value as a <b>double</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type double.
            </param>
            <returns>
            The value as a double.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.SetDouble(System.Double)">
            <summary>
            Set the <b>double</b> value.
            </summary>
            <param name="val">
            A new value of type double.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetDecimal">
            <summary>
            Get the value as a <b>decimal</b>.
            </summary>
            <returns>
            The value as a decimal.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetDecimal(System.Decimal)">
            <summary>
            Get the value as a <b>Decimal</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type decimal.
            </param>
            <returns>
            The value as a Decimal.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.SetDecimal(System.Decimal)">
            <summary>
            Set the <b>decimal</b> value.
            </summary>
            <param name="val">
            A new value of type decimal.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetString">
            <summary>
            Get the value as a <b>string</b>.
            </summary>
            <returns>
            The value as a string.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetString(System.String)">
            <summary>
            Get the value as a <b>string</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type string.
            </param>
            <returns>
            The value as a string.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.SetString(System.String)">
            <summary>
            Set the <b>string</b> value.
            </summary>
            <param name="val">
            A new value of type string.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetBinary">
            <summary>
            Get the value as <see cref="T:Tangosol.Util.Binary"/>.
            </summary>
            <remarks>
            The XML format is expected to be Base64.
            </remarks>
            <returns>
            The value as a Binary object.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetBinary(Tangosol.Util.Binary)">
            <summary>
            Get the value as <see cref="T:Tangosol.Util.Binary"/>.
            </summary>
            <remarks>
            The XML format is expected to be Base64.
            </remarks>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type Binary.
            </param>
            <returns>
            The value as a Binary object.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.SetBinary(Tangosol.Util.Binary)">
            <summary>
            Set the <see cref="T:Tangosol.Util.Binary"/> value.
            </summary>
            <param name="val">
            A new value of type Binary.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetDateTime">
            <summary>
            Get the value as a <b>DateTime</b>.
            </summary>
            <returns>
            The value as a DateTime.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetDateTime(System.DateTime)">
            <summary>
            Get the value as a <b>DateTime</b>.
            </summary>
            <param name="defaultValue">
            The default return value if the internal value can not be
            translated into a legal value of type DateTime.
            </param>
            <returns>
            The value as a DateTime.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.SetDateTime(System.DateTime)">
            <summary>
            Set the value as a <b>DateTime</b>.
            </summary>
            <param name="val">
            A new value of type DateTime.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.WriteValue(System.IO.TextWriter,System.Boolean)">
            <summary>
            Write the value as it will appear in XML.
            </summary>
            <param name="writer">
            A <b>TextWriter</b> object to use to write to.
            </param>
            <param name="isPretty">
            <b>true</b> to specify that the output is intended to be as human
            readable as possible.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.EnsureType(Tangosol.Run.Xml.XmlValueType)">
            <summary>
            Change the type of the internal representation of the IXmlValue.
            </summary>
            <remarks>
            A failed conversion will leave the value as <c>null</c>.
            </remarks>
            <param name="type">
            The enumerated type to convert to.
            </param>
            <returns>
            The current value of this SimpleValue object as the specified
            type or <c>null</c>.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.Convert(System.Object,Tangosol.Run.Xml.XmlValueType)">
            <summary>
            Convert the passed object to the specified type.
            </summary>
            <param name="o">
            The object value.
            </param>
            <param name="type">
            The enumerated type to convert to.
            </param>
            <returns>
            An object of the specified type.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.ToString">
            <summary>
            Format the XML value into a string in a display format.
            </summary>
            <returns>
            A string representation of the XML value.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.GetHashCode">
            <summary>
            Provide a hash value for this XML value.
            </summary>
            <remarks>
            The hash value is defined as one of the following:
            <list type="number">
            <item>0 if Value is <c>null</c></item>
            <item>otherwise the hash value is the GetHashCode() of the string
            representation of the value</item>
            </list>
            </remarks>
            <returns>
            The hash value for this XML value.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.Equals(System.Object)">
            <summary>
            Compare this XML value with another XML value for equality.
            </summary>
            <param name="o">
            The object to compare to.
            </param>
            <returns>
            <b>true</b> if the values are equal, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleValue.Clone">
            <summary>
            Creates and returns a copy of this SimpleValue.
            </summary>
            <remarks>
            The returned copy is "unlinked" from the parent and mutable.
            </remarks>
            <returns>
            A clone of this instance.
            </returns>
        </member>
        <member name="F:Tangosol.Run.Xml.SimpleValue.m_parent">
            <summary>
            The <see cref="T:Tangosol.Run.Xml.IXmlElement"/> object that contains this value.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.SimpleValue.m_value">
            <summary>
            The value of this SimpleValue object.
            </summary>
            <remarks>
            The SimpleValue implementation supports the following types for
            this value:
            <list type="bullet">
            <item>Boolean</item>
            <item>Integer</item>
            <item>Long</item>
            <item>Double</item>
            <item>Decimal</item>
            <item>String</item>
            <item>Binary</item>
            <item>DateTime</item>
            </list>
            </remarks>
            All values can convert through string, meaning if necessary, any
            of the above types can be converted to string then to any other
            of the above types.
        </member>
        <member name="F:Tangosol.Run.Xml.SimpleValue.m_isAttribute">
            <summary>
            <b>True</b> if an element attribute value, otherwise assumed to
            be element content.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.SimpleValue.m_isMutable">
            <summary>
            <b>True</b> if this value is mutable.
            </summary>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleValue.Value">
            <summary>
            Get the value as an object.
            </summary>
            <remarks>
            The following types are supported:
            <list type="bullet">
            <item>Boolean</item>
            <item>Integer</item>
            <item>Long</item>
            <item>Double</item>
            <item>Decimal</item>
            <item>String</item>
            <item>Binary</item>
            <item>DateTime</item>
            </list>
            It is always legal for an implementation to return the value as a
            string, for example returning a binary value in a Base64
            encoding. This method exists to allow one value to copy from
            another value.
            </remarks>
            <value>
            The value as an object or <c>null</c> if the IXmlValue does not
            have a value; attributes never have a <c>null</c> value.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleValue.Parent">
            <summary>
            Get or set the parent element of this value.
            </summary>
            <remarks>
            The parent can not be modified once set.
            </remarks>
            <value>
            The parent element, or <c>null</c> if this value has no parent.
            </value>
            <exception cref="T:System.ArgumentNullException">
            If the specified parent is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If trying to set parent that is already set.
            </exception>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleValue.IsEmpty">
            <summary>
            Determine if the value is empty.
            </summary>
            <value>
            <b>true</b> if the value is empty.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleValue.IsAttribute">
            <summary>
            Determine if this value is an element attribute.
            </summary>
            <value>
            <b>true</b> if this value is an element attribute, otherwise
            <b>false</b>.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleValue.IsContent">
            <summary>
            Determine if this value is an element's content.
            </summary>
            <value>
            <b>true</b> if this value is an element's content, otherwise
            <b>false</b>.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleValue.IsMutable">
            <summary>
            Determine if this value can be modified.
            </summary>
            <remarks>
            If the value can not be modified, all mutating methods are
            required to throw an <b>InvalidOperationException</b>.
            </remarks>
            <value>
            <b>true</b> if this value can be modified, otherwise <b>false</b>
            to indicate that this value is read-only.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleValue.InternalValue">
            <summary>
            Get or set the internal value of this IXmlValue.
            </summary>
            <remarks>
            This property acts as a single point to which all accessor calls
            route. As such, it is intended to be extended by inheriting
            implementations.
            </remarks>
            <value>
            The current value of this SimpleValue object or <c>null</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If trying to set value when this IXmlValue is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.#ctor">
            <summary>
            Construct an empty SimpleElement.
            </summary>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.#ctor(System.String)">
            <summary>
            Construct a SimpleElement.
            </summary>
            <param name="name">
            The name of the element.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.#ctor(System.String,System.Object)">
            <summary>
            Construct a SimpleElement.
            </summary>
            <param name="name">
            The name of the element.
            </param>
            <param name="value">
            An initial value for this element.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.GetElement(System.String)">
            <summary>
            Get a child element.
            </summary>
            <remarks>
            This is a convenience method. Elements are accessed and
            manipulated via the list returned from
            <see cref="P:Tangosol.Run.Xml.SimpleElement.ElementList"/>.<br/>
            If multiple child elements exist that have the specified name,
            then the behavior of this method is undefined, and it is
            permitted to return any one of the matching elements, to return
            <c>null</c>, or to throw an arbitrary runtime exception.
            </remarks>
            <param name="name">
            The name of child element.
            </param>
            <returns>
            The specified element as an object implementing IXmlElement, or
            <c>null</c> if the specified child element does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.GetElements(System.String)">
            <summary>
            Get an enumerator of child elements that have a specific name.
            </summary>
            <remarks>
            This is a convenience method. Elements are accessed and
            manipulated via the list returned from
            <see cref="P:Tangosol.Run.Xml.SimpleElement.ElementList"/>.
            </remarks>
            <param name="name">
            The name of child elements.
            </param>
            <returns>
            An enumerator containing all child elements of the specified
            name.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.AddElement(System.String)">
            <summary>
            Create a new element and add it as a child element to this
            element.
            </summary>
            <remarks>
            This is a convenience method. Elements are accessed and
            manipulated via the list returned from
            <see cref="P:Tangosol.Run.Xml.SimpleElement.ElementList"/>.
            </remarks>
            <param name="name">
            The name for the new element.
            </param>
            <returns>
            The new IXmlElement object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the name is <c>null</c> or if the name is not a legal XML tag
            name.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If this element is immutable or otherwise can not add a child
            element.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.FindElement(System.String)">
            <summary>
            Find a child element with the specified '/'-delimited path.
            </summary>
            <remarks>
            This is based on a subset of the XPath specification, supporting:
            <list type="bullet">
            <item>Leading '/' to specify root</item>
            <item>Use of '/' as a path delimiter</item>
            <item>Use of '..' to specify parent</item>
            </list>
            This is a convenience method. Elements are accessed and
            manipulated via the list returned from
            <see cref="P:Tangosol.Run.Xml.SimpleElement.ElementList"/>.<br/>
            If multiple child elements exist that have the specified name,
            then the behavior of this method is undefined, and it is
            permitted to return any one of the matching elements, to return
            <c>null</c>, or to throw an arbitrary runtime exception.
            </remarks>
            <param name="path">
            Element path.
            </param>
            <returns>
            The specified element as an object implementing IXmlElement, or
            <c>null</c> if the specified child element does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.GetSafeElement(System.String)">
            <summary>
            Return the specified child element using the same path notation
            as supported by <see cref="M:Tangosol.Run.Xml.SimpleElement.FindElement(System.String)"/>, but return a
            read-only element if the specified element does not exist.
            </summary>
            <remarks>
            <b>This method never returns <c>null</c>.</b><br/>
            This is a convenience method. Elements are accessed and
            manipulated via the list returned from
            <see cref="P:Tangosol.Run.Xml.SimpleElement.ElementList"/>.<br/>
            If multiple child elements exist that have the specified name,
            then the behavior of this method is undefined, and it is
            permitted to return any one of the matching elements, to return
            <c>null</c>, or to throw an arbitrary runtime exception.
            </remarks>
            <param name="path">
            Element path.
            </param>
            <returns>
            The specified element (never <c>null</c>) as an object
            implementing IXmlElement for read-only use.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.EnsureElement(System.String)">
            <summary>
            Ensure that a child element exists.
            </summary>
            <remarks>
            This is a convenience method. It combines the functionality of
            <see cref="M:Tangosol.Run.Xml.SimpleElement.FindElement(System.String)"/> and
            <see cref="M:Tangosol.Run.Xml.SimpleElement.AddElement(System.String)"/>. If any part of the path does
            not exist create new child elements to match the path.
            </remarks>
            <param name="path">
            Element path.
            </param>
            <returns>
            The existing or new IXmlElement object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the name is <c>null</c> or if any part of the path is not a
            legal XML tag name.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If any element in the path is immutable or otherwise can not add
            a child element.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.GetAttribute(System.String)">
            <summary>
            Get an attribute value.
            </summary>
            <remarks>
            This is a convenience method. Attributes are accessed and
            manipulated via the dictionary returned from
            <see cref="P:Tangosol.Run.Xml.SimpleElement.Attributes"/>.
            </remarks>
            <param name="name">
            The name of the attribute.
            </param>
            <returns>
            The value of the specified attribute, or <c>null</c> if the
            attribute does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SetAttribute(System.String,Tangosol.Run.Xml.IXmlValue)">
            <summary>
            Set an attribute value.
            </summary>
            <remarks>
            If the attribute does not already exist, and the new value is
            non-null, then the attribute is added and its value is set to the
            passed value. If the attribute does exist, and the new value is
            non-null, then the attribute's value is updated to the passed
            value. If the attribute does exist, but the new value is
            <c>null</c>, then the attribute and its corresponding value are
            removed.<br/>
            This is a convenience method. Attributes are accessed and
            manipulated via the dictionary returned from
            <see cref="P:Tangosol.Run.Xml.SimpleElement.Attributes"/>.
            </remarks>
            <param name="name">
            The name of the attribute.
            </param>
            <param name="value">
            The new value for the attribute; <c>null</c> indicates that the
            attribute should be removed.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.AddAttribute(System.String)">
            <summary>
            Provides a means to add a new attribute value.
            </summary>
            <remarks>
            If the attribute of the same name already exists, it is returned,
            otherwise a new value is created and added as an attribute.<br/>
            This is a convenience method. Attributes are accessed and
            manipulated via the dictionary returned from
            <see cref="P:Tangosol.Run.Xml.SimpleElement.Attributes"/>.
            </remarks>
            <param name="name">
            The name of the attribute.
            </param>
            <returns>
            The newly added attribute value.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.GetSafeAttribute(System.String)">
            <summary>
            Get an attribute value, and return a temporary value if the
            attribute does not exist.
            </summary>
            This is a convenience method. Attributes are accessed and
            manipulated via the dictionary returned from
            <see cref="P:Tangosol.Run.Xml.SimpleElement.Attributes"/>.
            <param name="name">
            The name of the attribute.
            </param>
            <returns>
            The value of the specified attribute, or a temporary value if
            the attribute does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.WriteXml(System.IO.TextWriter,System.Boolean)">
            <summary>
            Write the element as it will appear in XML.
            </summary>
            <param name="writer">
            A <b>TextWriter</b> object to use to write to.
            </param>
            <param name="isPretty">
            <b>true</b> to specify that the output is intended to be as human
            readable as possible.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.WriteValue(System.IO.TextWriter,System.Boolean)">
            <summary>
            Write the value as it will appear in XML.
            </summary>
            <param name="writer">
            A <b>TextWriter</b> object to use to write to.
            </param>
            <param name="isPretty">
            <b>true</b> to specify that the output is intended to be as human
            readable as possible.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.CheckMutable">
            <summary>
            Validates that the element is mutable, otherwise throws an
            <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.InstantiateElementList">
            <summary>
            Instantiate an <b>IList</b> implementation that will hold child
            elements.
            </summary>
            <returns>
            A IList that supports IXmlElements.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.InstantiateElement(System.String,System.Object)">
            <summary>
            Instantiate an IXmlElement implementation for an element.
            </summary>
            <param name="name">
            Element name.
            </param>
            <param name="value">
            Element value.
            </param>
            <returns>
            A new IXmlElement to be used as an element.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.InstantiateAttributes">
            <summary>
            Instantiate an <b>IDictionary</b> implementation that will
            support the name to value dictionary used to hold attributes.
            </summary>
            <returns>
            A IDictionary that supports string keys and <b>IXmlValue</b>
            values.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.InstantiateAttribute">
            <summary>
            Instantiate an <see cref="T:Tangosol.Run.Xml.IXmlValue"/> implementation for an
            attribute value.
            </summary>
            <returns>
            A new <b>IXmlValue</b> to be used as an attribute value.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.WriteEmptyTag(System.IO.TextWriter,System.Boolean)">
            <summary>
            Write the element as a combined start/end tag.
            </summary>
            <param name="writer">
            A <b>TextWriter</b> object to use to write to.
            </param>
            <param name="isPretty">
            <b>true</b> to specify that the output is intended to be as human
            readable as possible.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.WriteStartTag(System.IO.TextWriter,System.Boolean)">
            <summary>
            Write the element's start tag.
            </summary>
            <param name="writer">
            A <b>TextWriter</b> object to use to write to.
            </param>
            <param name="isPretty">
            <b>true</b> to specify that the output is intended to be as human
            readable as possible.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.WriteEndTag(System.IO.TextWriter,System.Boolean)">
            <summary>
            Write the element's end tag.
            </summary>
            <param name="writer">
            A <b>TextWriter</b> object to use to write to.
            </param>
            <param name="isPretty">
            <b>true</b> to specify that the output is intended to be as human
            readable as possible.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.WriteAttributes(System.IO.TextWriter,System.Boolean)">
            <summary>
            Write the attributes as part of a start tag.
            </summary>
            <param name="writer">
            A <b>TextWriter</b> object to use to write to.
            </param>
            <param name="isPretty">
            <b>true</b> to specify that the output is intended to be as human
            readable as possible.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.WriteComment(System.IO.TextWriter,System.Boolean)">
            <summary>
            Write the comment as it will appear in XML.
            </summary>
            <param name="writer">
            A <b>TextWriter</b> object to use to write to.
            </param>
            <param name="isPretty">
            <b>true</b> to specify that the output is intended to be as human
            readable as possible.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.WriteChildren(System.IO.TextWriter,System.Boolean)">
            <summary>
            Write the element's children.
            </summary>
            <param name="writer">
            A <b>TextWriter</b> object to use to write to.
            </param>
            <param name="isPretty">
            <b>true</b> to specify that the output is intended to be as human
            readable as possible.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.ToString">
            <summary>
            Format the XML element and all its contained information into a
            string in a display format.
            </summary>
            <remarks>
            Note that this overrides the contract of the ToString() method in
            the super interface IXmlValue.
            </remarks>
            <returns>
            A string representation of the XML element.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.ToString(System.Boolean)">
            <summary>
            Format the XML element and all its contained information into a
            string in a display format.
            </summary>
            <param name="isPretty">
            <b>true</b> to specify that the output is intended to be as human
            readable as possible.
            </param>
            <returns>
            A string representation of the XML element.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.GetHashCode">
            <summary>
            Provide a hash value for this XML element and all of its
            contained information.
            </summary>
            <remarks>
            Note that this overrides the contract of the GetHashCode() method
            in the super interface IXmlValue. The hash value is defined as a
            xor of the following:
            <list type="number">
            <item>the GetHashCode() from the element's value (i.e.
            <c>base.GetHashCode()</c>)</item>
            <item>the GetHashCode() from each attribute name</item>
            <item>the GetHashCode() from each attribute value</item>
            <item>the GetHashCode() from each sub-element</item>
            </list>
            </remarks>
            <returns>
            The hash value for this XML element.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.Equals(System.Object)">
            <summary>
            Compare this XML element and all of its contained information
            with another XML element for equality.
            </summary>
            <remarks>
            Note that this overrides the contract of the Equals() method in
            the super interface IXmlValue.
            </remarks>
            <param name="o">
            The object to compare to.
            </param>
            <returns>
            <b>true</b> if the elements are equal, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.Clone">
            <summary>
            Creates and returns a copy of this SimpleElement.
            </summary>
            <remarks>
            The returned copy is a deep clone of this SimpleElement
            "unlinked" from the parent and mutable.
            </remarks>
            <returns>
            A clone of this instance.
            </returns>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.Name">
            <summary>
            Get or set the name of the element.
            </summary>
            <remarks>
            Setter is intended primarily to be utilized to configure a newly
            instantiated element before adding it as a child element to
            another element.<br/>
            Implementations of this interface that support read-only
            documents are expected to throw <b>InvalidOperationException</b>
            from this method if the document (or this element) is in a
            read-only state.<br/>
            If this IXmlElement has a parent IXmlElement, then the
            implementation of this interface is permitted to throw
            <b>InvalidOperationException</b> from this method. This results
            from typical document implementations in which the name of an
            element that is a child of another element is immutable; the W3C
            DOM interfaces are one example.
            </remarks>
            <value>
            The element name.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.Root">
            <summary>
            Get the root element.
            </summary>
            <remarks>
            This is a convenience property. Parent element is retrived using
            <see cref="P:Tangosol.Run.Xml.IXmlValue.Parent"/>.
            </remarks>
            <value>
            The root element for this element.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.AbsolutePath">
            <summary>
            Get the '/'-delimited path of the element starting from the root
            element.
            </summary>
            <remarks>
            This is a convenience property. Elements are retrieved by simple
            name using <see cref="P:Tangosol.Run.Xml.SimpleElement.Name"/>.
            </remarks>
            <returns>
            The element path.
            </returns>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.ElementList">
            <summary>
            Get the list of all child elements.
            </summary>
            <remarks>
            The contents of the list implement the <see cref="T:Tangosol.Run.Xml.IXmlValue"/>
            interface. If this IXmlElement is mutable, then the list returned
            from this method is expected to be mutable as well.<br/>
            An element should be fully configured before it is added to the
            list:
            <list type="bullet">
            <item>The IList implementation is permitted (and most
            implementations are expected) to instantiate its own copy of any
            IXmlElement objects added to it.</item>
            <item>Certain properties of an element (such as
            <see cref="P:Tangosol.Run.Xml.SimpleElement.Name"/>) may not be settable once the element has been
            added.</item>
            </list>
            </remarks>
            <value>
            An <b>IList</b> containing all elements of this IXmlElement.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.Attributes">
            <summary>
            Get the dictionary of all attributes.
            </summary>
            <remarks>
            The dictionary is keyed by attribute names. The corresponding
            values are non-null objects that implement the <b>IXmlValue</b>
            interface.
            </remarks>
            <value>
            A <b>IDictionary</b> containing all attributes of this
            IXmlElement; the return value will never be <c>null</c>, although
            it may be an empty dictionary.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.Comment">
            <summary>
            Get or set the text of any comments that are in the XML element.
            </summary>
            <remarks>
            <b>The XML specification does not allow a comment to contain the
            string "--".</b><br/>
            An element can contain many comments interspersed randomly with
            textual values and child elements. In reality, comments are
            rarely used. The purpose of this method and the corresponding
            mutator are to ensure that if comments do exist, that their text
            will be accessible through this interface and not lost through a
            transfer from one instance of this interface to another.
            </remarks>
            <value>
            The comment text from this element (not including the "<!--" and
            "-->") or <c>null</c> if there was no comment.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.IsNameMutable">
            <summary>
            Determine if the name can be changed.
            </summary>
            <remarks>
            The default implementation allows a name to be changed. This can
            be overridden by inheriting implementations.
            </remarks>
            <returns>
            <b>true</b> if the name can be changed.
            </returns>
        </member>
        <member name="T:Tangosol.Run.Xml.SimpleElement.SimpleElementList">
            <summary>
            An implementation of <b>IList</b> that only supports IXmlElements
            as the content of the list.
            </summary>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.#ctor(Tangosol.Run.Xml.SimpleElement)">
            <summary>
            Construct an empty SimpleElementList with specified parent
            <b>SimpleElement</b>.
            </summary>
            <param name="parent">
            Parent <b>SimpleElement</b>.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.Add(System.Object)">
            <summary>
            Adds an object to the end of the ArrayList.
            </summary>
            <param name="value">
            The object to be added to the end of the ArrayList. The value
            can be <c>null</c>.
            </param>
            <returns>
            The index at which the value has been added.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of an <b>ICollection</b> to the end of the
            ArrayList.
            </summary>
            <param name="c">
            The <b>ICollection</b> whose elements should be added to the
            end of the ArrayList. The collection itself cannot be
            <c>null</c>, but it can contain elements that are
            <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Collection is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the ArrayList at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which value should be inserted.
            </param>
            <param name="value">
            The object to insert. The value can be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero or greater than
            <see cref="P:System.Collections.ArrayList.Count"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts the elements of a collection into the ArrayList at
            the specified index.
            </summary>
            <param name="index">
            The zero-based index at which the new elements should be
            inserted.
            </param>
            <param name="c">
             The <b>ICollection</b> whose elements should be inserted
            into the ArrayList. The collection itself cannot be
            <c>null</c>, but it can contain elements that are
            <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Collection is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero or greater than
            <see cref="P:System.Collections.ArrayList.Count"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the
            ArrayList.
            </summary>
            <param name="obj">
             The object to remove from the ArrayList. The value can be
            <c>null</c>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the ArrayList.
            </summary>
            <param name="index">
            The zero-based index of the element to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero or greater than
            <see cref="P:System.Collections.ArrayList.Count"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the ArrayList.
            </summary>
            <param name="index">
            The zero-based starting index of the range of elements to
            remove.
            </param>
            <param name="count">
            The number of elements to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero or greater than
            <see cref="P:System.Collections.ArrayList.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Index and count do not denote a valid range of elements in
            the ArrayList.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.Clear">
            <summary>
            Removes all elements from the ArrayList.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.SetRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Copies the elements of a collection over a range of elements
            in the ArrayList.
            </summary>
            <param name="index">
            The zero-based ArrayList index at which to start copying the
            elements of c.
            </param>
            <param name="c">
            The <b>ICollection</b> whose elements to copy to the
            ArrayList. The collection itself cannot be <c>null</c>, but
            it can contain elements that are <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Collection is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero or greater than
            <see cref="P:System.Collections.ArrayList.Count"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.Reverse">
            <summary>
            Reverses the order of the elements in the entire ArrayList.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">
            The zero-based starting index of the range to reverse.
            </param>
            <param name="count">
            The number of elements in the range to reverse.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero or count is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Index and count do not denote a valid range of elements in
            the ArrayList.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.Sort">
            <summary>
            Sorts the elements in the entire ArrayList using the
            <b>IComparable</b> implementation of each element.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a range of elements in ArrayList using
            the specified comparer.
            </summary>
            <param name="index">
            The zero-based starting index of the range to sort.
            </param>
            <param name="count">
            The length of the range to sort.
            </param>
            <param name="comparer">
            The <b>IComparer</b> implementation to use when comparing
            elements or <c>null</c> to use the <b>IComparable</b>
            implementation of each element.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero or count is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Index and count do not denote a valid range of elements in
            the ArrayList.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire ArrayList using the
            specified comparer.
            </summary>
            <param name="comparer">
            The <b>IComparer</b> implementation to use when comparing
            elements or <c>null</c> to use the <b>IComparable</b>
            implementation of each element.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.GetHashCode">
            <summary>
            Provide a hash value for this SimpleElementList. 
            </summary>
            <returns>
            A hash code for this SimpleElementList.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.Equals(System.Object)">
            <summary>
            Compare this list with another for equality.
            </summary>
            <param name="obj">
            The list to compare to.
            </param>
            <returns>
            <b>true</b> if the lists are equal, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.CheckElement(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Validates the passed IXmlElement, copying the element into a
            new valid element if necessary.
            </summary>
            <param name="element">
            The element to validate.
            </param>
            <returns>
            The new valid element.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementList.CheckMutable">
            <summary>
            Validates that the parent element is mutable, otherwise
            throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.SimpleElementList.Parent">
            <summary>
            Parent <b>SimpleElement</b>.
            </summary>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.SimpleElementList.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the element to get or set.
            </param>
            <returns>
            The element at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero or greater than
            <see cref="P:System.Collections.ArrayList.Count"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Parent SimpleElement is not mutable.
            </exception>
        </member>
        <member name="T:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator">
            <summary>
            Provides an <b>IEnumerator</b> implementation that exposes only
            those elements from the element list that match a certain name.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.FOUND">
            <summary>
            Element with specified name has been found.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.RETURNED">
            <summary>
            Element with specified name has been returned.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.INITIAL">
            <summary>
            Initial enumerator state.
            </summary>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.#ctor(Tangosol.Run.Xml.SimpleElement,System.String)">
            <summary>
            Create new SimpleElementEnumerator with specified parent
            element and element name.
            </summary>
            <param name="parent">
            Parent <b>SimpleElement</b>.
            </param>
            <param name="name">
            Name of elements that will be enumerated.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the
            collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to
            the next element; <b>false</b> if the enumerator has passed
            the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before
            the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="F:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.m_name">
            <summary>
            Name of elements that are enumerated.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.m_enumerator">
            <summary>
            Elements list enumerator that is wrapped by this enumerator.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.m_element">
            <summary>
            Current element.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.m_state">
            <summary>
            Current state, can be one of values <see cref="F:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.FOUND"/>,
            <see cref="F:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.RETURNED"/> and <see cref="F:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.INITIAL"/>.
            </summary>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.SimpleElementEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the
            collection or after the last element.
            </exception>
        </member>
        <member name="T:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes">
            <summary>
            An <b>IDictionary</b> implementation using a
            <b>ListDictionary</b> that supports only strings for keys and
            <see cref="T:Tangosol.Run.Xml.IXmlValue"/> for values.
            </summary>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.#ctor(Tangosol.Run.Xml.SimpleElement)">
            <summary>
            Create new SimpleElementAttributes instance with specified
            parent.
            </summary>
            <param name="parent">
            Parent <b>SimpleElement</b>.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.Contains(System.Object)">
            <summary>
            Determines whether this dictionary contains an element with
            the specified key.
            </summary>
            <returns>
            <b>true</b> if the dictionary contains an element with the
            key; otherwise, <b>false</b>.
            </returns>
            <param name="key">
            The key to locate in the dictionary.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Key is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the
            dictionary.
            </summary>
            <param name="key">
            The object to use as the key of the element to add.
            </param>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the
            dictionary.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Key is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Key is not string, or it is not a valid attribute name, or
            value is not <see cref="T:Tangosol.Run.Xml.IXmlValue"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Parent <b>SimpleElement</b> is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.Clear">
            <summary>
            Removes all elements from the dictionary.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Parent <b>SimpleElement</b> is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <b>IDictionaryEnumerator</b> object for the
            dictionary.
            </summary>
            <returns>
            An <b>IDictionaryEnumerator</b> object for the dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            dictionary.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Key is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Parent <b>SimpleElement</b> is not mutable.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <b>ICollection</b> to an
            <b>Array</b>, starting at a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the
            elements copied from <b>ICollection</b>. The array must have
            zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Array is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Array is multidimensional or index is equal to or greater
            than the length of array or the number of elements in the
            source collection is greater than the available space from
            index to the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            The type of the source collection cannot be cast
            automatically to the type of the destination array.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.GetHashCode">
            <summary>
            Provide a hash value for this SimpleElementAttributes. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.Equals(System.Object)">
            <summary>
            Compare this dictionary with another for equality.
            </summary>
            <param name="obj">
            The object to compare to.
            </param>
            <returns>
            <b>true</b> if the dictionaries are equal, <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.Clone">
            <summary>
            Creates and returns a copy of this dictionary.
            </summary>
            <returns>
            A clone of this instance.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.CheckMutable">
            <summary>
            Validates that the parent element is mutable, otherwise
            throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.CheckKey(System.Object)">
            <summary>
            Validates that specified key is string and is valid
            attribute name (<see cref="M:Tangosol.Run.Xml.XmlHelper.IsNameValid(System.String)"/>.
            </summary>
            <param name="key">
            Key to be validated.
            </param>
            <exception cref="T:System.ArgumentException">
            Key is not string or is not valid name.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.CheckValue(System.Object)">
            <summary>
            Validates that the valus is <see cref="T:Tangosol.Run.Xml.IXmlValue"/>.
            </summary>
            <param name="value">
            Value to be validated.
            </param>
            <returns>
            <b>IXmlValue</b> whose parent is set to this attributes
            parent.
            </returns>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">
            The key of the element to get or set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Key is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Key is not string, or it is not a valid attribute name, or
            value is not <see cref="T:Tangosol.Run.Xml.IXmlValue"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Parent <b>SimpleElement</b> is not mutable.
            </exception>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.Keys">
            <summary>
            Gets an <b>ICollection</b> object containing the keys of the
            dictionary.
            </summary>
            <returns>
            An <b>ICollection</b> containing the keys of the dictionary.
            </returns>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.Values">
            <summary>
            Gets an <b>ICollection</b> object containing the values of
            the dictionary.
            </summary>
            <returns>
            An <b>ICollection</b> containing the values of the
            dictionary.
            </returns>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.IsReadOnly">
            <summary>
            Gets a value indicating whether the dictionary is read-only.
            </summary>
            <returns>
            <b>true</b> if the dictionary is read-only; otherwise,
            <b>false</b>.
            </returns>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.IsFixedSize">
            <summary>
            Gets a value indicating whether the dictionary object has a
            fixed size.
            </summary>
            <returns>
            <b>true</b> if the dictionary object has a fixed size;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <returns>
            The number of elements contained in the collection.
            </returns>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            collection.
            </summary>
            <returns>
            An object that can be used to synchronize access to the
            collection.
            </returns>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleElement.SimpleElementAttributes.IsSynchronized">
            <summary>
             Gets a value indicating whether access to the collection is
             synchronized (thread safe).
             </summary>
             <returns>
             <b>true</b> if access to the collection is synchronized
             (thread safe); otherwise, <b>false</b>.
             </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleDocument.#ctor">
            <summary>
            Construct an empty SimpleDocument.
            </summary>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleDocument.#ctor(System.String)">
            <summary>
            Construct a SimpleDocument.
            </summary>
            <param name="name">
            The name of the root element.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleDocument.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct a SimpleDocument.
            </summary>
            <param name="name">
            The name of the root element.
            </param>
            <param name="dtdUri">
            The URI of the DTD (system identifier).
            </param>
            <param name="dtdName">
            The name of the DTD (public identifier); may be <c>null</c>.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleDocument.WriteXml(System.IO.TextWriter,System.Boolean)">
            <summary>
            Write the XML document, including an XML header and DOCTYPE if
            one exists.
            </summary>
            <remarks>
            This overrides the contract of the IXmlElement super interface.
            </remarks>
            <param name="writer">
            A <b>TextWriter</b> object to use to write to.
            </param>
            <param name="isPretty">
            <b>true</b> to specify that the output is intended to be as human
            readable as possible.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleDocument.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleDocument.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleDocument.GetHashCode">
            <summary>
            Provide a hash value for this XML document and all of its
            contained information.
            </summary>
            <remarks>
            Note that this overrides the contract of the GetHashCode() method
            in the super interface IXmlElement. The hash value is defined as
            a xor of the following:
            <list type="number">
            <item>the GetHashCode() from the root element</item>
            <item>the GetHashCode() from the document type (uri and optional
            name)</item>
            </list>
            </remarks>
            <returns>
            The hash value for this XML value.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleDocument.Equals(System.Object)">
            <summary>
            Compare this XML document and all of its contained information
            with another XML document for equality.
            </summary>
            <remarks>
            Note that this overrides the contract of the Equals() method in
            the super interface IXmlElement.
            </remarks>
            <param name="o">
            The object to compare to.
            </param>
            <returns>
            <b>true</b> if the documents are equal, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleDocument.CheckMutable">
            <summary>
            Validates that the element is mutable, otherwise throws an
            <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleDocument.DtdUri">
            <summary>
            Get or set the URI of the DTD (DOCTYPE) for the document.
            </summary>
            <remarks>
            This is referred to as the System Identifier by the XML
            specification.
            </remarks>
            <example>
            http://java.sun.com/j2ee/dtds/web-app_2_2.dtd
            </example>
            <value>
            The document type URI.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleDocument.DtdName">
            <summary>
            Get or set the public identifier of the DTD (DOCTYPE) for the
            document.
            </summary>
            <example>
            -//Sun Microsystems, Inc.//DTD Web Application 1.2//EN
            </example>
            <value>
            The DTD public identifier.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleDocument.Encoding">
            <summary>
            Get or set the encoding string for the XML document.
            </summary>
            <remarks>
            Documents that are parsed may or may not have the encoding string
            from the persistent form of the document.
            </remarks>
            <value>
            The encoding set for the document.
            </value>
        </member>
        <member name="P:Tangosol.Run.Xml.SimpleDocument.DocumentComment">
            <summary>
            Get or set the XML comment that appears outside of the root
            element.
            </summary>
            <remarks>
            This differs from the <see cref="P:Tangosol.Run.Xml.IXmlElement.Comment"/> property
            of this object, which refers to the comment within the root
            element.
            </remarks>
            <value>
            The document comment.
            </value>
        </member>
        <member name="T:Tangosol.Run.Xml.SimpleParser">
            <summary>
            This class uses the validating <b>System.Xml.XmlReader</b> to load
            XML into <b>System.Xml.XmlDocument</b> which is then converted to
            <see cref="T:Tangosol.Run.Xml.IXmlDocument"/>.
            </summary>
            <author>Cameron Purdy  2001.07.16</author>
            <author>Ana Cikic  2009.09.04</author>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleParser.ParseXml(Tangosol.IO.Resources.IResource)">
            <summary>
            Parse the specified resource's content into an
            <b>IXmlDocument</b> object.
            </summary>
            <param name="resource">
            The <see cref="T:Tangosol.IO.Resources.IResource"/> with XML to parse.
            </param>
            <returns>
            An <b>IXmlDocument</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleParser.ParseXml(System.String)">
            <summary>
            Parse the resource specified by path into an <b>IXmlDocument</b>
            object.
            </summary>
            <param name="path">
            Location of Xml data; an URL or valid path.
            </param>
            <returns>
            An <b>IXmlDocument</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleParser.ParseXml(System.IO.TextReader)">
            <summary>
            Parse the specified <b>TextReader</b> into an <b>IXmlDocument</b>
            object.
            </summary>
            <param name="reader">
            The <b>TextReader</b> object.
            </param>
            <returns>
            An <b>IXmlDocument</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleParser.ParseXml(System.IO.Stream)">
            <summary>
            Parse the specified <b>Stream</b> into an <b>IXmlDocument</b>
            object.
            </summary>
            <param name="stream">
            The <b>Stream</b> object.
            </param>
            <returns>
            An <b>IXmlDocument</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleParser.ParseXml(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Parse the specified <b>Stream</b> into an <b>IXmlDocument</b>
            object using the specified charset.
            </summary>
            <param name="stream">
            The <b>Stream</b> object.
            </param>
            <param name="encoding">
            The character encoding.
            </param>
            <returns>
            An <b>IXmlDocument</b> object.
            </returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleParser.LoadXml(Tangosol.IO.Resources.IResource)">
            <summary>
            Gets the <b>XmlDocument</b> representing data from a given
            resource.
            </summary>
            <param name="resource">
            <see cref="T:Tangosol.IO.Resources.IResource"/> with Xml data.
            </param>
            <returns>
            <b>XmlDocument</b> representing Xml data.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="resource"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            If there is a load or parse error in the XML.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleParser.LoadXml(System.IO.TextReader)">
            <summary>
            Gets the <b>XmlDocument</b> representing data from a given
            <b>TextReader</b>.
            </summary>
            <param name="textReader">
            <b>TextReader</b> that will provide Xml data.
            </param>
            <returns>
            <b>XmlDocument</b> representing Xml data.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="textReader"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Xml.XmlException">
            If there is a load or parse error in the XML.
            </exception>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleParser.CreateValidatingReader(System.IO.Stream,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Gets an <see cref="T:System.Xml.XmlReader"/> instance
            for the supplied <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            The XML <see cref="T:System.IO.Stream"/>.
            </param>
            <param name="schemas">
            XML schemas that will be used for validation.
            </param>
            <param name="eventHandler">
            Validation event handler.
            </param>
            <returns>
            <see cref="T:System.Xml.XmlReader"/> implementation.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleParser.CreateValidatingReader(System.IO.TextReader,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Gets an <see cref="T:System.Xml.XmlReader"/> instance
            for the supplied <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="textReader">
            The XML <see cref="T:System.IO.TextReader"/>.
            </param>
            <param name="schemas">
            XML schemas that will be used for validation.
            </param>
            <param name="eventHandler">
            Validation event handler.
            </param>
            <returns>
            <see cref="T:System.Xml.XmlReader"/> implementation.
            </returns>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleParser.HandleValidation(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Callback for a validating XML reader.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="args">
            Any data pertinent to the event.
            </param>
        </member>
        <member name="M:Tangosol.Run.Xml.SimpleParser.CreateReaderSettings(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Gets an <b>XmlReaderSettings</b> with specified schemas used for
            validation and validation event handler.
            </summary>
            <param name="schemas">
            XML schemas that will be used for validation.
            </param>
            <param name="eventHandler">
            Validation event handler.
            </param>
            <returns>
            <b>XmlReaderSettings</b> instance.
            </returns>
        </member>
        <member name="T:Tangosol.Run.Xml.XmlValueType">
            <summary>
            Types supported by <see cref="T:Tangosol.Run.Xml.IXmlValue"/>.
            </summary>
            <author>Ana Cikic  2008.08.25</author>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlValueType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlValueType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlValueType.Long">
            <summary>
            Long type.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlValueType.Double">
            <summary>
            Double type.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlValueType.Decimal">
            <summary>
            Decimal type.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlValueType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlValueType.Binary">
            <summary>
            Binary type.
            </summary>
        </member>
        <member name="F:Tangosol.Run.Xml.XmlValueType.DateTime">
            <summary>
            DateTime type.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Aggregator.AbstractAggregator">
            <summary>
            Abstract base class implementation of <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/>
            that supports parallel aggregation.
            </summary>
            <author>Cameron Purdy, Gene Gleyzer, Jason Howes  2005.07.19</author>
            <author>Ana Cikic  2006.10.23</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractAggregator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractAggregator.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct an AbstractAggregator that will aggregate values
            extracted from a collection of
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> objects.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> that provides values to
            aggregate.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractAggregator.#ctor(System.String)">
            <summary>
            Construct an AbstractAggregator that will aggregate values
            extracted from a collection of
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> objects.
            </summary>
            <param name="member">
            The name of the member that could be invoked via reflection and
            that returns values to aggregate; this parameter can also be a
            dot-delimited sequence of member names which would result in an
            aggregator based on the <see cref="T:Tangosol.Util.Extractor.ChainedExtractor"/>} that is
            based on an array of corresponding
            <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/> objects.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractAggregator.AggregateResults(System.Collections.ICollection)">
            <summary>
            Aggregate the results of the parallel aggregations.
            </summary>
            <param name="results">
            Results to aggregate.
            </param>
            <returns>
            The aggregation of the parallel aggregation results.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractAggregator.Aggregate(System.Collections.ICollection)">
            <summary>
            Process a set of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> objects
            in order to produce an aggregated result.
            </summary>
            <param name="entries">
            A collection of read-only <b>IInvocableCacheEntry</b>
            objects to aggregate.
            </param>
            <returns>
            The aggregated result from processing the entries.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractAggregator.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractAggregator.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractAggregator.ToString">
            <summary>
            Provide a human-readable representation of this object.
            </summary>
            <returns>
            A string whose contents represent the value of this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractAggregator.GetHashCode">
            <summary>
            Returns a hash code value for this object.
            </summary>
            <returns>
            A hash code value for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractAggregator.Equals(System.Object)">
            <summary>
            Compares this object with another object for equality.
            </summary>
            <param name="o">
            An object reference or <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the passed object reference is of the same class
            and has the same state as this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractAggregator.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractAggregator.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractAggregator.FinalizeResult(System.Boolean)">
            <summary>
            Obtain the result of the aggregation.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            returned object must be the final result of the aggregation;
            otherwise, the returned object will be treated as a partial
            result that should be incorporated into the final result.
            </remarks>
            <param name="isFinal">
            <b>true</b> to indicate that the final result of the aggregation
            process should be returned; this will only be <b>false</b> if a
            parallel approach is being used.
            </param>
            <returns>
            The result of the aggregation process.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Aggregator.AbstractAggregator.m_isParallel">
            <summary>
            Set to true if this aggregator realizes that it is going to be
            used in parallel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.AbstractAggregator.m_extractor">
            <summary>
            The IValueExtractor that obtains the value to aggregate from the
            value that is stored in the dictionary.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Aggregator.AbstractAggregator.Extractor">
            <summary>
            Determine the <see cref="T:Tangosol.Util.IValueExtractor"/> whose values this
            aggregator is aggregating.
            </summary>
            <value>
            The <b>IValueExtractor</b> used by this aggregator.
            </value>
        </member>
        <member name="P:Tangosol.Util.Aggregator.AbstractAggregator.ParallelAggregator">
            <summary>
            Get an aggregator that can take the place of this aggregator in
            situations in which the <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> can
            aggregate in parallel.
            </summary>
            <value>
            The aggregator that will be run in parallel.
            </value>
        </member>
        <member name="T:Tangosol.Util.Aggregator.AbstractComparableAggregator">
            <summary>
            Abstract aggregator that processes values extracted from a set of 
            entries in a cache, with knowledge of how to compare those values. 
            </summary>
            <remarks>
            There are two way to use the AbstractComparableAggregator:
            <ul>
            <li>All the extracted objects must implement <b>IComparable</b>, or</li>
            <li>The AbstractComparableAggregator has to be provided with an 
            <b>IComparer</b> object.</li>
            </ul>
            If the set of entries passed to <b>Aggregate</b> is empty, a
            <tt>null</tt> result is returned.
            </remarks>
            <author>Gene Gleyzer  2006.02.13</author>
            <author>Ana Cikic  2006.10.23</author>
            <author>Patrick Peralta  2009.01.22</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractComparableAggregator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractComparableAggregator.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct an AbstractComparableAggregator object.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> that provides a value in the
            form of any object that implements the <b>IComparable</b>
            interface.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractComparableAggregator.#ctor(Tangosol.Util.IValueExtractor,System.Collections.IComparer)">
            <summary>
            Construct an AbstractComparableAggregator object.
            </summary>
            <param name="extractor">
            The extractor that provides an object to be compared.
            </param>
            <param name="comparer">
            The comparer used to compare the extracted object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractComparableAggregator.#ctor(System.String)">
            <summary>
            Construct an AbstractComparableAggregator object.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            object that implements the <b>IComparable</b> interface.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractComparableAggregator.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractComparableAggregator.FinalizeResult(System.Boolean)">
            <summary>
            Obtain the result of the aggregation.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            returned object must be the final result of the aggregation;
            otherwise, the returned object will be treated as a partial
            result that should be incorporated into the final result.
            </remarks>
            <param name="isFinal">
            <b>true</b> to indicate that the final result of the aggregation
            process should be returned; this will only be <b>false</b> if a
            parallel approach is being used.
            </param>
            <returns>
            The result of the aggregation process.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractComparableAggregator.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractComparableAggregator.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Aggregator.AbstractComparableAggregator.m_count">
            <summary>
            The count of processed entries.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.AbstractComparableAggregator.m_result">
            <summary>
            The running result value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.AbstractComparableAggregator.m_comparer">
            <summary>
            The comparer to use for comparing extracted values.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Aggregator.AbstractDecimalAggregator">
            <summary>
            Abstract aggregator that processes <see cref="T:System.IComparable"/> values
            extracted from a set of entries in a <b>IDictionary</b> and returns
            a result in a form of a <see cref="T:System.Decimal"/> value.
            </summary>
            <remarks>
            All the extracted objects will be treated as <b>Decimal</b> values.
            If the set of entries is empty, a <c>null</c> result is returned.
            </remarks>
            <author>Gene Gleyzer  2006.02.13</author>
            <author>Goran Milosavljevic  2008.01.30</author>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractDecimalAggregator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractDecimalAggregator.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>AbstractDecimalAggregator</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object that is <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractDecimalAggregator.#ctor(System.String)">
            <summary>
            Construct a <b>AbstractDecimalAggregator</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object that is <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractDecimalAggregator.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractDecimalAggregator.FinalizeResult(System.Boolean)">
            <summary>
            Obtain the result of the aggregation.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            returned object must be the final result of the aggregation;
            otherwise, the returned object will be treated as a partial
            result that should be incorporated into the final result.
            </remarks>
            <param name="isFinal">
            <b>true</b> to indicate that the final result of the aggregation
            process should be returned; this will only be <b>false</b> if a
            parallel approach is being used.
            </param>
            <returns>
            The result of the aggregation process.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractDecimalAggregator.EnsureDecimal(System.Object)">
            <summary>
            Ensure the specified object is a <b>Decimal</b> value or convert
            it into a new Decimal object.
            </summary>
            <param name="value">
            Object that should be ensured of Decimal.
            </param>
            <returns>
            Decimal value.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Aggregator.AbstractDecimalAggregator.m_count">
            <summary>
            The count of processed entries.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.AbstractDecimalAggregator.m_result">
            <summary>
            The running result value.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Aggregator.AbstractDoubleAggregator">
            <summary>
            Abstract aggregator that processes numeric values extracted from a
            collection of entries in a cache.
             </summary>
            <remarks>
            All the extracted objects (Byte, Int16, Int32, Int64, Single, Double)
            will be treated as <b>Double</b> values. If the collection of
            entries is empty, a <c>null</c> result is returned.
            </remarks>
            <author>Cameron Purdy, Gene Gleyzer, Jason Howes  2005.07.19</author>
            <author>Ivan Cikic  2005.10.24</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractDoubleAggregator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractDoubleAggregator.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>AbstractDoubleAggregator</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractDoubleAggregator.#ctor(System.String)">
            <summary>
            Construct a <b>AbstractDoubleAggregator</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractDoubleAggregator.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractDoubleAggregator.FinalizeResult(System.Boolean)">
            <summary>
            Obtain the result of the aggregation.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            returned object must be the final result of the aggregation;
            otherwise, the returned object will be treated as a partial
            result that should be incorporated into the final result.
            </remarks>
            <param name="isFinal">
            <b>true</b> to indicate that the final result of the aggregation
            process should be returned; this will only be <b>false</b> if a
            parallel approach is being used.
            </param>
            <returns>
            The result of the aggregation process.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Aggregator.AbstractDoubleAggregator.m_count">
            <summary>
            The count of processed entries.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.AbstractDoubleAggregator.m_result">
            <summary>
            The running result value.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Aggregator.AbstractLongAggregator">
            <summary>
            Abstract aggregator that processes numeric values extracted from a
            collection of entries in a cache.
             </summary>
            <remarks>
            All the extracted objects (Byte, Int16, Int32, Int64, Single, Double)
            will be treated as <b>Int64</b> values. If the collection of
            entries is empty, a <c>null</c> result is returned.
            </remarks>
            <author>Cameron Purdy, Gene Gleyzer, Jason Howes  2005.07.19</author>
            <author>Ivan Cikic  2005.10.24</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractLongAggregator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractLongAggregator.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>AbstractLongAggregator</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractLongAggregator.#ctor(System.String)">
            <summary>
            Construct a <b>AbstractLongAggregator</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractLongAggregator.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.AbstractLongAggregator.FinalizeResult(System.Boolean)">
            <summary>
            Obtain the result of the aggregation.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            returned object must be the final result of the aggregation;
            otherwise, the returned object will be treated as a partial
            result that should be incorporated into the final result.
            </remarks>
            <param name="isFinal">
            <b>true</b> to indicate that the final result of the aggregation
            process should be returned; this will only be <b>false</b> if a
            parallel approach is being used.
            </param>
            <returns>
            The result of the aggregation process.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Aggregator.AbstractLongAggregator.m_count">
            <summary>
            The count of processed entries.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.AbstractLongAggregator.m_result">
            <summary>
            The running result value.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Aggregator.ComparableMax">
            <summary>
            Calculates a maximum among values extracted from a set of entries 
            in a cache.
            </summary>
            <remarks>
            This aggregator is most commonly used with objects that implement
            <b>IComparable</b> such as <b>String</b> or <b>DateTime</b>.
            An <b>IComparer</b> can also be supplied to perform the comparisons.
            </remarks>
            <author>Gene Gleyzer  2006.02.13</author>
            <author>Ivan Cikic  2006.10.24</author>
            <author>Patrick Peralta  2009.01.22</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ComparableMax.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ComparableMax.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>ComparableMax</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any object
            that implements <see cref="T:System.IComparable"/> interface.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ComparableMax.#ctor(Tangosol.Util.IValueExtractor,System.Collections.IComparer)">
            <summary>
            Construct a <b>ComparableMax</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides an object to be compared.
            </param>
            <param name="comparer">
            The comparer used to compare the extracted object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ComparableMax.#ctor(System.String)">
            <summary>
            Construct a <b>ComparableMax</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            object that implements <see cref="T:System.IComparable"/> interface.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ComparableMax.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="T:Tangosol.Util.Aggregator.ComparableMin">
            <summary>
            Calculates a minimum among values extracted from a set of entries 
            in a cache.
            </summary>
            <remarks>
            This aggregator is most commonly used with objects that implement
            <b>IComparable</b> such as <b>String</b> or <b>DateTime</b>.
            An <b>IComparer</b> can also be supplied to perform the comparisons.
            </remarks>
            <author>Gene Gleyzer  2006.02.13</author>
            <author>Ivan Cikic  2006.10.24</author>
            <author>Patrick Peralta  2009.01.22</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ComparableMin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ComparableMin.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>ComparableMin</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any object
            that implements <see cref="T:System.IComparable"/> interface.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ComparableMin.#ctor(Tangosol.Util.IValueExtractor,System.Collections.IComparer)">
            <summary>
            Construct a <b>ComparableMin</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides an object to be compared.
            </param>
            <param name="comparer">
            The comparer used to compare the extracted object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ComparableMin.#ctor(System.String)">
            <summary>
            Construct a <b>ComparableMin</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            object that implements <see cref="T:System.IComparable"/> interface.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ComparableMin.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="T:Tangosol.Util.Aggregator.CompositeAggregator">
            <summary>
            CompositeAggregator provides an ability to execute a collection of
            aggregators against the same subset of the entries in an
            <see cref="T:Tangosol.Net.Cache.IInvocableCache"/>, resulting in a list of
            corresponding aggregation results.
            </summary>
            <remarks>
            <p>
            The size of the returned list will always be equal to the length of
            the aggregators' array.</p>
            <p>
            Note: Unlike many other concrete <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/>
            implementations that are constructed directly, instances of
            CompositeAggregator should only be created using the factory method
            <see cref="M:Tangosol.Util.Aggregator.CompositeAggregator.CreateInstance(Tangosol.Net.Cache.IEntryAggregator[])"/>.</p>
            </remarks>
            <author>Gene Gleyzer  2006.02.08</author>
            <author>Ana Cikic  2006.10.23</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.CompositeAggregator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.CompositeAggregator.#ctor(Tangosol.Net.Cache.IEntryAggregator[])">
            <summary>
            Construct a CompositeAggregator based on a specified
            <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> array.
            </summary>
            <param name="aggregators">
            An array of <b>IEntryAggregator</b> objects; may not be
            <c>null</c>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.CompositeAggregator.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Aggregator.CompositeAggregator.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Aggregator.CompositeAggregator.Aggregate(System.Collections.ICollection)">
            <summary>
            Process a set of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> objects
            in order to produce an aggregated result.
            </summary>
            <param name="entries">
            A collection of read-only <b>IInvocableCacheEntry</b>
            objects to aggregate.
            </param>
            <returns>
            The aggregated result from processing the entries.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.CompositeAggregator.Equals(System.Object)">
            <summary>
            Compare the CompositeAggregator with another object to determine
            equality.
            </summary>
            <param name="o">
            The <b>CompositeAggregator</b> to compare to.
            </param>
            <returns>
            <b>true</b> if this CompositeAggregator and the passed object are
            equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.CompositeAggregator.GetHashCode">
            <summary>
            Determine a hash value for the CompositeAggregator object
            according to the general <b>object.GetHashCode()</b> contract.
            </summary>
            <returns>
            An integer hash value for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.CompositeAggregator.ToString">
            <summary>
            Return a human-readable description for this CompositeAggregator.
            </summary>
            <returns>
            A string description of the CompositeAggregator.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.CompositeAggregator.CreateInstance(Tangosol.Net.Cache.IEntryAggregator[])">
            <summary>
            Create an instance of CompositeAggregator based on a specified
            <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> array.
            </summary>
            <remarks>
            <p>
            If all the aggregators in the specified array are instances of
            <see cref="T:Tangosol.Net.Cache.IParallelAwareAggregator"/>, then a parallel-aware
            instance of the CompositeAggregator will be created.</p>
            <p>
            If at least one of the specified aggregator is not
            parallel-aware, then the resulting CompositeAggregator will not
            be parallel-aware and could be ill-suited for aggregations run
            against large partitioned caches.</p>
            </remarks>
            <param name="aggregators">
            An array of <b>IEntryAggregator</b> objects; must contain not
            less than two aggregators.
            </param>
            <returns>
            CompositeAggregator instance.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Aggregator.CompositeAggregator.EMPTY_AGGREGATOR_ARRAY">
            <summary>
            An empty array of <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/>s.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.CompositeAggregator.m_aggregators">
            <summary>
            The underlyig IEntryAggregator array.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Aggregator.CompositeAggregator.Parallel">
            <summary>
            Parallel implementation of the CompositeAggregator.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.CompositeAggregator.Parallel.#ctor(Tangosol.Net.Cache.IParallelAwareAggregator[])">
            <summary>
            Construct a parallel CompositeAggregator based on a specified
            <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> array.
            </summary>
            <param name="aggregators">
            An array of <see cref="T:Tangosol.Net.Cache.IParallelAwareAggregator"/> objects;
            may not be <c>null</c>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.CompositeAggregator.Parallel.AggregateResults(System.Collections.ICollection)">
            <summary>
            Aggregate the results of the parallel aggregations.
            </summary>
            <param name="results">
            Results to aggregate.
            </param>
            <returns>
            The aggregation of the parallel aggregation results.
            </returns>
        </member>
        <member name="P:Tangosol.Util.Aggregator.CompositeAggregator.Parallel.ParallelAggregator">
            <summary>
            Get an aggregator that can take the place of this aggregator in
            situations in which the <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> can
            aggregate in parallel.
            </summary>
            <value>
            The aggregator that will be run in parallel.
            </value>
        </member>
        <member name="T:Tangosol.Util.Aggregator.Count">
            <summary>
             Calculates a number of values in an entries collection.
            </summary>
            <author>Gene Gleyzer  2005.09.05</author>
            <author>Ivan Cikic  2006.10.24</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.Count.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.Count.Aggregate(System.Collections.ICollection)">
            <summary>
            Process a set of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> objects
            in order to produce an aggregated result.
            </summary>
            <param name="entries">
            A collection of read-only <b>IInvocableCacheEntry</b>
            objects to aggregate.
            </param>
            <returns>
            The aggregated result from processing the entries.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.Count.AggregateResults(System.Collections.ICollection)">
            <summary>
            Aggregate the results of the parallel aggregations.
            </summary>
            <param name="results">
            Results to aggregate.
            </param>
            <returns>
            The aggregation of the parallel aggregation results.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.Count.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Aggregator.Count.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="P:Tangosol.Util.Aggregator.Count.ParallelAggregator">
            <summary>
            Get an aggregator that can take the place of this aggregator in
            situations in which the <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> can
            aggregate in parallel.
            </summary>
            <value>
            The aggregator that will be run in parallel.
            </value>
        </member>
        <member name="T:Tangosol.Util.Aggregator.DecimalAverage">
            <summary>
            Calculates an average for values of any numberic type extracted from
            a set of entries in a <b>IDictionary</b> in a form of a
            <see cref="T:System.Decimal"/> value.
            </summary>
            <remarks>
            All the extracted objects will be treated as <b>Decimal</b> values.
            If the set of entries is empty, a <c>null</c> result is returned..
            </remarks>
            <author>Gene Gleyzer  2006.07.18</author>
            <author>Goran Milosavljevic  2008.01.30</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalAverage.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalAverage.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>DecimalAverage</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object that is a <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalAverage.#ctor(System.String)">
            <summary>
            Construct a <b>DoubleAverage</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object that is a <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalAverage.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalAverage.FinalizeResult(System.Boolean)">
            <summary>
            Obtain the result of the aggregation.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            returned object must be the final result of the aggregation;
            otherwise, the returned object will be treated as a partial
            result that should be incorporated into the final result.
            </remarks>
            <param name="isFinal">
            <b>true</b> to indicate that the final result of the aggregation
            process should be returned; this will only be <b>false</b> if a
            parallel approach is being used.
            </param>
            <returns>
            The result of the aggregation process.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Aggregator.DecimalMax">
            <summary>
            Calculates a maximum of numeric values extracted from a set of
            entries in a <b>IDictionary</b> in a form of a <see cref="T:System.Decimal"/>
            value.
            </summary>
            <remarks>
            All the extracted objects will be treated as <b>Decimal</b> values.
            If the set of entries is empty, a <c>null</c> result is returned.
            </remarks>
            <author>Gene Gleyzer  2006.07.18</author>
            <author>Goran Milosavljevic  2008.01.30</author>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalMax.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalMax.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>DecimalMax</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object that is <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalMax.#ctor(System.String)">
            <summary>
            Construct a <b>DecimalMax</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object that is <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalMax.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="T:Tangosol.Util.Aggregator.DecimalMin">
            <summary>
            Calculates a minimum of numeric values extracted from a set of
            entries in a <b>IDictionary</b> in a form of a <see cref="T:System.Decimal"/>
            value.
            </summary>
            <remarks>
            All the extracted objects will be treated as <b>Decimal</b> values.
            If the set of entries is empty, a <c>null</c> result is returned.
            </remarks>
            <author>Gene Gleyzer  2006.07.18</author>
            <author>Goran Milosavljevic  2008.01.30</author>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalMin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalMin.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>DecimalMin</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object that is <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalMin.#ctor(System.String)">
            <summary>
            Construct a <b>DecimalMin</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object that is <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalMin.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="T:Tangosol.Util.Aggregator.DecimalSum">
            <summary>
            Calculates a minimum of numeric values extracted from a set of
            entries in a <b>IDictionary</b> in a form of a <see cref="T:System.Decimal"/>
            value.
            </summary>
            <remarks>
            All the extracted objects will be treated as <b>Decimal</b> values.
            If the set of entries is empty, a <c>null</c> result is returned.
            </remarks>
            <author>Gene Gleyzer  2006.07.18</author>
            <author>Goran Milosavljevic  2008.01.30</author>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalSum.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalSum.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>DecimalSum</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object that is <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalSum.#ctor(System.String)">
            <summary>
            Construct a <b>DecimalSum</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object that is <b>Decimal</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DecimalSum.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="T:Tangosol.Util.Aggregator.DistinctValues">
            <summary>
            Return the <b>ICollection</b> of unique values extracted from a
            collection of entries in a cache.
            </summary>
            <remarks>
            <p>
            If the <b>ICollection</b> of entries is empty, an empty collection
            is returned.</p>
            <p>
            This aggregator could be used in combination with
            <see cref="T:Tangosol.Util.Extractor.MultiExtractor"/> allowing to collect all unique
            combinations (tuples) of a given set of attributes.</p>
            </remarks>
            <p>The <b>DistinctValues</b> aggregator covers a simple case of a
            more generic aggregation pattern implemented by the
            <see cref="T:Tangosol.Util.Aggregator.GroupAggregator"/>, which in addition to collecting all
            distinct values or tuples, runs an aggregation against each distinct
            entry set (group).</p>
            <author>Jason Howes  2005.12.20</author>
            <author>Ivan Cikic  2006.10.24</author>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DistinctValues.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DistinctValues.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>DistinctValues</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DistinctValues.#ctor(System.String)">
            <summary>
            Construct a <b>DistinctValues</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DistinctValues.EnsureCollection">
            <summary>
            Return a collection that can be used to store distinct values,
            creating it if one has not already been created.
            </summary>
            <returns>
            A collection that can be used to store distinct values.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DistinctValues.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DistinctValues.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DistinctValues.FinalizeResult(System.Boolean)">
            <summary>
            Obtain the result of the aggregation.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            returned object must be the final result of the aggregation;
            otherwise, the returned object will be treated as a partial
            result that should be incorporated into the final result.
            </remarks>
            <param name="isFinal">
            <b>true</b> to indicate that the final result of the aggregation
            process should be returned; this will only be <b>false</b> if a
            parallel approach is being used.
            </param>
            <returns>
            The result of the aggregation process.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Aggregator.DistinctValues.m_coll">
            <summary>
            The resulting collection of distinct values.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Aggregator.DoubleAverage">
            <summary>
            Calculates an average for values of any numberic type extracted from
            a collection of entries in a cache.
            </summary>
            All the extracted objects (Byte, Int16, Int32, Int64, Single, Double)
            will be treated as <b>Double</b> values. If the collection of
            entries is empty, a <c>null</c> result is returned.
            <author>Gene Gleyzer  2005.09.05</author>
            <author>Ivan Cikic  2006.10.24</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleAverage.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleAverage.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>DoubleAverage</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleAverage.#ctor(System.String)">
            <summary>
            Construct a <b>DoubleAverage</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleAverage.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleAverage.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleAverage.FinalizeResult(System.Boolean)">
            <summary>
            Obtain the result of the aggregation.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            returned object must be the final result of the aggregation;
            otherwise, the returned object will be treated as a partial
            result that should be incorporated into the final result.
            </remarks>
            <param name="isFinal">
            <b>true</b> to indicate that the final result of the aggregation
            process should be returned; this will only be <b>false</b> if a
            parallel approach is being used.
            </param>
            <returns>
            The result of the aggregation process.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Aggregator.DoubleMax">
            <summary>
            Calculates a maximum of numeric values extracted from a collection of
            entries in a cache.
            </summary>
            <remarks>
            All the extracted objects (Byte, Int16, Int32, Int64, Single, Double)
            will be treated as <b>Double</b> values. If the collection of
            entries is empty, a <c>null</c> result is returned.
            </remarks>
            <author>Gene Gleyzer  2005.09.05</author>
            <author>Ivan Cikic  2005.10.24</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleMax.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleMax.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>DoubleMax</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleMax.#ctor(System.String)">
            <summary>
            Construct a <b>DoubleMax</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleMax.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleMax.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="T:Tangosol.Util.Aggregator.DoubleMin">
            <summary>
            Calculates a minimum of numeric values extracted from a collection of
            entries in a cache.
            </summary>
            <remarks>
            All the extracted objects (Byte, Int16, Int32, Int64, Single, Double)
            will be treated as <b>Double</b> values. If the collection of
            entries is empty, a <c>null</c> result is returned.
            </remarks>
            <author>Gene Gleyzer  2005.09.05</author>
            <author>Ivan Cikic  2005.10.24</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleMin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleMin.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>DoubleMin</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleMin.#ctor(System.String)">
            <summary>
            Construct a <b>DoubleMin</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleMin.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleMin.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="T:Tangosol.Util.Aggregator.DoubleSum">
            <summary>
            Sums up numeric values extracted from a collection of entries in a
            cache.
            </summary>
            <remarks>
            All the extracted objects (Byte, Int16, Int32, Int64, Single, Double)
            will be treated as <b>Double</b> values. If the collection of
            entries is empty, a <c>null</c> result is returned.
            </remarks>
            <author>Gene Gleyzer  2005.09.05</author>
            <author>Ivan Cikic  2005.10.24</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleSum.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleSum.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>DoubleSum</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleSum.#ctor(System.String)">
            <summary>
            Construct a <b>DoubleSum</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleSum.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.DoubleSum.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="T:Tangosol.Util.Aggregator.GroupAggregator">
            <summary>
            The GroupAggregator provides an ability to split a subset of entries
            in an <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> into a collection of
            non-intersecting subsets and then aggregate them separately and
            independently.
            </summary>
            <remarks>
            <p>
            The splitting (grouping) is performed using the results of the
            underlying <see cref="T:Tangosol.Util.IValueExtractor"/> in such a way that two
            entries will belong to the same group if and only if the result of
            the corresponding <see cref="M:Tangosol.Util.IValueExtractor.Extract(System.Object)"/> call produces
            the same value or tuple (list of values). After the entries are split
            into the groups, the underlying aggregator is applied separately to
            each group. The result of the aggregation by the GroupAggregator is a
            dictionary that has distinct values (or tuples) as keys and results
            of the individual aggregation as values. Additionally, those results
            could be further reduced using an optional <see cref="T:Tangosol.Util.IFilter"/>
            object.</p>
            <p>
            Informally speaking, this aggregator is analogous to the SQL
            "group by" and "having" clauses. Note that the "having"
            <b>IFilter</b> is applied independently on each server against the
            partial aggregation results; this generally implies that data
            affinity is required to ensure that all required data used to
            generate a given result exists within a single cache partition. In
            other words, the "group by" predicate should not span multiple
            partitions if the "having" clause is used.</p>
            <p>
            The GroupAggregator is somewhat similar to the
            <see cref="T:Tangosol.Util.Aggregator.DistinctValues"/> aggregator, which returns back a list of
            distinct values (tuples) without performing any additional
            aggregation work.</p>
            <p>
            <b>Unlike many other concrete <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/>
            implementations that are constructed directly, instances of
            GroupAggregator should only be created using one of the factory
            methods:</b></p>
            <see cref="M:Tangosol.Util.Aggregator.GroupAggregator.CreateInstance(Tangosol.Util.IValueExtractor,Tangosol.Net.Cache.IEntryAggregator)"/>
            <see cref="M:Tangosol.Util.Aggregator.GroupAggregator.CreateInstance(Tangosol.Util.IValueExtractor,Tangosol.Net.Cache.IEntryAggregator,Tangosol.Util.IFilter)"/>
            <see cref="M:Tangosol.Util.Aggregator.GroupAggregator.CreateInstance(System.String,Tangosol.Net.Cache.IEntryAggregator)"/>
            <see cref="M:Tangosol.Util.Aggregator.GroupAggregator.CreateInstance(System.String,Tangosol.Net.Cache.IEntryAggregator,Tangosol.Util.IFilter)"/>
            </remarks>
            <author>Gene Gleyzer  2006.02.15</author>
            <author>Ana Cikic  2006.10.23</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.#ctor(Tangosol.Util.IValueExtractor,Tangosol.Net.Cache.IEntryAggregator,Tangosol.Util.IFilter)">
            <summary>
            Construct a GroupAggregator based on a specified
            <see cref="T:Tangosol.Util.IValueExtractor"/> and underlying
            <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/>.
            </summary>
            <param name="extractor">
            An <b>IValueExtractor</b> object that is used to split
            <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> entries into
            non-intersecting subsets; may not be <c>null</c>.
            </param>
            <param name="aggregator">
            An <b>IEntryAggregator</b> object; may not be <c>null</c>.
            </param>
            <param name="filter">
            An optional <see cref="T:Tangosol.Util.IFilter"/> object used to filter out
            results of individual group aggregation results.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.Aggregate(System.Collections.ICollection)">
            <summary>
            Process a collection of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>
            objects using the underlying extractor to split the entries
            into non-intersecting (distinct) groups and then apply the
            underlying aggregator separately to each group.
            </summary>
            <param name="entries">
            A collection of read-only <b>IInvocableCacheEntry</b>
            objects to aggregate.
            </param>
            <returns>
            A dictionary that has the unique tuples as keys and results of
            the corresponding subset aggregation as values.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.Equals(System.Object)">
            <summary>
            Compare the GroupAggregator with another object to determine
            equality.
            </summary>
            <param name="o">
            The <b>GroupAggregator</b> to compare to.
            </param>
            <returns>
            <b>true</b> if this GroupAggregator and the passed object are
            equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.GetHashCode">
            <summary>
            Determine a hash value for the GroupAggregator object according
            to the general <b>object.GetHashCode()</b> contract.
            </summary>
            <returns>
            An integer hash value for this GroupAggregator object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.ToString">
            <summary>
            Return a human-readable description for this GroupAggregator.
            </summary>
            <returns>
            A string description of the GroupAggregator.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.CreateInstance(System.String,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Create an instance of GroupAggregator based on a specified member
            name(s) and an <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/>.
            </summary>
            <remarks>
            If the specified underlying aggregator is an instance of
            <see cref="T:Tangosol.Net.Cache.IParallelAwareAggregator"/>, then a parallel-aware
            instance of the GroupAggregator will be created. Otherwise, the
            resulting GroupAggregator will not be parallel-aware and could be
            ill-suited for aggregations run against large partitioned caches.
            </remarks>
            <param name="member">
            A member name or a comma-delimited sequence of names that results
            in a <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/> or a
            <see cref="T:Tangosol.Util.Extractor.MultiExtractor"/> that will be used to split
            <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> entries into distinct groups.
            </param>
            <param name="aggregator">
            An underlying <b>IEntryAggregator</b>.
            </param>
            <returns>
            An instance of GroupAggregator based on a specified member
            name(s) and an <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.CreateInstance(System.String,Tangosol.Net.Cache.IEntryAggregator,Tangosol.Util.IFilter)">
            <summary>
            Create an instance of GroupAggregator based on a specified member
            name(s), an <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> and a result
            evaluation filter.
            </summary>
            <remarks>
            If the specified underlying aggregator is an instance of
            <see cref="T:Tangosol.Net.Cache.IParallelAwareAggregator"/>, then a parallel-aware
            instance of the GroupAggregator will be created. Otherwise, the
            resulting GroupAggregator will not be parallel-aware and could be
            ill-suited for aggregations run against large partitioned caches.
            </remarks>
            <param name="member">
            A member name or a comma-delimited sequence of names that results
            in a <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/> or a
            <see cref="T:Tangosol.Util.Extractor.MultiExtractor"/> that will be used to split
            <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> entries into distinct groups.
            </param>
            <param name="aggregator">
            An underlying <b>IEntryAggregator</b>.
            </param>
            <param name="filter">
            An optional <b>IFilter</b> object that will be used to evaluate
            results of each individual group aggregation.
            </param>
            <returns>
            An instance of GroupAggregator based on a specified member
            name(s), an <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> and a result
            evaluation filter.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.CreateInstance(Tangosol.Util.IValueExtractor,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Create an instance of GroupAggregator based on a specified
            extractor and an <b>IEntryAggregator</b>.
            </summary>
            <remarks>
            If the specified aggregator is an instance of
            <b>IParallelAwareAggregator</b>, then a parallel-aware instance
            of the GroupAggregator will be created. Otherwise, the resulting
            GroupAggregator will not be parallel-aware and could be
            ill-suited for aggregations run against large partitioned caches.
            </remarks>
            <param name="extractor">
            An <b>IValueExtractor</b> that will be used to split a set of
            <b>IInvocableDictionary</b> entries into distinct groups.
            </param>
            <param name="aggregator">
            An underlying <b>IEntryAggregator</b>.
            </param>
            <returns>
            An instance of GroupAggregator based on a specified
            extractor and an <b>IEntryAggregator</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.CreateInstance(Tangosol.Util.IValueExtractor,Tangosol.Net.Cache.IEntryAggregator,Tangosol.Util.IFilter)">
            <summary>
            Create an instance of GroupAggregator based on a specified
            extractor and an <b>IEntryAggregator</b> and a result
            evaluation filter.
            </summary>
            <remarks>
            If the specified aggregator is an instance of
            <b>IParallelAwareAggregator</b>, then a parallel-aware instance
            of the GroupAggregator will be created. Otherwise, the resulting
            GroupAggregator will not be parallel-aware and could be
            ill-suited for aggregations run against large partitioned caches.
            </remarks>
            <param name="extractor">
            An <b>IValueExtractor</b> that will be used to split a set of
            <b>IInvocableDictionary</b> entries into distinct groups.
            </param>
            <param name="aggregator">
            An underlying <b>IEntryAggregator</b>.
            </param>
            <param name="filter">
            An optional <b>IFilter</b> object used to filter out results of
            individual group aggregation results.
            </param>
            <returns>
            An instance of GroupAggregator based on a specified
            extractor and an <b>IEntryAggregator</b> and a result
            evaluation filter.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Aggregator.GroupAggregator.m_extractor">
            <summary>
            The underlying IValueExtractor.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.GroupAggregator.m_aggregator">
            <summary>
            The underlying IEntryAggregator.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.GroupAggregator.m_filter">
            <summary>
            The IFilter object representing the "having" clause of this
            "group by" aggregator.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Aggregator.GroupAggregator.Extractor">
            <summary>
            Obtain the underlying <see cref="T:Tangosol.Util.IValueExtractor"/>.
            </summary>
            <value>
            The underlying <b>IValueExtractor</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Aggregator.GroupAggregator.Aggregator">
            <summary>
            Obtain the underlying <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/>.
            </summary>
            <value>
            The underlying <b>IEntryAggregator</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.Aggregator.GroupAggregator.Parallel">
            <summary>
            Parallel implementation of the GroupAggregator.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.Parallel.#ctor(Tangosol.Util.IValueExtractor,Tangosol.Net.Cache.IParallelAwareAggregator,Tangosol.Util.IFilter)">
            <summary>
            Construct a Parallel aggregator based on a specified
            <b>IValueExtractor</b> and underlying
            <b>IParallelAwareAggregator</b>.
            </summary>
            <param name="extractor">
            An <b>IValueExtractor</b> object; may not be <c>null</c>.
            </param>
            <param name="aggregator">
            An <b>IEntryAggregator</b> object; may not be <c>null</c>.
            </param>
            <param name="filter">
            An <b>IFilter</b> object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.GroupAggregator.Parallel.AggregateResults(System.Collections.ICollection)">
            <summary>
            Aggregate the results of the parallel aggregations.
            </summary>
            <param name="results">
            Results to aggregate.
            </param>
            <returns>
            The aggregation of the parallel aggregation results.
            </returns>
        </member>
        <member name="P:Tangosol.Util.Aggregator.GroupAggregator.Parallel.ParallelAggregator">
            <summary>
            Get an aggregator that can take the place of this aggregator in
            situations in which the <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> can
            aggregate in parallel.
            </summary>
            <value>
            The aggregator that will be run in parallel.
            </value>
        </member>
        <member name="T:Tangosol.Util.Aggregator.LongMax">
            <summary>
            Calculates a maximum of numeric values extracted from a collection of
            entries in a cache.
            </summary>
            <remarks>
            All the extracted objects (Byte, Int16, Int32, Int64, Single, Double)
            will be treated as <b>Int64</b> values. If the collection of
            entries is empty, a <c>null</c> result is returned.
            </remarks>
            <author>Gene Gleyzer  2005.09.05</author>
            <author>Ivan Cikic  2005.10.24</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongMax.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongMax.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>LongMax</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongMax.#ctor(System.String)">
            <summary>
            Construct a <b>LongMax</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongMax.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongMax.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="T:Tangosol.Util.Aggregator.LongMin">
            <summary>
            Calculates a minimum of numeric values extracted from a collection of
            entries in a cache.
            </summary>
            <remarks>
            All the extracted objects (Byte, Int16, Int32, Int64, Single, Double)
            will be treated as <b>Int64</b> values. If the collection of
            entries is empty, a <c>null</c> result is returned.
            </remarks>
            <author>Gene Gleyzer  2005.09.05</author>
            <author>Ivan Cikic  2005.10.24</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongMin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongMin.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>LongMin</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongMin.#ctor(System.String)">
            <summary>
            Construct a <b>LongMin</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongMin.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongMin.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="T:Tangosol.Util.Aggregator.LongSum">
            <summary>
            Sums up numeric values extracted from a collection of entries in a
            cache.
            </summary>
            <remarks>
            All the extracted objects (Byte, Int16, Int32, Int64, Single, Double)
            will be treated as <b>Int64</b> values. If the collection of
            entries is empty, a <c>null</c> result is returned.
            </remarks>
            <author>Gene Gleyzer  2005.09.05</author>
            <author>Ivan Cikic  2005.10.24</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongSum.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongSum.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>LongSum</b> aggregator.
            </summary>
            <param name="extractor">
            The extractor that provides a value in the form of any .NET
            object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongSum.#ctor(System.String)">
            <summary>
            Construct a <b>LongSum</b> aggregator.
            </summary>
            <param name="member">
            The name of the member that returns a value in the form of any
            .NET object out of Byte, Int16, Int32, Int64, Single, Double.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongSum.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.LongSum.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="T:Tangosol.Util.Aggregator.PriorityAggregator">
            <summary>
            PriorityAggregator is used to explicitly control the scheduling
            priority and timeouts for execution of <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/>
            -based methods.
            </summary>
            <remarks>
            For example, let's assume that there is an <i>Orders</i> cache that
            belongs to a partitioned cache service configured with a
            <i>request-timeout</i> and <i>task-timeout</i> of 5 seconds. Also
            assume that we are willing to wait longer for a particular
            aggregation request that scans the entire cache. Then we could
            override the default timeout values by using the PriorityAggregator
            as follows:
            <code>
            DoubleAverage      aggrStandard = new DoubleAverage("Price");
            PriorityAggregator aggrPriority = new PriorityAggregator(aggrStandard);
            aggrPriority.ExecutionTimeoutMillis = PriorityTaskTimeout.None;
            aggrPriority.RequestTimeoutMillis   = PriorityTaskTimeout.None;
            cacheOrders.Aggregate(null, aggrPriority);
            </code>
            This is an advanced feature which should be used judiciously.
            </remarks>
            <author>Gene Gleyzer  2007.03.20</author>
            <since>Coherence 3.3</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.PriorityAggregator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.PriorityAggregator.#ctor(Tangosol.Net.Cache.IParallelAwareAggregator)">
            <summary>
            Construct a PriorityAggregator.
            </summary>
            <param name="aggregator">
            The <see cref="T:Tangosol.Net.Cache.IParallelAwareAggregator"/> wrapped by this
            PriorityAggregator.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.PriorityAggregator.AggregateResults(System.Collections.ICollection)">
            <summary>
            Aggregate the results of the parallel aggregations.
            </summary>
            <param name="results">
            Results to aggregate.
            </param>
            <returns>
            The aggregation of the parallel aggregation results.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.PriorityAggregator.Aggregate(System.Collections.ICollection)">
            <summary>
            Process a set of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> objects
            in order to produce an aggregated result.
            </summary>
            <param name="entries">
            A collection of read-only <b>IInvocableCacheEntry</b>
            objects to aggregate.
            </param>
            <returns>
            The aggregated result from processing the entries.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.PriorityAggregator.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            This implementation reserves property index 10.
            </remarks>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Aggregator.PriorityAggregator.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            This implementation reserves property index 10.
            </remarks>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Aggregator.PriorityAggregator.ToString">
            <summary>
            Return a human-readable description for this
            <b>PriorityAggregator</b>.
            </summary>
            <returns>
            A string description of the <b>PriorityAggregator</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Aggregator.PriorityAggregator.m_aggregator">
            <summary>
            The wrapped IParallelAwareAggregator.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Aggregator.PriorityAggregator.Aggregator">
            <summary>
            Obtain the underlying aggregator.
            </summary>
            <value>
            The aggregator wrapped by this PriorityAggregator.
            </value>
        </member>
        <member name="P:Tangosol.Util.Aggregator.PriorityAggregator.ParallelAggregator">
            <summary>
            Get an aggregator that can take the place of this aggregator in
            situations in which the <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> can
            aggregate in parallel.
            </summary>
            <value>
            The aggregator that will be run in parallel.
            </value>
        </member>
        <member name="T:Tangosol.Util.Aggregator.QueryRecorder">
             <summary>
             This parallel aggregator used to produce a {@link com.tangosol.util.QueryRecord}
             object that contains an estimated or actual cost of the query execution
             for a given filter.
            
             For example, the following code will return a QueryPlan, containing the
             estimated query cost and corresponding execution steps.
             </summary>
             <author>tb 2011.05.26</author>
             <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.QueryRecorder.#ctor">
            <summary>
            Default constructor (necessary for IPortableObject interface).
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.QueryRecorder.#ctor(Tangosol.Util.Aggregator.QueryRecorder.RecordType)">
            <summary>
            Construct a QueryRecorder.
            </summary>
            <param name="type">
            The type for this aggregator.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.QueryRecorder.Aggregate(System.Collections.ICollection)">
            <summary>
            Process a set of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> objects
            in order to produce an aggregated result.
            </summary>
            <param name="colEntries">
            A collection of read-only <b>IInvocableCacheEntry</b>
            objects to aggregate.
            </param>
            <returns>
            The aggregated result from processing the entries.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.QueryRecorder.AggregateResults(System.Collections.ICollection)">
            <summary>
            Aggregate the results of the parallel aggregations.
            </summary>
            <param name="colResults">
            Results to aggregate.
            </param>
            <returns>
            The aggregation of the parallel aggregation results.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.QueryRecorder.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Aggregator.QueryRecorder.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Aggregator.QueryRecorder.m_type">
            <summary>
            This aggregator record type.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Aggregator.QueryRecorder.Type">
            <summary>
            Get the record type for this query recorder.
            </summary>
            <returns>
            The record type enum.
            </returns>
        </member>
        <member name="P:Tangosol.Util.Aggregator.QueryRecorder.ParallelAggregator">
            <summary>
            Get an aggregator that can take the place of this aggregator in
            situations in which the <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> can
            aggregate in parallel.
            </summary>
            <value>
            The aggregator that will be run in parallel.
            </value>
        </member>
        <member name="T:Tangosol.Util.Aggregator.QueryRecorder.RecordType">
            <summary>
            RecordType enum specifies whether the QueryRecorder should be
            used to produce a QueryRecord object that contains an estimated 
            or an actual cost of the query execution.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.QueryRecorder.RecordType.Explain">
            <summary>
            Produce a QueryRecord object that contains an estimated cost 
            of the query execution.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.QueryRecorder.RecordType.Trace">
            <summary>
            Produce a QueryRecord object that contains the actual cost of 
            the query execution.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Aggregator.ReducerAggregator">
            <summary>
            The ReducerAggregator will return a portion of value attributes based on the
            provided ValueExtractor, instead of returning the complete set of values.
            </summary>
            <remarks>
            This aggregator could be used in combination with
            Tangosol.Util.Extractor.MultiExtractor allowing one to collect
            tuples that are a subset of the attributes of each object stored in the cache.
            <see cref="T:Tangosol.Util.Extractor.MultiExtractor"/>
            </remarks>
            <author> djl  2009.03.02 </author>
            <author> par  2013.04.25 </author>
            <since>Coherence 12.1.3</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ReducerAggregator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ReducerAggregator.#ctor(System.String)">
            <summary>
            Construct a ReducerAggregator based on the specified method name.
            </summary>
            <param name="sMethod">
            The name of the method that is used to extract the
            portion of the cached value.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ReducerAggregator.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a ReducerAggregator based on the specified extractor.
            </summary>
            <param name="extractor">
            The extractor that is used to extract the portion
            of the cached value.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ReducerAggregator.Init(System.Boolean)">
            <summary>
            Initialize the aggregation result.
            </summary>
            <param name="isFinal">
            <b>true</b> is passed if the aggregation process that is being
            initialized must produce a final aggregation result; this will
            only be <b>false</b> if a parallel approach is being used and the
            initial (partial) aggregation process is being initialized.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ReducerAggregator.Process(System.Object,System.Boolean)">
            <summary>
            Incorporate one aggregatable value into the result.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            given object is a partial result (returned by an individual
            parallel aggregator) that should be incorporated into the final
            result; otherwise, the object is a value extracted from an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>
            </remarks>
            <param name="o">
            The value to incorporate into the aggregated result.
            </param>
            <param name="isFinal">
            <b>true</b> to indicate that the given object is a partial
            result returned by a parallel aggregator.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ReducerAggregator.FinalizeResult(System.Boolean)">
            <summary>
            Obtain the result of the aggregation.
            </summary>
            <remarks>
            If the <paramref name="isFinal"/> parameter is <b>true</b>, the
            returned object must be the final result of the aggregation;
            otherwise, the returned object will be treated as a partial
            result that should be incorporated into the final result.
            </remarks>
            <param name="isFinal">
            <b>true</b> to indicate that the final result of the aggregation
            process should be returned; this will only be <b>false</b> if a
            parallel approach is being used.
            </param>
            <returns>
            The result of the aggregation process.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.ReducerAggregator.EnsureMap">
            <summary>
            Return a map that can be used to store reduced values, creating it if
            one has not already been created.
            </summary>
            <returns>
            A set that can be used to store distinct values.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Aggregator.ReducerAggregator.m_map">
            <summary>
            The resulting map of reduced values.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Aggregator.TopNAggregator">
            <summary>
             TopNAggregator is a ParallelAwareAggregator that aggregates the
             top <i>N</i> extracted values into an array.  The extracted values
              must not be null, but do not need to be unique.
            </summary>
            <author>Robert Lee  2013.04.24</author>
            <since>Coherence 12.1.3</since>
        </member>
        <member name="M:Tangosol.Util.Aggregator.TopNAggregator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.TopNAggregator.#ctor(Tangosol.Util.IValueExtractor,System.Collections.IComparer,System.Int32)">
            <summary>
            Construct a TopNAggregator that will aggregate the top extracted
            values, as determined by the specified comparator.
            </summary>
            <param name="extractor">
            The extractor.
            </param>
            <param name="comparer">
            The comparer for extracted values.
            </param>
            <param name="cResults">
            The maximum number of results to return.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.TopNAggregator.AggregateResults(System.Collections.ICollection)">
            <summary>
            Aggregate the results of the parallel aggregations.
            </summary>
            <param name="results">
            Results to aggregate.
            </param>
            <returns>
            The aggregation of the parallel aggregation results.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.TopNAggregator.Aggregate(System.Collections.ICollection)">
            <summary>
            Process a set of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> objects
            in order to produce an aggregated result.
            </summary>
            <param name="entries">
            A collection of read-only <b>IInvocableCacheEntry</b>
            objects to aggregate.
            </param>
            <returns>
            The aggregated result from processing the entries.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.TopNAggregator.AggregatePartialResults(System.Collections.ICollection)">
            <summary>
            Aggregate the results of the parallel aggregations, producing a
            partial result logically representing the partial aggregation. The
            returned partial result will be further {@link
            ParallelAwareAggregator#aggregateResults aggregated} to produce
            the final result.
            </summary>
            <param name="colPartialResults">
            The partial results to agregate.
            </param>
            <returns>
            An aggregattion of the collection of partial results.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.TopNAggregator.FinalizeResult(Tangosol.Util.Aggregator.TopNAggregator.PartialResult)">
            <summary>
            Finalize the partial aggregation result.
            </summary>
            <param name="result">
            The final aggregation result.
            </param>
            <returns>
            The finalized partial aggregation result.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Aggregator.TopNAggregator.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Aggregator.TopNAggregator.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Aggregator.TopNAggregator.m_isParallel">
            <summary>
            True iff this aggregator is to be used in parallel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.TopNAggregator.m_extractor">
            <summary>
            The ValueExtractor used by this aggregator.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.TopNAggregator.m_comparer">
            <summary>
            The IComparer used by this aggregator.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.TopNAggregator.m_cResults">
            <summary>
            The maximum number of results to include in the aggregation result.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Aggregator.TopNAggregator.ParallelAggregator">
            <summary>
            Get an aggregator that can take the place of this aggregator in
            situations in which the <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> can
            aggregate in parallel.
            </summary>
            <value>
            The aggregator that will be run in parallel.
            </value>
        </member>
        <member name="T:Tangosol.Util.Aggregator.TopNAggregator.PartialResult">
            <summary>
            The sorted partial result.
            </summary>
            Note the implementation difference between Java due to the lack
            of SortedMap/NavigableMap interfaces (and hence SortedBag).
        </member>
        <member name="M:Tangosol.Util.Aggregator.TopNAggregator.PartialResult.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Aggregator.TopNAggregator.PartialResult.#ctor(System.Collections.IComparer)">
            <summary>
            Construct a PartialResult using the specified comparator.
            </summary>
            <param name="comparer">
            The comparer.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.TopNAggregator.PartialResult.#ctor(System.Collections.IComparer,System.Collections.IList)">
            <summary>
            Construct a PartialResult using the specified comparator.
            </summary>
            <param name="comparer">
            The comparer.
            </param>
            <param name="list">
            The list.
            </param>
        </member>
        <member name="M:Tangosol.Util.Aggregator.TopNAggregator.PartialResult.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Aggregator.TopNAggregator.PartialResult.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Aggregator.TopNAggregator.PartialResult.m_comparer">
            <summary>
            The IComparer used to sort elements in this partial result.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Aggregator.TopNAggregator.PartialResult.m_list">
            <summary>
            The underlying list holding the elements of the partial result.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Aggregator.TopNAggregator.PartialResult.List">
            <summary>
            The underlying <b>IList</b>.
            </summary>
            <value>
            The underlying <b>IList</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.AtomicCounter">
            <summary>
            Abstract base class for AtomicCounters.
            </summary>
            <remarks>
            The AtomicCounter allows for atomic updates to a "long" value where
            possible without requiring synchronization. The underlying
            AtomicCounter implementation will be choosen at runtime.
            <p/>
            Default implementation used in .NET 2.0 is <b>InterlockedCounter</b>,
            while in .NET 1.1 we have to fall back to a
            <b>SynchronizedCounter</b>.
            </remarks>
            <author>Goran Milosavljevic  2006.08.22</author>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.Increment">
            <summary>
            Increment the value, and return the new value.
            </summary>
            <returns>
            The new value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.Increment(System.Int64)">
            <summary>
            Incremenet the value by c, and return the new value.
            </summary>
            <param name="c">
            The amount to increment the counter by.
            </param>
            <returns>
            The new value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.PostIncrement">
            <summary>
            Incremenet the value, and return the original value.
            </summary>
            <returns>
            The original value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.PostIncrement(System.Int64)">
            <summary>
            Incremenet the value by c, and return the original value.
            </summary>
            <param name="c">
            The amount to increment the counter by.
            </param>
            <returns>
            The original value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.Decrement">
            <summary>
            Decrement the value, and return the new value.
            </summary>
            <returns>
            The new value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.Decrement(System.Int64)">
            <summary>
            Decrement the value by c, and return the new value.
            </summary>
            <param name="c">
            The amount to decrement the counter by.
            </param>
            <returns>
            The new value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.PostDecrement">
            <summary>
            Decrement the value, and return the original value.
            </summary>
            <returns>
            The original value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.PostDecrement(System.Int64)">
            <summary>
            Decrement the value by c, and return the original value.
            </summary>
            <param name="c">
            The amount to decrement the counter by.
            </param>
            <returns>
            The original value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.GetCount">
            <summary>
            Return the current value of the counter.
            </summary>
            <returns>
            The current value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.SetCount(System.Int64,System.Int64)">
            <summary>
            Update the current value, only if it is equal to the assumed
            value.
            </summary>
            <param name="assumedValue">
            The assumed old value.
            </param>
            <param name="newValue">
            The new value.
            </param>
            <returns>
            <b>true</b> if the value was updated, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.SetCount(System.Int64)">
            <summary>
            Update the current value, and return the previous value.
            </summary>
            <param name="newValue">
            The new value.
            </param>
            <returns>
            The previous value just before the update went through.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.ToString">
            <summary>
            Return the count as a string.
            </summary>
            <returns>
            A string represenation of the count.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.Adjust(System.Int64)">
            <summary>
            Adjust the value of the counter by the specified amount, and
            return the new value.
            </summary>
            <param name="c">
            The amount to adjust the counter by.
            </param>
            <returns>
            The new value, after the adjustment has been made.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.PostAdjust(System.Int64)">
            <summary>
            Adjust the value of the counter by the specified amount, and
            return the old value.
            </summary>
            <param name="c">
            The amount to adjust the counter by.
            </param>
            <returns>
            The old value, prior to the adjustment having been made.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.NewAtomicCounter">
            <summary>
            Instantiate and return a new AtomicCounter.
            </summary>
            <returns>
            A new AtomicCounter with a count of zero.
            </returns>
        </member>
        <member name="M:Tangosol.Util.AtomicCounter.NewAtomicCounter(System.Int64)">
            <summary>
            Instantiate and return a new AtomicCounter initialized to a
            particular value.
            </summary>
            <param name="count">
            The initial counter value.
            </param>
            <returns>
            A new AtomicCounter with the specified counter value.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Binary">
            <summary>
            A thread-safe immutable binary object.
            </summary>
            <author>Cameron Purdy  2002.01.25</author>
            <author>Ana Cikic  2008.06.01</author>
            <author>Aleksandar Seovic  2009.04.03</author>
        </member>
        <member name="M:Tangosol.Util.Binary.#ctor">
            <summary>
            Default constructor for a Binary object.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Binary.#ctor(System.Byte[])">
            <summary>
            Construct a Binary object from a byte array.
            </summary>
            <param name="ab">
            An array of bytes.
            </param>
        </member>
        <member name="M:Tangosol.Util.Binary.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Construct a Binary on a portion of a byte array.
            </summary>
            <param name="ab">
            A byte array.
            </param>
            <param name="of">
            An offset into the byte array.
            </param>
            <param name="cb">
            The number of bytes to utilize.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="of"/> or <paramref name="cb"/> is negative,
            or <code>of + cb</code> is larger than <code>ab.Length</code>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If byte array is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Binary.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Construct a Binary on a portion of a byte array. This
            constructor allows internal methods to efficiently create
            Binary objects without forcing a copy.
            </summary>
            <param name="ab">
            A byte array.
            </param>
            <param name="of">
            An offset into the byte array.
            </param>
            <param name="cb">
            The number of bytes to utilize.
            </param>
            <param name="fCopy">
            <c>true</c> to force a copy of any mutable data.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="of"/> or <paramref name="cb"/> is negative,
            or <code>of + cb</code> is larger than <code>ab.Length</code>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If byte array is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Binary.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct a Binary from a Stream.
            </summary>
            <param name="stream">
            The Stream from which the Binary will load its data.
            </param>
            <param name="cb">
            The number of bytes to read from the Stream.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="cb"/> is negative.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Binary.#ctor(Tangosol.Util.BinaryMemoryStream)">
            <summary>
            Initializes a new Binary instance from
            <see cref="T:Tangosol.Util.BinaryMemoryStream"/>.
            </summary>
            <param name="stream">
            A <b>BinaryMemoryStream</b> instance.
            </param>
        </member>
        <member name="M:Tangosol.Util.Binary.ByteAt(System.Int32)">
            <summary>
            Returns a byte at the specified position.
            </summary>
            <param name="of">
            Offset of the byte to return.
            </param>
            <returns>
            Byte at the specified position.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Binary.WriteTo(System.IO.Stream)">
            <summary>
            Write the contents of the Binary object to a Stream.
            </summary>
            <param name="stream">
            A Stream to write to.
            </param>
        </member>
        <member name="M:Tangosol.Util.Binary.WriteTo(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Write the contents of the Binary object to a Stream.
            </summary>
            <param name="stream">
            A Stream to write to.
            </param>
            <param name="of">
            Offset of the first byte to write.
            </param>
            <param name="cb">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:Tangosol.Util.Binary.WriteTo(System.IO.BinaryWriter)">
            <summary>
            Write the contents of the Binary object to a Stream.
            </summary>
            <param name="writer">
            A Stream to write to.
            </param>
        </member>
        <member name="M:Tangosol.Util.Binary.WriteTo(System.IO.BinaryWriter,System.Int32,System.Int32)">
            <summary>
            Write the contents of the Binary object to a BinaryWriter.
            </summary>
            <param name="writer">
            A BinaryWriter to write to.
            </param>
            <param name="of">
            Offset of the first byte to write.
            </param>
            <param name="cb">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:Tangosol.Util.Binary.GetStream">
            <summary>
            Get a Stream to read the Binary object's contents from.
            </summary>
            <returns>
            A Stream backed by this Binary object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Binary.GetStream(System.Int32,System.Int32)">
            <summary>
            Get a Stream to read the Binary object's contents from.
            </summary>
            <param name="of">
            Offset of the first byte.
            </param>
            <param name="cb">
            The number of bytes.
            </param>
            <returns>
            A Stream backed by this Binary object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Binary.GetBinary(System.Int32,System.Int32)">
            <summary>
            Get a Binary representing a subset of this Binary.
            </summary>
            <remarks>
            This method simply returns a limited "view" into the
            underlying Binary it is invoked on, without allocating
            new buffer to hold the data.
            </remarks>
            <param name="of">
            Offset of the first byte.
            </param>
            <param name="cb">
            The number of bytes.
            </param>
            <returns>
            A new Binary view, backed by this Binary object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Binary.GetReader">
            <summary>
            Return a DataReader to read this Binary's contents from.
            </summary>
            <returns>
            A DataReader backed by this Binary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Binary.ToByteArray">
            <summary>
            Get the contents of the Binary as a byte array.
            </summary>
            <remarks>
            This is the equivalent of
            <code>ToByteArray(0, Length)</code>.
            </remarks>
            <returns>
            A byte array with the contents of this Binary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Binary.ToByteArray(System.Int32,System.Int32)">
            <summary>
            Get a portion of the contents of the Binary as a byte array.
            </summary>
            <param name="of">
            The beginning index, inclusive.
            </param>
            <param name="cb">
            The number of bytes to include in the resulting byte array.
            </param>
            <returns>
            A byte array containing the specified portion of this Binary.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="of"/> or <paramref name="cb"/> is negative,
            or <code>of + cb</code> is larger than the length of this Binary.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Binary.CalculateNaturalPartition(System.Int32)">
            <summary>
            Calculate the partition ID to which the specified <b>Binary</b> should be
            naturally assigned. This calculation should not be applied to <b>Binary</b>
            objects <i>decorated</i> with artificially assigned partitions.
            </summary>
            <remarks>
            The resulting partition ID will be in the range <tt>[0..cPartitions)</tt>.
            </remarks>
            <param name="cPartitions">
            The partition count.
            </param>
            <returns>
            The partition that the this <b>Binary</b> is naturally assigned to.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Binary.GetHashCode">
            <summary>
            Determine a hash value for the <b>Binary</b> object.
            </summary>
            <returns>
            An integer hash value for this <b>Binary</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Binary.Equals(System.Object)">
            <summary>
            Compare this object with another object to determine equality.
            </summary>
            <param name="o">
            The object to compare with current object.
            </param>
            <returns>
            <b>true</b> if this object and the passed object are equivalent
            <b>Binary</b> objects.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Binary.ToString">
            <summary>
            Return a human-readable description for this <b>Binary</b>.
            </summary>
            <returns>
            A string description of the object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Binary.Equals(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compare two binary regions, testing for equality.
            </summary>
            <param name="ab1">
            The byte array containing the first binary region to compare.
            </param>
            <param name="of1">
            The offset of the binary region within <paramref name="ab1"/>.
            </param>
            <param name="ab2">
            The byte array containing the second binary region to compare.
            </param>
            <param name="of2">
            The offset of the binary region within <paramref name="ab2"/>.
            </param>
            <param name="cb">
            The size of the binary regions, which is the number of bytes to
            compare.
            </param>
            <returns>
            <c>true</c> iff the two specified binary regions are identical.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Binary.Clone(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Create a clone of the specified binary region.
            </summary>
            <param name="ab">
            The byte array containing the binary region to copy from.
            </param>
            <param name="of">
            The offset of the binary region within <tt>ab</tt>.
            </param>
            <param name="cb">
            The size in bytes of the binary region to copy.
            </param>
            <returns>
            The specified binary region cloned.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Binary.ToString(System.Byte[])">
            <summary>
            For debugging purposes, convert the passed byte array into a string
            that contains the information regarding whether the reference is null,
            and if it is not null, what the length of the byte array is.
            </summary>
            <param name="ab">
            a byte array; may be null
            </param>
            <returns>
            a String; never null
            </returns>
        </member>
        <member name="F:Tangosol.Util.Binary.NO_BYTES">
            <summary>
            An empty byte array (by definition immutable).
            </summary>
        </member>
        <member name="F:Tangosol.Util.Binary.NO_BINARY">
            <summary>
            An empty Binary object.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Binary.m_ab">
            <summary>
            The byte array that holds the binary data.
            </summary>
            <remarks>
            This value should not be changed.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Binary.m_of">
            <summary>
            Offset of the first byte of this Binary within the backing
            byte array.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Binary.m_cb">
            <summary>
            The number of bytes of data represented by this Binary object.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Binary.m_hash">
            <summary>
            Cached hash code.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Binary.Length">
            <summary>
            Determine the length of the Binary.
            </summary>
            <value>
            The number of bytes of data represented by this Binary.
            </value>
        </member>
        <member name="T:Tangosol.Util.BinaryMemoryStream">
            <summary>
            A <see cref="T:System.IO.MemoryStream"/> implementation whose primary purpose is
            to be used to create <see cref="T:Tangosol.Util.Binary"/> objects.
            </summary>
            <author>Cameron Purdy  2005.06.02</author>
            <author>Ana Cikic  2008.06.01</author>
        </member>
        <member name="M:Tangosol.Util.BinaryMemoryStream.#ctor">
            <summary>
            Initializes a new instance of the BinaryMemoryStream with an
            expandable capacity initialized to zero.
            </summary>
        </member>
        <member name="M:Tangosol.Util.BinaryMemoryStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the BinaryMemoryStream with an
            expandable capacity initialized as specified.
            </summary>
            <param name="capacity">
            The initial size of the internal array in bytes.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Capacity is negative.
            </exception>
        </member>
        <member name="M:Tangosol.Util.BinaryMemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new non-resizable instance of the BinaryMemoryStream
            based on the specified region of a byte array.
            </summary>
            <remarks>
            Initialized stream is read-only.
            </remarks>
            <param name="ab">
            The array of bytes from which to create the stream.
            </param>
            <param name="of">
            The offset into the given array at which the stream begins.
            </param>
            <param name="cb">
            The length of the stream in bytes.
            </param>
        </member>
        <member name="M:Tangosol.Util.BinaryMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the current stream using data read
            from buffer.
            </summary>
            <param name="buffer">
            The buffer to write data from.
            </param>
            <param name="offset">
            The byte offset in buffer at which to begin writing from.
            </param>
            <param name="count">
            The maximum number of bytes to write.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Buffer is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing or the current position is
            closer than count bytes to the end of the stream, and the
            capacity cannot be modified.
            </exception>
            <exception cref="T:System.ArgumentException">
            Offset subtracted from the buffer length is less than count.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Offset or count are negative.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The current stream instance is closed.
            </exception>
        </member>
        <member name="M:Tangosol.Util.BinaryMemoryStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current stream at the current position.
            </summary>
            <param name="value">
            The byte to write.
            </param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing or the current position is at
            the end of the stream, and the capacity cannot be modified.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The current stream is closed.
            </exception>
        </member>
        <member name="M:Tangosol.Util.BinaryMemoryStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream to the specified value.
            </summary>
            <param name="value">
            The value at which to set the length.
            </param>
            <exception cref="T:System.NotSupportedException">
            The current stream is not resizable and value is larger than the
            current capacity or the current stream does not support writing.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Value is negative or is greater than the maximum length of the
            stream, where the maximum length is
            <b>(System.Int32.MaxValue - origin)</b>, and origin is the index
            into the underlying buffer at which the stream starts.
            </exception>
        </member>
        <member name="M:Tangosol.Util.BinaryMemoryStream.GetBuffer">
            <summary>
            Returns the array of unsigned bytes from which this stream was
            created.
            </summary>
            <returns>
            The byte array from which this stream was created.
            </returns>
            <exception cref="T:System.UnauthorizedAccessException">
            Buffer is not publicly visible.
            </exception>
        </member>
        <member name="M:Tangosol.Util.BinaryMemoryStream.ToBinary">
            <summary>
            Returns a new <see cref="T:Tangosol.Util.Binary"/> object that holds the complete
            contents of this stream.
            </summary>
            <returns>
            The contents of this stream as a <b>Binary</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.BinaryMemoryStream.GetInternalByteArray">
            <summary>
            Obtain the internal byte array that this stream uses.
            </summary>
            <remarks>
            Package private, for use only by <see cref="T:Tangosol.Util.Binary"/>.
            </remarks>
            <returns>
            The actual byte array that this stream uses.
            </returns>
        </member>
        <member name="M:Tangosol.Util.BinaryMemoryStream.CheckWriteable">
            <summary>
            Checks if stream is writeable.
            </summary>
            <returns>
            <b>true</b> if stream is writeable.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If stream is not writeable.
            </exception>
            <seealso cref="P:Tangosol.Util.BinaryMemoryStream.CanWrite"/>.
        </member>
        <member name="F:Tangosol.Util.BinaryMemoryStream.m_isReadOnly">
            <summary>
            Indicator that no more modifications are permitted.
            </summary>
        </member>
        <member name="P:Tangosol.Util.BinaryMemoryStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports
            writing.
            </summary>
            <value>
            <b>true</b> if the stream supports writing; otherwise,
            <b>false</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.CacheTriggerListener">
            <summary>
            CacheTriggerListener is a special purpose
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> implementation that is used to register
            a <see cref="T:Tangosol.Net.Cache.ICacheTrigger"/> on a corresponding
            <see cref="T:Tangosol.Net.Cache.IObservableCache"/>.
            </summary>
            <remarks>
            <b>Note:</b> Currently, the CacheTriggerListener can only be
            registered with partitioned caches and only "globally" (without
            specifying any filter or key), using the
            <see cref="M:Tangosol.Net.Cache.IObservableCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)"/>
            method.
            </remarks>
            <author>Cameron Purdy/Gene Gleyzer  2008.03.11</author>
            <author>Ana Cikic  2008.07.02</author>
            <since>Coherence 3.4</since>
        </member>
        <member name="M:Tangosol.Util.CacheTriggerListener.#ctor(Tangosol.Net.Cache.ICacheTrigger)">
            <summary>
            Construct a CacheTriggerListener that can be used to register the
            specified <see cref="T:Tangosol.Net.Cache.ICacheTrigger"/>.
            </summary>
            <param name="trigger">
            The <b>ICacheTrigger</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.CacheTriggerListener.OnCacheEvent(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted, updated or
            deleted.
            </summary>
            <remarks>
             To determine what action has occurred, use
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.EventType"/> property.
            </remarks>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert, update or
            delete information.
            </param>
        </member>
        <member name="F:Tangosol.Util.CacheTriggerListener.m_trigger">
            <summary>
            The underlying ICacheTrigger.
            </summary>
        </member>
        <member name="P:Tangosol.Util.CacheTriggerListener.Trigger">
            <summary>
            Obtain the <see cref="T:Tangosol.Net.Cache.ICacheTrigger"/> agent represented by this
            CacheTriggerListener.
            </summary>
            <returns>
            The <b>ICacheTrigger</b> agent represented by this
            CacheTriggerListener.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Collections.DictionarySet">
            <summary>
            <see cref="T:System.Collections.IDictionary"/>-based <see cref="T:System.Collections.ICollection"/> implementation 
            that contains no duplicate elements.
            </summary>
            <author>Jason Howes  2010.09.30</author>
            <author>Luk Ho  2012.08.27</author>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.#ctor">
            <summary>
            Default constructor. By default, HashDictionary is the underlying
            Dictionary. If that is not the desired behavior, then pass an
            explicit Dictionary to the <c>DictionarySet</c> constructor. To
            change the default Dictionary implementation, sub-class the
            DictionarySet and override the
            <see cref="M:Tangosol.Util.Collections.DictionarySet.InstantiateDictionary"/>
            method.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.#ctor(System.Collections.ICollection)">
            <summary>
            Create and populate a new <c>DictionarySet</c> with the given
            collection of elements.
            </summary>
            <param name="items">The collection of elements to populate the set
            with.</param>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.#ctor(System.Collections.IDictionary)">
            <summary>
            Create a new <c>DictionarySet</c> that uses the specified IDictionary to
            store its elements.
            </summary>
            <param name="dict">The storage dictionary.</param>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>DictionarySet</c> class using the
            specified 
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            object containing the information required to initialize this 
            <c>DictionarySet</c> instance.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            object containing the source and destination of the serialized 
            stream associated with this dictionary. 
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.Add(System.Object)">
            <summary>
            Adds an element to the set and returns a value to indicate if the 
            element was successfully added.
            </summary>
            <param name="item">The element to add to the set.</param>
            <returns><b>true</b> if the element is added to the set; 
            <b>false</b> if the element is already in the set.</returns>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.Contains(System.Object)">
            <summary>
            Determine whether the set contains a specific element.
            </summary>
            <param name="item">The element to locate in the set.</param>
            <returns><b>true</b> if the element is found in the set; 
            <b>false</b> otherwise</returns>.
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.Remove(System.Object)">
            <summary>
            Remove the specified element from the set.
            </summary>
            <param name="item">The element to remove from the set.</param>
            <returns><b>true</b> if the element was successfully removed from 
            the set; otherwise, <b>false</b>. This method also returns 
            <b>false</b> if the specified element is not found in the set.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.Clear">
            <summary>
            Remove all elements from the set.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.GetEnumerator">
            <summary>
            Return an <b>IEnumerator</b> that iterates through this collection.
            </summary>
            <returns>
            An <b>IEnumerator</b> that iterates through this collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy elements from this collection into the one-dimensional array.
            </summary>
            <param name="array">
            An array to which elements should be copied.
            </param>
            <param name="arrayIndex">
            Index in <paramref name="array"/> at which copying should start.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates SerializationInfo with the data needed to serialize this 
            object.
            </summary>
            <param name="info">
            The SerializationInfo to populate with data. 
            </param>
            <param name="context">
            The serialization context. 
            </param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this object.
            </summary>
            <returns>
            true if the specified object is equal to this object; 
            otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with this object. 
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.Equals(Tangosol.Util.Collections.DictionarySet)">
            <summary>
            Compares this set with another set for equality.
            </summary>
            <remarks>
            This method returns true if this set and the specified set have 
            exactly the same contents.
            </remarks>
            <param name="set">
            Set to compare this set with.
            </param>
            <returns>
            <c>true</c> if the two sets are equal; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.GetHashCode">
            <summary>
            Returns a hash code for this object. 
            </summary>
            <returns>
            A hash code for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.ToString">
            <summary>
            Returns string representation of this instance.
            </summary>
            <returns>
            String representation of this instance.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.DictionarySet.InstantiateDictionary">
            <summary>
            Factory pattern: Provide an underlying dictionary for this Set
            implementation.
            </summary>
            <returns>
            A new dictionary instance.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Collections.DictionarySet.m_dict">
            <summary>
            IDictionary that stores the elements of this DictionarySet as its keys.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Collections.DictionarySet.Count">
            <summary>
            Gets the number of elements in this collection.
            </summary>
            <value>
            The number of elements in this collection.
            </value>
        </member>
        <member name="P:Tangosol.Util.Collections.DictionarySet.IsSynchronized">
            <summary>
            Gets a value indicating whether access to this collection is
            thread-safe.
            </summary>
            <value>
            <b>true</b> if this collection is thread-safe; <b>false</b>
            otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Util.Collections.DictionarySet.SyncRoot">
            <summary>
            Get an object that can be used to synchronize access to this 
            collection.
            </summary>
            <value>
            An object that is used to synchronize access to this collection.
            </value>
        </member>
        <member name="T:Tangosol.Util.Collections.HashSet">
            <summary>
            <see cref="T:System.Collections.IDictionary"/>-based <see cref="T:System.Collections.ICollection"/> implementation 
            that contains no duplicate elements.
            </summary>
            <author>Jason Howes  2010.09.30</author>
            <author>Luk Ho  2012.08.27</author>
        </member>
        <member name="M:Tangosol.Util.Collections.HashSet.#ctor">
            <summary>
            Create a new <c>HashSet</c>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.HashSet.#ctor(System.Int32)">
            <summary>
            Create a new <c>HashSet</c> with the specified initial capacity.
            </summary>
            <param name="capacity">
            The initial capacity of the backing dictionary.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.HashSet.#ctor(System.Collections.ICollection)">
            <summary>
            Create and populate a new <c>HashSet</c> with the given collection
            of elements.
            </summary>
            <param name="items">The collection of elements to populate the set
            with.</param>
        </member>
        <member name="M:Tangosol.Util.Collections.HashSet.#ctor(System.Collections.IDictionary)">
            <summary>
            Create a new <c>HashSet</c> that uses the specified IDictionary to
            store its elements.
            </summary>
            <param name="dict">The storage dictionary.</param>
        </member>
        <member name="M:Tangosol.Util.Collections.HashSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>HashSet</c> class using the
            specified 
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            object containing the information required to initialize this 
            <c>HashSet</c> instance.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            object containing the source and destination of the serialized 
            stream associated with this dictionary. 
            </param>
        </member>
        <member name="T:Tangosol.Util.Collections.SafeHashSet">
            <summary>
            A thread-safe <see cref="T:System.Collections.IDictionary"/>-based <see cref="T:System.Collections.ICollection"/>
            implementation that contains no duplicate elements.
            </summary>
            <author>Luk Ho  2012.08.27</author>
        </member>
        <member name="M:Tangosol.Util.Collections.SafeHashSet.#ctor">
            <summary>
            Create a new <c>SafeHashSet</c>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.SafeHashSet.#ctor(System.Int32)">
            <summary>
            Create a new <c>SafeHashSet</c> with the specified initial capacity.
            </summary>
            <param name="capacity">
            The initial capacity of the backing dictionary.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SafeHashSet.#ctor(System.Collections.ICollection)">
            <summary>
            Create and populate a new <c>SafeHashSet</c> with the given
            collection of elements.
            </summary>
            <param name="items">The collection of elements to populate the set
            with.</param>
        </member>
        <member name="M:Tangosol.Util.Collections.SafeHashSet.#ctor(System.Collections.IDictionary)">
            <summary>
            Create a new <c>SafeHashSet</c> that uses the specified IDictionary to
            store its elements.
            </summary>
            <param name="dict">The storage dictionary.</param>
        </member>
        <member name="M:Tangosol.Util.Collections.SafeHashSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SafeHashSet</c> class using the
            specified 
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            object containing the information required to initialize this 
            <c>SafeHashSet</c> instance.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            object containing the source and destination of the serialized 
            stream associated with this dictionary. 
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SafeHashSet.InstantiateDictionary">
            <summary>
            Factory pattern: Provide an underlying dictionary for this
            thread-safe Set implementation.
            </summary>
            <returns>
            A new thread-safe dictionary instance.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Collections.SortedDictionary">
            <summary>
            SortedList-based IDictionary implementation that allows <c>null</c> 
            keys.
            </summary>
            <remarks>
            Note that <c>null</c> keys support intentionally breaks 
            <see cref="T:System.Collections.IDictionary"/> contract, which states that an 
            <c>ArgumentNullException</c> should be raised if the key is 
            <c>null</c>.
            <p/>
            However, this is necessary in order to match the behavior in Java 
            and C++, where some Map implementations support <c>null</c> keys.
            <p/>
            Note: This implementation is not thread safe. If you need it to be,
            you should wrap it with the <see cref="T:Tangosol.Util.Collections.SynchronizedDictionary"/>.
            </remarks>
            <author>Aleksandar Seovic  2009.05.28</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> 
            class that is empty, has the default initial capacity, and is 
            sorted according to the <see cref="T:System.IComparable"/> 
            interface implemented by each key added to the 
            <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> object.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> 
            class that is empty, has the specified initial capacity, and is 
            sorted according to the <see cref="T:System.IComparable"/> 
            interface implemented by each key added to the 
            <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> object.
            </summary>
            <param name="initialCapacity">
            The initial number of elements this <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> 
            object can contain. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="initialCapacity"/> is less than zero. 
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough available memory to create a 
            <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> object with the specified 
            <paramref name="initialCapacity"/>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.#ctor(System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> 
            class that is empty, has the default initial capacity, and is 
            sorted according to the specified 
            <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="comparer">
            The <see cref="T:System.Collections.IComparer"/> implementation 
            to use when comparing keys.-or- null to use the 
            <see cref="T:System.IComparable"/> implementation of each key. 
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.#ctor(System.Collections.IComparer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> 
            class that is empty, has the specified initial capacity, and is 
            sorted according to the specified 
            <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="comparer">
            The <see cref="T:System.Collections.IComparer"/> implementation 
            to use when comparing keys.-or- null to use the 
            <see cref="T:System.IComparable"/> implementation of each key. 
            </param>
            <param name="capacity">
            The initial number of elements this <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> 
            object can contain. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero. 
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough available memory to create a 
            <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> object with the specified 
            <paramref name="capacity"/>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> 
            class that contains elements copied from the specified dictionary, 
            has the same initial capacity as the number of elements copied, 
            and is sorted according to the <see cref="T:System.IComparable"/> 
            interface implemented by each key.
            </summary>
            <param name="d">
            The <see cref="T:System.Collections.IDictionary"/> implementation 
            to copy to a new <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> object.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="d"/> is null. 
            </exception>
            <exception cref="T:System.InvalidCastException">
            One or more elements in <paramref name="d"/> do not implement the 
            <see cref="T:System.IComparable"/> interface. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.#ctor(System.Collections.IDictionary,System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> 
            class that contains elements copied from the specified dictionary, 
            has the same initial capacity as the number of elements copied, 
            and is sorted according to the specified 
            <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <param name="d">
            The <see cref="T:System.Collections.IDictionary"/> implementation 
            to copy to a new <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> object.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.IComparer"/> implementation 
            to use when comparing keys.-or- null to use the 
            <see cref="T:System.IComparable"/> implementation of each key. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="d"/> is null. 
            </exception>
            <exception cref="T:System.InvalidCastException">
            <paramref name="comparer"/> is null, and one or more elements in
            <paramref name="d"/> do not implement the 
            <see cref="T:System.IComparable"/> interface. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> 
            class that is serializable using the specified 
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            and <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            objects.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            object containing the information required to serialize the 
            <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            object containing the source and destination of the serialized 
            stream associated with the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/>. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is null. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.#ctor(System.Object,System.Collections.IDictionary)">
            <summary>
            Copy constructor.
            </summary>
            <param name="nullValue">
            Value of an entry with a null key.
            </param>
            <param name="dict">
            The undelying dictionary.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.Contains(System.Object)">
            <summary>
            Determines whether this dictionary contains an entry with the 
            specified key.
            </summary>
            <returns>
            true if the dictionary contains an element with the key; 
            otherwise, false.
            </returns>
            <param name="key">
            The key to locate in this dictionary.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the 
            <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <param name="key">
            The <see cref="T:System.Object" /> to use as the key of 
            the element to add. 
            </param>
            <param name="value">
            The <see cref="T:System.Object" /> to use as the value of 
            the element to add. 
            </param>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the 
            <see cref="T:System.Collections.IDictionary" /> object. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IDictionary" /> is read-only.
            -or- The <see cref="T:System.Collections.IDictionary" /> has a 
            fixed size. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.Clear">
            <summary>
            Removes all elements from the 
            <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IDictionary" /> object is 
            read-only. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> 
            object for this dictionary.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator" /> 
            object for this dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the 
            <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <param name="key">
            The key of the element to remove. 
            </param>
            <exception cref="T:System.NotSupportedException">
            The dictionary is read-only.
            -or- The dictionary has a fixed size. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object 
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at
            a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements 
            copied from the collection. The array must have zero-based 
            indexing. 
            </param>
            <param name="index">
            The zero-based index in the array at which copying begins. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than zero. 
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array" /> is multidimensional.-or- 
            <paramref name="index" /> is equal to or greater than the length 
            of <paramref name="array" />.-or- The number of elements in the 
            source collection is greater than the available space from 
            <paramref name="index" /> to the end of the destination 
            <paramref name="array" />. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source collection cannot be cast automatically 
            to the type of the destination <paramref name="array" />. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.ContainsKey(System.Object)">
            <summary>
            Determines whether the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> contains 
            a specific key.
            </summary>
            <returns>
            true if the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> contains an element 
            with the specified key; otherwise, false.
            </returns>
            <param name="key">
            The key to locate in the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/>. 
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.ContainsValue(System.Object)">
            <summary>
            Determines whether the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> contains 
            a specific value.
            </summary>
            <returns>
            true if the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/> contains an element 
            with the specified <paramref name="value"/>; otherwise, false.
            </returns>
            <param name="value">
            The value to locate in the <see cref="T:Tangosol.Util.Collections.SortedDictionary"/>. 
            The value can be null. 
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Overrides serialization method to add support for null value
            serialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this object.
            </summary>
            <returns>
            true if the specified object is equal to this object; 
            otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with this object. 
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.Equals(System.Collections.IDictionary)">
            <summary>
            Compares this dictionary with another dictionary for equality.
            </summary>
            <remarks>
            This method returns true if this dictionary and the specified
            dictionary have exactly the same entry set.
            </remarks>
            <param name="dict">
            Dictionary to compare this dictionary with.
            </param>
            <returns>
            <c>true</c> if the two dictionaries are equal; <c>false</c>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.GetHashCode">
            <summary>
            Returns a hash code for this object. 
            </summary>
            <returns>
            A hash code for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.ToString">
            <summary>
            Returns string representation of this instance.
            </summary>
            <returns>
            String representation of this instance.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.GetBaseEnumerator">
            <summary>
            Returns enumerator from the base class.
            </summary>
            <returns>Base class enumerator.</returns>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.AssertIsVariableSize">
            <summary>
            Throw an exception if this dictionary is fixed size.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.AssertIsWriteable">
            <summary>
            Throw an exception if this dictionary is read-only.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.SortedDictionary.m_nullValue">
            <summary>
            Value of a dictionary entry with a <c>null</c> key.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.SortedDictionary.m_comparer">
            <summary>
            The IComparer associated with this SortedDictionary.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.SortedDictionary.m_keys">
            <summary>
            Keys collection.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.SortedDictionary.m_values">
            <summary>
            Values collection.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Collections.SortedDictionary.Comparer">
            <summary>
            Return the <see cref="T:System.Collections.IComparer"/> associated with this 
            SortedDictionary.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Collections.SortedDictionary.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">
            The key of the element to get or set. 
            </param>
            <exception cref="T:System.NotSupportedException">
            The property is set and the dictionary is read-only. 
            -or- The property is set, <paramref name="key" /> does not exist 
            in the collection, and the dictionary has a fixed size.
            </exception>
        </member>
        <member name="P:Tangosol.Util.Collections.SortedDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object 
            containing the keys of this dictionary.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection" /> object 
            containing the keys of this dictionary object.
            </returns>
        </member>
        <member name="P:Tangosol.Util.Collections.SortedDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object 
            containing the values in this dictionary.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection" /> object 
            containing the values in this dictionary object.
            </returns>
        </member>
        <member name="P:Tangosol.Util.Collections.SortedDictionary.Count">
            <summary>
            Gets the number of elements contained in the 
            <see cref="T:System.Collections.ICollection" />.
            </summary>
            <returns>
            The number of elements contained in the 
            <see cref="T:System.Collections.ICollection" />.
            </returns>
        </member>
        <member name="P:Tangosol.Util.Collections.SortedDictionary.IsNullValueSet">
            <summary>
            Returns true is the value for the <c>null</c> key is set,
            false otherwise.
            </summary>
            <value>
            true is the value for the <c>null</c> key is set,
            false otherwise.
            </value>
        </member>
        <member name="T:Tangosol.Util.Collections.SortedDictionary.EnumeratorMode">
            <summary>
            Enumerator mode.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator">
            <summary>
            Internal enumerator implementation.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator.#ctor(Tangosol.Util.Collections.SortedDictionary,Tangosol.Util.Collections.SortedDictionary.EnumeratorMode)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator"/> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next 
            element; false if the enumerator has passed the end of the 
            collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before 
            the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="F:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator.m_dict">
            <summary>
            SortedDictionary this enumerator enumerates over.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator.m_enumerator">
            <summary>
            Enumerator the calls should be delegated to.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator.m_mode">
            <summary>
            Enumerator mode, determines what will be returned by the 
            Current property.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator.m_fBeforeFirst">
            <summary>
            Flag specifying if this enumerator is before the first 
            element.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator.m_fAfterLast">
            <summary>
            Flag specifying if this enumerator is after the last 
            element.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator.m_currentEntry">
            <summary>
            Current enumerator entry.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the 
            collection or after the last element.
            -or- The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            <returns>
            The key of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Collections.IDictionaryEnumerator" /> 
            is positioned before the first entry of the dictionary 
            or after the last entry. 
            </exception>
        </member>
        <member name="P:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
            <returns>
            The value of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Collections.IDictionaryEnumerator" /> 
            is positioned before the first entry of the dictionary 
            or after the last entry. 
            </exception>
        </member>
        <member name="P:Tangosol.Util.Collections.SortedDictionary.SortedDictionaryEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
            <returns>
            A <see cref="T:System.Collections.DictionaryEntry" /> containing 
            both the key and the value of the current dictionary entry.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Collections.IDictionaryEnumerator" /> 
            is positioned before the first entry of the dictionary 
            or after the last entry. 
            </exception>
        </member>
        <member name="T:Tangosol.Util.Collections.SortedDictionary.KeyCollection">
            <summary>
            Internal key collection.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Collections.SortedDictionary.ValueCollection">
            <summary>
            Internal value collection.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Collections.HashDictionary">
            <summary>
            Hashtable-based IDictionary implementation that allows <c>null</c> 
            keys.
            </summary>
            <remarks>
            Note that <c>null</c> keys support intentionally breaks the
            <see cref="T:System.Collections.IDictionary"/> contract, which states that an 
            <c>ArgumentNullException</c> should be raised if the key is 
            <c>null</c>.
            <p/>
            However, this is necessary in order to match the behavior in Java and
             C++, where some Map implementations support <c>null</c> keys.
            <p/>
            Note: This implementation is not thread safe. If you need it to be,
            you should wrap it with the <see cref="T:Tangosol.Util.Collections.SynchronizedDictionary"/>.
            </remarks>
            <author>Aleksandar Seovic  2009.05.28</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.HashDictionary"/>
            class using the default initial capacity, load factor, hash code 
            provider, and comparer.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            class using the specified initial capacity, and the default load 
            factor, hash code provider, and comparer.
            </summary>
            <param name="capacity">
            The approximate number of elements the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            object can initially contain. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            class using the specified initial capacity and load factor, 
            and the default hash code provider and comparer.
            </summary>
            <param name="capacity">
            The approximate number of elements the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            object can initially contain. 
            </param>
            <param name="loadFactor">
            A number in the range from 0.1 through 1.0 that is multiplied by 
            the default value which provides the best performance. The result 
            is the maximum ratio of elements to buckets. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.-or- 
            <paramref name="loadFactor"/> is less than 0.1.-or- 
            <paramref name="loadFactor"/> is greater than 1.0. 
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="capacity"/> is causing an overflow.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            class using the specified initial capacity, load factor, and 
            <see cref="T:System.Collections.IEqualityComparer"/> object.
            </summary>
            <param name="capacity">
            The approximate number of elements the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            object can initially contain. 
            </param>
            <param name="loadFactor">
            A number in the range from 0.1 through 1.0 that is multiplied by 
            the default value which provides the best performance. The result 
            is the maximum ratio of elements to buckets. 
            </param>
            <param name="equalityComparer">
            The <see cref="T:System.Collections.IEqualityComparer"/> object 
            that defines the hash code provider and the comparer to use with 
            the <see cref="T:Tangosol.Util.Collections.HashDictionary"/>. -or- null to use the default 
            hash code provider and the default comparer. The default hash code 
            provider is each key's implementation of 
            <see cref="M:System.Object.GetHashCode"/> and the default 
            comparer is each key's implementation of 
            <see cref="M:System.Object.Equals(System.Object)"/>. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero.
            -or- <paramref name="loadFactor"/> is less than 0.1.-or- 
            <paramref name="loadFactor"/> is greater than 1.0. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.#ctor(System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            class using the default initial capacity and load factor, and
            the specified <see cref="T:System.Collections.IEqualityComparer"/> 
            object.
            </summary>
            <param name="equalityComparer">
            The <see cref="T:System.Collections.IEqualityComparer"/> object 
            that defines the hash code provider and the comparer to use with 
            the <see cref="T:Tangosol.Util.Collections.HashDictionary"/>. -or- null to use the default 
            hash code provider and the default comparer. The default hash code 
            provider is each key's implementation of 
            <see cref="M:System.Object.GetHashCode"/> and the default 
            comparer is each key's implementation of 
            <see cref="M:System.Object.Equals(System.Object)"/>. 
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            class using the specified initial capacity and 
            <see cref="T:System.Collections.IEqualityComparer"/>, and the 
            default load factor.
            </summary>
            <param name="capacity">
            The approximate number of elements the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            object can initially contain. 
            </param>
            <param name="equalityComparer">
            The <see cref="T:System.Collections.IEqualityComparer"/> object 
            that defines the hash code provider and the comparer to use with 
            the <see cref="T:Tangosol.Util.Collections.HashDictionary"/>. -or- null to use the default 
            hash code provider and the default comparer. The default hash code 
            provider is each key's implementation of 
            <see cref="M:System.Object.GetHashCode"/> and the default 
            comparer is each key's implementation of 
            <see cref="M:System.Object.Equals(System.Object)"/>. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than zero. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            class by copying the elements from the specified dictionary to 
            the new <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object. The new <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object has an initial capacity equal to 
            the number of elements copied, and uses the default load factor, 
            hash code provider, and comparer.
            </summary>
            <param name="d">
            The <see cref="T:System.Collections.IDictionary"/> object to copy 
            to a new <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="d"/> is null. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.#ctor(System.Collections.IDictionary,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            class by copying the elements from the specified dictionary to 
            the new <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object. The new <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object has an initial capacity equal to 
            the number of elements copied, and uses the specified load factor, 
            and the default hash code provider and comparer.
            </summary>
            <param name="d">
            The <see cref="T:System.Collections.IDictionary"/> object to copy 
            to a new <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object.
            </param>
            <param name="loadFactor">
            A number in the range from 0.1 through 1.0 that is multiplied by 
            the default value which provides the best performance. The result 
            is the maximum ratio of elements to buckets. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="d"/> is null. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="loadFactor"/> is less than 0.1.-or- 
            <paramref name="loadFactor"/> is greater than 1.0. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            class by copying the elements from the specified dictionary to 
            the new <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object. The new <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object has an initial capacity equal to 
            the number of elements copied, and uses the default load factor and
            the specified <see cref="T:System.Collections.IEqualityComparer"/> 
            object.
            </summary>
            <param name="d">
            The <see cref="T:System.Collections.IDictionary"/> object to copy 
            to a new <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object.
            </param>
            <param name="equalityComparer">
            The <see cref="T:System.Collections.IEqualityComparer"/> object 
            that defines the hash code provider and the comparer to use with 
            the <see cref="T:Tangosol.Util.Collections.HashDictionary"/>. -or- null to use the default 
            hash code provider and the default comparer. The default hash code 
            provider is each key's implementation of 
            <see cref="M:System.Object.GetHashCode"/> and the default 
            comparer is each key's implementation of 
            <see cref="M:System.Object.Equals(System.Object)"/>. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="d"/> is null. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            class by copying the elements from the specified dictionary to 
            the new <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object. The new <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object has an initial capacity equal to
            the number of elements copied, and uses the specified load factor 
            and <see cref="T:System.Collections.IEqualityComparer"/> object.
            </summary>
            <param name="d">
            The <see cref="T:System.Collections.IDictionary"/> object to copy 
            to a new <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object.
            </param>
            <param name="loadFactor">
            A number in the range from 0.1 through 1.0 that is multiplied by 
            the default value which provides the best performance. The result 
            is the maximum ratio of elements to buckets. 
            </param>
            <param name="equalityComparer">
            The <see cref="T:System.Collections.IEqualityComparer"/> object 
            that defines the hash code provider and the comparer to use with 
            the <see cref="T:Tangosol.Util.Collections.HashDictionary"/>. -or- null to use the default 
            hash code provider and the default comparer. The default hash code 
            provider is each key's implementation of 
            <see cref="M:System.Object.GetHashCode"/> and the default 
            comparer is each key's implementation of 
            <see cref="M:System.Object.Equals(System.Object)"/>. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="d"/> is null. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="loadFactor"/> is less than 0.1.-or- 
            <paramref name="loadFactor"/> is greater than 1.0. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> 
            class that is serializable using the specified 
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            and <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            objects.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            object containing the information required to serialize the 
            <see cref="T:Tangosol.Util.Collections.HashDictionary"/> object.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            object containing the source and destination of the serialized 
            stream associated with the <see cref="T:Tangosol.Util.Collections.HashDictionary"/>. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is null. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.#ctor(System.Object,System.Collections.IDictionary)">
            <summary>
            Copy constructor.
            </summary>
            <param name="nullValue">
            Value of an entry with a null key.
            </param>
            <param name="dict">
            The undelying hashtable.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.Contains(System.Object)">
            <summary>
            Determines whether this dictionary contains an entry with the 
            specified key.
            </summary>
            <returns>
            true if the dictionary contains an element with the key; 
            otherwise, false.
            </returns>
            <param name="key">
            The key to locate in this dictionary.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the 
            <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <param name="key">
            The <see cref="T:System.Object" /> to use as the key of 
            the element to add. 
            </param>
            <param name="value">
            The <see cref="T:System.Object" /> to use as the value of 
            the element to add. 
            </param>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the 
            <see cref="T:System.Collections.IDictionary" /> object. 
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IDictionary" /> is read-only.
            -or- The <see cref="T:System.Collections.IDictionary" /> has a 
            fixed size. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.Clear">
            <summary>
            Removes all elements from the 
            <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IDictionary" /> object is 
            read-only. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> 
            object for this dictionary.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator" /> 
            object for this dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the 
            <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <param name="key">
            The key of the element to remove. 
            </param>
            <exception cref="T:System.NotSupportedException">
            The dictionary is read-only.
            -or- The dictionary has a fixed size. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object 
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at
            a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements 
            copied from the collection. The array must have zero-based 
            indexing. 
            </param>
            <param name="index">
            The zero-based index in the array at which copying begins. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than zero. 
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array" /> is multidimensional.-or- 
            <paramref name="index" /> is equal to or greater than the length 
            of <paramref name="array" />.-or- The number of elements in the 
            source collection is greater than the available space from 
            <paramref name="index" /> to the end of the destination 
            <paramref name="array" />. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source collection cannot be cast automatically 
            to the type of the destination <paramref name="array" />. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.ContainsKey(System.Object)">
            <summary>
            Determines whether the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> contains 
            a specific key.
            </summary>
            <returns>
            true if the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> contains an element 
            with the specified key; otherwise, false.
            </returns>
            <param name="key">
            The key to locate in the <see cref="T:Tangosol.Util.Collections.HashDictionary"/>. 
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.ContainsValue(System.Object)">
            <summary>
            Determines whether the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> contains 
            a specific value.
            </summary>
            <returns>
            true if the <see cref="T:Tangosol.Util.Collections.HashDictionary"/> contains an element 
            with the specified <paramref name="value"/>; otherwise, false.
            </returns>
            <param name="value">
            The value to locate in the <see cref="T:Tangosol.Util.Collections.HashDictionary"/>. 
            The value can be null. 
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Overrides serialization method to add support for null value
            serialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this object.
            </summary>
            <returns>
            true if the specified object is equal to this object; 
            otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with this object. 
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.Equals(System.Collections.IDictionary)">
            <summary>
            Compares this dictionary with another dictionary for equality.
            </summary>
            <remarks>
            This method returns true if this dictionary and the specified
            dictionary have exactly the same entry set.
            </remarks>
            <param name="dict">
            Dictionary to compare this dictionary with.
            </param>
            <returns>
            <c>true</c> if the two dictionaries are equal; <c>false</c>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.GetHashCode">
            <summary>
            Returns a hash code for this object. 
            </summary>
            <returns>
            A hash code for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.ToString">
            <summary>
            Returns string representation of this instance.
            </summary>
            <returns>
            String representation of this instance.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.GetBaseEnumerator">
            <summary>
            Returns enumerator from the base class.
            </summary>
            <returns>Base class enumerator.</returns>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.AssertIsVariableSize">
            <summary>
            Throw an exception if this dictionary is fixed size.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.AssertIsWriteable">
            <summary>
            Throw an exception if this dictionary is read-only.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.HashDictionary.m_nullValue">
            <summary>
            Value of a dictionary entry with a <c>null</c> key.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.HashDictionary.m_keys">
            <summary>
            Keys collection.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.HashDictionary.m_values">
            <summary>
            Values collection.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Collections.HashDictionary.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">
            The key of the element to get or set. 
            </param>
            <exception cref="T:System.NotSupportedException">
            The property is set and the dictionary is read-only. 
            -or- The property is set, <paramref name="key" /> does not exist 
            in the collection, and the dictionary has a fixed size.
            </exception>
        </member>
        <member name="P:Tangosol.Util.Collections.HashDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object 
            containing the keys of this dictionary.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection" /> object 
            containing the keys of this dictionary object.
            </returns>
        </member>
        <member name="P:Tangosol.Util.Collections.HashDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object 
            containing the values in this dictionary.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection" /> object 
            containing the values in this dictionary object.
            </returns>
        </member>
        <member name="P:Tangosol.Util.Collections.HashDictionary.Count">
            <summary>
            Gets the number of elements contained in the 
            <see cref="T:System.Collections.ICollection" />.
            </summary>
            <returns>
            The number of elements contained in the 
            <see cref="T:System.Collections.ICollection" />.
            </returns>
        </member>
        <member name="P:Tangosol.Util.Collections.HashDictionary.IsNullValueSet">
            <summary>
            Returns true is the value for the <c>null</c> key is set,
            false otherwise.
            </summary>
            <value>
            true is the value for the <c>null</c> key is set,
            false otherwise.
            </value>
        </member>
        <member name="T:Tangosol.Util.Collections.HashDictionary.EnumeratorMode">
            <summary>
            Enumerator mode.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator">
            <summary>
            Internal enumerator implementation.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator.#ctor(Tangosol.Util.Collections.HashDictionary,Tangosol.Util.Collections.HashDictionary.EnumeratorMode)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator"/> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next 
            element; false if the enumerator has passed the end of the 
            collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="M:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before 
            the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="F:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator.m_dict">
            <summary>
            HashDictionary this enumerator enumerates over.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator.m_enumerator">
            <summary>
            Enumerator the calls should be delegated to.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator.m_mode">
            <summary>
            Enumerator mode, determines what will be returned by the 
            Current property.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator.m_fBeforeFirst">
            <summary>
            Flag specifying if this enumerator is before the first 
            element.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator.m_fAfterLast">
            <summary>
            Flag specifying if this enumerator is after the last 
            element.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator.m_currentEntry">
            <summary>
            Current enumerator entry.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the 
            collection or after the last element.
            -or- The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            <returns>
            The key of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Collections.IDictionaryEnumerator" /> 
            is positioned before the first entry of the dictionary 
            or after the last entry. 
            </exception>
        </member>
        <member name="P:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
            <returns>
            The value of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Collections.IDictionaryEnumerator" /> 
            is positioned before the first entry of the dictionary 
            or after the last entry. 
            </exception>
        </member>
        <member name="P:Tangosol.Util.Collections.HashDictionary.HashDictionaryEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
            <returns>
            A <see cref="T:System.Collections.DictionaryEntry" /> containing 
            both the key and the value of the current dictionary entry.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Collections.IDictionaryEnumerator" /> 
            is positioned before the first entry of the dictionary 
            or after the last entry. 
            </exception>
        </member>
        <member name="T:Tangosol.Util.Collections.HashDictionary.KeyCollection">
            <summary>
            Internal key collection.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Collections.HashDictionary.ValueCollection">
            <summary>
            Internal value collection.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Collections.SortedHashSet">
            <summary>
            <see cref="T:System.Collections.IDictionary"/>-based <see cref="T:System.Collections.ICollection"/> implementation 
            that contains no duplicate elements and maintains sorted values.
            </summary>
            <author>Harvey Raja  2011.07.25</author>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedHashSet.#ctor">
            <summary>
            Create a new <c>SortedHashSet</c>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedHashSet.#ctor(System.Int32)">
            <summary>
            Create a new <c>SortedHashSet</c> with the specified initial capacity.
            </summary>
            <param name="capacity">
            The initial capacity of the backing dictionary.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedHashSet.#ctor(System.Collections.ICollection)">
            <summary>
            Create and populate a new <c>SortedHashSet</c> with the given collection
            of elements.
            </summary>
            <param name="items">The collection of elements to populate the set
            with.</param>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedHashSet.#ctor(System.Collections.IComparer)">
            <summary>
            Create a new <c>SortedHashSet</c> with the specified <see cref="T:System.Collections.IComparer"/>
            </summary>
            <param name="comparer">
            Specify an <see cref="T:System.Collections.IComparer"/> to determine element order 
            opposed to using the natural ordering of the objects.
            </param>
        </member>
        <member name="M:Tangosol.Util.Collections.SortedHashSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <c>SortedHashSet</c> class 
            using the specified 
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
            </summary>
            <param name="info">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            object containing the information required to initialize this 
            <c>SortedHashSet</c> instance.
            </param>
            <param name="context">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            object containing the source and destination of the serialized 
            stream associated with this dictionary. 
            </param>
        </member>
        <member name="T:Tangosol.Util.CollectionUtils">
            <summary>
            This class provides the functionality not found in the .NET
            Collections classes.
            </summary>
            <author>Aleksandar Seovic  2006.08.09</author>
            <author>Ivan Cikic  2006.08.09</author>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.Add(System.Collections.ICollection,System.Object)">
            <summary>
            Adds a new element to the specified collection.
            </summary>
            <remarks>
            This method allows us to add element to any collection type from
            the <see cref="N:System.Collections"/> namespace in a uniform
            manner, thus hiding differences in the API between
            <see cref="T:System.Collections.IList"/> implementations and classes such as
            <see cref="T:System.Collections.Queue"/> and <see cref="T:System.Collections.Stack"/>.
            When collection is <see cref="T:System.Collections.IDictionary"/> object should be
            <see cref="T:System.Collections.DictionaryEntry"/>.
            </remarks>
            <param name="target">
            Collection where the new element will be added.
            </param>
            <param name="obj">
            Object to add.
            </param>
            <returns>
            <b>true</b> if the element was added, <b>false</b> otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If <paramref name="target"/> is a fixed-size collection, or if
            its type is an unknown collection type.
            </exception>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.Add(System.Collections.ICollection,System.Object,System.Boolean)">
            <summary>
            Adds a new element to the specified collection.
            </summary>
            <remarks>
            This method allows us to add element to any collection type from
            the <see cref="N:System.Collections"/> namespace in a uniform
            manner, thus hiding differences in the API between
            <see cref="T:System.Collections.IList"/> implementations and classes such as
            <see cref="T:System.Collections.Queue"/> and <see cref="T:System.Collections.Stack"/>.
            When collection is <see cref="T:System.Collections.IDictionary"/> object should be
            <see cref="T:System.Collections.DictionaryEntry"/>.
            </remarks>
            <param name="target">
            Collection where the new element will be added.
            </param>
            <param name="obj">
            Object to add.
            </param>
            <param name="isUnique">
            <b>true</b> if the value should be unique in the
            target collection; <b>false</b> otherwise.
            </param>
            <returns>
            <b>true</b> if the element was added, <b>false</b> otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If <paramref name="target"/> is a fixed-size collection, or if
            its type is an unknown collection type.
            </exception>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.AddAll(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Adds all of the elements of the "source" collection to the
            "target" collection.
            </summary>
            <remarks>
            This method allows us to add elements to any collection type from
            the <see cref="N:System.Collections"/> namespace in a uniform
            manner, thus hiding differences in the API between
            <see cref="T:System.Collections.IList"/> implementations and classes such as
            <see cref="T:System.Collections.Queue"/> and <see cref="T:System.Collections.Stack"/>.
            </remarks>
            <param name="target">
            Collection where the new elements will be added.
            </param>
            <param name="source">
            Collection whose elements will be added.
            </param>
            <returns>
            <b>true</b> if at least one element was added, <b>false</b>
            otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If <paramref name="target"/> is a fixed-size collection, or if
            its type is an unknown collection type.
            </exception>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.ToArray(System.Collections.ICollection)">
            <summary>
            Returns an array containing all of the elements from the
            specified collection.
            </summary>
            <param name="col">
            Collection whose elements are copied to an array.
            </param>
            <returns>
            An array containing the elements of the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.Contains(System.Collections.ICollection,System.Object)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <remarks>
            This method allows us to determine if an element is in any
            collection type from the <see cref="N:System.Collections"/>
            namespace since <see cref="T:System.Collections.ICollection"/> does not have method
            "Contains" defined in its interface.
            When collection is <see cref="T:System.Collections.IDictionary"/> object should be
            <see cref="T:System.Collections.DictionaryEntry"/>.
            </remarks>
            <param name="col">
            Collection where element is searched for.
            </param>
            <param name="obj">
            The object to locate in the collection.
            </param>
            <returns>
            <b>true</b> if the element is found in the collection,
            <b>false</b> otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If <paramref name="col"/>'s type is an unknown collection type.
            </exception>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.ContainsAll(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Determines whether all elements from the source collection are
            contained in the target collection.
            </summary>
            <remarks>
            When target collection is <see cref="T:System.Collections.IDictionary"/>, source
            collection elements should be <see cref="T:System.Collections.DictionaryEntry"/>s.
            </remarks>
            <param name="target">
            Collection where elements are searched for.
            </param>
            <param name="source">
            Collection with objects to locate in the collection.
            </param>
            <returns>
            <b>true</b> if all the elements are found in the collection,
            <b>false</b> otherwise.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If <paramref name="target"/>'s type is an unknown collection type.
            </exception>
            <seealso cref="M:Tangosol.Util.CollectionUtils.Contains(System.Collections.ICollection,System.Object)"/>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.Remove(System.Collections.ICollection,System.Object)">
            <summary>
            Removes an element from the specified collection.
            </summary>
            <remarks>
            This method allows us to remove element from any collection type
            from the <see cref="N:System.Collections"/> namespace in a uniform
            manner, thus hiding differences in the API between
            <see cref="T:System.Collections.IList"/> implementations and classes such as
            <see cref="T:System.Collections.Queue"/> and <see cref="T:System.Collections.Stack"/>.
            When collection is <see cref="T:System.Collections.IDictionary"/> object should be
            <see cref="T:System.Collections.DictionaryEntry"/>.
            </remarks>
            <param name="col">
            Collection from which the element should be removed.
            </param>
            <param name="obj">
            Object to remove.
            </param>
            <returns>
            <b>true</b> if the element was removed, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.Clear(System.Collections.ICollection)">
            <summary>
            Clears specified collection.
            </summary>
            <remarks>
            This method allows us to clear any collection type from the
            <b>System.Collections</b> namespace in a uniform manner, thus
            hiding differences in the API between <b>IList</b>
            implementations and classes such as <b>Queue</b> and
            <b>Stack</b>.
            </remarks>
            <param name="col">
            Collection to clear.
            </param>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.RemoveAll(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Removes all elements contained in the source collection from the
            target collection.
            </summary>
            <remarks>
            When collection is <see cref="T:System.Collections.IDictionary"/> objects in source
            collection should be <see cref="T:System.Collections.DictionaryEntry"/>s.
            </remarks>
            <param name="target">
            Collection from which the elements should be removed.
            </param>
            <param name="source">
            Collection of elements to remove.
            </param>
            <returns>
            <b>true</b> if at least one element was removed, <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.RetainAll(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Removes all elements from the target collection that are not
            contained in the source collection.
            </summary>
            <remarks>
            When collection is <see cref="T:System.Collections.IDictionary"/> objects in source
            collection should be <see cref="T:System.Collections.DictionaryEntry"/>s.
            </remarks>
            <param name="target">
            Collection from which the elements should be removed.
            </param>
            <param name="source">
            Collection of elements not to remove.
            </param>
            <returns>
            <b>true</b> if at least one element was removed, <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.Randomize(System.Collections.IList)">
            <summary>
            Randomize the order of the elements within the passed list.
            </summary>
            <param name="list">
            The list to randomize; the passed list is not altered.
            </param>
            <returns>
            A new and immutable List whose contents are identical to those
            of the passed list except for the order in which they appear.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.Randomize``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomize the order of the elements within the passed list.
            </summary>
            <typeparam name="T">
            The type of the element.
            </typeparam>        
            <param name="list">
            The list to randomize; the passed list is not altered.
            </param>
            <returns>
            A new and immutable List whose contents are identical to those
            of the passed list except for the order in which they appear.
            </returns>
            <since>12.2.1</since>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.Randomize``1(``0[])">
            <summary>
            Reorder elements of a type T array in a random way.
            </summary>
            <typeparam name="T">
            The type of the element.
            </typeparam>        
            <param name="array">
            The array of type T objects to randomize.
            </param>
            <returns>
            The array of elements ordered in a random manner.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.ToSByteArray(System.Byte[])">
            <summary>
            Convert an array of byte values to an array of corresponding
            sbyte values.
            </summary>
            <param name="array">
            A byte array.
            </param>
            <returns>
            A sbyte array.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.ToSByteArrayUnchecked(System.Byte[])">
            <summary>
            Convert an array of byte values to an array of corresponding
            sbyte values.
            </summary>
            <remarks>
            Conversion of bytes is being executed as <b>unchecked</b>.
            </remarks>
            <param name="array">
            A byte array.
            </param>
            <returns>
            A sbyte array.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.ToByteArrayUnchecked(System.SByte[])">
            <summary>
            Convert an array of sbyte values to an array of corresponding
            byte values.
            </summary>
            <remarks>
            Conversion of bytes is being executed as <b>unchecked</b>.
            </remarks>
            <param name="array">
            A sbyte array.
            </param>
            <returns>
            A byte array.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.ToByteArray(System.SByte[])">
            <summary>
            Convert an array of sbyte values to an array of corresponding
            byte values.
            </summary>
            <param name="array">
            A sbyte array.
            </param>
            <returns>
            A byte array.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.TrimLeftZeroBytes(System.Byte[])">
            <summary>
            Trim zero bytes from the beggining of the array.
            </summary>
            <param name="array">
            Array to trim.
            </param>
            <returns>
            Left trimmed array.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.EqualsDeep(System.Object,System.Object)">
            <summary>
            Examines whether two parameters are two equal array objects.
            </summary>
            <param name="obj1">
            Object to compare.
            </param>
            <param name="obj2">
            Object to compare to.
            </param>
            <returns>
            <b>true</b> if two objects are arrays and are of the same
            array type; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.EqualsArray``1(``0[],``0[],System.Collections.IEqualityComparer)">
            <summary>
            Returns true if the two specified arrays are equal to one another. 
            Two arrays are considered equal if both arrays contain the same number 
            of elements, and all corresponding pairs of elements in the two arrays 
            are equal. In other words, two arrays are equal if they contain the same 
            elements in the same order. Also, two array references are considered 
            equal if both are null
            </summary>
            <typeparam name="T">
            The type of the array element.
            </typeparam>        
            <param name="array1">
            One array to be tested for equality.
            </param>
            <param name="array2">
            The other array to be tested for equality.
            </param>
            <param name="comparer">
            Comparer to use when comparing elements.
            </param>
            <returns>
            <b>true</b> if the two arrays are equal; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.HeadList(System.Collections.IDictionary,System.Object)">
            <summary>
            Returns a portion of the list whose keys are less than the limit
            object parameter.
            </summary>
            <param name="dict">
            The list where the portion will be extracted.
            </param>
            <param name="limit">
            The end element of the portion to extract.
            </param>
            <returns>
            The portion of the collection whose elements are less than the
            limit object parameter.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.TailList(System.Collections.IDictionary,System.Object)">
            <summary>
            Returns a portion of the list whose keys are greater than the
            limit object parameter.
            </summary>
            <param name="dict">
            The list where the portion will be extracted.
            </param>
            <param name="limit">
            The start element of the portion to extract.
            </param>
            <returns>
            The portion of the collection whose elements are greater than
            the limit object parameter.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.ToDelimitedString(System.Collections.ICollection,System.String)">
            <summary>
            Format the content of the passed Object array as a delimited string.
            </summary>
            <param name="col">
            The array.
            </param>
            <param name="delim">
            The delimiter.
            </param>
            <returns>
            The formated string.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.GetBit(System.Collections.BitArray,System.Int32)">
            <summary>
            Get the value of the specified bit.
            </summary>
            <param name="bits">
            The BitArray to get the bit from.
            </param>
            <param name="index">
            The bit index to get.
            </param>
            <returns>
            The value of the bit or false if the index exceeds the length
            of the bits.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.SetBit(System.Collections.BitArray,System.Int32,System.Boolean)">
            <summary>
            Set the specified bit to the specified value.
            </summary>
            <param name="bits">
            The BitArray to modify.
            </param>
            <param name="index">
            The bit index to set.
            </param>
            <param name="value">
            The value to set the bit to.
            </param>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.AcquireReadLock(System.Collections.ICollection)">
            <summary>
            Acquire a read-lock on the supplied collection, if possible. While 
            held, A read-lock prevents the given collection from being modified.
            </summary>
            <param name="col">The collection.</param>
        </member>
        <member name="M:Tangosol.Util.CollectionUtils.ReleaseReadLock(System.Collections.ICollection)">
            <summary>
            Release a read-lock on the supplied collection.
            </summary>
            <param name="col">The collection.</param>
        </member>
        <member name="T:Tangosol.Util.Comparator.ChainedComparer">
            <summary>
            Composite comparer implementation based on a collection of
            comparers.
            </summary>
            <remarks>
            The comparers in the array assumed to be sorted according to their
            priorities; only in a case when the n-th comparer cannot determine
            the order of the passed objects:
            <code>
                comparers[n].Compare(o1, o2) == 0
            </code>
            the (n+1)-th comparer will be applied to calculate the value.
            </remarks>
            <author>Gene Gleyzer  2002.11.14</author>
            <author>Ivan Cikic 2007.01.29</author>
        </member>
        <member name="T:Tangosol.Util.Comparator.IQueryCacheComparer">
            <summary>
             This interface is used by <b>IComparer</b> implementations that can
             use value extraction optimization exposed by the
            <see cref="T:Tangosol.Net.Cache.IQueryCacheEntry"/>.
            </summary>
            <author>Cameron Purdy, Gene Gleyzer  2002.12.13, 2006.06.12</author>
            <author>Ana Cikic  2006.09.12</author>
        </member>
        <member name="M:Tangosol.Util.Comparator.IQueryCacheComparer.CompareEntries(Tangosol.Net.Cache.IQueryCacheEntry,Tangosol.Net.Cache.IQueryCacheEntry)">
            <summary>
            Compare two entries based on the rules specified by
            <b>IComparer</b>.
            </summary>
            <remarks>
            <p>
            If possible, use the <see cref="M:Tangosol.Net.Cache.IQueryCacheEntry.Extract(Tangosol.Util.IValueExtractor)"/>
            method to optimize the value extraction process.</p>
            <p>
            This method is expected to be implemented by <b>IComparer</b>
            wrappers, which simply pass on this invocation to the wrapped
            <b>IComparer</b> objects if they too implement this interface, or
            to invoke their default compare method passing the actual objects
            (not the extracted values) obtained from the extractor using the
            passed entries.</p>
            <p>
            This interface is also expected to be implemented by
            <see cref="T:Tangosol.Util.IValueExtractor"/> implementations that implement the
            <b>IComparer</b> interface. It is expected that in most cases,
            the <b>IComparer</b> wrappers will eventually terminate at (i.e.
            delegate to) <b>IValueExtractors</b> that also implement this
            interface.</p>
            </remarks>
            <param name="entry1">
            The first entry to compare values from; read-only.
            </param>
            <param name="entry2">
            The second entry to compare values from; read-only.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as the first
            entry denotes a value that is is less than, equal to, or greater
            than the value denoted by the second entry.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the arguments' types prevent them from being compared by this
            <b>IComparer</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the extractor cannot handle the passed objects for any other
            reason; an implementor should include a descriptive message.
            </exception>
            <since>Coherence 3.2</since>
        </member>
        <member name="T:Tangosol.Util.Comparator.IEntryAwareComparer">
            <summary>
            <b>IEntryAwareComparator</b> is an extension to the 
            <b>IComparer</b> interface that allows the 
            <see cref="T:Tangosol.Util.Comparator.EntryComparer"/> to know whether the underlying comparer
            expects to compare the corresponding entries' keys or values.
            </summary>
            <author>Gene Gleyzer  2007.05.05</author>
            <author>Ivan Cikic  2007.05.16</author>
        </member>
        <member name="M:Tangosol.Util.Comparator.IEntryAwareComparer.IsKeyComparer">
            <summary>
            Specifies whether this comparer expects to compare keys or 
            values.
            </summary>
            <returns>
            <b>true</b> if entry keys are expected; <b>false</b> otherwise.
            </returns>>
        </member>
        <member name="M:Tangosol.Util.Comparator.ChainedComparer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Comparator.ChainedComparer.#ctor(System.Collections.IComparer[])">
            <summary>
            Construct a <b>ChainedComparer</b>.
            </summary>
            <param name="comparers">
            The comparer array.
            </param>
        </member>
        <member name="M:Tangosol.Util.Comparator.ChainedComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares its two arguments for order.
            </summary>
            <param name="o1">
            The first object to be compared.
            </param>
            <param name="o2">
            The second object to be compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as the first
            argument is less than, equal to, or greater than the second.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.ChainedComparer.CompareEntries(Tangosol.Net.Cache.IQueryCacheEntry,Tangosol.Net.Cache.IQueryCacheEntry)">
            <summary>
            Compare two entries based on the rules specified by
            <b>IComparer</b>.
            </summary>
            <remarks>
            This implementation simply passes on this invocation to the
            wrapped <b>IComparer</b> objects if they too implement this
            interface, or invokes their default Compare method passing the
            values extracted from the passed entries.
            </remarks>
            <param name="entry1">
            The first entry to compare values from; read-only.
            </param>
            <param name="entry2">
            The second entry to compare values from; read-only.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as the first
            entry denotes a value that is is less than, equal to, or greater
            than the value denoted by the second entry.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.ChainedComparer.IsKeyComparer">
            <summary>
            Specifies whether this comparer expects to compare keys or 
            values.
            </summary>
            <returns>
            <b>true</b> iff all the underlying compares implement the
            <see cref="T:Tangosol.Util.Comparator.IEntryAwareComparer"/> interface and all 
            <code>IsKeyComparator()</code> calls return <b>true</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.ChainedComparer.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Comparator.ChainedComparer.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Comparator.ChainedComparer.ToString">
            <summary>
            Returns a human-readable description for this
            <b>ChainedComparer</b>.
            </summary>
            <returns>
            A string description of the <b>ChainedComparer</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.ChainedComparer.Equals(System.Object)">
            <summary>
            Determine if two <b>ChainedComparer</b> objects are equal.
            </summary>
            <param name="o">
            The other comparator.
            </param>
            <returns>
            <b>true</b> if the passed object is equal to this
            <b>ChainedComparator</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.ChainedComparer.GetHashCode">
            <summary>
            Return the hash code for this comparator.
            </summary>
            <returns>
            The hash code value for this comparator.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Comparator.ChainedComparer.EMPTY_COMPARER_ARRAY">
            <summary>
            Empty array of <b>IComparer</b>s.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Comparator.ChainedComparer.m_comparers">
            <summary>
            The <b>IComparer</b> array.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Comparator.ChainedComparer.Comparers">
            <summary>
            Obtain the underlying <b>IComparer</b> array.
            </summary>
            <value>
            The <b>IComparer</b> array.
            </value>
        </member>
        <member name="T:Tangosol.Util.Comparator.EntryComparer">
            <summary>
            <b>IComparer</b> implementation used to compare cache entries.
            </summary>
            <remarks>
            Depending on the comparison style this comparator will compare
            entries' values, entries' keys or, when the provided comparator is an
            instance of <see cref="T:Tangosol.Util.Comparator.IQueryCacheComparer"/>, the entries
            themselves.
            </remarks>
            <author>Gene Gleyzer  2002.12.14</author>
            <author>Goran Milosavljevic  2006.09.12</author>
        </member>
        <member name="T:Tangosol.Util.Comparator.SafeComparer">
            <summary>
            Null-safe delegating comparator.
            </summary>
            <remarks>
            <p>
            <c>null</c> values are evaluated as "less then" any non-null value.
            If the wrapped comparator is not specified then all non-null values
            must implement the <b>IComparable</b> interface.</p>
            <p>
            Use SafeComparer.Instance to obtain an instance of non-delegating
            SafeComparer.</p>
            </remarks>
            <author>Gene Gleyzer  2002.12.10</author>
            <author>Ana Cikic  2006.09.12</author>
        </member>
        <member name="M:Tangosol.Util.Comparator.SafeComparer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Comparator.SafeComparer.#ctor(System.Collections.IComparer)">
            <summary>
            Construct a SafeComparer delegating to the specified (wrapped)
            comparer.
            </summary>
            <param name="comparer">
            <b>IComparer</b> object to delegate comparison of non-null values
            (optional).
            </param>
        </member>
        <member name="M:Tangosol.Util.Comparator.SafeComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares its two arguments for order.
            </summary>
            <remarks>
            Returns a negative integer, zero, or a positive integer as the
            first argument is less than, equal to, or greater than the
            second. <c>null</c> values are evaluated as "less then" any
            non-null value. If the wrapped comparer is not specified, all
            non-null values must implement the <b>IComparable</b> interface.
            </remarks>
            <param name="o1">
            The first object to be compared.
            </param>
            <param name="o2">
            The second object to be compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as the first
            argument is less than, equal to, or greater than the second.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the arguments' types prevent them from being compared by this
            <b>IComparer</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Comparator.SafeComparer.CompareEntries(Tangosol.Net.Cache.IQueryCacheEntry,Tangosol.Net.Cache.IQueryCacheEntry)">
            <summary>
            Compare two entries based on the rules specified by <b>IComparer</b>.
            </summary>
            <remarks>
            <p>
            If possible, use the <see cref="M:Tangosol.Net.Cache.IQueryCacheEntry.Extract(Tangosol.Util.IValueExtractor)"/>
            method to optimize the value extraction process.</p>
            <p>
            This method is expected to be implemented by <b>IComparer</b>
            wrappers, which simply pass on this invocation to the wrapped
            <b>IComparer</b> objects if they too implement this interface, or
            to invoke their default compare method passing the actual objects
            (not the extracted values) obtained from the extractor using the
            passed entries.</p>
            <p>
            This interface is also expected to be implemented by
            <see cref="T:Tangosol.Util.IValueExtractor"/> implementations that implement the
            <b>IComparer</b> interface. It is expected that in most cases,
            the <b>IComparer</b> wrappers will eventually terminate at (i.e.
            delegate to) <b>IValueExtractors</b> that also implement this
            interface.</p>
            </remarks>
            <param name="entry1">
            The first entry to compare values from; read-only.
            </param>
            <param name="entry2">
            The second entry to compare values from; read-only.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as the first
            entry denotes a value that is is less than, equal to, or greater
            than the value denoted by the second entry .
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the arguments' types prevent them from being compared by this
            <b>IComparer</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the extractor cannot handle the passed objects for any other
            reason; an implementor should include a descriptive message.
            </exception>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Comparator.SafeComparer.IsKeyComparer">
            <summary>
            Specifies whether this comparer expects to compare keys or 
            values.
            </summary>
            <returns>
            <b>true</b> if entry keys are expected; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.SafeComparer.IsKeyComparer(System.Collections.IComparer)">
            <summary>
            Check whether the specified comparer expects to compare keys or
            values.
            </summary>
            <param name="comparer">
            A <b>IComparer</b> to check.
            </param>
            <returns>
            <b>true</b> if the comparer expects keys; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.SafeComparer.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Comparator.SafeComparer.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Comparator.SafeComparer.ToString">
            <summary>
            Returns a human-readable description for this <b>IComparer</b>.
            </summary>
            <returns>
            A string description of the <b>IComparer</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.SafeComparer.Equals(System.Object)">
            <summary>
            Determine if two comparers are equal.
            </summary>
            <param name="o">
            The other comparer.
            </param>
            <returns>
            <b>true</b> if the passed object is equal to this.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.SafeComparer.GetHashCode">
            <summary>
            Return the hash code for this comparator.
            </summary>
            <returns>
            The hash code value for this comparator.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.SafeComparer.CompareSafe(System.Collections.IComparer,System.Object,System.Object)">
            <summary>
            Compares its two arguments for order.
            </summary>
            <remarks>
            Returns a negative integer, zero, or a positive integer as the
            first argument is less than, equal to, or greater than the
            second. Null values are evaluated as "less then" any non-null
            value. Non-null values that do not implement <b>IComparable</b>
            interface will be evaluated as equal.
            </remarks>
            <param name="comparer">
            A comparer to use for the comparison (optional).
            </param>
            <param name="o1">
            The first object to be compared.
            </param>
            <param name="o2">
            The second object to be compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as the first
            argument is less than, equal to, or greater than the second.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the arguments are not of the same type or do not implement
            <b>IComparable</b>.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Comparator.SafeComparer.Instance">
            <summary>
            The trivial SafeComparer.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Comparator.SafeComparer.m_comparer">
            <summary>
            The wrapped IComparer.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Comparator.SafeComparer.Comparer">
            <summary>
            The wrapped <b>IComparer</b>.
            </summary>
            <value>
            The wrapped <b>IComparer</b>.
            </value>
        </member>
        <member name="M:Tangosol.Util.Comparator.EntryComparer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Comparator.EntryComparer.#ctor(System.Collections.IComparer)">
            <summary>
            Construct an EntryComparer to compare entries' values using the
            provided <b>IComparer</b> object.
            </summary>
            <remarks>
            The EntryComparer will choose the comparison style based on the
            specified comparator type: if the comparer is an instance of the
            <see cref="T:Tangosol.Util.Extractor.KeyExtractor"/>, the <b>ComparisonStyle.Key</b> style
            will be assumed; otherwise, the <b>ComparisonStyle.Value</b>
            style is used.
            </remarks>
            <param name="comparer">
            The comparer to use; if not specified the "natural" comparison of
            entries' values is used.
            </param>
        </member>
        <member name="M:Tangosol.Util.Comparator.EntryComparer.#ctor(System.Collections.IComparer,Tangosol.Util.Comparator.ComparisonStyle)">
            <summary>
            Construct an EntryComparer to compare entries using the provided
            <b>IComparer</b> object according to the specified comparison
            style.
            </summary>
            <remarks>
            If the style is <b>ComparisonStyle.Auto</b> then the comparator
            type is checked: if the comparer is an instance of the
            <see cref="T:Tangosol.Util.Extractor.KeyExtractor"/>, <b>ComparisonStyle.Key</b> style will
            be assumed; otherwise, the <b>ComparisonStyle.Value</b> style is used.
            </remarks>
            <param name="comparer">
            The comparer to use; if not specified the "natural" comparison is
            used.
            </param>
            <param name="style">
            The comparison style to use; valid values are any of the
            <see cref="P:Tangosol.Util.Comparator.EntryComparer.ComparisonStyle"/> values.
            </param>
        </member>
        <member name="M:Tangosol.Util.Comparator.EntryComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two arguments for order.
            </summary>
            <remarks>
            The arguments must be <b>ICacheEntry</b> objects. Depending
            on the comparison style, this method will pass either the
            entries' values, keys or the entries themselves to the underlying
            IComparer.
            </remarks>
            <param name="o1">
            The first object to be compared.
            </param>
            <param name="o2">
            The second object to be compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as the first
            argument is less than, equal to, or greater than the second.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.EntryComparer.Equals(System.Object)">
            <summary>
            Determine if two comparers are equal.
            </summary>
            <param name="o">
            The other comparer.
            </param>
            <returns>
            <b>true</b> if the passed object is equal to this.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.EntryComparer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.EntryComparer.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Tangosol.Util.Comparator.EntryComparer.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">If an I/O error occurs.</exception>
        </member>
        <member name="F:Tangosol.Util.Comparator.EntryComparer.m_style">
            <summary>
            The comparison style value utilized by this EntryComparer.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Comparator.EntryComparer.ComparisonStyle">
            <summary>
            Obtain the comparison style value utilized by this EntryComparer.
            </summary>
            <remarks>
            The returned value should be one of <see cref="P:Tangosol.Util.Comparator.EntryComparer.ComparisonStyle"/>
            values.
            </remarks>
            <value>
            One of the <see cref="P:Tangosol.Util.Comparator.EntryComparer.ComparisonStyle"/> values.
            </value>
        </member>
        <member name="P:Tangosol.Util.Comparator.EntryComparer.IsCompareValue">
            <summary>
            Check whether or not this EntryComparer uses entries' values to
            pass for comparison to the underlying <b>IComparer</b>.
            </summary>
            <value>
            <b>true</b> if entries' values are used for comparison.
            </value>
        </member>
        <member name="P:Tangosol.Util.Comparator.EntryComparer.CompareValue">
            <summary>
            Check whether or not this EntryComparer uses entries' values to
            pass for comparison to the underlying <b>IComparer</b>.
            </summary>
            <value>
            <b>true</b> if entries' values are used for comparison.
            </value>
        </member>
        <member name="P:Tangosol.Util.Comparator.EntryComparer.IsCompareKey">
            <summary>
            Check whether or not this EntryComparer uses entries' keys to
            pass for comparison to the underlying <b>IComparer</b>.
            </summary>
            <value>
            <b>true</b> if entries' keys are used for comparison.
            </value>
        </member>
        <member name="P:Tangosol.Util.Comparator.EntryComparer.CompareKey">
            <summary>
            Check whether or not this EntryComparer uses entries' keys to
            pass for comparison to the underlying <b>IComparer</b>.
            </summary>
            <value>
            <b>true</b> if entries' keys are used for comparison.
            </value>
        </member>
        <member name="P:Tangosol.Util.Comparator.EntryComparer.IsCompareEntry">
            <summary>
            Check whether or not this EntryComparer pass entries themselves
            for comparison to the underlying
            <see cref="M:Tangosol.Util.Comparator.IQueryCacheComparer.CompareEntries(Tangosol.Net.Cache.IQueryCacheEntry,Tangosol.Net.Cache.IQueryCacheEntry)"/> method.
            </summary>
            <value>
            <b>true</b> if entries themselves are used for comparison.
            </value>
        </member>
        <member name="P:Tangosol.Util.Comparator.EntryComparer.CompareEntry">
            <summary>
            Check whether or not this EntryComparer pass entries themselves
            for comparison to the underlying
            <see cref="M:Tangosol.Util.Comparator.IQueryCacheComparer.CompareEntries(Tangosol.Net.Cache.IQueryCacheEntry,Tangosol.Net.Cache.IQueryCacheEntry)"/> method.
            </summary>
            <value>
            <b>true</b> if entries themselves are used for comparison.
            </value>
        </member>
        <member name="T:Tangosol.Util.Comparator.ComparisonStyle">
            <summary>
            Comparison style enum.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Comparator.ComparisonStyle.Auto">
            <summary>
            Indicates that this EntryComparer should choose the comparison
            style based on the underying comparer type.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Comparator.ComparisonStyle.Value">
            <summary>
            Indicates that this EntryComparer should compare the entries'
            values.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Comparator.ComparisonStyle.Key">
            <summary>
            Indicates that this EntryComparer should compare the entries'
            keys.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Comparator.ComparisonStyle.Entry">
            <summary>
            Indicates that entries that implement
            <see cref="T:Tangosol.Net.Cache.IQueryCacheEntry"/> interface will be compared
            using the <see cref="M:Tangosol.Util.Comparator.IQueryCacheComparer.CompareEntries(Tangosol.Net.Cache.IQueryCacheEntry,Tangosol.Net.Cache.IQueryCacheEntry)"/>
            method.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Comparator.InverseComparer">
            <summary>
            Comparator that reverses the result of another comparator.
            </summary>
            <author>Cameron Purdy, Gene Gleyzer  2002.11.01</author>
            <author>Ivan Cikic  2007.01.29</author>
        </member>
        <member name="M:Tangosol.Util.Comparator.InverseComparer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Comparator.InverseComparer.#ctor(System.Collections.IComparer)">
            <summary>
            Construct an <b>InverseComparer</b>.
            </summary>
            <param name="comparer">
            The comparer whose results are inverted by this <b>IComparer</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Comparator.InverseComparer.Compare(System.Object,System.Object)">
            <summary>
            Use the wrapped <b>IComparer</b> to compare the two arguments for
            order and negate the result.
            </summary>
            <param name="o1">
            The first object to be compared.
            </param>
            <param name="o2">
            The second object to be compared.
            </param>
            <returns>
            A positive integer, zero, or a negative integer as the first
            argument is less than, equal to, or greater than the second.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.InverseComparer.CompareEntries(Tangosol.Net.Cache.IQueryCacheEntry,Tangosol.Net.Cache.IQueryCacheEntry)">
            <summary>
            Compare two entries using the underlying comparator and negate
            the result.
            </summary>
            <param name="entry1">
            The first entry to compare values from; read-only.
            </param>
            <param name="entry2">
            The second entry to compare values from; read-only.
            </param>
            <returns>
            A positive integer, zero, or a negative integer as the first
            entry denotes a value that is is less than, equal to, or greater
            than the value denoted by the second entry .
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.InverseComparer.Equals(System.Object)">
            <summary>
            Compare the <b>InverseComparer</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The other comparer.
            </param>
            <returns>
            <b>true</b> iff this <b>InverseComparer</b> and the passed object
            are equivalent <b>InverseComparer</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Comparator.InverseComparer.GetHashCode">
            <summary>
            Return the hash code for this comparator.
            </summary>
            <returns>
            The hash code value for this comparator.
            </returns>
        </member>
        <member name="T:Tangosol.Util.CompositeKey">
            <summary>
            Key class that consists of a primary and secondary component. Two instances
            of CompositeKey are considered to be equal iff both the primary and
            secondary components of the two instances are considered equal.
            Additionally, the hash code of a CompositeKey takes into the consideration
            the hash codes of its two components. Finally, the CompositeKey class
            implements KeyAssociation by returning the primary component.
            </summary>
            <author>jh  2008.12.11</author>
            <author>wl 2010.08.29</author>
        </member>
        <member name="M:Tangosol.Util.CompositeKey.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.CompositeKey.#ctor(System.Object,System.Object)">
            <summary>
            Create a new CompositeKey that consists of the given primary and
            secondary components.
            </summary>
            <param name="primary">
            the primary key component; must not be null. This is
            also the host key returned by the KeyAssociation implementation
            </param>
            <param name="secondary">
            the secondary key component; must not be null
            </param>
        </member>
        <member name="M:Tangosol.Util.CompositeKey.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.CompositeKey.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.CompositeKey.GetHashCode">
            <summary>
            Determine a hash value for the <b>CompositeKey</b> object.
            </summary>
            <returns>
            An integer hash value for this <b>CompositeKey</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CompositeKey.Equals(System.Object)">
            <summary>
            Compare this object with another object to determine equality.
            </summary>
            <param name="o">
            The object to compare with current object.
            </param>
            <returns>
            <b>true</b> if this object and the passed object are equivalent
            <b>CompositeKey</b> objects.
            </returns>
        </member>
        <member name="M:Tangosol.Util.CompositeKey.ToString">
            <summary>
            Return a human-readable description for this <b>CompositeKey</b>.
            </summary>
            <returns>
            A string description of the object.
            </returns>
        </member>
        <member name="F:Tangosol.Util.CompositeKey.m_primary">
            <summary>
            The primary key component.
            </summary>
        </member>
        <member name="F:Tangosol.Util.CompositeKey.m_secondary">
            <summary>
            The secondary key component.
            </summary>
        </member>
        <member name="P:Tangosol.Util.CompositeKey.PrimaryKey">
            <summary>
            The primary key component.
            </summary>
        </member>
        <member name="P:Tangosol.Util.CompositeKey.SecondaryKey">
            <summary>
            The secondary key component.
            </summary>
        </member>
        <member name="P:Tangosol.Util.CompositeKey.AssociatedKey">
            <summary>
            Determine the key object to which this key object is associated.
            </summary>
            <remarks>
            The key object returned by this method is often referred to as a
             <i>host key</i>.
            </remarks>
            <value>
            The host key that for this key object, or <c>null</c> if this key
            has no association.
            </value>
        </member>
        <member name="T:Tangosol.Util.ConfigurationUtils">
            <summary>
            Helper class used for .NET configuration files access.
            </summary>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="F:Tangosol.Util.ConfigurationUtils.CONFIG_SECTION_NAME">
            <summary>
            The name of the configuration element that contains Coherence
            configuration settings.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConfigurationUtils.GetCoherenceConfiguration">
            <summary>
            Parses the Coherence configuration section within the standard
            .NET configuration file (App.config or Web.config).
            </summary>
            <returns>
            An instance of <see cref="T:Tangosol.Config.CoherenceConfig"/> created by
            <see cref="T:Tangosol.Config.CoherenceConfigHandler"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConfigurationUtils.GetProperty(System.String,System.String)">
            <summary>
            Get the value of a given Coherence configuration property.
            </summary>
            <param name="name">
            The name of the property.
            </param>
            <param name="defaultValue">
            The default value for the property.
            </param>
            <returns>
            The value of the property.
            </returns>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections">
            <summary>
            A collection of <see cref="T:System.Collections.ICollection"/> implementation classes that
            use the <see cref="T:Tangosol.Util.IConverter"/> interface to convert the items
            stored in underlying collection objects.
            </summary>
            <author>Cameron Purdy  2002.02.08</author>
            <author>Jason Howes  2007.09.28</author>
            <author>Ana Cikic  2008.05.28</author>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetEnumerator(System.Collections.IEnumerator,Tangosol.Util.IConverter)">
            <summary>
            Returns an instance of <see cref="T:System.Collections.IEnumerator"/> that uses an
            <see cref="T:Tangosol.Util.IConverter"/> to view an underlying enumerator.
            </summary>
            <param name="enumerator">
            The underlying <b>IEnumerator</b>.
            </param>
            <param name="conv">
            The <b>IConverter</b> to view the underlying <b>IEnumerator</b>
            through.
            </param>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that views the passed enumerator
            through the specified <b>IConverter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetDictionaryEnumerator(System.Collections.IDictionaryEnumerator,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns an instance of <see cref="T:System.Collections.IDictionaryEnumerator"/> that
            uses <see cref="T:Tangosol.Util.IConverter"/>s to view an underlying enumerator.
            </summary>
            <param name="enumerator">
            The underlying <b>IDictionaryEnumerator</b>.
            </param>
            <param name="convKey">
            The <b>IConverter</b> to view the underlying
            <b>IDictionaryEnumerator</b> keys through.
            </param>
            <param name="convVal">
            The <b>IConverter</b> to view the underlying
            <b>IDictionaryEnumerator</b> values through.
            </param>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> that views the passed
            enumerator through the specified <b>IConverter</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetCacheEnumerator(Tangosol.Net.Cache.ICacheEnumerator,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns an instance of <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> that uses
            <see cref="T:Tangosol.Util.IConverter"/>s to view an underlying enumerator.
            </summary>
            <param name="enumerator">
            The underlying <b>ICacheEnumerator</b>.
            </param>
            <param name="convKeyUp">
            The <b>IConverter</b> to view the underlying
            <b>ICacheEnumerator</b> keys through.
            </param>
            <param name="convValUp">
            The <b>IConverter</b> to view the underlying
            <b>ICacheEnumerator</b> values through.
            </param>
            <param name="convValDown">
            The <b>IConverter</b> to change the underlying
            <b>ICacheEnumerator</b> values through.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> that views the passed
            enumerator through the specified <b>IConverter</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetCollection(System.Collections.ICollection,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns an instance of <see cref="T:System.Collections.ICollection"/> that uses an
            <see cref="T:Tangosol.Util.IConverter"/> to view an underlying collection.
            </summary>
            <param name="col">
            The underlying <b>ICollection</b>.
            </param>
            <param name="convUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying collection
            through.
            </param>
            <param name="convDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to pass items down to the underlying
            collection through.
            </param>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> that views the passed collection
            through the specified <b>IConverter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetDictionary(System.Collections.IDictionary,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns a Converter instance of <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="dict">
            The underlying <see cref="T:System.Collections.IDictionary"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            dictionary's keys through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying dictionary.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            dictionary's values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to
            the underlying dictionary.
            </param>
            <returns>
            An <see cref="T:System.Collections.IDictionary"/> that views the keys and values of
            the passed dictionary through the specified <b>IConverter</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetCache(Tangosol.Net.Cache.ICache,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns a Converter instance of <see cref="T:Tangosol.Net.Cache.ICache"/>.
            </summary>
            <param name="cache">
            The underlying <see cref="T:Tangosol.Net.Cache.ICache"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's keys
            through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying cache.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to the
            underlying cache.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.Cache.ICache"/> that views the keys and values of the
            passed <b>ICache</b> through the specified <b>IConverter</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetConcurrentCache(Tangosol.Net.Cache.IConcurrentCache,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns a Converter instance of <see cref="T:Tangosol.Net.Cache.IConcurrentCache"/>.
            </summary>
            <param name="cache">
            The underlying <see cref="T:Tangosol.Net.Cache.IConcurrentCache"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's keys
            through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying cache.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to the
            underlying cache.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.Cache.IConcurrentCache"/> that views the keys and values
            of the passed <b>IConcurrentCache</b> through the specified
            <b>IConverter</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetInvocableCache(Tangosol.Net.Cache.IInvocableCache,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns a Converter instance of <see cref="T:Tangosol.Net.Cache.IInvocableCache"/>.
            </summary>
            <param name="cache">
            The underlying <see cref="T:Tangosol.Net.Cache.IInvocableCache"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's keys
            through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying cache.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to the
            underlying cache.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> that views the keys and values
            of the passed <b>IInvocableCache</b> through the specified
            <b>IConverter</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetObservableCache(Tangosol.Net.Cache.IObservableCache,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns a Converter instance of <see cref="T:Tangosol.Net.Cache.IObservableCache"/>.
            </summary>
            <param name="cache">
            The underlying <see cref="T:Tangosol.Net.Cache.IObservableCache"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's keys
            through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying cache.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to the
            underlying cache.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.Cache.IObservableCache"/> that views the keys and values
            of the passed <b>IObservableCache</b> through the specified
            <b>IConverter</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetQueryCache(Tangosol.Net.Cache.IQueryCache,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns a Converter instance of <see cref="T:Tangosol.Net.Cache.IQueryCache"/>.
            </summary>
            <param name="cache">
            The underlying <see cref="T:Tangosol.Net.Cache.IQueryCache"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's keys
            through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying cache.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to the
            underlying cache.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.Cache.IQueryCache"/> that views the keys and values of
            the passed <b>IQueryCache</b> through the specified
            <b>IConverter</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetNamedCache(Tangosol.Net.INamedCache,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns a Converter instance of <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <param name="cache">
            The underlying <see cref="T:Tangosol.Net.INamedCache"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's keys
            through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying cache.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to the
            underlying cache.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.INamedCache"/> that views the keys and values of
            the passed <b>INamedCache</b> through the specified
            <b>IConverter</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetCacheEntries(System.Collections.ICollection,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns a Converter instance of a collection that holds
            <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> objects for a
            <see cref="T:Tangosol.Util.ConverterCollections.ConverterCache"/>.
            </summary>
            <param name="col">
            The underlying collection of <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>
            objects.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entries'
            keys through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to pass keys down to the
            underlying entries collection.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entries'
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to pass values down to the
            underlying entries collection.
            </param>
            <returns>
            A Converter collection that views the keys and values of the
            underlying collection's <b>ICacheEntry</b> objects through
            the specified key and value <b>IConverter</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetCacheEntry(Tangosol.Net.Cache.ICacheEntry,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns an instance of a <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> that uses
            <see cref="T:Tangosol.Util.IConverter"/>s to retrieve the entry's data.
            </summary>
            <param name="entry">
            The underlying <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entry's key.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entry's
            value.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to change the underlying entry's
            value.
            </param>
            <returns>
            A <see cref="T:Tangosol.Util.ConverterCollections.ConverterCacheEntry"/> that converts the passed
            entry data using the specified <b>IConverter</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.GetCacheEventArgs(Tangosol.Net.Cache.IObservableCache,Tangosol.Net.Cache.CacheEventArgs,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns an instance of a <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> that uses
            <see cref="T:Tangosol.Util.IConverter"/>s to retrieve the event data.
            </summary>
            <param name="cache">
            The new event's source.
            </param>
            <param name="evt">
            The underlying <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </param>
            <param name="convKey">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            <b>CacheEventArgs</b>' key.
            </param>
            <param name="convVal">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            <b>CacheEventArgs</b>' values.
            </param>
            <returns>
            A <b>CacheEventArgs</b> that converts the passed event data using
            the specified <b>IConverter</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConvertArray(System.Object[],Tangosol.Util.IConverter)">
            <summary>
            Convert the contents of the passed array.
            </summary>
            <remarks>
            The conversion is done "in place" in the passed array.
            <p>
            This helper method is intended to support the functionality of
            <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>.</p>
            </remarks>
            <param name="ao">
            An array of objects to convert.
            </param>
            <param name="conv">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to convert the objects.
            </param>
            <returns>
            The passed array.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConvertArray(System.Object[],Tangosol.Util.IConverter,System.Object[])">
            <summary>
            Convert the contents of the passed source array into an array
            with the element type of the passed destination array, using the
            destination array itself if it is large enough, and placing a
            <c>null</c> in the first unused element of the destination array
            if it is larger than the source array.
            </summary>
            <remarks>
            This helper method is intended to support the functionality of
            <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>.
            </remarks>
            <param name="aoSrc">
            An array of objects to convert.
            </param>
            <param name="conv">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to convert the objects.
            </param>
            <param name="aoDest">
            The array to use to place the converted objects in if large
            enough, otherwise the array from which to obtain the element
            type to create a new array that is large enough.
            </param>
            <returns>
            An array whose component type is the same as the passed
            destination array and whose contents are the converted objects.
            </returns>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterCollection">
            <summary>
            A Converter Collection views an underlying
            <see cref="T:System.Collections.ICollection"/> through an <see cref="T:Tangosol.Util.IConverter"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCollection.#ctor(System.Collections.ICollection,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="col">
            The underlying <see cref="T:System.Collections.ICollection"/>.
            </param>
            <param name="convUp">
            The <see cref="T:Tangosol.Util.IConverter"/> from the underlying collection.
            </param>
            <param name="convDown">
            The <b>IConverter</b> to the underlying collection.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an
            array, starting at a particular index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the
            elements copied from collection. The array must have
            zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Array is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Array is multidimensional or index is equal to or greater
            than the length of array or the number of elements in the
            source collection is greater than the available space from
            index to the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            The type of the source collection cannot be cast
            automatically to the type of the destination array.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCollection.Equals(System.Object)">
            <summary>
            Compares the specified object with this collection for
            equality.
            </summary>
            <param name="o">
            Object to be compared for equality with this collection.
            </param>
            <returns>
            <b>true</b> if the specified object is equal to this
            collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCollection.GetHashCode">
            <summary>
            Returns the hash code value for this collection.
            </summary>
            <returns>
            The hash code value for this collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCollection.ToString">
            <summary>
            Return a string description for this collection.
            </summary>
            <returns>
            A string description of the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCollection.Invalidate">
            <summary>
            Drop references to the underlying collection and the
            converters.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCollection.InstantiateEnumerator(System.Collections.IEnumerator,Tangosol.Util.IConverter)">
            <summary>
            Create a Converter enumerator.
            </summary>
            <param name="enumerator">
            The underlying <see cref="T:System.Collections.IEnumerator"/>.
            </param>
            <param name="conv">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            <b>IEnumerator</b> through.
            </param>
            <returns>
            A Converter enumerator.
            </returns>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCollection.m_col">
            <summary>
            The underlying ICollection.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCollection.m_convUp">
            <summary>
            The IConverter from the underlying ICollection to this
            ICollection.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCollection.m_convDown">
            <summary>
            The IConverter from this ICollection to the underlying
            ICollection.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCollection.Collection">
            <summary>
            The underlying <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            The underlying <b>ICollection</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCollection.ConverterUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to view the underlying
            collection's values through.
            </summary>
            <value>
            The <b>IConverter</b> from the underlying collection.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCollection.ConverterDown">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to pass values down to the
            underlying collection.
            </summary>
            <value>
            The <b>IConverter</b> to the underlying collection.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <returns>
            The number of elements contained in the collection.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            collection.
            </summary>
            <returns>
            An object that can be used to synchronize access to the
            collection.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is
            synchronized (thread safe).
            </summary>
            <returns>
            <b>true</b> if access to the collection is synchronized
            (thread safe); otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator">
            <summary>
            A Converter DictionaryEnumerator views an underlying
            <see cref="T:System.Collections.IDictionaryEnumerator"/> through key and value
            <see cref="T:Tangosol.Util.IConverter"/>s.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator.#ctor(System.Collections.IDictionaryEnumerator,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="enumerator">
            The underlying <see cref="T:System.Collections.IDictionaryEnumerator"/>.
            </param>
            <param name="convKey">
            The <see cref="T:Tangosol.Util.IConverter"/> used to convert keys.
            </param>
            <param name="convValue">
            The <see cref="T:Tangosol.Util.IConverter"/> used to convert values.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the
            collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to
            the next element; <b>false</b> if the enumerator has passed
            the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before
            the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator.m_enum">
            <summary>
            The underlying IDictionaryEnumerator.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator.m_convKey">
            <summary>
            The IConverter used to convert keys.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator.m_convValue">
            <summary>
            The IConverter used to convert values.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator.Enumerator">
            <summary>
            The underlying <see cref="T:System.Collections.IDictionaryEnumerator"/>.
            </summary>
            <value>
            The underlying <b>IDictionaryEnumerator</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator.ConverterKeyUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to convert keys of the
            <see cref="T:System.Collections.DictionaryEntry"/> objects which underlying
            enumerator iterates.
            </summary>
            <value>
            The <b>IConverter</b> used to convert keys of the
            <b>DictionaryEntry</b> objects which underlying enumerator
            iterates.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator.ConverterValueUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to convert values of the
            <see cref="T:System.Collections.DictionaryEntry"/> objects which underlying
            enumerator iterates.
            </summary>
            <value>
            The <b>IConverter</b> used to convert values of the
            <b>DictionaryEntry</b> objects which underlying enumerator
            iterates.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            <returns>
            The key of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry of the
            dictionary or after the last entry.
            </exception>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
            <returns>
            The value of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry of the
            dictionary or after the last entry.
            </exception>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
            <returns>
            A <see cref="T:System.Collections.DictionaryEntry"/> containing both the key and
            the value of the current dictionary entry.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry of the
            dictionary or after the last entry.
            </exception>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionaryEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the
            collection or after the last element.
            </exception>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterDictionary">
            <summary>
            A Converter Dictionary views an underlying
            <see cref="T:System.Collections.IDictionary"/> through a set of key and value
            <see cref="T:Tangosol.Util.IConverter"/>s.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionary.#ctor(System.Collections.IDictionary,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="dict">
            The underlying <see cref="T:System.Collections.IDictionary"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            dictinary's keys through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying dictionary.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            dictionary's values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to
            the underlying dictionary.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionary.Contains(System.Object)">
            <summary>
            Determines whether the dictionary contains an element with
            the specified key.
            </summary>
            <param name="key">
            The key to locate in the dictionary.
            </param>
            <returns>
            <b>true</b> if the dictionary contains an element with the
            key; otherwise, <b>false</b>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Key is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionary.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the
            dictionary.
            </summary>
            <param name="key">
            The object to use as the key of the element to add.
            </param>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the
            dictionary.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Key is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The dictionary is read-only or the dictionary has a fixed
            size.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionary.Clear">
            <summary>
            Removes all elements from the dictionary.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The dictionary is read-only.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionary.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the
            dictionary.
            </summary>
            <returns>
            An <b>IDictionaryEnumerator</b> for the dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionary.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            dictionary.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
            <exception cref="T:System.NotSupportedException">
            The dictionary is read-only or the dictionary has a fixed size.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Key is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting
            at a particular index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the
            elements copied from collection. The array must have
            zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Array is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">Array is multidimensional
            or index is equal to or greater than the length of array or
            the number of elements in the source collection is greater
            than the available space from index to the end of the
            destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            The type of the source collection cannot be cast
            automatically to the type of the destination array.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionary.InstantiateCollection(System.Collections.ICollection,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Create a Converter Collection.
            </summary>
            <param name="col">
            The underlying collection.
            </param>
            <param name="convUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            collection through.
            </param>
            <param name="convDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to pass items down to the
            underlying collection through.
            </param>
            <returns>
            A <see cref="T:Tangosol.Util.ConverterCollections.ConverterCollection"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionary.InstantiateDictionary(System.Collections.IDictionary,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Create a Converter Dictionary.
            </summary>
            <param name="dict">
            The underlying <see cref="T:System.Collections.IDictionary"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            dictionary's keys through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying dictionary.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            dictionary's values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to
            the underlying dictionary.
            </param>
            <returns>
            A <see cref="T:Tangosol.Util.ConverterCollections.ConverterDictionary"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionary.InstantiateDictionaryEnumerator(System.Collections.IDictionaryEnumerator,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns an instance of <see cref="T:System.Collections.IDictionaryEnumerator"/> that
            uses an <see cref="T:Tangosol.Util.IConverter"/>s to view an underlying
            enumerator.
            </summary>
            <param name="enumerator">
            The underlying <b>IDictionaryEnumerator</b>.
            </param>
            <param name="convKey">
            The <b>IConverter</b> to view the underlying
            <b>IDictionaryEnumerator</b> keys through.
            </param>
            <param name="convVal">
            The <b>IConverter</b> to view the underlying
            <b>IDictionaryEnumerator</b> values through.
            </param>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> that views the passed
            enumerator through the specified <b>IConverter</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterDictionary.ToString">
            <summary>
            Return a string description for this dictionary.
            </summary>
            <returns>
            A string description of the dictionary.
            </returns>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterDictionary.m_dictionary">
            <summary>
            The underlying dictionary.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterDictionary.m_convKeyUp">
            <summary>
            The IConverter used to view keys stored in the dictionary.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterDictionary.m_convKeyDown">
            <summary>
            The IConverter used to pass keys down to the dictionary.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterDictionary.m_convValUp">
            <summary>
            The IConverter used to view values stored in the dictionary.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterDictionary.m_convValDown">
            <summary>
            The IConverter used to pass keys down to the dictionary.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionary.Dictionary">
            <summary>
            The underlying <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <value>
            The underlying <b>IDictionary</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionary.ConverterKeyUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to view the underlying
            dictionary's keys through.
            </summary>
            <value>
            The <b>IConverter</b> from the underlying dictionary's keys.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionary.ConverterKeyDown">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to pass keys down to the
            underlying dictionary.
            </summary>
            <value>
            The <b>IConverter</b> to the underlying dictionary's keys.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionary.ConverterValueUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to view the underlying
            dictionary's values through.
            </summary>
            <value>
            The <b>IConverter</b> from the underlying dictionary's
            values.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionary.ConverterValueDown">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to pass values down to the
            underlying dictionary.
            </summary>
            <value>
            The <b>IConverter</b> to the underlying dictionary's values.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionary.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">
            The key of the element to get or set.
            </param>
            <returns>
            The element with the specified key.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The property is set and the dictionary object is read-only or
            the property is set, key does not exist in the collection,
            and the dictionary has a fixed size.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Key is <c>null</c>.
            </exception>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing the keys of the
            dictionary.
            </summary>
            <returns>
            An <b>ICollection</b> containing the keys of the dictionary.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing the values in
            the dictionary.
            </summary>
            <returns>
            An <b>ICollection</b> containing the values in the
            dictionary.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the dictionary is read-only.
            </summary>
            <returns>
            <b>true</b> if the dictionary is read-only; otherwise,
            <b>false</b>.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the dictionary has a fixed
            size.
            </summary>
            <returns>
            <b>true</b> if the dictionary has a fixed size; otherwise,
            <b>false</b>.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionary.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
            <returns>
            The number of elements contained in the dictionary.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionary.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            dictionary.
            </summary>
            <returns>
            An object that can be used to synchronize access to the
            dictionary.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterDictionary.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the dictionary is
            synchronized (thread safe).
            </summary>
            <returns>
            <b>true</b> if access to the dictionary is synchronized
            (thread safe); otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator">
            <summary>
            A Converter CacheEnumerator views an underlying
            <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> through key and value
            <see cref="T:Tangosol.Util.IConverter"/>s.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.#ctor(Tangosol.Net.Cache.ICacheEnumerator,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="enumerator">
            The underlying <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> used to view keys of entries
            being enumerated.
            </param>
            <param name="convValueUp">
            The <see cref="T:Tangosol.Util.IConverter"/> used to view values of entries
            being enumerated.
            </param>
            <param name="convValueDown">
            The <see cref="T:Tangosol.Util.IConverter"/> used to change values of entries
            being enumerated.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the
            collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to
            the next element; <b>false</b> if the enumerator has passed
            the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before
            the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.InstantiateEntry(Tangosol.Net.Cache.ICacheEntry,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>Returns an instance of a <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>
            that uses <see cref="T:Tangosol.Util.IConverter"/>s to retrieve the entry's
            data.
            </summary>
            <param name="entry">
            The underlying <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entry's
            key.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entry's
            value.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to change the underlying entry's
            value.
            </param>
            <returns>
            An <b>ICacheEntry</b> instance.
            </returns>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.m_cacheEnum">
            <summary>
            The underlying ICacheEnumerator.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.m_convKeyUp">
            <summary>
            The IConverter used to view keys of entries being enumerated.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.m_convValueUp">
            <summary>
            The IConverter used to view values of entries being
            enumerated.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.m_convValDown">
            <summary>
            The IConverter used to change values of entries being
            enumerated.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.CacheEnumerator">
            <summary>
            The underlying <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/>.
            </summary>
            <value>
            The underlying <b>ICacheEnumerator</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.ConverterKeyUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to convert keys of the
            <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> objects which underlying enumerator
            iterates.
            </summary>
            <value>
            The <b>IConverter</b> used to convert keys of the
            <b>ICacheEntry</b> objects which underlying enumerator
            iterates.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.ConverterValueUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to convert values of the
            <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> objects which underlying enumerator
            iterates.
            </summary>
            <value>
            The <b>IConverter</b> used to convert values of the
            <b>ICacheEntry</b> objects which underlying enumerator
            iterates.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.ConverterValueDown">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to pass values down to the
            <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> objects of the underlying
            enumerator.
            </summary>
            <value>
            The <b>IConverter</b> used to pass values down to the
            <b>ICacheEntry</b> objects of the underlying enumerator.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current cache entry.
            </summary>
            <value>
            An <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> containing both the key and
            the value of the current cache entry.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.Key">
            <summary>
            Gets the key of the current cache entry.
            </summary>
            <returns>
            The key of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry of the
            cache or after the last entry.
            </exception>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.Value">
            <summary>
            Gets the value of the current cache entry.
            </summary>
            <returns>
            The value of the current element of the enumeration.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry of the
            cache or after the last entry.
            </exception>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.System#Collections#IDictionaryEnumerator#Entry">
            <summary>
            Gets both the key and the value of the current cache entry.
            </summary>
            <returns>
            A <see cref="T:System.Collections.DictionaryEntry"/> containing both the key and
            the value of the current cache entry.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first entry of the
            cache or after the last entry.
            </exception>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the
            collection or after the last element.
            </exception>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterCache">
            <summary>
            A Converter Cache views an underlying <see cref="T:Tangosol.Net.Cache.ICache"/>
            through a set of key and value <see cref="T:Tangosol.Util.IConverter"/>s.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCache.#ctor(Tangosol.Net.Cache.ICache,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="cache">
            The underlying <see cref="T:Tangosol.Net.Cache.ICache"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            keys through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying cache.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to
            the underlying cache.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCache.GetAll(System.Collections.ICollection)">
            <summary>
            Get the values for all the specified keys, if they are in the
            cache.
            </summary>
            <remarks>
            <p>
            For each key that is in the cache, that key and its
            corresponding value will be placed in the dictionary that is
            returned by this method. The absence of a key in the returned
            dictionary indicates that it was not in the cache, which may
            imply (for caches that can load behind the scenes) that the
            requested data could not be loaded.</p>
            <p>
            The result of this method is defined to be semantically the
            same as the following implementation, without regards to
            threading issues:</p>
            <pre>
            IDictionary dict = new AnyDictionary();
            // could be a Hashtable (but does not have to)
            foreach (object key in colKeys)
            {
                object value = this[key];
                if (value != null || Contains(key))
                {
                    dict[key] = value;
                }
            }
            return dict;
            </pre>
            </remarks>
            <param name="keys">
            A collection of keys that may be in the named cache.
            </param>
            <returns>
            A dictionary of keys to values for the specified keys passed
            in <paramref name="keys"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCache.Insert(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the
            old value is replaced.</p>
            <p>
            Invoking this method is equivalent to the following call:
            <pre>
            Insert(key, value, CacheExpiration.Default);
            </pre></p>
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c>
            if there was no mapping for key. A <c>null</c> return can
            also indicate that the dictionary previously associated
            <c>null</c> with the specified key, if the implementation
            supports <c>null</c> values.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCache.Insert(System.Object,System.Object,System.Int64)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the
            old value is replaced.</p>
            This variation of the <see cref="M:Tangosol.Util.ConverterCollections.ConverterCache.Insert(System.Object,System.Object)"/>
            method allows the caller to specify an expiry (or "time to
            live") for the cache entry.
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire,
            also referred to as the entry's "time to live"; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT"/> to use the cache's
            default time-to-live setting; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.NEVER"/> to indicate that the
            cache entry should never expire; this milliseconds value is
            <b>not</b> a date/time value, but the amount of time object
            will be kept in the cache.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c>
            if there was no mapping for key. A <c>null</c> return can
            also indicate that the cache previously associated
            <c>null</c> with the specified key, if the implementation
            supports <c>null</c> values.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If the requested expiry is a positive value and the
            implementation does not support expiry of cache entries.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCache.InsertAll(System.Collections.IDictionary)">
            <summary>
            Copies all of the mappings from the specified dictionary to this
            cache (optional operation).
            </summary>
            <remarks>
            These mappings will replace any mappings that this cache had for
            any of the keys currently in the specified dictionary.
            </remarks>
            <param name="dictionary">
            Mappings to be stored in this cache.
             </param>
            <exception cref="T:System.InvalidCastException">
            If the class of a key or value in the specified dictionary
            prevents it from being stored in this cache.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
            <exception cref="T:System.NullReferenceException">
            This cache does not permit <c>null</c> keys or values, and the
            specified key or value is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCache.Tangosol#Net#Cache#ICache#GetEnumerator">
            <summary>
            Returns an <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> object for the
            <b>ICache</b> instance.
            </summary>
            <returns>An <b>ICacheEnumerator</b> object for the
            <b>ICache</b> instance.</returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCache.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the
            dictionary.
            </summary>
            <returns>
            An <b>IDictionaryEnumerator</b> for the dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCache.InstantiateEntries(System.Collections.ICollection,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Create a Converter Entry collection.
            </summary>
            <param name="col">
            The underlying collection of entries.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            entry keys through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying cache's entry collection.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            entry values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to
            the underlying cache's entry collection.
            </param>
            <returns>
            A Converter Entry collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCache.InstantiateCacheEnumerator(Tangosol.Net.Cache.ICacheEnumerator,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Returns an instance of <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> that
            uses <see cref="T:Tangosol.Util.IConverter"/>s to view an underlying
            enumerator.
            </summary>
            <param name="enumerator">
            The underlying <b>ICacheEnumerator</b>.
            </param>
            <param name="convKeyUp">
            The <b>IConverter</b> to view the underlying
            <b>ICacheEnumerator</b> keys through.
            </param>
            <param name="convValUp">
            The <b>IConverter</b> to view the underlying
            <b>ICacheEnumerator</b> values through.
            </param>
            <param name="convValDown">
            The <b>IConverter</b> to change the underlying
            <b>ICacheEnumerator</b> values through.
            </param>
            <returns>
            An <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> that views the passed
            enumerator through the specified <b>IConverter</b>s.
            </returns>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCache.m_entries">
            <summary>
            The entry collection.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCache.Cache">
            <summary>
            The underlying <see cref="T:Tangosol.Net.Cache.ICache"/>.
            </summary>
            <returns>
            The underlying <b>ICache</b>.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCache.Entries">
            <summary>
            Gets a collection of <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> instances
            within the cache.
            </summary>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterConcurrentCache">
            <summary>
            A Converter ConcurrentCache views an underlying
            <see cref="T:Tangosol.Net.Cache.IConcurrentCache"/> through a set of key and value
            <see cref="T:Tangosol.Util.IConverter"/>s.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterConcurrentCache.#ctor(Tangosol.Net.Cache.IConcurrentCache,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="cache">
            The underlying <see cref="T:Tangosol.Net.Cache.IConcurrentCache"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            keys through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying cache.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to
            the underlying cache.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterConcurrentCache.Lock(System.Object,System.Int64)">
            <summary>
            Attempt to lock the specified item within the specified
            period of time.
            </summary>
            <remarks>
            <p>
            The item doesn't have to exist to be <i>locked</i>. While the
            item is locked there is known to be a <i>lock holder</i>
            which has an exclusive right to modify (calling put and
            remove methods) that item.</p>
            <p>
            Lock holder is an abstract concept that depends on the
            IConcurrentCache implementation. For example, holder could
            be a cluster member or a thread (or both).</p>
            <p>
            Locking strategy may vary for concrete implementations as
            well. Lock could have an expiration time (this lock is
            sometimes called a "lease") or be held indefinitely (until
            the lock holder terminates).</p>
            <p>
            Some implementations may allow the entire cache to be locked.
            If the cache is locked in such a way, then only a lock holder
            is allowed to perform any of the "put" or "remove"
            operations.</p>
            <p>
            Pass the special constant
            <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> as the <i>key</i>
            parameter to indicate the cache lock.</p>
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <param name="waitTimeMillis">
            The number of milliseconds to continue trying to obtain a
            lock; pass zero to return immediately; pass -1 to block the
            calling thread until the lock could be obtained.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked within the
            specified time; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterConcurrentCache.Lock(System.Object)">
            <summary>
            Attempt to lock the specified item and return immediately.
            </summary>
            <remarks>
            This method behaves exactly as if it simply performs the call
            <b>Lock(key, 0)</b>.
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterConcurrentCache.Unlock(System.Object)">
            <summary>
            Unlock the specified item.
            </summary>
            <remarks>
            The item doesn't have to exist to be <i>unlocked</i>.
            If the item is currently locked, only the <i>holder</i> of
            the lock could successfully unlock it.
            </remarks>
            <param name="key">
            Key being unlocked.
            </param>
            <returns>
            <b>true</b> if the item was successfully unlocked;
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterConcurrentCache.ConcurrentCache">
            <summary>
            The underlying <see cref="T:Tangosol.Net.Cache.IConcurrentCache"/>.
            </summary>
            <value>
            The underlying <b>IConcurrentCache</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterInvocableCache">
            <summary>
            A Converter InvocableCache views an underlying
            <see cref="T:Tangosol.Net.Cache.IInvocableCache"/> through a set of key and value
            <see cref="T:Tangosol.Util.IConverter"/>s.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterInvocableCache.#ctor(Tangosol.Net.Cache.IInvocableCache,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="cache">
            The underlying <see cref="T:Tangosol.Net.Cache.IInvocableCache"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            keys through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying cache.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to
            the underlying cache.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterInvocableCache.Invoke(System.Object,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entry specified by the passed key, returning the result of
            the invocation.
            </summary>
            <param name="key">
            The key to process; it is not required to exist within the
            dictionary.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified
            key.
            </param>
            <returns>
            The result of the invocation as returned from the
            <b>IEntryProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterInvocableCache.InvokeAll(System.Collections.ICollection,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entries specified by the passed keys, returning the result of
            the invocation for each.
            </summary>
            <param name="keys">
            The keys to process; these keys are not required to exist
            within the dictionary.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified
            keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against each of the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterInvocableCache.InvokeAll(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            set of entries that are selected by the given
            <see cref="T:Tangosol.Util.IFilter"/>, returning the result of the invocation
            for each.
            </summary>
            <remarks>
            <p>
            Unless specified otherwise, IInvocableCache implementations
            will perform this operation in two steps: (1) use the filter
            to retrieve a matching entry collection; (2) apply the agent
            to every filtered entry. This algorithm assumes that the
            agent's processing does not affect the result of the
            specified filter evaluation, since the filtering and
            processing could be performed in parallel on different
            threads.</p>
            <p>
            If this assumption does not hold, the processor logic has to
            be idempotent, or at least re-evaluate the filter. This could
            be easily accomplished by wrapping the processor with the
            <see cref="T:Tangosol.Util.Processor.ConditionalProcessor"/>.</p>
            </remarks>
            <param name="filter">
            An <see cref="T:Tangosol.Util.IFilter"/> that results in the collection of
            keys to be processed.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> to use to process the
            specified keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against the keys that are selected by
            the given <b>IFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterInvocableCache.Aggregate(System.Collections.ICollection,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the entries
            specified by the passed keys.
            </summary>
            <param name="keys">
            The collection of keys that specify the entries within this
            cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the specified entries of this dictionary.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterInvocableCache.Aggregate(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the collection of
            entries that are selected by the given <b>IFilter</b>.
            </summary>
            <param name="filter">
            an <see cref="T:Tangosol.Util.IFilter"/> that is used to select entries
            within this cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the selected entries of this dictionary.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterInvocableCache.InvocableCache">
            <summary>
            The underlying <see cref="T:Tangosol.Net.Cache.IInvocableCache"/>.
            </summary>
            <value>
            The underlying <b>IInvocableCache</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterObservableCache">
            <summary>
            A Converter ObservableCache views an underlying
            <see cref="T:Tangosol.Net.Cache.IObservableCache"/> through a set of key and value
            <see cref="T:Tangosol.Util.IConverter"/>s.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterObservableCache.#ctor(Tangosol.Net.Cache.IObservableCache,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="cache">
            The underlying <see cref="T:Tangosol.Net.Cache.IObservableCache"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            keys through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying cache.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to
            the underlying cache.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterObservableCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Add a standard cache listener that will receive all events
            (inserts, updates, deletes) that occur against the cache,
            with the key, old-value and new-value included.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            AddCacheListener(listener, (IFilter) null, false);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a standard cache listener that previously signed up
            for all events.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            RemoveCacheListener(listener, (IFilter) null);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterObservableCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object,System.Boolean)">
            <summary>
            Add a cache listener for a specific key.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects, but if <paramref name="isLite"/> is passed as
            <b>true</b>, they <i>might</i> not contain the
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.OldValue"/> and
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.NewValue"/> properties.</p>
            <p>
            To unregister the ICacheListener, use the
            <see cref="M:Tangosol.Util.ConverterCollections.ConverterObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow
            optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)">
            <summary>
            Remove a cache listener that previously signed up for events
            about a specific key.
            </summary>
            <param name="listener">
            The listener to remove.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterObservableCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Add a cache listener that receives events based on a filter
            evaluation.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects, but if <paramref name="isLite"/> is passed as
            <b>true</b>, they <i>might</i> not contain the
            <b>OldValue</b> and <b>NewValue</b> properties.</p>
            <p>
            To unregister the <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, use the
            <see cref="M:Tangosol.Util.ConverterCollections.ConverterObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.</param>
            <param name="filter">
            A filter that will be passed <b>CacheEventArgs</b> objects to
            select from; a <b>CacheEventArgs</b> will be delivered to the
            listener only if the filter evaluates to <b>true</b> for that
            <b>CacheEventArgs</b>; <c>null</c> is equivalent to a filter
            that alway returns <b>true</b>.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow
            optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)">
            <summary>
            Remove a cache listener that previously signed up for events
            based on a filter evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="filter">
            A filter used to evaluate events; <c>null</c> is equivalent
            to a filter that alway returns <b>true</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterObservableCache.GetConverterListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Create a converter listener for the specified listener.
            </summary>
            <param name="listener">
            The underlying <see cref="T:Tangosol.Net.Cache.ICacheListener"/>.
            </param>
            <returns>
            The converting listener.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterObservableCache.ObservableCache">
            <summary>
            The underlying <see cref="T:Tangosol.Net.Cache.IObservableCache"/>.
            </summary>
            <value>
            The underlying <b>IObservableCache</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterQueryCache">
            <summary>
            A Converter QueryCache views an underlying
            <see cref="T:Tangosol.Net.Cache.IQueryCache"/> through a set of key and value
            <see cref="T:Tangosol.Util.IConverter"/>s.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterQueryCache.#ctor(Tangosol.Net.Cache.IQueryCache,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="cache">
            The underlying <see cref="T:Tangosol.Net.Cache.IQueryCache"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            keys through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying cache.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to
            the underlying cache.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterQueryCache.GetKeys(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the keys contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of keys for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterQueryCache.GetValues(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of the values for entries that satisfy the
            specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterQueryCache.GetValues(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            It is guaranteed that enumerator will traverse the array in
            such a way that the values come up in ascending order, sorted
            by the specified comparer or according to the
            <i>natural ordering</i>.
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterQueryCache.GetEntries(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterQueryCache.GetEntries(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            <p>
            It is guaranteed that enumerator will traverse the array in
            such a way that the entry values come up in ascending order,
            sorted by the specified comparer or according to the
            <i>natural ordering</i>.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterQueryCache.AddIndex(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer)">
            <summary>
            Add an index to this IQueryCache.
            </summary>
            <remarks>
            This allows to correlate values stored in this
            <i>indexed cache</i> (or attributes of those values) to the
            corresponding keys in the indexed dictionary and increase the
            performance of <b>GetKeys</b> and <b>GetEntries</b> methods.
            </remarks>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to
            extract an indexable object from a value stored in the
            indexed cache. Must not be <c>null</c>.
            </param>
            <param name="isOrdered">
            <b>true</b> if the contents of the indexed information should
            be ordered; <b>false</b> otherwise.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on
            entries in the indexed cache; or <c>null</c> if the entries'
            values natural ordering should be used.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterQueryCache.RemoveIndex(Tangosol.Util.IValueExtractor)">
            <summary>
            Remove an index from this IQueryCache.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to
            extract an indexable object from a value stored in the cache.
            </param>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterQueryCache.QueryCache">
            <summary>
            The underlying <see cref="T:Tangosol.Net.Cache.IQueryCache"/>.
            </summary>
            <value>
            The underlying <b>IQueryCache</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterNamedCache">
            <summary>
            A Converter NamedCache views an underlying
            <see cref="T:Tangosol.Net.INamedCache"/> through a set of key and value
            <see cref="T:Tangosol.Util.IConverter"/>s.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.#ctor(Tangosol.Net.INamedCache,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="cache">
            The underlying <see cref="T:Tangosol.Net.INamedCache"/>.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            keys through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass keys down to the
            underlying cache.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying cache's
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to
            the underlying cache.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.Release">
            <summary>
            Release local resources associated with this instance of
            INamedCache.
            </summary>
            <remarks>
            <p>
            Releasing a cache makes it no longer usable, but does not
            affect the cache itself. In other words, all other references
            to the cache will still be valid, and the cache data is not
            affected by releasing the reference.
            Any attempt to use this reference afterword will result in an
            exception.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.Truncate">
            <summary>
            Removes all mappings from this map.
            </summary>
            <remarks>
            Note: the removal of entries caused by this truncate operation will
            not be observable.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.Destroy">
            <summary>
            Release and destroy this instance of INamedCache.
            </summary>
            <remarks>
            <p>
            <b>Warning:</b> This method is used to completely destroy the
            specified cache across the cluster. All references in the
            entire cluster to this cache will be invalidated, the cached
            data will be cleared, and all resources will be released.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Add a standard cache listener that will receive all events
            (inserts, updates, deletes) that occur against the cache,
            with the key, old-value and new-value included.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            AddCacheListener(listener, (IFilter) null, false);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a standard cache listener that previously signed up
            for all events.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            RemoveCacheListener(listener, (IFilter) null);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object,System.Boolean)">
            <summary>
            Add a cache listener for a specific key.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects, but if <paramref name="isLite"/> is passed as
            <b>true</b>, they <i>might</i> not contain the
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.OldValue"/> and
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.NewValue"/> properties.</p>
            <p>
            To unregister the ICacheListener, use the
            <see cref="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow
            optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)">
            <summary>
            Remove a cache listener that previously signed up for events
            about a specific key.
            </summary>
            <param name="listener">
            The listener to remove.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Add a cache listener that receives events based on a filter
            evaluation.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects, but if <paramref name="isLite"/> is passed as
            <b>true</b>, they <i>might</i> not contain the
            <b>OldValue</b> and <b>NewValue</b> properties.</p>
            <p>
            To unregister the <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, use the
            <see cref="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.</param>
            <param name="filter">
            A filter that will be passed <b>CacheEventArgs</b> objects to
            select from; a <b>CacheEventArgs</b> will be delivered to the
            listener only if the filter evaluates to <b>true</b> for that
            <b>CacheEventArgs</b>; <c>null</c> is equivalent to a filter
            that alway returns <b>true</b>.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow
            optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)">
            <summary>
            Remove a cache listener that previously signed up for events
            based on a filter evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="filter">
            A filter used to evaluate events; <c>null</c> is equivalent
            to a filter that alway returns <b>true</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.Lock(System.Object,System.Int64)">
            <summary>
            Attempt to lock the specified item within the specified
            period of time.
            </summary>
            <remarks>
            <p>
            The item doesn't have to exist to be <i>locked</i>. While the
            item is locked there is known to be a <i>lock holder</i>
            which has an exclusive right to modify (calling put and
            remove methods) that item.</p>
            <p>
            Lock holder is an abstract concept that depends on the
            IConcurrentCache implementation. For example, holder could
            be a cluster member or a thread (or both).</p>
            <p>
            Locking strategy may vary for concrete implementations as
            well. Lock could have an expiration time (this lock is
            sometimes called a "lease") or be held indefinitely (until
            the lock holder terminates).</p>
            <p>
            Some implementations may allow the entire cache to be locked.
            If the cache is locked in such a way, then only a lock holder
            is allowed to perform any of the "put" or "remove"
            operations.</p>
            <p>
            Pass the special constant
            <see cref="F:Tangosol.Net.Cache.LockScope.LOCK_ALL"/> as the <i>key</i>
            parameter to indicate the cache lock.</p>
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <param name="waitTimeMillis">
            The number of milliseconds to continue trying to obtain a
            lock; pass zero to return immediately; pass -1 to block the
            calling thread until the lock could be obtained.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked within the
            specified time; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.Lock(System.Object)">
            <summary>
            Attempt to lock the specified item and return immediately.
            </summary>
            <remarks>
            This method behaves exactly as if it simply performs the call
            <b>Lock(key, 0)</b>.
            </remarks>
            <param name="key">
            Key being locked.
            </param>
            <returns>
            <b>true</b> if the item was successfully locked; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.Unlock(System.Object)">
            <summary>
            Unlock the specified item.
            </summary>
            <remarks>
            The item doesn't have to exist to be <i>unlocked</i>.
            If the item is currently locked, only the <i>holder</i> of
            the lock could successfully unlock it.
            </remarks>
            <param name="key">
            Key being unlocked.
            </param>
            <returns>
            <b>true</b> if the item was successfully unlocked;
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.GetKeys(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the keys contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of keys for entries that satisfy the specified
            criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.GetValues(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of the values for entries that satisfy the
            specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.GetValues(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the values contained in this cache for
            entries that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            It is guaranteed that enumerator will traverse the array in
            such a way that the values come up in ascending order, sorted
            by the specified comparer or according to the
            <i>natural ordering</i>.
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.GetEntries(Tangosol.Util.IFilter)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.GetEntries(Tangosol.Util.IFilter,System.Collections.IComparer)">
            <summary>
            Return a collection of the entries contained in this cache
            that satisfy the criteria expressed by the filter.
            </summary>
            <remarks>
            <p>
            It is guaranteed that enumerator will traverse the array in
            such a way that the entry values come up in ascending order,
            sorted by the specified comparer or according to the
            <i>natural ordering</i>.</p>
            </remarks>
            <param name="filter">
            The <see cref="T:Tangosol.Util.IFilter"/> object representing the criteria
            that the entries of this cache should satisfy.
            </param>
            <param name="comparer">
            The <b>IComparable</b> object which imposes an ordering on
            entries in the resulting collection; or <c>null</c> if the
            entries' values natural ordering should be used.
            </param>
            <returns>
            A collection of entries that satisfy the specified criteria.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.AddIndex(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer)">
            <summary>
            Add an index to this IQueryCache.
            </summary>
            <remarks>
            This allows to correlate values stored in this
            <i>indexed cache</i> (or attributes of those values) to the
            corresponding keys in the indexed dictionary and increase the
            performance of <b>GetKeys</b> and <b>GetEntries</b> methods.
            </remarks>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to
            extract an indexable object from a value stored in the
            indexed cache. Must not be <c>null</c>.
            </param>
            <param name="isOrdered">
            <b>true</b> if the contents of the indexed information should
            be ordered; <b>false</b> otherwise.
            </param>
            <param name="comparer">
            The <b>IComparer</b> object which imposes an ordering on
            entries in the indexed cache; or <c>null</c> if the entries'
            values natural ordering should be used.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.RemoveIndex(Tangosol.Util.IValueExtractor)">
            <summary>
            Remove an index from this IQueryCache.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> object that is used to
            extract an indexable object from a value stored in the cache.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.Invoke(System.Object,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entry specified by the passed key, returning the result of
            the invocation.
            </summary>
            <param name="key">
            The key to process; it is not required to exist within the
            dictionary.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified
            key.
            </param>
            <returns>
            The result of the invocation as returned from the
            <b>IEntryProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.InvokeAll(System.Collections.ICollection,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            entries specified by the passed keys, returning the result of
            the invocation for each.
            </summary>
            <param name="keys">
            The keys to process; these keys are not required to exist
            within the dictionary.
            </param>
            <param name="agent">
            The <b>IEntryProcessor</b> to use to process the specified
            keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against each of the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.InvokeAll(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Invoke the passed <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> against the
            set of entries that are selected by the given
            <see cref="T:Tangosol.Util.IFilter"/>, returning the result of the invocation
            for each.
            </summary>
            <remarks>
            <p>
            Unless specified otherwise, IInvocableCache implementations
            will perform this operation in two steps: (1) use the filter
            to retrieve a matching entry collection; (2) apply the agent
            to every filtered entry. This algorithm assumes that the
            agent's processing does not affect the result of the
            specified filter evaluation, since the filtering and
            processing could be performed in parallel on different
            threads.</p>
            <p>
            If this assumption does not hold, the processor logic has to
            be idempotent, or at least re-evaluate the filter. This could
            be easily accomplished by wrapping the processor with the
            <see cref="T:Tangosol.Util.Processor.ConditionalProcessor"/>.</p>
            </remarks>
            <param name="filter">
            An <see cref="T:Tangosol.Util.IFilter"/> that results in the collection of
            keys to be processed.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> to use to process the
            specified keys.
            </param>
            <returns>
            A dictionary containing the results of invoking the
            <b>IEntryProcessor</b> against the keys that are selected by
            the given <b>IFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.Aggregate(System.Collections.ICollection,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the entries
            specified by the passed keys.
            </summary>
            <param name="keys">
            The collection of keys that specify the entries within this
            cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the specified entries of this dictionary.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.Aggregate(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryAggregator)">
            <summary>
            Perform an aggregating operation against the collection of
            entries that are selected by the given <b>IFilter</b>.
            </summary>
            <param name="filter">
            an <see cref="T:Tangosol.Util.IFilter"/> that is used to select entries
            within this cache to aggregate across.
            </param>
            <param name="agent">
            The <see cref="T:Tangosol.Net.Cache.IEntryAggregator"/> that is used to aggregate
            across the selected entries of this dictionary.
            </param>
            <returns>
            The result of the aggregation.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.Dispose">
            <summary>
            Calls <see cref="M:Tangosol.Util.ConverterCollections.ConverterNamedCache.Dispose"/> on the underlying cache to release the resources associated with the cache.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterNamedCache.m_cacheConcurrent">
            <summary>
            A Converter ConcurrentCache around the underlying
            INamedCache.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterNamedCache.m_cacheInvocable">
            <summary>
            A Converter InvocableCache around the underlying INamedCache.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterNamedCache.m_cacheQuery">
            <summary>
            A Converter QueryCache around the underlying INamedCache.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterNamedCache.m_cacheObservable">
            <summary>
            A Converter ObservableCache aroung the underlying
            INamedCache.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterNamedCache.NamedCache">
            <summary>
            The underlying <see cref="T:Tangosol.Net.INamedCache"/>.
            </summary>
            <value>
            The underlying <b>INamedCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterNamedCache.CacheName">
            <summary>
            Gets the cache name.
            </summary>
            <value>
            The cache name.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterNamedCache.CacheService">
            <summary>
            Gets the <see cref="T:Tangosol.Net.ICacheService"/> that this INamedCache is
            a part of.
            </summary>
            <value>
            The cache service this INamedCache is a part of.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterNamedCache.IsActive">
            <summary>
            Specifies whether or not the INamedCache is active.
            </summary>
            <value>
            <b>true</b> if the INamedCache is active; <b>false</b>
            otherwise.
            </value>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry">
            <summary>
            An abstract <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> that lazily converts the
            key and value.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry.#ctor(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Constructor.
            </summary>
            <param name="entry">
            The <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> to wrap.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry.Equals(System.Object)">
            <summary>
            Compares the specified object with this entry for equality.
            </summary>
            <param name="o">
            Object to be compared for equality with this cache entry.
            </param>
            <returns>
            <b>true</b> if the specified object is equal to this cache
            entry.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry.GetHashCode">
            <summary>
            Returns the hash code value for this cache entry.
            </summary>
            <returns>
            The hash code value for this cache entry.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry.ToString">
            <summary>
            Return a string description for this entry.
            </summary>
            <returns>
            A string description of the entry.
            </returns>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry.m_entry">
            <summary>
            The underlying entry.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry.m_keyUp">
            <summary>
            Cached converted key.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry.m_valueUp">
            <summary>
            Cached converted value.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry.Entry">
            <summary>
            The underlying <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <value>
            The underlying <b>ICacheEntry</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry.ConverterKeyUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entry's
            key through.
            </summary>
            <value>
            The <b>IConverter</b> to view the underlying entry's key
            through.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry.ConverterValueUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entry's
            value through.
            </summary>
            <value>
            The <b>IConverter</b> to view the underlying entry's value
            through.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry.ConverterValueDown">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to change value in the
            underlying entry.
            </summary>
            <value>
            The <b>IConverter</b> used to change value in the underlying
            entry.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry.Key">
            <summary>
            Gets the key corresponding to this entry.
            </summary>
            <value>
            The key corresponding to this entry; may be <c>null</c> if
            the underlying dictionary supports <c>null</c> keys.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.AbstractConverterCacheEntry.Value">
            <summary>
            Gets or sets the value corresponding to this entry.
            </summary>
            <value>
            The value corresponding to this entry; may be <c>null</c> if
            the value is <c>null</c> or if the entry does not exist in
            the cache.
            </value>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterCacheEntry">
            <summary>
            An <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> that lazily converts the key and
            value.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEntry.#ctor(Tangosol.Net.Cache.ICacheEntry,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="entry">
            The <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> to wrap.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entry's
            key through.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entry's
            value through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to use to pass values down to
            the underlying entry.
            </param>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEntry.m_convKeyUp">
            <summary>
            The IConverter used to view the entry's key.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEntry.m_convValUp">
            <summary>
            The IConverter used to view the entry's value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEntry.m_convValDown">
            <summary>
            The IConverter used to store the entry's value.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntry.ConverterKeyUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entry's
            key through.
            </summary>
            <value>
            The <b>IConverter</b> to view the underlying entry's key
            through.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntry.ConverterValueUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entry's
            value through.
            </summary>
            <value>
            The <b>IConverter</b> to view the underlying entry's value
            through.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntry.ConverterValueDown">
            <summary>
            Return the <see cref="T:Tangosol.Util.IConverter"/> used to change value in
            the underlying entry.
            </summary>
            <value>
            The <b>IConverter</b> used to change value in the underlying
            entry.
            </value>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterCacheEventArgs">
            <summary>
            A Converter CacheEventArgs views an underlying
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> through a set of key and value
            <see cref="T:Tangosol.Util.IConverter"/>s.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEventArgs.#ctor(Tangosol.Net.Cache.IObservableCache,Tangosol.Net.Cache.CacheEventArgs,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="source">
            The new event's source.
            </param>
            <param name="evt">
            The underlying <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </param>
            <param name="convKey">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            <b>CacheEventArgs</b>' key.
            </param>
            <param name="convVal">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            <b>CacheEventArgs</b>' values.
            </param>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEventArgs.m_event">
            <summary>
            The underlying CacheEvent.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEventArgs.m_convKey">
            <summary>
            The IConverter to view the underlying CacheEventArgs' key.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEventArgs.m_convVal">
            <summary>
            The IConverter to view the underlying CacheEventArgs' value.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEventArgs.CacheEvent">
            <summary>
            The underlying <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </summary>
            <value>
            The underlying <b>CacheEventArgs</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEventArgs.ConverterKeyUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to view the underlying
            <b>CacheEventArgs</b>' key through.
            </summary>
            <value>
            The <b>IConverter</b> from the underlying
            <b>CacheEventArgs</b>' key.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEventArgs.ConverterValueUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to view the underlying
            <b>CacheEventArgs</b>' value through.
            </summary>
            <value>
            The <b>IConverter</b> from the underlying
            <b>CacheEventArgs</b>' value.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEventArgs.OldValue">
            <summary>
            An old value associated with this event.
            </summary>
            <remarks>
            The old value represents a value deleted from or updated in a
            cache. It is always <c>null</c> for "insert" notifications.
            </remarks>
            <value>
            An old value.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEventArgs.NewValue">
            <summary>
            A new value associated with this event.
            </summary>
            <remarks>
            The new value represents a new value inserted into or updated
            in a cache. It is always <c>null</c> for "delete"
            notifications.
            </remarks>
            <value>
            A new value.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEventArgs.Key">
            <summary>
            Gets a key associated with this event.
            </summary>
            <value>
            A key.
            </value>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterCacheListener">
            <summary>
            A converter CacheListener that converts events of the underlying
            <see cref="T:Tangosol.Net.Cache.ICacheListener"/> for the underlying cache.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheListener.#ctor(Tangosol.Net.Cache.IObservableCache,Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="cache">
            The <see cref="T:Tangosol.Net.Cache.IObservableCache"/> that should be the source
            for converted events.
            </param>
            <param name="listener">
            The underlying <see cref="T:Tangosol.Net.Cache.ICacheListener"/>.
            </param>
            <param name="convKey">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>' key.
            </param>
            <param name="convVal">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>' value.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheListener.EntryInserted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been inserted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the insert
            information.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheListener.EntryUpdated(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been updated.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the update
            information.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheListener.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheListener.GetHashCode">
            <summary>
            Determine a hash value for the listener.
            </summary>
            <returns>
            An integer hash value for this listener.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheListener.Equals(System.Object)">
            <summary>
            Compare the ConverterCacheListener with another object to
            determine equality.
            </summary>
            <param name="o">
            The ConverterCacheListener object to compare to.
            </param>
            <returns>
            <b>true</b> iff this ConverterCacheListener and the passed
            object are equivalent listeners.
            </returns>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheListener.m_cache">
            <summary>
            The converting cache that will be the source of converted
            events.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheListener.m_listener">
            <summary>
            The underlying ICacheListener.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheListener.m_convKey">
            <summary>
            The IConverter to view an underlying CacheEventArgs' key.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheListener.m_convVal">
            <summary>
            The IConverter to view an underlying CacheEventArgs' value.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheListener.ObservableCache">
            <summary>
            The underlying <see cref="T:Tangosol.Net.Cache.IObservableCache"/>.
            </summary>
            <value>
            The underlying <b>IObservableCache</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheListener.CacheListener">
            <summary>
            The underlying <see cref="T:Tangosol.Net.Cache.ICacheListener"/>.
            </summary>
            <value>
            The underlying <b>ICacheListener</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheListener.ConverterKeyUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to view an underlying
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>' key through.
            </summary>
            <value>
            The <b>IConverter</b> from an underlying
            <b>CacheEventArgs</b>' key.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheListener.ConverterValueUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to view an underlying
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>' value through.
            </summary>
            <value>
            The <b>IConverter</b> from an underlying
            <b>CacheEventArgs</b>' value.
            </value>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterCacheEntries">
            <summary>
            A Converter Entry Collection views an underlying entry
            <see cref="T:System.Collections.ICollection"/> through a set of key and value
            <see cref="T:Tangosol.Util.IConverter"/>s.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEntries.#ctor(System.Collections.ICollection,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter,Tangosol.Util.IConverter)">
            <summary>
            Constructor.
            </summary>
            <param name="col">
            The underlying collection of entries.
            </param>
            <param name="convKeyUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entries'
            keys through.
            </param>
            <param name="convKeyDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to pass keys down to the
            underlying entries collection.
            </param>
            <param name="convValUp">
            The <see cref="T:Tangosol.Util.IConverter"/> to view the underlying entries'
            values through.
            </param>
            <param name="convValDown">
            The <see cref="T:Tangosol.Util.IConverter"/> to pass values down to the
            underlying entries collection.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEntries.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an
            array, starting at a particular index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the
            elements copied from collection. The array must have
            zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Array is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Index is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            Array is multidimensional or index is equal to or greater
            than the length of array or the number of elements in the
            source collection is greater than the available space from
            index to the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            The type of the source collection cannot be cast
            automatically to the type of the destination array.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEntries.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to
            iterate through the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEntries.Equals(System.Object)">
            <summary>
            Compares the specified object with this collection for
            equality.
            </summary>
            <param name="o">
            Object to be compared for equality with this collection.
            </param>
            <returns>
            <b>true</b> if the specified object is equal to this
            collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEntries.GetHashCode">
            <summary>
            Returns the hash code value for this collection.
            </summary>
            <returns>
            The hash code value for this collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ToString">
            <summary>
            Return a string description for this collection.
            </summary>
            <returns>
            A string description of the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEntries.WrapEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Wrap an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> from the entries collection
            to make a <see cref="T:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEntry"/>.
            </summary>
            <param name="entry">
            An <b>ICacheEntry</b> to wrap.
            </param>
            <returns>
            An <b>ICacheEntry</b> that restricts its type.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEntries.WrapEnumerator(System.Collections.IEnumerator)">
            <summary>
            Wrap an <see cref="T:System.Collections.IEnumerator"/> from the entries collection
            to make a <see cref="T:Tangosol.Util.ConverterCollections.ConverterCacheEnumerator"/>.
            </summary>
            <param name="enumerator">
            An <b>IEnumerator</b> to wrap.
            </param>
            <returns>
            A <b>ConverterCacheEnumerator</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEntries.m_col">
            <summary>
            The underlying collection of ICacheEntry objects.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEntries.m_convKeyUp">
            <summary>
            The IConverter used to view keys stored in the entry
            collection.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEntries.m_convKeyDown">
            <summary>
            The IConverter used to pass keys down to the entry
            collection.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEntries.m_convValUp">
            <summary>
            The IConverter used to view values stored in the entry
            collection.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEntries.m_convValDown">
            <summary>
            The IConverter used to pass values down to the entry
            collection.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntries.Entries">
            <summary>
            The underlying collection of <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>
            objects.
            </summary>
            <value>
            The underlying collection of entries.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterKeyUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to view the underlying
            entries' keys through.
            </summary>
            <value>
            The <b>IConverter</b> from the underlying entries' keys.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterKeyDown">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to pass keys down to the
            underlying entries collection.
            </summary>
            <value>
            The <b>IConverter</b> to the underlying entries' keys.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterValueUp">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to view the underlying
            entries' values through.
            </summary>
            <value>
            The <b>IConverter</b> from the underlying entries' values.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterValueDown">
            <summary>
            The <see cref="T:Tangosol.Util.IConverter"/> used to pass values down to the
            underlying entries collection.
            </summary>
            <value>
            The <b>IConverter</b> to the underlying entries' values.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntries.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <returns>
            The number of elements contained in the collection.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntries.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            collection.
            </summary>
            <returns>
            An object that can be used to synchronize access to the
            collection.
            </returns>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntries.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is
            synchronized (thread safe).
            </summary>
            <returns>
            <b>true</b> if access to the collection is synchronized
            (thread safe); otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEntry">
            <summary>
            A <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> that lazily converts the key and
            value.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEntry.#ctor(Tangosol.Net.Cache.ICacheEntry,Tangosol.Util.ConverterCollections.ConverterCacheEntries)">
            <summary>
            Constructor.
            </summary>
            <param name="entry">
            The <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> to wrap.
            </param>
            <param name="parent">
            The parent <see cref="T:Tangosol.Util.ConverterCollections.ConverterCacheEntries"/>.
            </param>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEntry.m_parent">
            <summary>
            Parent entries collection.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEntry.ConverterKeyUp">
            <summary>
            Return the <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            entry's key through.
            </summary>
            <value>
            The <b>IConverter</b> to view the underlying entry's key
            through.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEntry.ConverterValueUp">
            <summary>
            Return the <see cref="T:Tangosol.Util.IConverter"/> to view the underlying
            entry's value through.
            </summary>
            <value>
            The <b>IConverter</b> to view the underlying entry's value
            through.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEntry.ConverterValueDown">
            <summary>
            Return the <see cref="T:Tangosol.Util.IConverter"/> used to change value in
            the underlying entry.
            </summary>
            <value>
            The <b>IConverter</b> used to change value in the underlying
            entry.
            </value>
        </member>
        <member name="T:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEnumerator">
            <summary>
            An <see cref="T:System.Collections.IEnumerator"/> that converts the key and value
            types.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEnumerator.#ctor(System.Collections.IEnumerator,Tangosol.Util.ConverterCollections.ConverterCacheEntries)">
            <summary>
            Constructor.
            </summary>
            <param name="enumerator">
            The underlying <see cref="T:System.Collections.IEnumerator"/>.
            </param>
            <param name="parent">
            Parent <see cref="T:Tangosol.Util.ConverterCollections.ConverterCacheEntries"/>.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the
            collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to
            the next element; <b>false</b> if the enumerator has passed
            the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before
            the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEnumerator.m_enum">
            <summary>
            The underlying IEnumerator.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEnumerator.m_parent">
            <summary>
            Parent ConverterCacheEntries.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEnumerator.Enumerator">
            <summary>
            The underlying <see cref="T:System.Collections.IEnumerator"/>.
            </summary>
            <value>
            The underlying <b>IEnumerator</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.ConverterCollections.ConverterCacheEntries.ConverterEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the
            collection or after the last element.
            </exception>
        </member>
        <member name="T:Tangosol.Util.ConverterEnumerator">
            <summary>
            An implementation of <see cref="T:System.Collections.IEnumerator"/> which converts each of
            the items which it enumerates.
            </summary>
            <author>Cameron Purdy  2002.02.07</author>
            <author>Ana Cikic  2008.05.30</author>
        </member>
        <member name="M:Tangosol.Util.ConverterEnumerator.#ctor(System.Collections.IEnumerator,Tangosol.Util.IConverter)">
            <summary>
            Construct the Converter enumerator based on an
            <see cref="T:System.Collections.IEnumerator"/>.
            </summary>
            <param name="enumerator">
            <b>IEnumerator</b> of objects to convert.
            </param>
            <param name="conv">
            An <see cref="T:Tangosol.Util.IConverter"/>.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterEnumerator.#ctor(System.Object[],Tangosol.Util.IConverter)">
            <summary>
            Construct the Converter enumerator based on an array of objects.
            </summary>
            <param name="items">
            Array of objects to enumerate.
            </param>
            <param name="conv">
            An <see cref="T:Tangosol.Util.IConverter"/>.
            </param>
        </member>
        <member name="M:Tangosol.Util.ConverterEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to the
            next element; <b>false</b> if the enumerator has passed the end
            of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ConverterEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the
            first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="F:Tangosol.Util.ConverterEnumerator.m_enum">
            <summary>
            IEnumerator of objects to convert.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ConverterEnumerator.m_conv">
            <summary>
            IConverter to convert each item.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ConverterEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the
            collection or after the last element.
            </exception>
        </member>
        <member name="T:Tangosol.Util.Daemon.DaemonState">
            <summary>
            Daemon state enum.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.DaemonState.Initial">
            <summary>
            State indicating that the daemon has yet to be started.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.DaemonState.Starting">
            <summary>
            State indicating that the daemon is currently starting.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.DaemonState.Running">
            <summary>
            State indicating that the daemon is ready for operation.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.DaemonState.Exiting">
            <summary>
            State indicating that the daemon is currently exiting.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.DaemonState.Exited">
            <summary>
            State indicating that the daemon has exited.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Queue">
            <summary>
            The Queue provides a means to efficiently (and in a thread-safe
            manner) queue received messages and messages to be sent.
            </summary>
            <author>Goran Milosavljevic  2006.08.23</author>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Queue.#ctor">
            <summary>
            Default constructor for Queue object.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Queue.Add(System.Object)">
            <summary>
            Appends the specified element to the end of this queue.
            </summary>
            <remarks>
            Queues may place limitations on what elements may be added
            to this Queue. In particular, some Queues will impose restrictions
            on the type of elements that may be added. Queue implementations
            should clearly specify in their documentation any restrictions on
            what elements may be added.
            </remarks>
            <param name="obj">
            Element to be appended to this Queue.
            </param>
            <returns>
            <b>true</b> (as per the general contract of the IList.Add method)
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the class of the specified element prevents it from being added
            to this Queue.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Queue.AddHead(System.Object)">
            <summary>
            Inserts  the specified element to the front of this queue.
            </summary>
            <seealso cref="M:Tangosol.Util.Daemon.QueueProcessor.Queue.Add(System.Object)"/>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Queue.IsEmpty">
            <summary>
            Determine the number of elements in this Queue.
            </summary>
            <remarks>
            The size of the Queue may change after the size is returned from
            this method, unless the Queue is synchronized on before reading
            Count and the monitor is held until the operation based on this
            size result is complete.
            </remarks>
            <returns>
            <b>true</b> if Queue has no elements in it; otherwise it
            returns <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Queue.GetEnumerator">
            <summary>
            Provides an Enumerator over the elements in this Queue.
            </summary>
            The enumerator is a point-in-time snapshot, and the contents
            of the Queue may change after the enumerator is returned, unless
            the Queue is synchronized on before calling this method and until
            the enumerator is exhausted.
            <returns>
            An enumerator of the elements in this Queue.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Queue.PeekNoWait">
            <summary>
            Returns the first element from the front of this Queue.
            </summary>
            <remarks>
            If the Queue is empty, no element is returned. There is no
            blocking equivalent of this method as it would require
            notification to wake up from an empty Queue, and this would
            mean that the "Add" and "AddHead" methods would need to
            perform PulseAll over Pulse which has performance implications.
            </remarks>
            <returns>
            The first element in the front of this Queue or <c>null</c> if
            the Queue is empty.
            </returns>
            <seealso cref="M:Tangosol.Util.Daemon.QueueProcessor.Queue.Remove"/>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Queue.Remove">
            <summary>
            Waits for and removes the first element from the front of this
            Queue.
            </summary>
            <remarks>
            If the Queue is empty, this method will block until an element
            is in the Queue. The unblocking equivalent of this method is
            "RemoveNoWait".
            </remarks>
            <returns>
            The first element in the front of this Queue.
            </returns>
            <seealso cref="M:Tangosol.Util.Daemon.QueueProcessor.Queue.RemoveNoWait"/>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Queue.RemoveNoWait">
            <summary>
            Removes and returns the first element from the front of this Queue.
            </summary>
            <remarks>
            If the Queue is empty, no element is returned.
            <p/>
            The blocking equivalent of this method is "Remove".
            </remarks>
            <returns>
            The first element in the front of this Queue or null if
            the Queue is empty.
            </returns>
            <seealso cref="M:Tangosol.Util.Daemon.QueueProcessor.Queue.Remove"/>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Queue.Flush">
            <summary>
            Flush the queue.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Queue.m_elementList">
            <summary>
            The List that backs the Queue.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Queue.ElementList">
            <summary>
            Gets or sets the List that backs the Queue.
            </summary>
            <remarks>
            Subclasses are allowed to change the value of ElementList over
            time, and this property is accessed in unsynchronized methods,
            thus it is volatile.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Queue.Count">
            <summary>
            Returns the number of objects in the Queue.
            </summary>
            <value>
            Number of objects in the Queue.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel">
            <summary>
            Internal <see cref="T:Tangosol.Net.Messaging.IRequest"/> used to accept an
            <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.InstantiateResponse(Tangosol.Net.Messaging.IMessageFactory)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> for this IRequest.
            </summary>
            <param name="factory">
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that must be used to create the
            returned <b>IResponse</b>; never <c>null</c>.
            </param>
            <returns>
            A new <b>Response</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.OnRun(Tangosol.Net.Messaging.Impl.Response)">
            <summary>
            Process this IRequest and update the given <b>Response</b> with
            the result.
            </summary>
            <remarks>
            Implementations of this method are free to throw an exception
            while processing the IRequest. An exception will result in the
            <b>Response</b> being marked as a failure that the
            <b>Response</b> result will be the exception itself.
            </remarks>
            <param name="response">
            The <b>Response</b> that will be sent back to the requestor.
            </param>
            <exception cref="T:System.Exception">
            If exception occurs during execution.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.m_channelUri">
            <summary>
            The Uri that identifies the IChannel to accept from the
            perspective of the peer that created the IChannel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.m_connection">
            <summary>
            The Connection used to accept the IChannel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.m_receiver">
            <summary>
            The optional IReceiver that the IChannel will register
            with.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.m_principal">
            <summary>
            The identity under which messages received by the new
            IChannel will be executed.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.m_identityToken">
            <summary>
            An optional token representing a user's identity.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.ChannelUri">
            <summary>
            The <b>Uri</b> that identifies the <see cref="T:Tangosol.Net.Messaging.IChannel"/>
            to accept from the perspective of the peer that created
            the <b>IChannel</b>.
            </summary>
            <value>
            The <b>Uri</b> that identifies the <b>IChannel</b> to
            accept.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.Connection">
            <summary>
            The <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.Connection"/> used to accept the
            <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
            <value>
            The <b>Connection</b> used to accept the <b>IChannel</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.Receiver">
            <summary>
            The optional <see cref="T:Tangosol.Net.Messaging.IReceiver"/> that the
            <b>IChannel</b> will register with.
            </summary>
            <value>
            The optional <b>IReceiver</b> that the <b>IChannel</b>
            will register with.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.Principal">
            <summary>
            The identity under which messages received by the new
            <b>IChannel</b> will be executed.
            </summary>
            <value>
            The identity under which messages received by the new
            <b>IChannel</b> will be executed.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel.IdentityToken">
            <summary>
            The token representing a user's identity.
            </summary>
            <value>
            The token representing a user's identity.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest">
            <summary>
            This <see cref="T:Tangosol.Net.Messaging.IRequest"/> is used to accept a
            <see cref="T:Tangosol.Net.Messaging.IChannel"/> that was spawned by a peer.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.InstantiateResponse(Tangosol.Net.Messaging.IMessageFactory)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> for this IRequest.
            </summary>
            <param name="factory">
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that must be used to create the
            returned <b>IResponse</b>; never <c>null</c>.
            </param>
            <returns>
            A new <b>Response</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.OnRun(Tangosol.Net.Messaging.Impl.Response)">
            <summary>
            Process this IRequest and update the given <b>Response</b> with
            the result.
            </summary>
            <remarks>
            Implementations of this method are free to throw an exception
            while processing the IRequest. An exception will result in the
            <b>Response</b> being marked as a failure that the
            <b>Response</b> result will be the exception itself.
            </remarks>
            <param name="response">
            The <b>Response</b> that will be sent back to the requestor.
            </param>
            <exception cref="T:System.Exception">
            If exception occurs during execution.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.m_channelId">
            <summary>
            The unique identifier of the IChannel to accept.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.m_identityToken">
            <summary>
            An optional token representing a user identity to associate
            with the IChannel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.m_messageFactory">
            <summary>
            The IMessageFactory used by the new IChannel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.m_protocolName">
            <summary>
            The name of the IProtocol used by the new IChannel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.m_receiver">
            <summary>
            The optional IReceiver that the IChannel will register
            with.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.m_serializer">
            <summary>
            The ISerializer used by the new IChannel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.m_principal">
            <summary>
            The identity under which IMessages received by the new
            IChannel will be executed.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.ChannelId">
            <summary>
            The unique identifier of the <see cref="T:Tangosol.Net.Messaging.IChannel"/> to
            accept.
            </summary>
            <remarks>
            This channel identifier must have been previously
            returned in a <see cref="T:Tangosol.Net.Messaging.IResponse"/> sent by the peer.
            </remarks>
            <value>
            The unique identifier of the <b>IChannel</b> to accept.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.IdentityToken">
            <summary>
            An optional token representing a user identity to
            associate with the <b>Channel</b>.
            </summary>
            <remarks>
            Operations performed on receipt of messages sent via the
            newly established <b>IChannel</b> will be performed on
            behalf of this identity.
            </remarks>
            <value>
            Token representing a user identity.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.MessageFactory">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> used by the new
            <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
            <value>
            The <b>IMessageFactory</b> used by the new
            <b>IChannel</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.ProtocolName">
            <summary>
            The name of the <see cref="T:Tangosol.Net.Messaging.IProtocol"/> used by the new
            <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
            <remarks>
            This protocol name must have been previously returned in
            a <see cref="T:Tangosol.Net.Messaging.IResponse"/> sent by the peer.
            </remarks>
            <value>
            The name of the <b>IProtocol"</b> used by the new
            <b>IChannel</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.Receiver">
            <summary>
            The optional <see cref="T:Tangosol.Net.Messaging.IReceiver"/> that the
            <see cref="T:Tangosol.Net.Messaging.IChannel"/> will register with.
            </summary>
            <value>
            The optional <b>IReceiver</b> that the <b>IChannel"</b>
            will register with.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.Serializer">
            <summary>
            The <see cref="T:Tangosol.IO.ISerializer"/> used by the new
            <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
            <value>
            The <b>ISerializer</b> used by the new <b>IChannel</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.Principal">
            <summary>
            The identity under which messages received by the new
            <see cref="T:Tangosol.Net.Messaging.IChannel"/> will be executed.
            </summary>
            <value>
            The identity under which messages received by the new
            <b>IChannel</b> will be executed.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelResponse">
            <summary>
            <see cref="T:Tangosol.Net.Messaging.IResponse"/> to
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelResponse.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelResponse.Run">
            <summary>
            Execute the action specific to the Message implementation.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelResponse.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseChannel">
            <summary>
            Internal <see cref="T:Tangosol.Net.Messaging.IRequest"/> used to close an
            <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseChannel.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseChannel.InstantiateResponse(Tangosol.Net.Messaging.IMessageFactory)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> for this IRequest.
            </summary>
            <param name="factory">
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that must be used to create the
            returned <b>IResponse</b>; never <c>null</c>.
            </param>
            <returns>
            A new <b>Response</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseChannel.OnRun(Tangosol.Net.Messaging.Impl.Response)">
            <summary>
            Process this IRequest and update the given <b>Response</b> with
            the result.
            </summary>
            <remarks>
            Implementations of this method are free to throw an exception
            while processing the IRequest. An exception will result in the
            <b>Response</b> being marked as a failure that the
            <b>Response</b> result will be the exception itself.
            </remarks>
            <param name="response">
            The <b>Response</b> that will be sent back to the requestor.
            </param>
            <exception cref="T:System.Exception">
            If exception occurs during execution.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseChannel.m_cause">
            <summary>
            The optional reason why the IChannel is being closed.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseChannel.m_channelClose">
            <summary>
            The Channel to close.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseChannel.m_notify">
            <summary>
            If true, notify the peer that the IChannel is being closed.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseChannel.Cause">
            <summary>
            The optional reason why the <b>IChannel</b> is being closed.
            </summary>
            <value>
            The <b>Exception</b> that was the reason why the
            <b>IChannel</b> is being closed.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseChannel.ChannelClose">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.Impl.Channel"/> to close.
            </summary>
            <value>
            The <b>Channel</b> to close.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseChannel.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseChannel.Notify">
            <summary>
            If <b>true</b>, notify the peer that the <b>IChannel</b> is
            being closed.
            </summary>
            <value>
            <b>true</b> to notify the peer that the <b>IChannel</b> is
            being closed.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseConnection">
            <summary>
            Internal <see cref="T:Tangosol.Net.Messaging.IRequest"/> used to close an
            <see cref="T:Tangosol.Net.Messaging.IConnection"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseConnection.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseConnection.InstantiateResponse(Tangosol.Net.Messaging.IMessageFactory)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> for this IRequest.
            </summary>
            <param name="factory">
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that must be used to create the
            returned <b>IResponse</b>; never <c>null</c>.
            </param>
            <returns>
            A new <b>Response</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseConnection.OnRun(Tangosol.Net.Messaging.Impl.Response)">
            <summary>
            Process this IRequest and update the given <b>Response</b> with
            the result.
            </summary>
            <remarks>
            Implementations of this method are free to throw an exception
            while processing the IRequest. An exception will result in the
            <b>Response</b> being marked as a failure that the
            <b>Response</b> result will be the exception itself.
            </remarks>
            <param name="response">
            The <b>Response</b> that will be sent back to the requestor.
            </param>
            <exception cref="T:System.Exception">
            If exception occurs during execution.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseConnection.m_cause">
            <summary>
            The optional reason why the IConnection is being closed.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseConnection.m_connectionClose">
            <summary>
            The Connection to close.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseConnection.m_isNotify">
            <summary>
            If true, notify the peer that the IConnection is being closed.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseConnection.Cause">
            <summary>
            The optional reason why the <b>IConnection</b> is being closed.
            </summary>
            <value>
            The <b>Exception</b> that was the reason why the
            <b>IConnection</b> is being closed.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseConnection.ConnectionClose">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> to close.
            </summary>
            <value>
            The <b>Connection</b> to close.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseConnection.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseConnection.IsNotify">
            <summary>
            If <b>true</b>, notify the peer that the <b>IConnection</b> is
            being closed.
            </summary>
            <value>
            <b>true</b> to notify the peer that the <b>IConnection</b> is
            being closed.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CreateChannel">
            <summary>
            Internal <see cref="T:Tangosol.Net.Messaging.IRequest"/> used to create an
            <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CreateChannel.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CreateChannel.InstantiateResponse(Tangosol.Net.Messaging.IMessageFactory)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> for this IRequest.
            </summary>
            <param name="factory">
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that must be used to create the
            returned <b>IResponse</b>; never <c>null</c>.
            </param>
            <returns>
            A new <b>Response</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CreateChannel.OnRun(Tangosol.Net.Messaging.Impl.Response)">
            <summary>
            Process this IRequest and update the given <b>Response</b> with
            the result.
            </summary>
            <remarks>
            Implementations of this method are free to throw an exception
            while processing the IRequest. An exception will result in the
            <b>Response</b> being marked as a failure that the
            <b>Response</b> result will be the exception itself.
            </remarks>
            <param name="response">
            The <b>Response</b> that will be sent back to the requestor.
            </param>
            <exception cref="T:System.Exception">
            If exception occurs during execution.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CreateChannel.m_connection">
            <summary>
            The Connection used to create the IChannel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CreateChannel.m_receiver">
            <summary>
            The optional IReceiver that the IChannel will register
            with.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CreateChannel.m_protocol">
            <summary>
            The IProtocol used by the new IChannel.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CreateChannel.Connection">
            <summary>
            The <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CreateChannel.Connection"/> used to create the
            <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
            <value>
            The <b>Connection</b> used to create the <b>IChannel</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CreateChannel.Receiver">
            <summary>
            The optional <see cref="T:Tangosol.Net.Messaging.IReceiver"/> that the
            <b>IChannel</b> will register with.
            </summary>
            <value>
            The optional <b>IReceiver</b> that the <b>IChannel</b>
            will register with.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CreateChannel.Protocol">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IProtocol"/> used by the new <b>IChannel</b>.
            </summary>
            <value>
            The <b>IProtocol</b> used by the new <b>IChannel</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CreateChannel.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.EncodedMessage">
            <summary>
            A <see cref="T:Tangosol.Net.Messaging.IMessage"/> with a <see cref="T:Tangosol.IO.DataReader"/> that
            contains an encoded <b>IMessage</b>.
            </summary>
            <remarks>
            The service thread will decode the message using the configured
            <see cref="T:Tangosol.Net.Messaging.ICodec"/> before dispatching it for execution.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.EncodedMessage.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.EncodedMessage.Run">
            <summary>
            Execute the action specific to the Message implementation.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.EncodedMessage.m_connection">
            <summary>
             The Connection that received the encoded Message.
             </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.EncodedMessage.m_reader">
            <summary>
            The DataReader with encoded IMessage.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.EncodedMessage.Connection">
            <summary>
             The <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.EncodedMessage.Connection"/> that received the encoded
             <see cref="T:Tangosol.Net.Messaging.IMessage"/>.
             </summary>
             <value>
             The <b>Connection</b> that received the encoded <b>IMessage</b>.
             </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.EncodedMessage.Reader">
            <summary>
            The <see cref="T:Tangosol.IO.DataReader"/> with encoded <b>IMessage</b>.
            </summary>
            <value>
            The <b>DataReader</b> with encoded <b>IMessage</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.EncodedMessage.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator">
            <summary>
            Base implementation of an <see cref="T:Tangosol.Net.Messaging.IConnectionInitiator"/>.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer">
            <summary>
            Base implementation of a <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/>.
            </summary>
            <remarks>
            A <b>IConnectionManager</b> has a service thread, an optional execute
            thread pool, and a <see cref="T:Tangosol.Net.Messaging.ConnectionEventArgs"/> dispatcher
            thread.<br/>
            Concrete implementations must implement the abstract
            <see cref="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Send(Tangosol.Net.Messaging.IMessage)"/> method using the underlying transport.
            Additionally, the underlying transport must call the
            <see cref="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Receive(Tangosol.IO.DataReader,Tangosol.Net.Messaging.Impl.Connection)"/> or <see cref="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Post(Tangosol.Net.Messaging.IMessage)"/> method when a
            <see cref="T:Tangosol.Net.Messaging.IMessage"/> is received over the underlying transport.
            </remarks>
            <author>Ana Cikic  2007.12.25</author>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Service">
            <summary>
            Base implementation of <see cref="T:Tangosol.Util.IService"/>.
            </summary>
            <remarks>
            A Service has a service thread, an optional execute thread pool, and
            an event dispatcher thread.
            </remarks>
            <author>Ana Cikic  2007.12.21</author>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.Configure(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Configure the controllable service.
            </summary>
            <remarks>
            <p/>
            This method can only be called before the controllable service
            is started.
            </remarks>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/> carrying configuration information
            specific to the IControllable object.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the service is already running.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the configuration information is invalid.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.Shutdown">
            <summary>
            Stop the controllable service.
            </summary>
            <remarks>
            <p/>
            This is a controlled shut-down, and is preferred to the
            <see cref="M:Tangosol.Util.IControllable.Stop"/> method.
            <p/>
            This method should only be called once per the life cycle
            of the controllable service. Calling this method for a service
            that has already stopped has no effect.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.OnEnter">
            <summary>
            Event notification called once the daemon's thread starts and
            before the daemon thread goes into the "wait - perform" loop.
            </summary>
            <remarks>
            Unlike the <c>OnInit()</c> event, this method executes on the
            daemon's thread.
            <p>
            This method is called while the caller's thread is still waiting
            for a notification to  "unblock" itself.</p>
            <p>
            Any exception thrown by this method will terminate the thread
            immediately.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.OnException(System.Exception)">
            <summary>
            This event occurs when an exception is thrown from
            <b>OnEnter</b>, <b>OnWait</b>, <b>OnNotify</b> and <b>OnExit</b>.
            </summary>
            <param name="e">
            Exception that has occured.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.OnExit">
            <summary>
            Event notification called right before the daemon thread
            terminates.
            </summary>
            <remarks>
            This method is guaranteed to be called only once and on the
            daemon's thread.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.OnNotify">
            <summary>
            Event notification to perform a regular daemon activity.
            </summary>
            <remarks>
            To get it called, another thread has to set IsNotification to
            <b>true</b>:
            <c>daemon.IsNotification = true;</c>
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.Start">
            <summary>
            Starts the daemon thread.
            </summary>
            <remarks>
            If the thread is already starting or has started, invoking
            this method has no effect. Synchronization is used here to
            verify that the start of the thread occurs; the lock is obtained
            before the thread is started, and the daemon thread notifies
            back that it has started from the Run() method.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.Stop">
            <summary>
            Stops the daemon thread associated with this object.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ToString">
            <summary>
            Provide a human-readable representation of this object.
            </summary>
            <returns>
            A string whose contents represent the value of this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.UpdateServiceThreadName">
            <summary>
            Update the service thread name with any additional information
            that could be useful for thread dump analysis.
            </summary>
            <remarks>
            This method is usually called every time when a service state
            changes.
            </remarks>
            <seealso cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ServiceState"/>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.WaitAcceptingClients">
            <summary>
            Block the calling thread until the Service has advanced to the
            state at which it can accept requests from client threads.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.AdjustTimeout(System.Int64,System.Int64)">
            <summary>
            Adjust the default timeout value using the passed
            context-specific timeout value.
            </summary>
            <param name="defaultTimeout">
            The default timeout value (must be non-negative).
            </param>
            <param name="contextTimeout">
            Positive, or zero for "default timeout", or -1 for "no timeout".
            </param>
            <returns>
            The adjusted timeout value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DispatchEvent(System.EventArgs,Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventCallback)">
            <summary>
            Dispatch the given event to the <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.Dispatcher"/>.
            </summary>
            <param name="evt">
            The event to dispatch.
            </param>
            <param name="callback">
            The <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventCallback"/> object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DispatchServiceEvent(Tangosol.Util.ServiceEventType)">
            <summary>
            Dispatch a <see cref="T:Tangosol.Util.ServiceEventArgs"/> to the
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.Dispatcher"/>.
            </summary>
            <param name="eventType">
            Service event type.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EnsureSerializer">
            <summary>
            Return an instance of the configured <b>ISerializer</b>.
            </summary>
            <returns>
            A new <b>ISerializer</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EnsureStringValue(Tangosol.Run.Xml.IXmlElement,System.String,System.String)">
            <summary>
            Return the string value of a named child element of the given XML
            configuration.
            </summary>
            <param name="xmlConfig">
            The parent XML configuration element.
            </param>
            <param name="name">
            The name of the the child XML configuration element.
            </param>
            <param name="defaultValue">
            The default value to return if the child element is missing or
            empty.
            </param>
            <exception cref="T:System.ArgumentException">
            If the child element and default value is missing or empty.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.FireServiceEvent(System.EventArgs)">
            <summary>
            Raises service event.
            </summary>
            <param name="evt">
            <b>EventArgs</b> object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.InvokeServiceEvent(Tangosol.Util.ServiceEventHandler,Tangosol.Util.ServiceEventArgs)">
            <summary>
            Invokes the event, with special remark towards multithreading
            (using local copy of delegate and no inline attribute for method).
            </summary>
            <param name="handler">
            The ServiceEventHandler event that's being invoked.
            </param>
            <param name="evt">
            Event arguments.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DrainEvents">
            <summary>
            Block the calling thread until the EventDispatcher Queue is empty
            and all outstanding tasks have been executed.
            </summary>
            <remarks>
            This method is mostly called on client threads.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EnsureEventDispatcher">
            <summary>
            Return a running <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.Dispatcher"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.FormatStats">
            <summary>
            Return a human-readible description of the Service statistics.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.InstantiateDispatchEvent">
            <summary>
            Factory pattern: create a new <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DispatchEventTask"/>
            instance.
            </summary>
            <returns>
            A new <b>DispatchEventTask</b> instance.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.InstantiateSerializer">
            <summary>
            Instantiate a <see cref="T:Tangosol.IO.ISerializer"/>
            </summary>
            <returns>
            A new <see cref="T:Tangosol.IO.ISerializer"/> instance.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.IsServiceThread(System.Boolean)">
            <summary>
            Return <b>true</b> if the current thread is one of the Service
            threads.
            </summary>
            <param name="isStrict">
            If <b>true</b> then only the service thread and event dispatcher
            thread are considered to be service threads, if <b>false</b>,
            then DaemonPool threads are also considered to be service
            threads.
            </param>
            <returns>
            <b>true</b> if the current thread is one of the Service threads.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ResetStats">
            <summary>
            Reset the Service statistics.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.OnServiceState(Tangosol.Util.Daemon.QueueProcessor.Service.ServiceState)">
            <summary>
            Called when the Service has transitioned to the specified state.
            </summary>
            <param name="state">
            The new Service state.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.OnServiceStarting">
            <summary>
            The default implementation of this method does nothing.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.OnServiceStarted">
            <summary>
            The default implementation of this method sets
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.IsAcceptingClients"/> to <b>true</b>.
            </summary>
            <remarks>
            If the Service has not completed preparing at this point, then
            the Service must override this implementation and only set
            <b>IsAcceptingClients</b> to <b>true</b> when the Service has
            actually "finished starting".
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.OnServiceStopping">
            <summary>
            The default implementation of this method sets
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.IsAcceptingClients"/> to <b>false</b>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.OnServiceStopped">
            <summary>
            The default implementation of this method sets
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.IsAcceptingClients"/> to <b>false</b>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ParseTime(Tangosol.Run.Xml.IXmlElement,System.String,System.Int64)">
            <summary>
            Parse the <b>String</b> value of the child <b>IXmlElement</b>
            with the given name as a time in milliseconds.
            </summary>
            <remarks>
            If the specified child <b>IXmlElement</b> does not exist or is
            empty, the specified default value is returned.
            </remarks>
            <param name="xml">
            The parent <b>IXmlElement</b>.
            </param>
            <param name="name">
            The name of the child <b>IXmlElement</b>
            </param>
            <param name="defaultValue">
            The default value.
            </param>
            <returns>
            The time (in milliseconds) represented by the specified child
            <b>XmlNode</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.m_isAcceptingClients">
            <summary>
            Set to true when the Service has advanced to the state at which
            it can accept requests from client threads.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.m_eventDispatcher">
            <summary>
            The event dispatcher daemon.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.m_serializer">
            <summary>
            Configured ISerializer instance.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.m_serializerFactory">
            <summary>
            The serializer factory.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.m_serviceConfig">
            <summary>
            Original XML configuration that was supplied to the Service; may
            be null.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.m_serviceName">
            <summary>
            The name of this Service.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.m_serviceState">
            <summary>
            The state of the Service; one of the ServiceState enumeration
            values.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.m_statsCpu">
            <summary>
            Statistics: total time spent while processing messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.m_statsReceived">
            <summary>
            Statistics: total number of received messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.m_statsReset">
            <summary>
            Statistics: Date/time value that the stats have been reset.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.m_serviceStarting">
            <summary>
            Service event handlers.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.m_operationalContext">
            <summary>
            The IOperationalContext for this Service.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DecoratedThreadName">
            <summary>
            (Calculated) Name of the service thread decoraded with any
            additional information that could be useful for thread dump
            analysis.
            </summary>
            <remarks>
            The decorated part is always trailing the full name delimited by
            the '|' character and is truncated by the <see cref="T:Tangosol.Util.Logging.Logger"/>.
            </remarks>
            <value>
            Name of the service thread decorated with additional information.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.Description">
            <summary>
            Human-readable description of additional Service properties.
            </summary>
            <remarks>
            Used by <see cref="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ToString"/>.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.Dispatcher">
            <summary>
            The <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher"/>.
            </summary>
            <remarks>
            Called on the service thread only.
            </remarks>
            <value>
            The <b>EventDispatcher</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.Serializer">
            <summary>
            Configured <see cref="T:Tangosol.IO.ISerializer"/> instance.
            </summary>
            <value>
            Configured <b>ISerializer</b> instance.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.SerializerFactory">
            <summary>
            The <see cref="T:Tangosol.IO.ISerializerFactory"/> used by this Service.
            </summary>
            <value>
            The <b>ISerializerFactory</b> used by this Service.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ServiceConfig">
            <summary>
            Original XML configuration that was supplied to the Service; may
            be <c>null</c>.
            </summary>
            <value>
            <see cref="T:Tangosol.Run.Xml.IXmlElement"/> containing configuration.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ServiceName">
            <summary>
            The name of this Service.
            </summary>
            <value>
            The name of the Service.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ServiceState">
            <summary>
            The state of the Service.
            </summary>
            <value>
            One of the <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ServiceState"/> enum values.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ServiceStateName">
            <summary>
            Calculated helper property; returns a human-readible description
            of the <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ServiceState"/> property.
            </summary>
            <value>
            String representation of <b>ServiceState</b> value.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.StatsCpu">
            <summary>
            Statistics: total time spent while processing messages.
            </summary>
            <value>
            Total time spent while processing messages.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.StatsReceived">
            <summary>
            Statistics: total number of received messages.
            </summary>
            <value>
            Total number of received messages.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.StatsReset">
            <summary>
            Statistics: Date/time value that the stats have been reset.
            </summary>
            <value>
            Date/time value that the stats have been reset.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.IsAcceptingClients">
            <summary>
            Set to <b>true</b> when the Service has advanced to the state at
            which it can accept requests from client threads.
            </summary>
            <value>
            <b>true</b> when the Service has advanced to the state at which
            it can accept requests from client threads.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.OperationalContext">
            <summary>
            The <see cref="T:Tangosol.Net.IOperationalContext"/> for this Service.
            </summary>
            <value>
            An <b>IOperationalContext</b> instance.
            </value>
        </member>
        <member name="E:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ServiceStarting">
            <summary>
            Invoked when <see cref="T:Tangosol.Util.IService"/> is starting.
            </summary>
        </member>
        <member name="E:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ServiceStarted">
            <summary>
            Invoked when <see cref="T:Tangosol.Util.IService"/> has started.
            </summary>
        </member>
        <member name="E:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ServiceStopping">
            <summary>
            Invoked when <see cref="T:Tangosol.Util.IService"/> is stopping.
            </summary>
        </member>
        <member name="E:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ServiceStopped">
            <summary>
            Invoked when <see cref="T:Tangosol.Util.IService"/> has stopped.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.IsRunning">
            <summary>
            Determine whether or not the controllable service is running.
            </summary>
            <remarks>
            <p/>
            Returns <b>false</b> before a service is started, while the
            service is starting, while a service is shutting down and after
            the service has stopped. It only returns <b>true</b> after
            completing its start processing and before beginning its shutdown
            processing.
            </remarks>
            <returns>
            <b>true</b> if the service is running; <b>false</b> otherwise.
            </returns>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ThreadName">
            <summary>
            Specifies the name of the daemon thread.
            </summary>
            <remarks>
            If not specified, the type name will be used. This property can
            be set at design time or runtime. If set at runtime, it must be
            configured before Start() is invoked to cause the daemon thread
            to have the specified name.
            </remarks>
            <value>
            The name of the daemon thread.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.WaitMillis">
            <summary>
            The number of milliseconds that the daemon will wait for
            notification.
            </summary>
            <remarks>
            Zero means to wait indefinitely. Negative value means to skip
            waiting altogether.
            </remarks>
            <value>
            The number of milliseconds that the daemon will wait for
            notification.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventCallback">
            <summary>
            Represents the method that will raise event.
            </summary>
            <param name="evt">
            <see cref="T:System.EventArgs"/> object.
            </param>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher">
            <summary>
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.QueueProcessor"/> used to dispatch asynchronous
            <see cref="T:Tangosol.Util.ServiceEventArgs"/>s.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.#ctor">
            <summary>
            Create new instance of EventDispatcher.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.OnException(System.Exception)">
            <summary>
            This event occurs when an exception is thrown from
            <b>OnEnter</b>, <b>OnWait</b>, <b>OnNotify</b> and <b>OnExit</b>.
            </summary>
            <param name="e">
            Exception that has occured.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.OnExit">
            <summary>
            Event notification called right before the daemon thread
            terminates.
            </summary>
            <remarks>
            This method is guaranteed to be called only once and on the
            daemon's thread.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.OnNotify">
            <summary>
            Event notification to perform a regular daemon activity.
            </summary>
            <remarks>
            To get it called, another thread has to set IsNotification to
            <b>true</b>:
            <c>daemon.IsNotification = true;</c>
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.DrainOverflow">
            <summary>
            This method is mostly called on client threads.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.DrainQueue">
            <summary>
            Block the calling thread until the Queue is empty and all
            outstanding tasks have been executed.
            </summary>
            <remarks>
            This method is mostly called on client threads.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.m_cloggedCount">
            <summary>
            The maximum number of events in the queue before determining
            that the dispatcher is clogged.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.m_cloggedDelay">
            <summary>
            The number of milliseconds to pause client threads when a
            clog occurs, to wait for the clog to dissipate.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.m_isDispatching">
            <summary>
            Set to true while the EventDispatcher daemon thread is in
            the process of dispatching events.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.m_parentService">
            <summary>
            Parent Service.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.m_queue">
            <summary>
            This is the Queue to which items that need to be processed
            are added, and from which the daemon pulls items to process.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.Service">
            <summary>
            Parent <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.Service"/>.
            </summary>
            <value>
            Parent Service.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.Queue">
            <summary>
            This is the <b>Queue</b> to which items that need to be
            processed are added, and from which the daemon pulls items to
            process.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.CloggedCount">
            <summary>
            The maximum number of events in the queue before determining
            that the dispatcher is clogged.
            </summary>
            <remarks>
            Zero means no limit.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.CloggedDelay">
            <summary>
            The number of milliseconds to pause client threads when a
            clog occurs, to wait for the clog to dissipate.
            </summary>
            <remarks>
            The pause is repeated until the clog is gone. Anything less
            than one (e.g. zero) is treated as one.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.IsDispatching">
            <summary>
            Set to <b>true</b> while the EventDispatcher daemon thread
            is in the process of dispatching events.
            </summary>
            <value>
            <b>true</b> while the EventDispatcher daemon thread is in the
            process of dispatching events.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.ThreadName">
            <summary>
            Specifies the name of the daemon thread.
            </summary>
            <remarks>
            If not specified, the type name will be used. This property can
            be set at design time or runtime. If set at runtime, it must be
            configured before Start() is invoked to cause the daemon thread
            to have the specified name.
            </remarks>
            <value>
            The name of the daemon thread.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.EventDispatcherQueue">
            <summary>
            Provides a means to efficiently (and in a thread-safe manner)
            queue received messages and messages to be sent.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.EventDispatcherQueue.Add(System.Object)">
            <summary>
            Appends the specified element to the end of this queue.
            </summary>
            <remarks>
            Queues may place limitations on what elements may be added
            to this Queue. In particular, some Queues will impose restrictions
            on the type of elements that may be added. Queue implementations
            should clearly specify in their documentation any restrictions on
            what elements may be added.
            </remarks>
            <param name="obj">
            Element to be appended to this Queue.
            </param>
            <returns>
            <b>true</b> (as per the general contract of the IList.Add method)
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the class of the specified element prevents it from being added
            to this Queue.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.EventDispatcherQueue.m_dispatcher">
            <summary>
            Parent EventDispatcher.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.EventDispatcherQueue.EventDispatcher">
            <summary>
            Parent <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventDispatcher.EventDispatcherQueue.EventDispatcher"/>.
            </summary>
            <value>
            Parent <b>EventDispatcher</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DispatchEventTask">
            <summary>
            Runnable event.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DispatchEventTask.InvokeEventCallback(Tangosol.Util.Daemon.QueueProcessor.Service.Service.EventCallback,System.EventArgs)">
            <summary>
            Invokes the event callback, with special remark towards
            multithreading (using local copy of delegate and no inline
            attribute for method).
            </summary>
            <param name="handler">
            The EventCallback that is being invoked.
            </param>
            <param name="evt">
            Event arguments.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DispatchEventTask.ToString">
            <summary>
            Provide a human-readable representation of this object.
            </summary>
            <returns>
            A string whose contents represent the value of this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DispatchEventTask.Run">
            <summary>
            Execute the action specific to the object implementation.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DispatchEventTask.m_event">
            <summary>
            The event to dispatch.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DispatchEventTask.m_eventCallback">
            <summary>
            The event callback.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DispatchEventTask.Event">
            <summary>
            The <b>EventArgs</b> to dispatch.
            </summary>
            <value>
            The <b>EventArgs</b> to dispatch.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DispatchEventTask.EventCallback">
            <summary>
            The <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DispatchEventTask.EventCallback"/> that raises the
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.DispatchEventTask.Event"/>.
            </summary>
            <value>
            <b>EventCallback</b> object.
            </value>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.#cctor">
            <summary>
            Initializes <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.ProcessId"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.AcceptChannel(Tangosol.Net.Messaging.Impl.Connection,System.Uri,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)">
            <summary>
            Accept a new <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
            <remarks>
            This method is called by <see cref="M:Tangosol.Net.Messaging.IConnection.AcceptChannel(System.Uri,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/>
            and is always run on client threads.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.AssertIdentityToken(System.Object)">
            <summary>
            Validate a token in order to establish a user's identity.
            </summary>
            <param name="token">
            An identity assertion, a statement that asserts an identity.
            </param>
            <returns>
            An IPrincipal reprsenting the identity.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.GenerateIdentityToken(System.Security.Principal.IPrincipal)">
            <summary>
            Transform an IPrincipal to a token that asserts identity.
            </summary>
            <param name="principal">
            The IPrincipal to transform.
            </param>
            <returns>
            A token that asserts identity.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.DeserializeIdentityToken(System.Byte[])">
            <summary>
            Deserialize the identity token object.
            </summary>
            <param name="token">
            The identity token.
            </param>
            <returns>
            The token.
            </returns>
            <exception cref="T:System.UnauthorizedAccessException">
            On deserialization error.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.SerializeIdentityToken(System.Object)">
            <summary>
            Serialize an identity token.
            </summary>
            <param name="token">
            The identity token object to serialize.
            </param>
            <returns>
            The serialized token.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.CheckPingTimeout(Tangosol.Net.Messaging.Impl.Connection)">
            <summary>
            Check the given <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> for a ping timeout.
            </summary>
            <remarks>
            A <b>Connection</b> that has not received a
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingResponse"/> for an oustanding
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingRequest"/> within the configured
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.PingTimeout"/> will be closed.
            </remarks>
            <param name="connection">
            The <b>Connection</b> to check.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.CheckPingTimeouts">
            <summary>
            Check the <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/>(s) managed by this
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> for a ping timeout.
            </summary>
            <remarks>
            A <b>Connection</b> that has not received a
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingResponse"/> for an oustanding
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingRequest"/> within the configured
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.PingTimeout"/> will be closed.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.CloseChannel(Tangosol.Net.Messaging.Impl.Channel,System.Boolean,System.Exception)">
            <summary>
            Close the given <see cref="T:Tangosol.Net.Messaging.Impl.Channel"/>.
            </summary>
            <remarks>
            This method is called by <see cref="M:Tangosol.Net.Messaging.Impl.Channel.Close"/> and is
            always run on client threads.
            </remarks>
            <param name="channel">
            The <b>Channel</b> to close.
            </param>
            <param name="notify">
            If <b>true</b>, notify the peer that the <b>Channel</b> is being
            closed.
            </param>
            <param name="e">
            The optional reason why the <b>Channel</b> is being closed.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.CloseChannel(Tangosol.Net.Messaging.Impl.Channel,System.Boolean,System.Exception,System.Boolean)">
            <summary>
            Close the given <see cref="T:Tangosol.Net.Messaging.Impl.Channel"/>.
            </summary>
            <remarks>
            This method is always run on client threads.
            </remarks>
            <param name="channel">
            The <b>Channel</b> to close.
            </param>
            <param name="notify">
            If <b>true</b>, notify the peer that the <b>Channel</b> is being
            closed.
            </param>
            <param name="e">
            The optional reason why the <b>Channel</b> is being closed.
            </param>
            <param name="wait">
            If <b>true</b>, wait for the <b>Channel</b> to close before
            returning.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.CloseConnection(Tangosol.Net.Messaging.Impl.Connection,System.Boolean,System.Exception,System.Boolean)">
            <summary>
            Close the given <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/>.
            </summary>
            <remarks>
            This method is called by
            <see cref="M:Tangosol.Net.Messaging.Impl.Connection.Close"/> and is always
            run on client threads.
            </remarks>
            <param name="connection">
            The <b>Connection</b> to close.
            </param>
            <param name="notify">
            If <b>true</b>, notify the peer that the <b>Connection</b> is
            being closed.
            </param>
            <param name="e">
            The optional reason why the <b>Connection</b> is being closed.
            </param>
            <param name="wait">
            If <b>true</b>, wait for the <b>Connection</b> to close before
            returning.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.CreateChannel(Tangosol.Net.Messaging.Impl.Connection,Tangosol.Net.Messaging.IProtocol,Tangosol.Net.Messaging.IReceiver)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Messaging.Impl.Channel"/>.
            </summary>
            <remarks>
            This method is called by <see cref="M:Tangosol.Net.Messaging.Impl.Connection.CreateChannel(Tangosol.Net.Messaging.IProtocol,Tangosol.Net.Messaging.IReceiver)"/>
            and is always run on client threads.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.DecodeMessage(Tangosol.IO.DataReader,Tangosol.Net.Messaging.Impl.Connection,System.Boolean)">
            <summary>
            Decode the <b>IMessage</b> from the given
            <see cref="T:Tangosol.IO.DataReader"/> object with the configured
            <see cref="T:Tangosol.Net.Messaging.ICodec"/> and return a new decoded
            <see cref="T:Tangosol.Net.Messaging.IMessage"/>.
            </summary>
            <remarks>
            This method is called on either the service thread (see
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.EncodedMessage"/>) or a client (I/O) thread.
            </remarks>
            <param name="reader">
            The <b>DataReader</b> containing the binary-encoded
            <b>IMessage</b>.
            </param>
            <param name="connection">
            The <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> that received the <b>IMessage</b>.
            </param>
            <param name="filter">
            If <b>true</b>, the <b>DataReader</b> will be filtered using the
            list of configured <see cref="T:Tangosol.IO.IWrapperStreamFactory"/> objects.
            </param>
            <returns>
            The decoded <b>IMessage</b> or <c>null</c> if the <b>IMessage</b>
            was sent via an unknown <b>IChannel</b>.
            </returns>
            <exception cref="T:System.IO.IOException">
            On I/O error decoding the <b>IMessage</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.DispatchConnectionEvent(Tangosol.Net.Messaging.Impl.Connection,Tangosol.Net.Messaging.ConnectionEventType,System.Exception)">
            <summary>
            Dispatch a <see cref="T:Tangosol.Net.Messaging.ConnectionEventArgs"/> to the
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.Dispatcher"/>.
            </summary>
            <param name="connection">
            The <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> associated with the Connection
            event.
            </param>
            <param name="eventType">
            Connection event type.
            </param>
            <param name="e">
            The optional <b>Exception</b> associated with the Connection
            event.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.FireConnectionEvent(System.EventArgs)">
            <summary>
            Raises connection event.
            </summary>
            <param name="evt">
            <b>EventArgs</b> object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.InvokeConnectionEvent(Tangosol.Net.Messaging.ConnectionEventHandler,Tangosol.Net.Messaging.ConnectionEventArgs)">
            <summary>
            Invokes the event, with special remark towards multithreading
            (using local copy of delegate and no inline attribute for method).
            </summary>
            <param name="handler">
            The ConnectionEventHandler event that's being invoked.
            </param>
            <param name="evt">
            Event arguments.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.EncodeMessage(Tangosol.Net.Messaging.IMessage,Tangosol.IO.DataWriter,System.Boolean)">
            <summary>
            Encode the given <b>IMessage</b> into the the given
            <see cref="T:Tangosol.IO.DataWriter"/> object with the configured
            <see cref="T:Tangosol.Net.Messaging.ICodec"/>.
            </summary>
            <param name="message">
            The <b>IMessage</b> to encode.
            </param>
            <param name="writer">
            The <b>DataWriter</b> that will be used to write out the encoded
            <b>IMessage</b>.
            </param>
            <param name="filter">
            If <b>true</b>, the <b>DataWriter</b> will be filtered using the
            list of configured <see cref="T:Tangosol.IO.IWrapperStreamFactory"/> objects.
            </param>
            <exception cref="T:System.IO.IOException">
            On encoding error.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.EnforceMaxIncomingMessageSize(System.Int64)">
            <summary>
            Enforce the message size limit of an incoming message
            </summary>
            <param name="size">
            The message size.
            </param>
            <exception cref="T:System.IO.IOException">
            When message size exceeds the maximum.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.EnforceMaxOutgoingMessageSize(System.Int64)">
            <summary>
            Enforce the message size limit of an outgoing message
            </summary>
            <param name="size">
            The message size.
            </param>
            <exception cref="T:System.IO.IOException">
            When message size exceeds the maximum.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.FilterReader(Tangosol.IO.DataReader)">
            <summary>
            Filter the given <see cref="T:Tangosol.IO.DataReader"/> using the list of
            <see cref="T:Tangosol.IO.IWrapperStreamFactory"/> objects.
            </summary>
            <remarks>
            If the list of <b>IWrapperStreamFactory</b> objects is
            <c>null</c> or empty, the given <b>DataReader</b> is
            returned.
            </remarks>
            <param name="reader">
            The <b>DataReader</b> to filter.
            </param>
            <returns>
            A filtered <b>DataReader</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.FilterWriter(Tangosol.IO.DataWriter)">
            <summary>
            Filter the given <see cref="T:Tangosol.IO.DataWriter"/> using the list of
            <see cref="T:Tangosol.IO.IWrapperStreamFactory"/> objects.
            </summary>
            <remarks>
            If the list of <b>IWrapperStreamFactory</b> objects is
            <c>null</c> or empty, the given <b>DataWriter</b> is
            returned.
            </remarks>
            <param name="writer">
            The <b>DataWriter</b> to filter.
            </param>
            <returns>
            A filtered <b>DataWriter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.InstantiateConnection">
            <summary>
            Factory method: create a new <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/>.
            </summary>
            <remarks>
            Implementations must configure the <b>Connection</b> with a
            reference to this <b>IConnectionManager</b>.
            </remarks>
            <returns>
            A new <b>Connection</b> object that has yet to be opened.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnChannelClosed(Tangosol.Net.Messaging.Impl.Channel)">
            <summary>
            Called after a <see cref="T:Tangosol.Net.Messaging.Impl.Channel"/> has been closed.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
            <param name="channel">
            The <b>Channel</b> that has been closed.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnChannelOpened(Tangosol.Net.Messaging.Impl.Channel)">
            <summary>
            Called after a <see cref="T:Tangosol.Net.Messaging.Impl.Channel"/> has been opened.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
            <param name="channel">
            The <b>Channel</b> that has been opened.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnConnectionClosed(Tangosol.Net.Messaging.Impl.Connection)">
            <summary>
            Called after a <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> has closed.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
            <param name="connection">
            The <b>Connection</b> that was closed.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnConnectionError(Tangosol.Net.Messaging.Impl.Connection,System.Exception)">
            <summary>
            Called after a <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> is closed due to an error
            or exception.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
            <param name="connection">
            The <b>Connection</b> that was closed.
            </param>
            <param name="e">
            The reason the <b>Connection</b> was closed.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnConnectionOpened(Tangosol.Net.Messaging.Impl.Connection)">
            <summary>
            Called after a <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> has been successfully
            established.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
            <param name="connection">
            The <b>Connection</b> that was opened.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnMessageDecodeException(System.Exception,Tangosol.IO.DataReader,Tangosol.Net.Messaging.Impl.Connection,System.Boolean)">
            <summary>
            Called when an exception occurs during <see cref="T:Tangosol.Net.Messaging.IMessage"/>
            decoding.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
            <param name="e">
            The <b>Exception</b> thrown during decoding.
            </param>
            <param name="reader">
            The <see cref="T:Tangosol.IO.DataReader"/> that contains the encoded
            <b>IMessage</b>.
            </param>
            <param name="connection">
            The <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> that received the encoded
            <b>IMessage</b>.
            </param>
            <param name="filter">
            <b>true</b> iff the <b>DataReader</b> was filtered using the list
            of configured <see cref="T:Tangosol.IO.IWrapperStreamFactory"/> objects.
            </param>
            <seealso cref="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnNotify"/>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnMessageEncodeException(System.Exception,Tangosol.Net.Messaging.IMessage)">
            <summary>
            Called when an exception occurs during <see cref="T:Tangosol.Net.Messaging.IMessage"/>
            encoding.
            </summary>
            <remarks>
            This method is called on both client and service threads.
            </remarks>
            <param name="e">
            The <b>Exception</b> thrown during encoding.
            </param>
            <param name="message">
            The <b>IMessage</b> being encoded.
            </param>
            <seealso cref="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Send(Tangosol.Net.Messaging.IMessage)"/>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OpenChannel(Tangosol.Net.Messaging.Impl.Connection,Tangosol.Net.Messaging.IProtocol,System.String,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)">
            <summary>
            Open a new <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
            <remarks>
            This method is called by
            <see cref="M:Tangosol.Net.Messaging.Impl.Connection.OpenChannel(Tangosol.Net.Messaging.IProtocol,System.String,Tangosol.Net.Messaging.IReceiver,System.Security.Principal.IPrincipal)"/> and is always run on client
            threads.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OpenConnection(Tangosol.Net.Messaging.Impl.Connection)">
            <summary>
            Open the given <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/>.
            </summary>
            <remarks>
            This method is called by <see cref="M:Tangosol.Net.Messaging.Impl.Connection.Open"/> and is
            always run on client threads.
            </remarks>
            <param name="connection">
            The <b>Connection</b> to open.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.ParseMemorySize(Tangosol.Run.Xml.IXmlElement,System.String,System.Int64)">
            <summary>
            Parse the string value of the child <b>IXmlElement</b> with the
            given name as a memory size in bytes.
            </summary>
            <remarks>
            If the specified child <b>IXmlElement</b> does not exist or is
            empty, the specified default value is returned.
            </remarks>
            <param name="xml">
            The parent <b>IXmlElement</b>.
            </param>
            <param name="name">
            The name of the child <b>IXmlElement</b>.
            </param>
            <param name="defaultValue">
            The default value.
            </param>
            <returns>
            The memory size (in bytes) represented by the specified child
            <b>IXmlElement</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Ping">
            <summary>
            Ping the <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/>(s) managed by this
            <b>IConnectionManager</b>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Post(Tangosol.Net.Messaging.IMessage)">
            <summary>
            Handle the given <see cref="T:Tangosol.Net.Messaging.IMessage"/> by either adding it to
            the service thread queue (internal messages) or sending
            asynchronously (external messages).
            </summary>
            <remarks>
            This method is called on both client and service threads.
            </remarks>
            <param name="message">
            The <b>IMessage</b> to post.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Receive(Tangosol.IO.DataReader,Tangosol.Net.Messaging.Impl.Connection)">
            <summary>
            Called by the underlying transport when an encoded
            <see cref="T:Tangosol.Net.Messaging.IMessage"/> is received.
            </summary>
            <remarks>
            Called on client threads.
            </remarks>
            <param name="reader">
            The <see cref="T:Tangosol.IO.DataReader"/> that contains the encoded
            <b>IMessage</b>.
            </param>
            <param name="connection">
            The <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> that received the encoded
            <b>IMessage</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Send(Tangosol.Net.Messaging.IMessage)">
            <summary>
            Perform an asynchronous send of the given <see cref="T:Tangosol.Net.Messaging.IMessage"/>
            using the underlying transport.
            </summary>
            <remarks>
            This method is called on both client and service threads.
            </remarks>
            <param name="message">
            The <b>IMessage</b> to send.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.RegisterChannel(Tangosol.Net.Messaging.IChannel)">
            <summary>
            Notify this IReceiver that it has been associated with a
            <b>IChannel</b>.
            </summary>
            <remarks>
            <p>
            This method is invoked by the <b>IChannel</b> when an IReceiver is
            associated with the <b>IChannel</b>.</p>
            <p>
            Once registered, the IReceiver will receive all unsolicited
            <b>IMessage</b> objects sent through the <b>IChannel</b> until
            the <b>IChannel</b> is unregistered or closed. Without a
            IReceiver, the unsolicited <b>IMessage</b> objects are executed
            with only an <b>IChannel</b> as context; with an IReceiver, the
            IReceiver is given the <b>IMessage</b> to process, and may
            execute the <b>IMessage</b> in turn.</p>
            </remarks>
            <param name="channel">
            An <b>IChannel</b> that has been associated with this IReceiver.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnMessage(Tangosol.Net.Messaging.IMessage)">
            <summary>
            Called when an unsolicited (non-Response) <b>IMessage</b> is
            received by an <b>IChannel</b> that had been previously
            registered with this IReceiver.
            </summary>
            <param name="message">
            An unsolicited <b>IMessage</b> received by a registered
            <b>IChannel</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.UnregisterChannel(Tangosol.Net.Messaging.IChannel)">
            <summary>
            Unregister the given <b>IChannel</b> with this IReceiver.
            </summary>
            <remarks>
            <p>
            This method is invoked by the <b>IChannel</b> when an IReceiver is
            disassociated with the <b>IChannel</b>.</p>
            <p>
            Once unregistered, the IReceiver will no longer receive
            unsolicited <b>IMessage</b> objects sent through the
            <b>IChannel</b>.</p>
            </remarks>
            <param name="channel">
            An <b>IChannel</b> that was disassociated with this IReceiver.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.GetProtocol(System.String)">
            <summary>
            Gets an <b>IProtocol</b> that was registered with this
            IConnectionManager.
            </summary>
            <param name="name">
            The name of the registered <b>IProtocol</b>.
            </param>
            <returns>
            The registered <b>IProtocol</b> or <c>null</c> if a
            <b>IProtocol</b> with the given name is not registered with this
            IConnectionManager.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.RegisterProtocol(Tangosol.Net.Messaging.IProtocol)">
            <summary>
            Register an <b>IProtocol</b> with this IConnectionManager.
            </summary>
            <remarks>
            This method may only be called before the IConnectionManager
            is started.
            </remarks>
            <param name="protocol">
            The new <b>IProtocol</b> to register; if the <b>IProtocol</b> has
            already been registered, this method has no effect.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If the IConnectionManager is running.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.GetReceiver(System.String)">
            <summary>
            Return an <b>IReceiver</b> that was registered with this
            IConnectionManager.
            </summary>
            <remarks>
            The client should assume that the returned map is an immutable
            snapshot of the actual map of <b>IReceiver</b> objects maintained
            by this IConnectionManager.
            </remarks>
            <param name="name">
            The name of the registered <b>IReceiver</b>.
            </param>
            <returns>
            The registered <b>IReceiver</b> or <c>null</c> if a
            <b>IReceiver</b> with the given name is not registered with this
            IConnectionManager.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.RegisterReceiver(Tangosol.Net.Messaging.IReceiver)">
            <summary>
            Register an <b>IReceiver</b> that will received unsolicited
            <b>IMessage</b> objects sent through <b>IChannel</b> objects
            associated with the <b>IReceiver</b> name and <b>IProtocol</b>.
            </summary>
            <remarks>
            This method may only be called before the IConnectionManager is
            started.
            </remarks>
            <param name="receiver">
            The new <b>IReceiver</b> to register; if the <b>IReceiver</b> has
            already been registered, this method has no effect.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If the IConnectionManager is running.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Configure(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Configure the controllable service.
            </summary>
            <remarks>
            <p/>
            This method can only be called before the controllable service
            is started.
            </remarks>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/> carrying configuration information
            specific to the IControllable object.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the service is already running.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the configuration information is invalid.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.FormatStats">
            <summary>
            Return a human-readible description of the Service statistics.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnEnter">
            <summary>
            Event notification called once the daemon's thread starts and
            before the daemon thread goes into the "wait - perform" loop.
            </summary>
            <remarks>
            Unlike the <c>OnInit()</c> event, this method executes on the
            daemon's thread.
            <p>
            This method is called while the caller's thread is still waiting
            for a notification to  "unblock" itself.</p>
            <p>
            Any exception thrown by this method will terminate the thread
            immediately.</p>
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnExit">
            <summary>
            Event notification called right before the daemon thread
            terminates.
            </summary>
            <remarks>
            This method is guaranteed to be called only once and on the
            daemon's thread.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnInit">
            <summary>
            Initialization method.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnNotify">
            <summary>
            Event notification to perform a regular daemon activity.
            </summary>
            <remarks>
            To get it called, another thread has to set IsNotification to
            <b>true</b>:
            <c>daemon.IsNotification = true;</c>
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnServiceStarted">
            <summary>
            The default implementation of this method sets
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.IsAcceptingClients"/> to <b>true</b>.
            </summary>
            <remarks>
            If the Service has not completed preparing at this point, then
            the Service must override this implementation and only set
            <b>IsAcceptingClients</b> to <b>true</b> when the Service has
            actually "finished starting".
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnServiceStarting">
            <summary>
            The default implementation of this method does nothing.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.OnServiceStopped">
            <summary>
            The default implementation of this method sets
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.IsAcceptingClients"/> to <b>false</b>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.ResetStats">
            <summary>
            Reset the Service statistics.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Shutdown">
            <summary>
            Stop the controllable service.
            </summary>
            <remarks>
            <p/>
            This is a controlled shut-down, and is preferred to the
            <see cref="M:Tangosol.Util.IControllable.Stop"/> method.
            <p/>
            This method should only be called once per the life cycle
            of the controllable service. Calling this method for a service
            that has already stopped has no effect.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.DEBUG">
            <summary>
            Debug flag.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_channel">
            <summary>
            The Channel used for all internal communication.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_connection">
            <summary>
            The Connection used for all internal communication.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_codec">
            <summary>
            The ICodec used to encode and decode all messages sent by this
            IConnectionManager.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_pingInterval">
            <summary>
            The number of milliseconds between successive connection "pings"
            or 0 if heartbeats are disabled.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_pingLastCheckMillis">
            <summary>
            The last time the connection(s) managed by this
            IConnectionManager were checked for a "ping" timeout.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_pingLastMillis">
            <summary>
            The last time the connection(s) managed by this
            IConnectionManager were "pinged".
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_pingTimeout">
            <summary>
            The default request timeout for a PingRequest.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_processId">
            <summary>
            The unique identifier (UUID) of the process using this
            IConnectionManager.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_protocol">
            <summary>
            Protocol.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_protocolMap">
            <summary>
            The map of registered IProtocol objects.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_protocolVersionMap">
            <summary>
            A map of version ranges for registered Protocols. The keys are
            the names of the Protocols and the values are two element Int32
            arrays, the first element being the current version and the 
            second being the supported version of the corresponding Protocol.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_receiverMap">
            <summary>
            The map of registered IReceiver objects.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_requestTimeout">
            <summary>
            The default request timeout for all IChannel objects created by
            IConnection objects managed by this IConnectionManager.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_maxIncomingMessageSize">
            <summary>
            The maximum incoming message size.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_maxOutgoingMessageSize">
            <summary>
            The maximum outgoing message size.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_statsBytesReceived">
            <summary>
            Statistics: total number of bytes received.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_statsBytesSent">
            <summary>
            Statistics: total number of bytes sent.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_statsSent">
            <summary>
            Statistics: total number of messages sent.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_statsTimeoutCount">
            <summary>
            The total number of timed-out requests since the last time the
            statistics were reset.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_wrapperStreamFactoryList">
            <summary>
            A list of IWrapperStreamFactory objects that affect how messages
            are written and read.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.m_connectionOpened">
            <summary>
            Connection event handlers.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.InternalChannel">
            <summary>
            <see cref="T:Tangosol.Net.Messaging.Impl.Channel"/> used for all internal communication.
            </summary>
            <value>
            <b>Channel</b> used for all internal communication.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.InternalConnection">
            <summary>
            <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> used for all internal communication.
            </summary>
            <value>
            <b>Connection</b> used for all internal communication.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.MessageFactory">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> used to create
            <see cref="T:Tangosol.Net.Messaging.IMessage"/>s processed by this <see cref="T:Tangosol.Util.IService"/>.
            </summary>
            <value>
            The MessageFactory used to create Messages processed by this Service.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.PingInterval">
            <summary>
            The number of milliseconds between successive <b>IConnection</b>
            "pings" or 0 if heartbeats are disabled.
            </summary>
            <value>
            The number of milliseconds between successive <b>IConnection</b>
            "pings" or 0 if heartbeats are disabled.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.PingLastCheckMillis">
            <summary>
            The last time the <see cref="T:Tangosol.Net.Messaging.IConnection"/>(s) managed by this
            <b>IConnectionManager</b> were checked for a "ping" timeout.
            </summary>
            <value>
            The last time the <b>IConnection</b>(s) managed by this
            <b>IConnectionManager</b> were checked for a "ping" timeout.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.PingLastMillis">
            <summary>
            The last time the <see cref="T:Tangosol.Net.Messaging.IConnection"/>(s) managed by this
            <b>IConnectionManager</b> were "pinged".
            </summary>
            <value>
            The last time the <b>IConnection</b>(s) managed by this
            <b>IConnectionManager</b> were "pinged".
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.PingNextCheckMillis">
            <summary>
            The next time the <see cref="T:Tangosol.Net.Messaging.IConnection"/>(s) managed by this
            <b>IConnectionManager</b> should be checked for a "ping" timeout.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.PingNextMillis">
            <summary>
            The next time the <see cref="T:Tangosol.Net.Messaging.IConnection"/>(s) managed by this
            <b>IConnectionManager</b> should be "pinged".
            </summary>
            <value>
            The next time the <b>IConnection</b>(s) managed by this
            <b>IConnectionManager</b> should be "pinged".
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.PingTimeout">
            <summary>
            The default request timeout for a <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingRequest"/>.
            </summary>
            <remarks>
            A timeout of 0 is interpreted as an infinite timeout. This
            property defaults to the value of the
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.RequestTimeout"/> property.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.ProcessId">
            <summary>
            The unique identifier (UUID) of the process using this
            <b>IConnectionManager</b>.
            </summary>
            <value>
            The unique identifier (UUID) of the process using this
            <b>IConnectionManager</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.ProtocolMap">
            <summary>
            The map of registered <see cref="T:Tangosol.Net.Messaging.IProtocol"/> objects.
            </summary>
            <value>
            The <b>IDictionary</b> of registered <b>IProtocol</b> objects.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.ProtocolVersionMap">
            <summary>
            A <b>IDictionary</b> map of version ranges for registered Protocols.
            It can be used to create an <b>IDictionary</b> of <b>IMessageFactory</b>
            objects that may be used by <see cref="T:Tangosol.Net.Messaging.IConnection"/> object created by
            this <b>IConnectionManager</b>, keyed by <see cref="T:Tangosol.Net.Messaging.IProtocol"/>
            name.
            </summary>
            <value>
            An <b>IDictionary</b> of version ranges for registered Protocols.
            The keys are the names of the Protocols and the values are two 
            element Int32 arrays, the first element being the current version
            and the second being the supported version of the corresponding
            Protocol.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.ReceiverMap">
            <summary>
            The map of registered <see cref="T:Tangosol.Net.Messaging.IReceiver"/> objects.
            </summary>
            <value>
            The <b>IDictionary</b> of registered <b>IReceiver</b> objects.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.RequestTimeout">
            <summary>
            The default request timeout for all <see cref="T:Tangosol.Net.Messaging.IChannel"/>
            objects created by <see cref="T:Tangosol.Net.Messaging.IConnection"/> objects managed by
            this <b>IConnectionManager</b>.
            </summary>
            <remarks>
            A timeout of 0 is interpreted as an infinite timeout.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.MaxIncomingMessageSize">
            <summary>
            The Maximum incoming message size.
            </summary>
            <remarks>
            A value of 0 is interpreted as unlimited size.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.MaxOutgoingMessageSize">
            <summary>
            The Maximum outgoing message size.
            </summary>
            <remarks>
            A value of 0 is interpreted as unlimited size.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.StatsBytesReceived">
            <summary>
            Statistics: total number of bytes received.
            </summary>
            <value>
            Total number of bytes received.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.StatsBytesSent">
            <summary>
            Statistics: total number of bytes sent.
            </summary>
            <value>
            Total number of bytes sent.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.StatsSent">
            <summary>
            Statistics: total number of messages sent.
            </summary>
            <value>
            Total number of messages sent.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.StatsTimeoutCount">
            <summary>
            The total number of timed-out requests since the last time the
            statistics were reset.
            </summary>
            <value>
            The total number of timed-out requests since the last time the
            statistics were reset.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.WrapperStreamFactoryList">
            <summary>
            A list of <see cref="T:Tangosol.IO.IWrapperStreamFactory"/> objects that affect
            how <see cref="T:Tangosol.Net.Messaging.IMessage"/>s are written and read.
            </summary>
            <value>
            A list of <b>IWrapperStreamFactory</b> objects that affect
            how <b>IMessage</b>s are written and read.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.ParentService">
            <summary>
            The parent IService.
            </summary>
            <value>
            The parent IService.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Name">
            <summary>
            The name of this IReceiver.
            </summary>
            <remarks>
            If the IReceiver is registered with a
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/>, the registration and any
            subsequent accesses are by the IReceiver's name, meaning that the
            name must be unique within the domain of the
            <b>IConnectionManager</b>.
            </remarks>
            <value>
            The IReceiver name.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Protocol">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IProtocol"/> understood by the IReceiver.
            </summary>
            <remarks>
            Only <b>IChannel</b> objects with the specified <b>IProtocol</b>
            can be registered with this IReceiver.
            </remarks>
            <value>
            The <b>IProtocol</b> used by this IReceiver.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Protocols">
            <summary>
            Gets a map of <b>IProtocol</b> names to <b>IProtocol</b> objects.
            </summary>
            <remarks>
            The client should assume that the returned map is an immutable
            snapshot of the actual map of <b>IProtocol</b> objects maintained
            by this IConnectionManager.
            </remarks>
            <value>
            A map of all registered <b>IProtocol</b> objects, keyed by the
            <b>IProtocol</b> name.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Receivers">
            <summary>
            Gets a map of <b>IReceiver</b> names to <b>IReceiver</b> objects.
            </summary>
            <remarks>
            The client should assume that the returned map is an immutable
            snapshot of the actual map of <b>IReceiver</b> objects maintained
            by this IConnectionManager.
            </remarks>
            <value>
            A map of all registered <b>IReceiver</b> objects, keyed by the
            <b>IReceiver</b> name.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Codec">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.ICodec"/> that will be used to encode and decode
            <b>IMessages</b> sent through <b>IConnections</b> managed by this
            IConnectionManager.
            </summary>
            <value>
            The <see cref="T:Tangosol.Net.Messaging.ICodec"/> object.
            </value>
            <exception cref="T:System.InvalidOperationException">
            If the IConnectionManager is running.
            </exception>
        </member>
        <member name="E:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.ConnectionOpened">
            <summary>
            Invoked after an <see cref="T:Tangosol.Net.Messaging.IConnection"/> has been successfully
            established.
            </summary>
        </member>
        <member name="E:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.ConnectionClosed">
            <summary>
            Invoked after an <see cref="T:Tangosol.Net.Messaging.IConnection"/> is closed.
            </summary>
            <remarks>
            After this event is raised, any attempt to use the
            <b>IConnection</b> (or any <b>IChannel</b> created by the
            <b>IConnection</b>) may result in an exception.
            </remarks>
        </member>
        <member name="E:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.ConnectionError">
            <summary>
            Invoked when the <b>IConnectionManager</b> detects that the
            underlying communication channel has been closed by the peer,
            severed, or become unusable.
            </summary>
            <remarks>
            After this event is raised, any attempt to use the
            <b>IConnection</b> (or any <b>IChannel</b> created by the
            <b>IConnection</b>) may result in an exception.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.Description">
            <summary>
            Human-readable description of additional Service properties.
            </summary>
            <remarks>
            Used by <see cref="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ToString"/>.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.WaitMillis">
            <summary>
            The number of milliseconds that the daemon will wait for
            notification.
            </summary>
            <remarks>
            Zero means to wait indefinitely. Negative value means to skip
            waiting altogether.
            </remarks>
            <value>
            The number of milliseconds that the daemon will wait for
            notification.
            </value>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.CreateInitiator(Tangosol.Run.Xml.IXmlElement,Tangosol.Net.IOperationalContext)">
            <summary>
            Factory method: create and configure a new
            <see cref="T:Tangosol.Net.Messaging.IConnectionInitiator"/> for the given configuration.
            </summary>
            <param name="xml">
            The <b>IXmlElement</b> used to create and configure a new
            <b>IConnectionInitiator</b>.
            </param>
            <param name="ctx">
            The <b>IOperationalContext</b> used to configure a new <b>Peer</b>.
            </param>
            <returns>
            A new <b>IConnectionInitiator</b>.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the given <b>IXmlElement</b> is not a valid
            <b>IConnectionInitiator</b> configuration element.
            </exception>
            <seealso cref="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.FindInitiatorConfig(Tangosol.Run.Xml.IXmlElement)"/>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.FindInitiatorConfig(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Return a child <b>IXmlElement</b> of the given <b>IXmlElement</b>
            that can be used to  create and configure a new
            <b>IConnectionInitiator</b>.
            </summary>
            <remarks>
            The given <b>IXmlElement</b> must have a child element with one
            of the following names:
            <list type="number">
            <item>
            tcp-initiator: used to create and configure a new TcpInitiator
            </item>
            </list>
            </remarks>
            <param name="xml">
            The parent <b>IXmlElement</b> of the <b>IXmlElement</b> used to
            create and configure a new <b>IConnectionInitiator</b>.
            </param>
            <returns>
            A child <b>IXmlElement</b> that can be used to create and
            configure a new <b>IConnectionInitiator</b> or <c>null</c> if no
            such <b>IXmlElement</b> exists.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the given <b>IXmlElement</b> does not have a valid
            <b>IConnectionInitiator</b> configuration child element.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.OpenConnection">
            <summary>
            Open and return a new Connection.
            </summary>
            <returns>
            A newly opened Connection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.EnsureConnection">
            <summary>
            Create a new or return the existing <b>IConnection</b> object.
            </summary>
            <remarks>
            <p>
            An <b>IConnection</b> object has a one-way state transition from
            open to closed; this method will always return an open
            <b>IConnection</b> object. If the previously existing
            <b>IConnection</b> object has transitioned to a closed state,
            this method will return a new <b>IConnectin</b> object in the
            open state.</p>
            </remarks>
            <returns>
            An <b>IConnection</b> object representing a client's connection to
            a server.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the IConnectionInitiator is not running.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.CheckPingTimeouts">
            <summary>
            Check the <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.Connection"/>(s) managed by this
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> for a ping timeout.
            </summary>
            <remarks>
            A <b>Connection</b> that has not received a
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingResponse"/> for an oustanding
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingRequest"/> within the configured
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.PingTimeout"/> will be closed.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.Configure(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Configure the controllable service.
            </summary>
            <remarks>
            <p/>
            This method can only be called before the controllable service
            is started.
            </remarks>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/> carrying configuration information
            specific to the IControllable object.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the service is already running.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the configuration information is invalid.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.OpenConnection(Tangosol.Net.Messaging.Impl.Connection)">
            <summary>
            Open the given <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.Connection"/>.
            </summary>
            <remarks>
            This method is called by
            <see cref="M:Tangosol.Net.Messaging.Impl.Connection.Open"/> and is always run
            on client threads.
            </remarks>
            <param name="connection">
            The <b>Connection</b> to open.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.OnConnectionClosed(Tangosol.Net.Messaging.Impl.Connection)">
            <summary>
            Called after a <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.Connection"/> has closed.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
            <param name="connection">
            The <b>Connection</b> that was closed.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.OnConnectionError(Tangosol.Net.Messaging.Impl.Connection,System.Exception)">
            <summary>
            Called after a <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.Connection"/> is closed due to an error
            or exception.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
            <param name="connection">
            The <b>Connection</b> that was closed.
            </param>
            <param name="e">
            The reason the <b>Connection</b> was closed.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.OnConnectionOpened(Tangosol.Net.Messaging.Impl.Connection)">
            <summary>
            Called after a <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.Connection"/> has been successfully
            established.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
            <param name="connection">
            The <b>Connection</b> that was opened.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.OnExit">
            <summary>
            Event notification called right before the daemon thread
            terminates.
            </summary>
            <remarks>
            This method is guaranteed to be called only once and on the
            daemon's thread.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.OnServiceStopped">
            <summary>
            The default implementation of this method sets
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.IsAcceptingClients"/> to <b>false</b>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.OnServiceStopping">
            <summary>
            The default implementation of this method sets
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Service.IsAcceptingClients"/> to <b>false</b>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.Ping">
            <summary>
            Ping the <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.Connection"/>(s) managed by this
            <b>IConnectionManager</b>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.m_protocol">
            <summary>
            Protocol.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.f_setCloseOnExit">
            <summary>
            A set of <see cref="T:System.IDisposable"/> to close on exit.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.CloseOnExit">
            <summary>
            A set of <see cref="T:System.IDisposable"/> to close on exit.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.Connection">
            <summary>
            The <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.Connection"/> managed by this
            IConnectionInitiator.
            </summary>
            <value>
            The <b>Connection</b> managed by this IConnectionInitiator.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.ConnectTimeout">
            <summary>
            The maximum amount of time (in milliseconds) that the
            IConnectionInitiator will wait for a new <b>Connection</b> to be
            established.
            </summary>
            <remarks>
            If 0, the IConnectionInitiator will wait indefinitely. This
            property defaults to the value of the
            <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Peer.RequestTimeout"/>.
            </remarks>
            <value>
            The maximum amount of time (in milliseconds) that the
            IConnectionInitiator will wait for a new <b>Connection</b> to be
            established.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.Protocol">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IProtocol"/> understood by the IReceiver.
            </summary>
            <remarks>
            Only <b>IChannel</b> objects with the specified <b>IProtocol</b>
            can be registered with this IReceiver.
            </remarks>
            <value>
            The <b>IProtocol</b> used by this IReceiver.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator.Description">
            <summary>
            Human-readable description of additional Service properties.
            </summary>
            <remarks>
            Used by <see cref="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ToString"/>.
            </remarks>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.MessagingFactory">
            <summary>
            Implementation of
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingFactory"/>
            specific for <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator"/>.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingFactory">
            <summary>
            <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> implementation for version 2 of the
            MessagingProtocol.
            </summary>
            <remarks>
            <p>
            This <b>IMessageFactory</b> contains <see cref="T:Tangosol.Net.Messaging.IMessage"/>
            classes necessary to manage the lifecycle of
            <see cref="T:Tangosol.Net.Messaging.IConnection"/>s and <see cref="T:Tangosol.Net.Messaging.IChannel"/>s.</p>
            <p>
            The type identifiers of the <b>IMessage</b> classes instantiated
            by this <b>IMessageFactory</b> are organized as follows:</p>
            <p>
            Internal (&lt;0):<br/>
            (-1)  <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannel"/><br/>
            (-2)  <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseChannel"/><br/>
            (-3)  <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CloseConnection"/><br/>
            (-4)  <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.CreateChannel"/><br/>
            (-5)  <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyShutdown"/><br/>
            (-6)  <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyStartup"/><br/>
            (-7)  <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel"/><br/>
            (-8)  <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnection"/><br/>
            (-9)  <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.InternalResponse"/><br/>
            (-10) <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.EncodedMessage"/></p>
            <p>
            Connection Lifecycle (0 - 10):<br/>
            (0)  <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionResponse"/> (*)<br/>
            (1)  <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest"/><br/>
            (3)  <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingRequest"/><br/>
            (4)  <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingResponse"/><br/>
            (10) <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyConnectionClosed"/></p>
            <p>
            The <b>OpenConnectionResponse</b> has type identifier 0 for
            historical reasons. Prior to version 2 of the Messaging Protocol,
            all Request messages used a common <see cref="T:Tangosol.Net.Messaging.IResponse"/> type
            with type identifier 0. Since the first <b>IResponse</b> that a
            client expects to receive is an <b>OpenConnectionResponse</b>,
            this allows version 2 and newer servers to reject connection
            attempts from version 1 clients.</p>
            <p>
            Channel Lifecycle (11-20):<br/>
            (11) <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest"/><br/>
            (12) <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelResponse"/><br/>
            (13) <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelRequest"/><br/>
            (14) <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.AcceptChannelResponse"/><br/>
            (20) <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyChannelClosed"/></p>p&gt;
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingFactory.MESSAGE_OFFSET">
            <summary>
            Offset to allow for the internal (negative) <b>Message</b>
            types.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingFactory.#ctor">
            <summary>
            Initialize an array of <see cref="T:Tangosol.Net.Messaging.Impl.Message"/> subclasses that
            can be created by this factory.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingFactory.GetMessageType(System.Int32)">
            <summary>
            Type of the class that is subclass of the <b>Message</b> with
            specified type identifier.
            </summary>
            <param name="typeId">
            The type identifier of class that is subclass of the
            <b>Message</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingFactory.SetMessageType(System.Int32,System.Type)">
            <summary>
            Adds class that is subclass of the <b>Message</b> to the
            array of subclasses that can be created by this
            MessageFactory.
            </summary>
            <param name="typeId">
            Array index at which class should be inserted. It is also
            type identifier.
            </param>
            <param name="cls">
            Class to be inserted into array of subclasses.
            </param>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingFactory.messagingTypes">
            <summary>
            An array of <b>Message</b> subclasses that can be created by
            this factory.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.MessagingFactory.#ctor">
            <summary>
            Initialize an array of <see cref="T:Tangosol.Net.Messaging.Impl.Message"/> subclasses that
            can be created by this factory.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.MessagingProtocol">
            <summary>
            Implementation of
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingProtocol"/>
            specific for <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator"/>.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingProtocol">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IProtocol"/> used by the
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> to manage the lifecycle of
            <see cref="T:Tangosol.Net.Messaging.IConnection"/> and <see cref="T:Tangosol.Net.Messaging.IChannel"/> objects.
            </summary>
            <remarks>
            The name of this Protocol is "MessagingProtocol".
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingProtocol.PROTOCOL_NAME">
            <summary>
            The name of this Protocol.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingProtocol.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingProtocol.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingProtocol.InstantiateMessageFactory(System.Int32)">
            <summary>
            Instantiate a new <b>MessageFactory</b> for the given version of
            this Protocol.
            </summary>
            <param name="version">
            The version of the Protocol that the returned
            <b>MessageFactory</b> will use.
            </param>
            <returns>
            A new <b>MessageFactory</b> for the given version of this
            Protocol.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingProtocol.m_instance">
            <summary>
            The singleton Protocol instance.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingProtocol.Instance">
            <summary>
            The singleton Peer MessagingProtocol instance.
            </summary>
            <value>
            The singleton Peer MessagingProtocol instance.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.MessagingProtocol.Name">
            <summary>
            Gets the unique name of this Protocol.
            </summary>
            <value>
            The Protocol name.
            </value>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.MessagingProtocol.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.MessagingProtocol.InstantiateMessageFactory(System.Int32)">
            <summary>
            Instantiate a new <b>MessageFactory</b> for the given version of
            this Protocol.
            </summary>
            <param name="version">
            The version of the Protocol that the returned
            <b>MessageFactory</b> will use.
            </param>
            <returns>
            A new <b>MessageFactory</b> for the given version of this
            Protocol.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.MessagingProtocol.m_instance">
            <summary>
            The singleton Protocol instance.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.MessagingProtocol.Instance">
            <summary>
            The singleton Initiator MessagingProtocol instance.
            </summary>
            <value>
            The singleton Initiator MessagingProtocol instance.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.OpenConnection">
            <summary>
            Implementation of
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnection"/>
            specific for <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator"/>.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnection">
            <summary>
            Internal <see cref="T:Tangosol.Net.Messaging.IRequest"/> used to open an
            <see cref="T:Tangosol.Net.Messaging.IConnection"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnection.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnection.InstantiateResponse(Tangosol.Net.Messaging.IMessageFactory)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> for this
            IRequest.
            </summary>
            <param name="factory">
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that must be used to create the
            returned <b>IResponse</b>; never <c>null</c>.
            </param>
            <returns>
            A new <b>Response</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnection.m_connectionOpen">
            <summary>
            The Connection to open.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnection.m_identityToken">
            <summary>
            A token representing a user's identity.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnection.m_principal">
            <summary>
            The identity under which IMessages received by "Channel0" will be 
            executed.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnection.ConnectionOpen">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> to open.
            </summary>
            <value>
            The <b>Connection</b> to open.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnection.IdentityToken">
            <summary>
            The token representing a user's identity.
            </summary>
            <value>
            The token representing a user's identity.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnection.Principal">
            <summary>
            The identity under which messages received by "Channel0" will be 
            executed.
            </summary>
            <value>
            The identity under which messages received by "Channel0" will be 
            executed.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnection.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.OpenConnection.OnRun(Tangosol.Net.Messaging.Impl.Response)">
            <summary>
            Process this IRequest and update the given <b>Response</b> with
            the result.
            </summary>
            <remarks>
            Implementations of this method are free to throw an exception
            while processing the IRequest. An exception will result in the
            <b>Response</b> being marked as a failure that the
            <b>Response</b> result will be the exception itself.
            </remarks>
            <param name="response">
            The <b>Response</b> that will be sent back to the requestor.
            </param>
            <exception cref="T:System.Exception">
            If exception occurs during execution.
            </exception>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.OpenConnectionRequest">
            <summary>
            Implementation of
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest"/>
            specific for <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator"/>.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest">
            <summary>
            This <see cref="T:Tangosol.Net.Messaging.IRequest"/> is used to open a new
            <see cref="T:Tangosol.Net.Messaging.IConnection"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.InstantiateResponse(Tangosol.Net.Messaging.IMessageFactory)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> for this
            IRequest.
            </summary>
            <param name="factory">
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that must be used to create the
            returned <b>IResponse</b>; never <c>null</c>.
            </param>
            <returns>
            A new <b>Response</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading
            its state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/>
            object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's
            state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing
            its state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/>
            object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's
            state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.m_clientId">
            <summary>
            The unique identifier (UUID) of the client that sent this
            Request.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.m_edition">
            <summary>
            The product edition used by the client.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.m_identityToken">
            <summary>
            An optional token representing a user identity to associate with
            "Channel0".
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.m_member">
            <summary>
            The IMember object of the client that sent this request.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.m_principal">
            <summary>
            The identity under which IMessages received by the new IChannel
            will be executed.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.m_protocolVersionMap">
            <summary>
            A map of required Protocols. The keys are the names of the
            required Protocols and the values are two element Int32 arrays,
            the first element being the current version and the second being
            the supported version of the corresponding Protocol.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.ClientId">
            <summary>
            The unique identifier <see cref="T:Tangosol.Util.UUID"/> of the client that sent
            this <b>Request</b>.
            </summary>
            <value>
            The <b>UUID</b> of the client that sent this <b>Request</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.ClusterName">
            <summary>
            The name of the cluster the peer wishes to connect to.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.Edition">
            <summary>
            The product edition used by the client.
            </summary>
            <value>
            The product edition used by the client.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.IdentityToken">
            <summary>
            An optional token representing a user identity to associate
            with "Channel0".
            </summary>
            <remarks>
            Operations performed on receipt of <b>IMessages</b> sent via 
            "Channel0" will be performed on behalf of this identity.
            </remarks>
            <value>
            Token representing a user identity.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.Member">
            <summary>
            The IMember object <see cref="T:Tangosol.Net.IMember"/> of the client that sent
            this <b>Request</b>.
            </summary>
            <value>
            The <b>IMember</b> object of the client that sent this <b>Request</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.Principal">
            <summary>
            The identity under which messages received by "Channel0" will be 
            executed.
            </summary>
            <value>
            The identity under which messages received by "Channel0" will be 
            executed.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.ProtocolVersionMap">
            <summary>
            A map of required <see cref="T:Tangosol.Net.Messaging.IProtocol"/>s.
            </summary>
            <remarks>
            The keys are the names of the required <b>IProtocol</b>s and the
            values are two element Int32 arrays, the first element being the
            current version and the second being the supported version of the
            corresponding Protocol.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.ServiceName">
            <summary>
            The name of the service the peer wishes to connect to.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> 
            object's class.
            </value>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.OpenConnectionRequest.OnRun(Tangosol.Net.Messaging.Impl.Response)">
            <summary>
            Process this IRequest and update the given <b>Response</b> with
            the result.
            </summary>
            <remarks>
            Implementations of this method are free to throw an exception
            while processing the IRequest. An exception will result in the
            <b>Response</b> being marked as a failure that the
            <b>Response</b> result will be the exception itself.
            </remarks>
            <param name="response">
            The <b>Response</b> that will be sent back to the requestor.
            </param>
            <exception cref="T:System.Exception">
            If exception occurs during execution.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.OpenConnectionRequest.m_connectionOpen">
            <summary>
            The Connection to open.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.OpenConnectionRequest.ConnectionOpen">
            <summary>
            The Connection to open.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.OpenConnectionResponse">
            <summary>
            Implementation of
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionResponse"/>
            specific for <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.Initiator"/>.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionResponse">
            <summary>
            <see cref="T:Tangosol.Net.Messaging.IResponse"/> to an
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionResponse.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionResponse.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading
            its state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/>
            object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's
            state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionResponse.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing
            its state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/>
            object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's
            state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionResponse.m_protocolVersionMap">
            <summary>
            A map of negotiated Protocols. The keys are the names of the
            required Protocols and the values are the negotiated version 
            numbers of the corresponding Protocol.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionResponse.ProtocolVersionMap">
            <summary>
            A map of negotiated <see cref="T:Tangosol.Net.Messaging.IProtocol"/>s.
            </summary>
            <remarks>
            The keys are the names of the negotiated <b>IProtocol</b>s and
            the values are the negotiated version numbers of the corresponding
            Protocol.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionResponse.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.OpenConnectionResponse.Run">
            <summary>
            Execute the action specific to the Message implementation.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator">
            <summary>
             A <see cref="T:Tangosol.Net.Messaging.IConnectionInitiator"/> implementation that initiates
            <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/> over TCP/IP.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.Configure(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Configure the controllable service.
            </summary>
            <remarks>
            <p/>
            This method can only be called before the controllable service
            is started.
            </remarks>
            <param name="xml">
            An <see cref="T:Tangosol.Run.Xml.IXmlElement"/> carrying configuration information
            specific to the IControllable object.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the service is already running.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the configuration information is invalid.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.InstantiateConnection">
            <summary>
            Factory method: create a new <see cref="T:Tangosol.Net.Messaging.Impl.Connection"/>.
            </summary>
            <remarks>
            Implementations must configure the <b>Connection</b> with a
            reference to this <b>IConnectionManager</b>.
            </remarks>
            <returns>
            A new <b>Connection</b> object that has yet to be opened.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.OpenConnection">
            <summary>
            Open and return a new Connection.
            </summary>
            <returns>
            A newly opened Connection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.ConfigureSocket(System.Net.Sockets.TcpClient)">
            <summary>
            Configure the given <b>TcpClient</b>.
            </summary>
            <param name="client">
            The <b>Socket</b> to configure.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.InstantiateClient">
            <summary>
            Factory method: create and configure a new <b>Socket</b>.
            </summary>
            <returns>
            A new <b>Socket</b>.
            </returns>s
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.ParseLocalSocketAddress(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Parse the given <b>IXmlElement</b> as a local <b>IPEndPoint</b>.
            </summary>
            <remarks>
            If the specified <b>IXmlElement</b> contains an empty address,
            <c>null</c> is returned.
            </remarks>
            <param name="xml">
            The <b>IXmlElement</b> to parse.
            </param>
            <returns>
            A new <b>IPEndPoint</b> representing the contents of the given
            <b>XmlNode</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.m_protocol">
            <summary>
            Protocol.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.IsKeepAliveEnabled">
            <summary>
            Indicates whether or not <b>KeepAlive</b> is enabled on
            <b>Socket</b> objects created by this TcpInitiator.
            </summary>
            <value>
            <b>true</b> if <b>KeepAlive</b> is enabled on <b>Socket</b>
            objects created by this TcpInitiator.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.IsLocalAddressReusable">
            <summary>
            Indicates if <b>Socket</b> objects created by this TcpInitiator
            that are explicitly bound to a local <b>IPEndPoint</b> will be
            bound even if a previously bound <b>Socket</b> is in a timeout
            state.
            </summary>
            <value>
            <b>true</b> if <b>Socket</b> objects created by this TcpInitiator
            that are explicitly bound to a local <b>IPEndPoint</b> will be
            bound even if a previously bound <b>Socket</b> is in a timeout
            state, <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.IsTcpDelayEnabled">
            <summary>
            Indicates whether or not TCP delay (Nagle's algorithm) is enabled
            on <b>Socket</b> objects created by this TcpInitiator.
            </summary>
            <value>
            <b>true</b> if TCP delay is enabled on <b>Socket</b> objects
            created by this TcpInitiator, <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.LingerTimeout">
            <summary>
            The linger timeout of a <b>Socket</b> created by this
            TcpInitiator.
            </summary>
            <remarks>
            If negative, linger will be disabled. If 0, the default value
            will be used.
            </remarks>
            <value>
            Linger timeout value.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.LocalAddress">
            <summary>
            The local <b>IPEndPoint</b> that all <b>Socket</b> objects
            created by this TcpInitiator will be bound to.
            </summary>
            <remarks>
            If <c>null</c>, an <b>IPEndPoint</b> created from an ephemeral
            port and a valid local address will be used.
            </remarks>
            <value>
            The local <b>IPEndPoint</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.Protocol">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IProtocol"/> understood by the IReceiver.
            </summary>
            <remarks>
            Only <b>IChannel</b> objects with the specified <b>IProtocol</b>
            can be registered with this IReceiver.
            </remarks>
            <value>
            The <b>IProtocol</b> used by this IReceiver.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.ReceiveBufferSize">
            <summary>
            The size of the receive buffer (in bytes) of all <b>Socket</b>
            objects created by this TcpInitiator.
            </summary>
            <remarks>
            If 0 or negative, the default receive buffer size will be used.
            </remarks>
            <value>
            The size of the receive buffer (in bytes).
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.RemoteAddressProvider">
            <summary>
            The <see cref="T:Tangosol.Net.IAddressProvider"/> used by the TcpInitiator to
            obtain the address(es) of the remote TcpAcceptor(s) that it will
            connect to.
            </summary>
            <value>
            An <b>IAddressProvider</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.SendBufferSize">
            <summary>
            The size of the send buffer (in bytes) of all <b>Socket</b>
            objects created by this TcpInitiator.
            </summary>
            <remarks>
            If 0 or negative, the default send buffer size will be used.
            </remarks>
            <value>
            The size of the send buffer (in bytes).
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.StreamProvider">
            <summary>
            Get or sets the current StreamProvider.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.IsNameService">
            <summary>
            Whether the remote AddressProvider is for connections to a NameService.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.Subport">
            <summary>
            The subport to connect to.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.Description">
            <summary>
            Human-readable description of additional Service properties.
            </summary>
            <remarks>
            Used by <see cref="M:Tangosol.Util.Daemon.QueueProcessor.Service.Service.ToString"/>.
            </remarks>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection">
            <summary>
            Implementation of <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.CloseInternal(System.Boolean,System.Exception,System.Int32)">
            <summary>
            The <see cref="M:Tangosol.Net.Messaging.Impl.Connection.Close"/> implementation method.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
            <param name="notify">
            if <b>true</b>, notify the peer that the Connection is being
            closed.
            </param>
            <param name="e">
            The optional reason why the Connection is being closed.
            </param>
            <param name="millis">
            The number of milliseconds to wait for the Connection to close;
            pass 0 to perform a non-blocking close or -1 to wait forever.
            </param>
            <returns>
            <b>true</b> if the invocation of this method closed the
            Connection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.OpenInternal">
            <summary>
            The <see cref="M:Tangosol.Net.Messaging.Impl.Connection.Open"/> implementation method.
            </summary>
            <remarks>
            This method is called on the service thread.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.Send(Tangosol.IO.DataWriter)">
            <summary>
            Send the given <b>DataWriter</b> through this Connection.
            </summary>
            <param name="writer">
            The <b>DataWriter</b> to send.
            </param>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.m_stream">
            <summary>
            Stream to read/write data.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.IsRedirect">
            <summary>
            True if the TcpConnection should be redirected.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.IsSecure">
            <summary>
            True if the TcpConnection is an SSL connection.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.Reader">
            <summary>
            The Reader daemon that reads encoded <b>Message</b> objects
            from the <b>Socket</b> associated with this TcpConnection.
            </summary>
            <value>
            The Reader daemon that reads encoded <b>Messsage</b> objects
            from the <b>Socket</b> associated with this TcpConnection.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.RedirectList">
            <summary>
            A list of TCP/IP addresses that the TcpConnection should be
            redirected to. Each element of the list is a two element
            array, with the first element being the IP address in string
            format and the second being the port number.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.Stream">
            <summary>
            Stream to read/write data.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.TcpReader">
            <summary>
            The <see cref="T:Tangosol.Util.Daemon.Daemon"/> that is responsible for reading
            encoded <see cref="T:Tangosol.Net.Messaging.Impl.Message"/>s off the parent
            <b>TcpConnection</b> and dispatching them to the
            <b>TcpInitiator</b>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.TcpReader.#ctor(Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection)">
            <summary>
            Initialization constructor.
            </summary>
            <param name="connection">
            Parent <b>TcpConnection</b> object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.TcpReader.OnException(System.Exception)">
            <summary>
            This event occurs when an exception is thrown from
            <b>OnEnter</b>, <b>OnWait</b>, <b>OnNotify</b> and
            <b>OnExit</b>.
            </summary>
            <param name="e">
            Exception that has occured.
            </param>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.TcpReader.OnNotify">
            <summary>
            Event notification to perform a regular daemon activity.
            </summary>
            <remarks>
            To get it called, another thread has to set
            <see cref="P:Tangosol.Util.Daemon.Daemon.IsNotification"/> to <b>true</b>:
            <c>daemon.IsNotification = true;</c>
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.TcpReader.OnWait">
            <summary>
            Event notification called when the daemon's Thread is
            waiting for work.
            </summary>
            <seealso cref="M:Tangosol.Util.Daemon.Daemon.Run"/>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.TcpReader.Connection">
            <summary>
            Parent <b>TcpConnection</b> object.
            </summary>
            <value>
            <b>TcpConnection</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator.TcpConnection.TcpReader.ThreadName">
            <summary>
            Specifies the name of the daemon thread.
            </summary>
            <remarks>
            If not specified, the type name will be used. This
            property can be set at design time or runtime. If set at
            runtime, it must be configured before Start() is invoked
            to cause the daemon thread to have the specified name.
            </remarks>
            <value>
            The name of the daemon thread.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpMessagingFactory">
            <summary>
            Implementation of
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.MessagingFactory"/>
            specific for <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpMessagingFactory.#ctor">
            <summary>
            Initialize an array of <see cref="T:Tangosol.Net.Messaging.Impl.Message"/> subclasses that
            can be created by this factory.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpMessagingProtocol">
            <summary>
            Implementation of
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.MessagingProtocol"/>
            specific for <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpMessagingProtocol.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpMessagingProtocol.InstantiateMessageFactory(System.Int32)">
            <summary>
            Instantiate a new <b>MessageFactory</b> for the given version of
            this Protocol.
            </summary>
            <param name="version">
            The version of the Protocol that the returned
            <b>MessageFactory</b> will use.
            </param>
            <returns>
            A new <b>MessageFactory</b> for the given version of this
            Protocol.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpMessagingProtocol.m_instance">
            <summary>
            The singleton Protocol instance.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpMessagingProtocol.Instance">
            <summary>
            The singleton TcpMessagingProtocol instance.
            </summary>
            <value>
            The singleton TcpMessagingProtocol instance.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpOpenConnectionRequest">
            <summary>
            Implementation of
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenConnectionRequest"/>
            specific for <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpOpenConnectionRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading
            its state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/>
            object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's
            state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpOpenConnectionRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing
            its state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/>
            object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's
            state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpOpenConnectionRequest.ConnectionOpen">
            <summary>
            The Connection to open.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpOpenConnectionRequest.IsRedirectSupported">
            <summary>
            True if the TcpInitiator supports redirection.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpOpenConnectionRequest.IsRedirect">
            <summary>
            True if the TcpConnection is being opened in response to a
            redirection.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpOpenConnectionResponse">
            <summary>
            Implementation of
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.OpenConnectionResponse"/>
            specific for <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpInitiator"/>.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpOpenConnectionResponse.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpOpenConnectionResponse.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading
            its state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/>
            object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's
            state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpOpenConnectionResponse.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing
            its state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/>
            object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's
            state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpOpenConnectionResponse.Run">
            <summary>
            Execute the action specific to the Message implementation.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpOpenConnectionResponse.IsRedirect">
            <summary>
            True if the TcpConnection should be redirected.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.Initiator.TcpOpenConnectionResponse.RedirectList">
            <summary>
            A list of TCP/IP addresses that the TcpConnection should be 
            redirected to. Each element of the list is a two element 
            array, with the first element being the IP address in string 
            format and the second being the port number.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.InternalResponse">
            <summary>
            Generic <see cref="T:Tangosol.Net.Messaging.IResponse"/> used for all internal
            <see cref="T:Tangosol.Net.Messaging.IRequest"/>s.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.InternalResponse.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.InternalResponse.Run">
            <summary>
            Execute the action specific to the Message implementation.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.InternalResponse.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyChannelClosed">
            <summary>
            This <see cref="T:Tangosol.Net.Messaging.IMessage"/> is sent to the peer when a
            <see cref="T:Tangosol.Net.Messaging.IChannel"/> has been closed.
            </summary>
            <remarks>
            This allows the peer to collect any resources held by the
            <b>IChannel</b>.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyChannelClosed.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyChannelClosed.Run">
            <summary>
            Execute the action specific to the Message implementation.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyChannelClosed.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyChannelClosed.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyChannelClosed.m_cause">
            <summary>
            The optional reason why the IChannel was closed.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyChannelClosed.m_channelId">
            <summary>
            The identifier of the <b>IChannel</b> that was closed.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyChannelClosed.Cause">
            <summary>
            The optional reason why the <b>IChannel</b> was closed.
            </summary>
            <value>
            The <b>Exception</b> that was the reason why the
            <b>IChannel</b> was closed.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyChannelClosed.ChannelId">
            <summary>
            The identifier of the <b>IChannel</b> that was closed.
            </summary>
            <value>
            The identifier of the <b>IChannel</b> that was closed.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyChannelClosed.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyConnectionClosed">
            <summary>
            This <see cref="T:Tangosol.Net.Messaging.IMessage"/> is sent to the peer when a
            <see cref="T:Tangosol.Net.Messaging.IConnection"/> has been closed.
            </summary>
            <remarks>
            This allows the peer to collect any resources held by the
            <b>IConnection</b>.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyConnectionClosed.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyConnectionClosed.Run">
            <summary>
            Execute the action specific to the Message implementation.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyConnectionClosed.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyConnectionClosed.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyConnectionClosed.m_cause">
            <summary>
            The optional reason why the IConnection was closed.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyConnectionClosed.Cause">
            <summary>
            The optional reason why the <b>IConnection</b> was closed.
            </summary>
            <value>
            The <b>Exception</b> that was the reason why the
            <b>IConnection</b> was closed.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyConnectionClosed.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyShutdown">
            <summary>
            This internal <see cref="T:Tangosol.Net.Messaging.IMessage"/> is sent to a
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> it is supposed to shut down.
            </summary>
            <remarks>
            The <b>IConnectionManager</b> must clean up and unregister itself.
            Note that the only task of the shut-down is to begin the process of
            shutting down the service; technically the <b>IConnectionManager</b>
            does not have to be stopped by the time the shutdown message
            completes its processing, although the default implementation does
            stop it immediately.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyShutdown.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyShutdown.Run">
            <summary>
            Execute the action specific to the Message implementation.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyShutdown.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyStartup">
            <summary>
            This internal <see cref="T:Tangosol.Net.Messaging.IMessage"/> is sent to a
            <see cref="T:Tangosol.Net.Messaging.IConnectionManager"/> when it first has been started.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyStartup.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyStartup.Run">
            <summary>
            Execute the action specific to the Message implementation.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.NotifyStartup.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel">
            <summary>
            Internal <see cref="T:Tangosol.Net.Messaging.IRequest"/> used to open an
            <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.InstantiateResponse(Tangosol.Net.Messaging.IMessageFactory)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> for this IRequest.
            </summary>
            <param name="factory">
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that must be used to create the
            returned <b>Response</b>; never <c>null</c>.
            </param>
            <returns>
            A new <b>Response</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.OnRun(Tangosol.Net.Messaging.Impl.Response)">
            <summary>
            Process this IRequest and update the given <b>Response</b> with
            the result.
            </summary>
            <remarks>
            Implementations of this method are free to throw an exception
            while processing the IRequest. An exception will result in the
            <b>Response</b> being marked as a failure that the
            <b>Response</b> result will be the exception itself.
            </remarks>
            <param name="response">
            The <b>Response</b> that will be sent back to the requestor.
            </param>
            <exception cref="T:System.Exception">
            If exception occurs during execution.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.m_connection">
            <summary>
            The Connection used to opet the IChannel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.m_protocol">
            <summary>
            The IProtocol used by the new IChannel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.m_receiver">
            <summary>
            The optional IReceiver that the IChannel will register
            with.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.m_receiverName">
            <summary>
            The name of the remote IReceiver.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.m_principal">
            <summary>
            The identity under which IMessages received by the new IChannel
            will be executed.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.m_identityToken">
            <summary>
            A token representing a user's identity.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.Connection">
            <summary>
            The <see cref="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.Connection"/> used to opet the <b>IChannel</b>.
            </summary>
            <value>
            The <b>Connection</b> used to opet the <b>IChannel</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.Protocol">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IProtocol"/> used by the new <b>IChannel</b>.
            </summary>
            <value>
            The <b>IProtocol</b> used by the new <b>IChannel</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.Receiver">
            <summary>
            The optional <see cref="T:Tangosol.Net.Messaging.IReceiver"/> that the <b>IChannel</b>
            will register with.
            </summary>
            <value>
            The optional <b>IReceiver</b> that the <b>IChannel</b> will
            register with.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.ReceiverName">
            <summary>
            The name of the remote <see cref="T:Tangosol.Net.Messaging.IReceiver"/>.
            </summary>
            <value>
            The name of the remote <b>IReceiver</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.Principal">
            <summary>
            The identity under which messages received by the new
            <b>IChannel</b> will be executed.
            </summary>
            <value>
            The identity under which messages received by the new
            <b>IChannel</b> will be executed.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannel.IdentityToken">
            <summary>
            The token representing a user's identity.
            </summary>
            <value>
            The token representing a user's identity.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest">
            <summary>
            This <see cref="T:Tangosol.Net.Messaging.IRequest"/> used to open a new
            <see cref="T:Tangosol.Net.Messaging.IChannel"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.InstantiateResponse(Tangosol.Net.Messaging.IMessageFactory)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> for this IRequest.
            </summary>
            <param name="factory">
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that must be used to create the
            returned <b>Response</b>; never <c>null</c>.
            </param>
            <returns>
            A new <b>Response</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.OnRun(Tangosol.Net.Messaging.Impl.Response)">
            <summary>
            Process this IRequest and update the given <b>Response</b> with
            the result.
            </summary>
            <remarks>
            Implementations of this method are free to throw an exception
            while processing the IRequest. An exception will result in the
            <b>Response</b> being marked as a failure that the
            <b>Response</b> result will be the exception itself.
            </remarks>
            <param name="response">
            The <b>Response</b> that will be sent back to the requestor.
            </param>
            <exception cref="T:System.Exception">
            If exception occurs during execution.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.m_identityToken">
            <summary>
            An optional token representing a user identity to associate with
            the IChannel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.m_messageFactory">
            <summary>
            The IMessageFactory used by the new IChannel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.m_protocolName">
            <summary>
            The name of the Protocol that must be used by the peer
            IReceiver.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.m_receiver">
            <summary>
            The optional IReceiver that the IChannel will register
            with.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.m_receiverName">
            <summary>
            The name of the peer IReceiver to which the IChannel should be
            bound.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.m_serializer">
            <summary>
            The ISerializer used by the new IChannel.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.m_principal">
            <summary>
            The identity under which IMessages received by the new IChannel
            will be executed.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.IdentityToken">
            <summary>
            An optional token representing a user identity to associate
            with the <b>IChannel</b>.
            </summary>
            <remarks>
            Operations performed on receipt of <b>IMessages</b> sent via the
            newly established <b>IChannel</b> will be performed on behalf of
            this identity.
            </remarks>
            <value>
            Token representing a user identity.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.MessageFactory">
            <summary>
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> used by the new
            <b>IChannel</b>.
            </summary>
            <value>
            The <b>IMessageFactory</b> used by the new <b>IChannel</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.ProtocolName">
            <summary>
            The name of the <see cref="T:Tangosol.Net.Messaging.IProtocol"/> that must be used by the
            peer <see cref="T:Tangosol.Net.Messaging.IReceiver"/>.
            </summary>
            <value>
            The name of the <b>IProtocol</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.Receiver">
            <summary>
            The optional <see cref="T:Tangosol.Net.Messaging.IReceiver"/> that the <b>IChannel</b>
            will register with.
            </summary>
            <value>
            The optional <b>IReceiver</b> that the <b>IChannel</b> will
            register with.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.ReceiverName">
            <summary>
            The name of the peer <see cref="T:Tangosol.Net.Messaging.IReceiver"/> to which the
            <b>IChannel</b> should be bound.
            </summary>
            <value>
            The name of the peer <b>IReceiver</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.Serializer">
            <summary>
            The <see cref="T:Tangosol.IO.ISerializer"/> used by the new <b>IChannel</b>.
            </summary>
            <value>
            The <b>ISerializer</b> used by the new <b>IChannel</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.Principal">
            <summary>
            The identity under which messages received by the new
            <b>IChannel</b> will be executed.
            </summary>
            <value>
            The identity under which messages received by the new
            <b>IChannel</b> will be executed.
            </value>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b> object's
            class.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelResponse">
            <summary>
            <see cref="T:Tangosol.Net.Messaging.IResponse"/> to an
            <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelRequest"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelResponse.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelResponse.Run">
            <summary>
            Execute the action specific to the Message implementation.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.OpenChannelResponse.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingRequest">
            <summary>
            This <see cref="T:Tangosol.Net.Messaging.IRequest"/> is used to test the integrity of an
            <see cref="T:Tangosol.Net.Messaging.IConnection"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingRequest.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingRequest.InstantiateResponse(Tangosol.Net.Messaging.IMessageFactory)">
            <summary>
            Create a new <see cref="T:Tangosol.Net.Messaging.Impl.Response"/> for this IRequest.
            </summary>
            <param name="factory">
            The <see cref="T:Tangosol.Net.Messaging.IMessageFactory"/> that must be used to create the
            returned <b>Response</b>; never <c>null</c>.
            </param>
            <returns>
            A new <b>Response</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingRequest.OnRun(Tangosol.Net.Messaging.Impl.Response)">
            <summary>
            Process this IRequest and update the given <b>Response</b> with
            the result.
            </summary>
            <remarks>
            Implementations of this method are free to throw an exception
            while processing the IRequest. An exception will result in the
            <b>Response</b> being marked as a failure that the
            <b>Response</b> result will be the exception itself.
            </remarks>
            <param name="response">
            The <b>Response</b> that will be sent back to the requestor.
            </param>
            <exception cref="T:System.Exception">
            If exception occurs during execution.
            </exception>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingRequest.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingResponse">
            <summary>
            <see cref="T:Tangosol.Net.Messaging.IResponse"/> to a <see cref="T:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingRequest"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingResponse.TYPE_ID">
            <summary>
            The type identifier for this <b>Message</b> class.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingResponse.Run">
            <summary>
            Execute the action specific to the Message implementation.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Daemon.QueueProcessor.Service.Peer.PingResponse.TypeId">
            <summary>
            Return the identifier for <b>Message</b> object's class.
            </summary>
            <value>
            An identifier that uniquely identifies <b>Message</b>
            object's class.
            </value>
        </member>
        <member name="T:Tangosol.Util.Daemon.QueueProcessor.Service.ServiceState">
            <summary>
            Service state enum.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.ServiceState.Initial">
            <summary>
            The Service has been created but has not been started yet.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.ServiceState.Starting">
            <summary>
            The Service has been asked to start but has not yet finished
            starting.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.ServiceState.Started">
            <summary>
            The Service is running.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.ServiceState.Stopped">
            <summary>
            The Service has shut down gracefully (Shutdown method) or has
            been stopped hard (Stop method).
            </summary>
        </member>
        <member name="F:Tangosol.Util.Daemon.QueueProcessor.Service.ServiceState.Stopping">
            <summary>
            The Service has been asked to shut down gracefully but has
            not yet finished shutting down gracefully.
            </summary>
        </member>
        <member name="T:Tangosol.Util.DateTimeUtils">
            <summary>
            Miscellaneuos utility methods for DateTime manipulation.
            </summary>
            <author>Ana Cikic  2006.08.22</author>
        </member>
        <member name="M:Tangosol.Util.DateTimeUtils.GetSafeTimeMillis">
            <summary>
            Returns a "safe" current time in milliseconds.
            </summary>
            <remarks>
            This method guarantees that the time never "goes back".
            More specifically, when called twice on the same thread, the
            second call will never return a value that is less then the value
            returned by the first call. If a system time correction becomes
            necessary, an attempt will be made to gradually compensate the
            returned value, so in the long run the value returned by this
            method is the same as the system time.
            </remarks>
            <returns>
            The difference, measured in milliseconds, between the corrected
            current time and midnight, January 1, 0001.
            </returns>
        </member>
        <member name="M:Tangosol.Util.DateTimeUtils.GetLastSafeTimeMillis">
            <summary>
            Returns the last "safe" time as computed by a previous call to the
            GetSafeTimeMillis method.
            Note: Since the underlying field is non-volatile, the returned
            value is only guaranteed to be no less than the last value returned
            by GetSafeTimeMillis() call on the same thread.
            </summary>
            <returns>
            The last "safe" time in milliseconds.
            </returns>
        </member>
        <member name="M:Tangosol.Util.DateTimeUtils.IsBeforeTheEpoch(System.Int64)">
            <summary>
            Return whether the passed in time in milliseconds is before the
            epoch (Jan 1, 1970).
            </summary>
            <param name="timeMillis">
            A timestamp in milliseconds since 1/1/0001.
            </param>
            <returns>
            True if the passed in time in milliseconds is before the
            epoch (Jan 1, 1970).
            </returns>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="M:Tangosol.Util.DateTimeUtils.GetTimeMillisSinceTheEpoch(System.Int64)">
            <summary>
            Convert the passed in time in milliseconds from time since 1/1/0001
            to time since the epoch (Jan 1, 1970).
            </summary>
            <param name="timeMillis">
            A timestamp in milliseconds since 1/1/0001.
            </param>
            <returns>
            The passed in time converted to milliseconds since the
            epoch (Jan 1, 1970).
            </returns>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="M:Tangosol.Util.DateTimeUtils.GetTimeMillisFromEpochBasedTime(System.Int64)">
            <summary>
            Convert the passed in time in milliseconds from time since the
            epoch (Jan 1, 1970) to time since 1/1/0001.
            </summary>
            <param name="timeMillis">
            A timestamp in milliseconds since the epoch (Jan 1, 1970).
            </param>
            <returns>
            The passed in time converted to milliseconds since the
            1/1/0001.
            </returns>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="M:Tangosol.Util.DateTimeUtils.GetDateTime(System.Int64)">
            <summary>
            Convert the passed in time in milliseconds to a DateTime object.
            </summary>
            <param name="timeMillis">
            A timestamp in milliseconds since the 1/1/0001.
            </param>
            <returns>
            A corresponding DateTime object for the passed in time in milliseconds.
            </returns>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="F:Tangosol.Util.DateTimeUtils.s_safeClock">
            <summary>
            The SafeClock
            </summary>
        </member>
        <member name="F:Tangosol.Util.DateTimeUtils.s_theEpoch">
            <summary>
            Timestamp in milliseconds of the epoch (Jan 1, 1970)
            </summary>
        </member>
        <member name="T:Tangosol.Net.Cache.Support.DisposableCacheListener">
            <summary>
            Utility listener that checks if the value removed from the cache
            implements <c>IDisposable</c>, and calls <c>Dispose</c> method
            if it does.
            </summary>
            <author>Aleksandar Seovic  2010.04.06</author>
        </member>
        <member name="M:Tangosol.Net.Cache.Support.DisposableCacheListener.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="T:Tangosol.Util.Extractor.AbstractCompositeExtractor">
            <summary>
            Abstract base class for <see cref="T:Tangosol.Util.IValueExtractor"/> implementations
            that are based on an underlying array of <b>IValueExtractor</b>
            objects.
            </summary>
            <author>Gene Gleyzer  2006.02.08</author>
            <author>Ivan Cikic  2006.10.20</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="T:Tangosol.Util.Extractor.AbstractExtractor">
            <summary>
            Abstract base for <see cref="T:Tangosol.Util.IValueExtractor"/> implementations.
            </summary>
            <remarks>
            It provides common functionality that allows any extending extractor
            to be used as a value Comparer.
            <p>
            Starting with Coherence 3.5, when used to extract information that is
            coming from a <see cref="T:Tangosol.Net.Cache.ICache"/>, subclasses have the additional
            ability to operate against the <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> instead of
            just the value. In other words, like the <see cref="T:Tangosol.Util.Extractor.EntryExtractor"/>
            class, this allows an extractor implementation to extract a desired
            value using all available information on the corresponding
            <b>ICacheEntry</b> object and is intended to be used in advanced
            custom scenarios, when application code needs to look at both key and
            value at the same time or can make some very specific assumptions
            regarding to the implementation details of the underlying Entry
            object. To maintain full backwards compatibility, the default behavior
            remains to extract from the Value property of the <b>ICacheEntry</b>.
            </p>
            <p>
            <b>Note:</b> Subclasses are responsible for initialization and POF and/or
            Lite serialization of the <see cref="F:Tangosol.Util.Extractor.AbstractExtractor.m_target"/> field.
            </p>
            </remarks>
            <author>Gene Gleyzer  2003.09.22</author>
            <author>Ana Cikic  2006.09.12</author>
        </member>
        <member name="T:Tangosol.Util.IValueExtractor">
            <summary>
            IValueExtractor is used to both extract values (for example, for
            sorting or filtering) from an object, and to provide an identity for
            that extraction.
            </summary>
            <remarks>
            <b>Important Note:</b> all classes that implement IValueExtractor
            interface must explicitly implement the <see cref="M:Tangosol.Util.IValueExtractor.GetHashCode"/> and
            <see cref="M:Tangosol.Util.IValueExtractor.Equals(System.Object)"/> methods in a way that is based solely on the
            object's serializable state.
            </remarks>
            <author>Cameron Purdy, Gene Gleyzer  2002.10.31</author>
            <author>Aleksandar Seovic  2006.07.12</author>
        </member>
        <member name="M:Tangosol.Util.IValueExtractor.Extract(System.Object)">
            <summary>
            Extract the value from the passed object.
            </summary>
            <remarks>
            The returned value may be <c>null</c>.
            </remarks>
            <param name="target">
            An object to retrieve the value from.
            </param>
            <returns>
            The extracted value as an object; <c>null</c> is an acceptable
            value.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If this IValueExtractor is incompatible with the passed object to
            extract a value from and the implementation <b>requires</b> the
            passed object to be of a certain type.
            </exception>
            <exception cref="T:System.ArgumentException">
            If this IValueExtractor cannot handle the passed object for any
            other reason; an implementor should include a descriptive
            message.
            </exception>
        </member>
        <member name="M:Tangosol.Util.IValueExtractor.Equals(System.Object)">
            <summary>
            Compare the IValueExtractor with another object to determine
            equality.
            </summary>
            <remarks>
            Two IValueExtractor objects, <i>ve1</i> and <i>ve2</i> are
            considered equal if <b>ve1.Extract(o)</b> equals
            <b>ve2.Extract(o)</b> for all values of <b>o</b>.
            </remarks>
            <param name="o">
            The reference object with which to compare.
            </param>
            <returns>
            <b>true</b> if this IValueExtractor and the passed object are
            equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.Util.IValueExtractor.GetHashCode">
            <summary>
            Determine a hash value for the IValueExtractor object according
            to the general <b>object.GetHashCode</b> contract.
            </summary>
            <returns>
            An integer hash value for this IValueExtractor object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.IValueExtractor.ToString">
            <summary>
            Provide a human-readable description of this IValueExtractor
            object.
            </summary>
            <returns>
            A human-readable description of this IValueExtractor object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.AbstractExtractor.Extract(System.Object)">
            <summary>
            Extract the value from the passed object.
            </summary>
            <remarks>
            The returned value may be <c>null</c>.
            </remarks>
            <param name="obj">
            An object to retrieve the value from.
            </param>
            <returns>
            The extracted value as an object; <c>null</c> is an acceptable
            value.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If this IValueExtractor is incompatible with the passed object to
            extract a value from and the implementation <b>requires</b> the
            passed object to be of a certain type.
            </exception>
            <exception cref="T:System.ArgumentException">
            If this AbstractExtractor cannot handle the passed object for any
            other reason; an implementor should include a descriptive
            message.
            </exception>
            <seealso cref="M:Tangosol.Util.IValueExtractor.Extract(System.Object)"/>
        </member>
        <member name="M:Tangosol.Util.Extractor.AbstractExtractor.Compare(System.Object,System.Object)">
            <summary>
            Compares its two arguments for order.
            </summary>
            <remarks>
            Returns a negative integer, zero, or a positive integer as the
            first argument is less than, equal to, or greater than the
            second. <c>null</c> values are evaluated as "less then" any
            non-null value.
            </remarks>
            <param name="o1">
            The first object to be compared.
            </param>
            <param name="o2">
            The second object to be compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as the first
            argument is less than, equal to, or greater than the second.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.AbstractExtractor.CompareEntries(Tangosol.Net.Cache.IQueryCacheEntry,Tangosol.Net.Cache.IQueryCacheEntry)">
            <summary>
            Compare two entries.
            </summary>
            <param name="entry1">
            The first entry to compare values from; read-only.
            </param>
            <param name="entry2">
            The second entry to compare values from; read-only.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as the first
            entry denotes a value that is is less than, equal to, or greater
            than the value denoted by the second entry
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the arguments' types prevent them from being compared by this
            <b>IComparer</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the extractor cannot handle the passed objects for any other
            reason; an implementor should include a descriptive message.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.AbstractExtractor.ExtractFromEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Extract the value from the passed Entry object. The returned 
            value should follow the conventions outlined in the 
            <see cref="M:Tangosol.Util.Extractor.AbstractExtractor.Extract(System.Object)"/> method.
            </summary>
            <remarks>
            By overriding this method, an extractor implementation is able
            to extract a desired value using all available information on the
            corresponding ICacheEntry object and is intended to be used in 
            advanced custom scenarios, when application code needs to look at
            both key and value at the same time or can make some very 
            specific assumptions regarding to the implementation details of
            the underlying Entry object.
            </remarks>
            <param name="entry">An Entry object to extract a desired value from</param>
            <returns>The extracted value</returns>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.Util.Extractor.AbstractExtractor.ExtractOriginalFromEntry(Tangosol.Net.Cache.CacheEntry)">
            <summary>
            Extract the value from the "original value" of the passed 
            CacheEntry object or the key (if targeted). This method's conventions are exactly the same
            as the <see cref="M:Tangosol.Util.Extractor.AbstractExtractor.ExtractFromEntry(Tangosol.Net.Cache.ICacheEntry)"/> method.
            </summary>
            <param name="entry">
            A CacheEntry object whose original value should be used to 
            extract the desired value from.
            </param>
            <returns>
            The extracted value or null if the original value is not present.
            </returns>
            <since>Coherence 3.7</since>
        </member>
        <member name="F:Tangosol.Util.Extractor.AbstractExtractor.VALUE">
            <summary>
            Indicates that the <see cref="M:Tangosol.Util.Extractor.AbstractExtractor.ExtractFromEntry(Tangosol.Net.Cache.ICacheEntry)"/> operation
            should use the Entry's value.
            </summary>
            <since>Coherence 3.5</since>
        </member>
        <member name="F:Tangosol.Util.Extractor.AbstractExtractor.KEY">
            <summary>
            Indicates that the <see cref="M:Tangosol.Util.Extractor.AbstractExtractor.ExtractFromEntry(Tangosol.Net.Cache.ICacheEntry)"/> operation
            should use the Entry's value.
            </summary>
            <since>Coherence 3.5</since>
        </member>
        <member name="F:Tangosol.Util.Extractor.AbstractExtractor.m_target">
            <summary>
            Specifies which part of the entry should be used by the
            <see cref="M:Tangosol.Util.Extractor.AbstractExtractor.ExtractFromEntry(Tangosol.Net.Cache.ICacheEntry)"/> operation. Legal values are
            <see cref="F:Tangosol.Util.Extractor.AbstractExtractor.VALUE"/> (default) or <see cref="F:Tangosol.Util.Extractor.AbstractExtractor.KEY"/>.
            </summary>
            <remarks>
            Subclasses are responsible for initialization and POF and/or
            Lite serialization of this field.
            </remarks>
            <since>Coherence 3.5</since>
        </member>
        <member name="P:Tangosol.Util.Extractor.AbstractExtractor.Target">
            <summary>
            The target of the extractor.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="M:Tangosol.Util.Extractor.AbstractCompositeExtractor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Extractor.AbstractCompositeExtractor.#ctor(Tangosol.Util.IValueExtractor[])">
            <summary>
            Construct a <b>AbstractCompositeExtractor</b> based on the
            specified <see cref="T:Tangosol.Util.IValueExtractor"/> array.
            </summary>
            <param name="extractors">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> array.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.AbstractCompositeExtractor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.AbstractCompositeExtractor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.AbstractCompositeExtractor.Equals(System.Object)">
            <summary>
            Compare the <b>AbstractCompositeExtractor</b> with another object
            to determine equality.
            </summary>
            <remarks>
            Two <b>AbstractCompositeExtractor</b> objects are considered
            equal iff they belong to the same class and their underlying
            <see cref="T:Tangosol.Util.IValueExtractor"/> arrays are deep-equal.
            </remarks>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <b>AbstractCompositeExtractor</b> and the
            passed object are equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.AbstractCompositeExtractor.GetHashCode">
            <summary>
            Determine a hash value for the AbstractCompositeExtractor object
            according to the general <b>object.GetHashCode</b> contract.
            </summary>
            <returns>
            An integer hash value for this <see cref="T:Tangosol.Util.IValueExtractor"/>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.AbstractCompositeExtractor.ToString">
            <summary>
            Return a human-readable description for this
            <see cref="T:Tangosol.Util.IValueExtractor"/>.
            </summary>
            <returns>
            A <b>String</b> description of the <see cref="T:Tangosol.Util.IValueExtractor"/>.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Extractor.AbstractCompositeExtractor.EMPTY_EXTRACTOR_ARRAY">
            <summary>
            Empty array of <see cref="T:Tangosol.Util.IValueExtractor"/> objects.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.AbstractCompositeExtractor.m_extractors">
            <summary>
            The <see cref="T:Tangosol.Util.IValueExtractor"/> array.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Extractor.AbstractCompositeExtractor.Extractors">
            <summary>
            Obtain the <see cref="T:Tangosol.Util.IValueExtractor"/> array.
            </summary>
            <value>
            The <b>IValueExtractor</b> array.
            </value>
        </member>
        <member name="T:Tangosol.Util.Extractor.ChainedExtractor">
            <summary>
            Composite <see cref="T:Tangosol.Util.IValueExtractor"/> implementation based on an
            array of extractors.
            </summary>
            <remarks>
            The extractors in the array are applied sequentially left-to-right,
            so a result of a previous extractor serves as a target object for a
            next one.
            </remarks>
            <author>Gene Gleyzer  2003.09.22</author>
            <author>Ivan Cikic  2006.10.20</author>
        </member>
        <member name="M:Tangosol.Util.Extractor.ChainedExtractor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Extractor.ChainedExtractor.#ctor(Tangosol.Util.IValueExtractor[])">
            <summary>
            Construct a <b>ChainedExtractor</b> based on a specified
            <see cref="T:Tangosol.Util.IValueExtractor"/> array.
            </summary>
            <param name="extractors">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> array.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ChainedExtractor.#ctor(Tangosol.Util.IValueExtractor,Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>ChainedExtractor</b> based on two extractors.
            </summary>
            <param name="extractor1">
            The <see cref="T:Tangosol.Util.IValueExtractor"/>.
            </param>
            <param name="extractor2">
            The <b>IValueExtractor</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ChainedExtractor.#ctor(System.String)">
            <summary>
            Construct a <b>ChainedExtractor</b> for a specified member name
            sequence.
            </summary>
            <param name="member">
            A dot-delimited sequence of member names which results in a
            <b>ChainedExtractor</b> that is based on an array of
            corresponding <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/> objects.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ChainedExtractor.Extract(System.Object)">
            <summary>
            Extract the value from the passed object.
            </summary>
            <remarks>
            The underlying extractors are applied sequentially, so a result
            of a previous extractor serves as a target object for a next one.
            A value of <c>null</c> prevents any further extractions and is
            returned immediately.
            </remarks>
            <param name="target">
            An object to retrieve the value from.
            </param>
            <returns>
            The extracted value as an object; <c>null</c> is an acceptable
            value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ChainedExtractor.ExtractFromEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Extract the value from the passed entry.
            </summary>
            <remarks>
            The underlying extractors are applied sequentially, so a result
            of a previous extractor serves as a target object for a next one.
            A value of <code>null</code> prevents any further extractions and
            is returned immediately.
            </remarks>
            <param name="entry">
            An Entry object to extract a desired value from
            </param>
            <returns>The extracted value</returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ChainedExtractor.CreateExtractors(System.String)">
            <summary>
            Parse a dot-delimited sequence of member names and instantiate
            a corresponding array of <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/>
            objects.
            </summary>
            <param name="names">
            A dot-delimited sequence of member names.
            </param>
            <returns>
            An array of <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/> objects.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Extractor.ComparisonValueExtractor">
            <summary>
            A synthetic <see cref="T:Tangosol.Util.IValueExtractor"/> that returns a result of
            comparison between two values extracted from the same target.
            </summary>
            <remarks>
            <p>
            In a most general case, the extracted value represents an integer
            value calculated accordingly to the contract of 
            <see cref="M:System.IComparable.CompareTo(System.Object)"/> or
            <see cref="M:System.Collections.IComparer.Compare(System.Object,System.Object)"/> methods. However, in more specific
            cases, when the compared values are of common numeric type, the
            <b>ComparisonValueExtractor</b> will return a numeric difference
            between those values. The .NET type of the comparing values will
            dictate the .NET type of the result.</p>
            <p>
            For example, lets assume that a cache contains business objects that
            have two properties: SellPrice and BuyPrice (both double). Then, to
            query for all objects that have SellPrice less than BuyPrice we would
            use the following:</p>
            <code>
            ValueExtractor extractDiff = new ComparisonValueExtractor(
              new ReflectionExtractor("SellPrice"),
              new ReflectionExtractor("BuyPrice"));
            Filter filter = new LessFilter(extractDiff, 0.0);
            ICollection entries = cache.GetEntries(filter);
            </code>
            </remarks>
            <author>Gene Gleyzer  2008.02.15</author>
            <author>Ana Cikic  2008.04.04</author>
            <since>Coherence 3.4</since>
        </member>
        <member name="M:Tangosol.Util.Extractor.ComparisonValueExtractor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Extractor.ComparisonValueExtractor.#ctor(Tangosol.Util.IValueExtractor[])">
            <summary>
            Construct a <b>ComparisonValueExtractor</b> based on a specified
            <see cref="T:Tangosol.Util.IValueExtractor"/> array.
            </summary>
            <param name="extractors">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> array.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ComparisonValueExtractor.#ctor(System.String,System.String)">
            <summary>
            Construct a <b>ComparisonValueExtractor</b> based on two member
            names.
            </summary>
            <remarks>
            Note: values returned by both methods must be
            <see cref="T:System.IComparable"/>.
            </remarks>
            <param name="member1">
            The name of the first member to invoke via reflection.
            </param>
            <param name="member2">
            The name of the second member to invoke via reflection.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ComparisonValueExtractor.#ctor(System.String,System.String,System.Collections.IComparer)">
            <summary>
            Construct a <b>ComparisonValueExtractor</b> based on two method
            names and a <see cref="T:System.Collections.IComparer"/> object.
            </summary>
            <param name="member1">
            The name of the first member to invoke via reflection.
            </param>
            <param name="member2">
            The name of the second member to invoke via reflection.
            </param>
            <param name="comp">
            The comparer used to compare the extracted values (optional).
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ComparisonValueExtractor.#ctor(Tangosol.Util.IValueExtractor,Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>ComparisonValueExtractor</b> based on two specified
            extractors.
            </summary>
            <remarks>
            Note: values returned by both extractors must be
            <see cref="T:System.IComparable"/>.
            </remarks>
            <param name="ve1">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> for the first value.
            </param>
            <param name="ve2">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> for the second value.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ComparisonValueExtractor.#ctor(Tangosol.Util.IValueExtractor,Tangosol.Util.IValueExtractor,System.Collections.IComparer)">
            <summary>
            Construct a <b>ComparisonValueExtractor</b> based on two specified
            extractors and a <see cref="T:System.Collections.IComparer"/> object.
            </summary>
            <param name="ve1">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> for the first value.
            </param>
            <param name="ve2">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> for the second value.
            </param>
            <param name="comp">
            The comparer used to compare the extracted values (optional).
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ComparisonValueExtractor.Extract(System.Object)">
            <summary>
            Extract the value from the passed object.
            </summary>
            <remarks>
            The returned value may be <c>null</c>.
            </remarks>
            <param name="obj">
            An object to retrieve the value from.
            </param>
            <returns>
            The extracted value as an object; <c>null</c> is an acceptable
            value.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If this IValueExtractor is incompatible with the passed object to
            extract a value from and the implementation <b>requires</b> the
            passed object to be of a certain type.
            </exception>
            <exception cref="T:System.ArgumentException">
            If this AbstractExtractor cannot handle the passed object for any
            other reason; an implementor should include a descriptive
            message.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.ComparisonValueExtractor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.ComparisonValueExtractor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.ComparisonValueExtractor.EnsureDecimal(System.Object)">
            <summary>
            Turn the specified number into a Decimal.
            </summary>
            <param name="num">
            Number (byte, short, int, long, float, double, or Decimal).
            </param>
            <returns>
            Specified number turned into a Decimal.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ComparisonValueExtractor.GetStreamFormat(System.Object)">
            <summary>
            Select an optimal stream format to use to store the passed object
            in a stream.
            </summary>
            <param name="o">
            An object.
            </param>
            <returns>
            A stream format to use to store the object in a stream.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Extractor.ComparisonValueExtractor.m_comparer">
            <summary>
            An underlying IComparer object (optional).
            </summary>
        </member>
        <member name="P:Tangosol.Util.Extractor.ComparisonValueExtractor.Comparer">
            <summary>
            Return an <see cref="T:System.Collections.IComparer"/> used by this extractor.
            </summary>
            <value>
            An <b>IComparer</b> used by this extractor; <c>null</c> if the
            natural value comparison should be used.
            </value>
        </member>
        <member name="T:Tangosol.Util.Extractor.ComparisonValueExtractor.StreamFormat">
            <summary>
            Serialization format.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ComparisonValueExtractor.StreamFormat.None">
            <summary>
            Unknown value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ComparisonValueExtractor.StreamFormat.Null">
            <summary>
            Null value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ComparisonValueExtractor.StreamFormat.Int">
            <summary>
            Integer value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ComparisonValueExtractor.StreamFormat.Long">
            <summary>
            Long value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ComparisonValueExtractor.StreamFormat.Double">
            <summary>
            Double value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ComparisonValueExtractor.StreamFormat.RawInt128">
            <summary>
            RawInt128 value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ComparisonValueExtractor.StreamFormat.Decimal">
            <summary>
            Decimal value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ComparisonValueExtractor.StreamFormat.Float">
            <summary>
            Float value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ComparisonValueExtractor.StreamFormat.Short">
            <summary>
            Short value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ComparisonValueExtractor.StreamFormat.Byte">
            <summary>
            Byte value.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Extractor.CompositeUpdater">
            <summary>
            An <see cref="T:Tangosol.Util.IValueUpdater"/> implementation based on an
            extractor-updater pair.
            </summary>
            <author>Gene Gleyzer  2005.10.31</author>
            <author>Ivan Cikic  2006.10.20</author>
        </member>
        <member name="T:Tangosol.Util.IValueUpdater">
            <summary>
            IValueUpdater is used to update an object's state.
            </summary>
            <author>Jason Howes, Gene Gleyzer  2005.10.25</author>
            <author>Aleksandar Seovic  2006.07.12</author>
        </member>
        <member name="M:Tangosol.Util.IValueUpdater.Update(System.Object,System.Object)">
            <summary>
            Update the state of the passed target object using the passed
            value.
            </summary>
            <param name="target">
            The object to update the state of.
            </param>
            <param name="value">
            The new value to update the state with.
            </param>
            <exception cref="T:System.InvalidCastException">
            If this IValueUpdater is incompatible with the passed target
            object or the value and the implementation <b>requires</b> the
            passed object or the value to be of a certain type.
            </exception>
            <exception cref="T:System.ArgumentException">
            If this IValueUpdater cannot handle the passed target object or
            value for any other reason; an implementor should include a
            descriptive message.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.CompositeUpdater.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Extractor.CompositeUpdater.#ctor(Tangosol.Util.IValueExtractor,Tangosol.Util.IValueUpdater)">
            <summary>
            Construct a <b>CompositeUpdater</b> based on the specified
            extractor and updater.
            </summary>
            <remarks>
            <b>Note:</b> the extractor and updater here are not symmetrical
            in nature: the extractor is used to "drill-down" to the target
            object, while the updater will operate on that extracted object.
            </remarks>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/>.
            </param>
            <param name="updater">
            The <see cref="T:Tangosol.Util.IValueUpdater"/>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.CompositeUpdater.#ctor(System.String)">
            <summary>
            Construct a <b>CompositeUpdater</b> for a specified method name
            sequence.
            </summary>
            <remarks>
            For example: "Address.Zip" property will indicate that
            the "Address" property should be used to extract an Address
            object, which will then be used by the "Zip" call.
            </remarks>
            <param name="name">
            A dot-delimited sequence of N method names which results in a
            <b>CompositeUpdater</b> that is based on an chain of (N-1)
            <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/> objects and a single
            <see cref="T:Tangosol.Util.Extractor.ReflectionUpdater"/>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.CompositeUpdater.Update(System.Object,System.Object)">
            <summary>
            Update the state of the passed target object using the passed
            value.
            </summary>
            <param name="target">
            The object to update the state of.
            </param>
            <param name="value">
            The new value to update the state with.
            </param>
            <exception cref="T:System.InvalidCastException">
            If this IValueUpdater is incompatible with the passed target
            object or the value and the implementation <b>requires</b> the
            passed object or the value to be of a certain type.
            </exception>
            <exception cref="T:System.ArgumentException">
            If this IValueUpdater cannot handle the passed target object or
            value for any other reason; an implementor should include a
            descriptive message.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.CompositeUpdater.ToString">
            <summary>
             Return a human-readable description for this
            <b>CompositeUpdater</b>.
            </summary>
            <returns>
            A String description of the <b>CompositeUpdater</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.CompositeUpdater.Equals(System.Object)">
            <summary>
            Compare the <see cref="T:Tangosol.Util.IValueUpdater"/> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <see cref="T:Tangosol.Util.IValueUpdater"/> and the passed
            object are quivalent <b>IValueUpdater</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.CompositeUpdater.GetHashCode">
            <summary>
            Determine a hash value for the <see cref="T:Tangosol.Util.IValueUpdater"/>
            object according to the general <b>object.GetHashCode</b>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>IValueUpdater</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.CompositeUpdater.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.CompositeUpdater.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Extractor.CompositeUpdater.m_extractor">
            <summary>
            The <see cref="T:Tangosol.Util.IValueExtractor"/> part.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.CompositeUpdater.m_updater">
            <summary>
            The <see cref="T:Tangosol.Util.IValueUpdater"/> part.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Extractor.CompositeUpdater.Extractor">
            <summary>
            The <see cref="T:Tangosol.Util.IValueExtractor"/> part.
            </summary>
            <value>
            The <b>IValueExtractor</b> part.
            </value>
        </member>
        <member name="P:Tangosol.Util.Extractor.CompositeUpdater.Updater">
            <summary>
            The <see cref="T:Tangosol.Util.IValueUpdater"/> part.
            </summary>
            <value>
            The <b>IValueUpdater</b> part.
            </value>
        </member>
        <member name="T:Tangosol.Util.Extractor.ConditionalExtractor">
            <summary>
            An IndexAwareExtractor implementation that is only used to create a
            <see cref="T:Tangosol.Net.Cache.ConditionalIndex"/>.
            <para>
            The underlying IValueExtractor is used for value extraction during 
            index creation and is the extractor that is associated with the created
            ConditionalIndex in the given index map. Using the ConditionalExtractor 
            to extract values in not supported.
            </para>
            </summary>
            <author>Tom Beerbower  2010.02.08</author>
            <author>Jason Howes  2010.10.04</author>
        </member>
        <member name="T:Tangosol.Util.Extractor.IIndexAwareExtractor">
            <summary>
            IIndexAwareExtractor is an extension to the <see cref="T:Tangosol.Util.IValueExtractor"/>
            interface that supports the creation and destruction of an 
            <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> index. Instances of this interface are 
            intended to be used with the <see cref="M:Tangosol.Net.Cache.IQueryCache.AddIndex(Tangosol.Util.IValueExtractor,System.Boolean,System.Collections.IComparer)"/> and
            <see cref="M:Tangosol.Net.Cache.IQueryCache.RemoveIndex(Tangosol.Util.IValueExtractor)"/> API to support the creation of 
            custom indexes.
            </summary>
            <author>Tom Beerbower  2010.02.08</author>
            <author>Jason Howes  2010.10.01</author>
        </member>
        <member name="M:Tangosol.Util.Extractor.IIndexAwareExtractor.CreateIndex(System.Boolean,System.Collections.IComparer,System.Collections.IDictionary)">
            <summary>
            Create an index and associate it with the corresponding extractor.
            <para>
            Important: it is a responsibility of this method's implementations
            to place the necessary &lt;IValueExtractor, ICacheEntry&gt; entry 
            into the given map of indexes.
            </para>
            </summary>
            <param name="ordered">
            <c>true</c> iff the contents of the indexed information should be 
            ordered; <c>false</c> otherwise.
            </param>
            <param name="comparer">
            The IComparator object which imposes an ordering of entries in the 
            index contents; or <c>null</c> if the entries' values natural 
            ordering should be used.
            </param>
            <param name="dict">
            IDictionary to be updated with the created index.
            </param>
            <returns>
            The created index; <c>null</c> if the index has not been created.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.IIndexAwareExtractor.DestroyIndex(System.Collections.IDictionary)">
            <summary>
            Destroy an existing index and remove it from the given dictionary
            of indexes. 
            </summary>
            <param name="dict">
            IDictionary to be updated by removing the index being destroyed.
            </param>
            <returns>
            The destroyed index; <c>null</c> if the index does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ConditionalExtractor.#ctor">
            <summary>
            Construct the ConditionalExtractor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Extractor.ConditionalExtractor.#ctor(Tangosol.Util.IFilter,Tangosol.Util.IValueExtractor,System.Boolean)">
            <summary>
            Construct the ConditionalExtractor.
            </summary>
            <param name="filter">
            The filter used by this extractor to create a 
            <see cref="T:Tangosol.Net.Cache.ConditionalIndex"/>; must not be null.
            </param>
            <param name="extractor">
            The extractor used by this extractor to create a 
            <see cref="T:Tangosol.Net.Cache.ConditionalIndex"/>; the created index will be 
            associated with this extractor in the given index map; must
            not be null.
            </param>
            <param name="forwardIndex">
            Specifies whether or not this extractor will create a 
            <see cref="T:Tangosol.Net.Cache.ConditionalIndex"/> that supports a forward index.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ConditionalExtractor.CreateIndex(System.Boolean,System.Collections.IComparer,System.Collections.IDictionary)">
            <summary>
            Create an index and associate it with the corresponding extractor.
            <para>
            Important: it is a responsibility of this method's implementations
            to place the necessary &lt;IValueExtractor, ICacheEntry&gt; entry 
            into the given map of indexes.
            </para>
            </summary>
            <param name="ordered">
            <c>true</c> iff the contents of the indexed information should be 
            ordered; <c>false</c> otherwise.
            </param>
            <param name="comparer">
            The IComparator object which imposes an ordering of entries in the 
            index contents; or <c>null</c> if the entries' values natural 
            ordering should be used.
            </param>
            <param name="dict">
            IDictionary to be updated with the created index.
            </param>
            <returns>
            The created index; <c>null</c> if the index has not been created.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ConditionalExtractor.DestroyIndex(System.Collections.IDictionary)">
            <summary>
            Destroy an existing index and remove it from the given dictionary
            of indexes. 
            </summary>
            <param name="dict">
            IDictionary to be updated by removing the index being destroyed.
            </param>
            <returns>
            The destroyed index; <c>null</c> if the index does not exist.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ConditionalExtractor.Extract(System.Object)">
            <summary>
            Using a ConditionalExtractor to extract values is not supported.
            </summary>
            <param name="oTarget">
            An object to retrieve the value from.
            </param>
            <exception cref="T:System.InvalidOperationException">
            ConditionalExtractor may not be used as an extractor.
            </exception>
            <returns>
            The extracted value as an object; <c>null</c> is an acceptable
            value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ConditionalExtractor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Deserialize model using specified reader.
            </summary>
            <param name="reader">Reader to use.</param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ConditionalExtractor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.ConditionalExtractor.Equals(System.Object)">
            <summary>
            Compare the ConditionalExtractor with another object to determine
            equality.
            </summary>
            <remarks>
            Two ConditionalExtractor objects are considered equal iff their 
            underlying <b>IFilters</b>, <b>IValueExtractors</b> and support
            for forward indices are equal.
            </remarks>
            <param name="o">
            The reference object with which to compare.
            </param>
            <returns>
            <b>true</b> if this ConditionalExtractor and the passed object are
            equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ConditionalExtractor.GetHashCode">
            <summary>
            Determine a hash value for the ConditionalExtractor object
            according to the general <b>Object.GetHashCode</b> contract.
            </summary>
            <returns>
            An integer hash value for this ConditionalExtractor object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ConditionalExtractor.ToString">
            <summary>
            Return a human-readable description for this ConditionalExtractor.
            </summary>
            <returns>a String description of the ConditionalExtractor</returns>
        </member>
        <member name="P:Tangosol.Util.Extractor.ConditionalExtractor.Filter">
            <summary>
            The filter used by this extractor.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Extractor.ConditionalExtractor.Extractor">
            <summary>
            The underlying extractor.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Extractor.ConditionalExtractor.IsForwardIndexSupported">
            <summary> 
            Specifies whether or not this extractor will create a
            <see cref="T:Tangosol.Net.Cache.ConditionalIndex"/> that supports a forward index.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Extractor.EntryExtractor">
            <summary>
            The <b>EntryExtractor</b> is a base abstract class for special
            purpose custom <see cref="T:Tangosol.Util.IValueExtractor"/> implementations.
            </summary>
            <remarks>
            It allows them to extract a desired value using all available
            information on the corresponding <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> object
            and is intended to be used in advanced custom scenarios, when
            application code needs to look at both key and value at the same time
            or can make some very specific assumptions regarding to the
            implementation details of the underlying Entry object.
            As of Coherence 3.5, the same behavior can be achieved by subclasses
            of the <see cref="T:Tangosol.Util.Extractor.AbstractExtractor"/> by overriding the
            <see cref="M:Tangosol.Util.Extractor.AbstractExtractor.ExtractFromEntry(Tangosol.Net.Cache.ICacheEntry)"/>.
            </remarks>
            <author>Gene Gleyzer 2008.04.14</author>
            <author>Ivan Cikic 2009.04.01</author>
            <since>Coherence 3.4</since>
        </member>
        <member name="M:Tangosol.Util.Extractor.EntryExtractor.#ctor">
            <summary>
            Default constructor (for backward compability)
            </summary>
        </member>
        <member name="M:Tangosol.Util.Extractor.EntryExtractor.#ctor(System.Int32)">
            <summary>
            Construct an <b>EntryExtractor</b> based on the entry
            extraction target.
            </summary>
            <param name="target">
            One of the <see cref="F:Tangosol.Util.Extractor.AbstractExtractor.VALUE"/> or
            <see cref="F:Tangosol.Util.Extractor.AbstractExtractor.KEY"/> values.
            </param>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.Util.Extractor.EntryExtractor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.EntryExtractor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="T:Tangosol.Util.Extractor.PofExtractor">
            <summary>
            POF-based <see cref="T:Tangosol.Util.IValueExtractor"/> implementation.
            PofExtractor takes advantage of POF's indexed state to extract part of 
            an object without needing to deserialize the entire object.
            </summary>
            <remarks>
            POF uses a compact form in the serialized value when possible. For
            example, some numeric values are represented as special POF intrinsic
            types in which the type implies the value. As a result, POF requires
            the receiver of a value to have implicit knowledge of the type.
            PofExtractor uses the type supplied in the constructor as the source
            of the type information. If the type is <c>null</c>, PofExtractor
            will infer the type from the serialized state.
            Example where extracted value is Double:
            <code>
                IValueExtractor extractor = new PofExtractor(typeof(Double), 2);
            </code>
            Example where extracted value should be inferred:
            <code>
                IValueExtractor extractor = new PofExtractor(null, 2);
            </code>
            </remarks>
            <author>Aleksandar Seovic  2009.02.14</author>
            <author>Ivan Cikic  2009.04.01</author>
            <since>Coherence 3.5</since>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofExtractor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofExtractor.#ctor(System.Type,System.Int32)">
            <summary>
            Constructs a <b>PofExtractor</b> based on a property index.
            </summary>
            <remarks>
            This constructor is equivalent to:
            <code>
            PofExtractor extractor = 
                new PofExtractor(type, new SimplePofPath(index), VALUE);
            </code>
            </remarks>
            <param name="type">
            The required type of the extracted value or <c>null</c> if the
            type is to be inferred from the serialized state.
            </param>
            <param name="index">
            Property index.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofExtractor.#ctor(System.Type,Tangosol.IO.Pof.Reflection.IPofNavigator)">
            <summary>
            Constructs a <b>PofExtractor</b> based on a POF navigator.
            </summary>
            <param name="type">
            The required type of the extracted value or <c>null</c> if the
            type is to be inferred from the serialized state.
            </param>
            <param name="navigator">
            POF navigator.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofExtractor.#ctor(System.Type,Tangosol.IO.Pof.Reflection.IPofNavigator,System.Int32)">
            <summary>
            Constructs a <b>PofExtractor</b> based on a POF navigator 
            and the entry extraction target.
            </summary>
            <param name="type">
            The required type of the extracted value or <c>null</c> if the
            type is to be inferred from the serialized state.
            </param>
            <param name="navigator">
            POF navigator.
            </param>
            <param name="target">
            One of the <see cref="F:Tangosol.Util.Extractor.AbstractExtractor.VALUE"/>
            or <see cref="F:Tangosol.Util.Extractor.AbstractExtractor.KEY"/> values.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofExtractor.ExtractFromEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Extracts the value from the passed ICacheEntry object.
            </summary>
            <remarks>
            This method will always throw a <see cref="T:System.NotSupportedException"/>
            if called directly by the .NET client application, as its execution
            is only meaningful within the cluster.
            <p/>
            It is expected that this extractor will only be used against 
            POF-encoded binary entries within a remote partitioned cache.
            </remarks>
            <param name="entry">
            An Entry object to extract a value from
            </param>
            <returns>
            The extracted value
            </returns>
            <exception cref="T:System.NotSupportedException">
            Always, as it is expected that this extractor will only be 
            executed within the cluster.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofExtractor.Equals(System.Object)">
            <summary>
            Compare the PofExtractor with another object to determine
            equality.
            </summary>
            <remarks>
            Two PofExtractor objects are considered equal iff their paths
            are equal and they have the same target (key or value).
            </remarks>
            <param name="o">
            Object to compare with
            </param>
            <returns>
            <b>true</b> iff this PofExtractor and the passed object are
            equivalent
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofExtractor.GetHashCode">
            <summary>
            Determine a hash value for the PofExtractor object.
            </summary>
            <returns>
            An integer hash value for this PofExtractor object
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofExtractor.ToString">
            <summary>
            Return a human-readable description for this PofExtractor.
            </summary>
            <returns>
            String description of the PofExtractor
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofExtractor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofExtractor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofExtractor.GetPofTypeId(Tangosol.IO.Pof.IPofContext)">
            <summary>
            Compute the expected pof type id based on the type.
            </summary>
            <param name="ctx">
            Pof context.
            </param>
            <returns>
            Pof type id or <see cref="F:Tangosol.IO.Pof.PofConstants.T_UNKNOWN"/> if the type
            is <c>null</c>.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Extractor.PofExtractor.m_navigator">
            <summary>
            POF navigator.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.PofExtractor.m_type">
            <summary>
            Type for what is being extracted; or null if this information is
            specified in m_typeId.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.PofExtractor.m_typeId">
            <summary>
            POF type for expected value.
            This value is only meaninful when m_type == null.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Extractor.PofExtractor.Navigator">
            <summary>
            Obtain the IPofNavigator for this extractor.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Extractor.PofExtractor.TypeExtracted">
            <summary>
            Obtain the type of the extracted value.
            </summary>
            <value>
            The expected type.
            </value>
        </member>
        <member name="T:Tangosol.Util.Extractor.PofUpdater">
            <summary>
            POF-based <see cref="T:Tangosol.Util.IValueUpdater"/> implementation.
            </summary>
            <author>Aleksandar Seovic  2009.02.14</author>
            <author>Ivan Cikic  2009.04.01</author>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofUpdater.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofUpdater.#ctor(System.Int32)">
            <summary>
            Constructs a <b>PofUpdater</b> based on a property index.
            </summary>
            <remarks>
            This constructor is equivalent to:
            <code>
            PofExtractor extractor = 
                new PofUpdater(new SimplePofPath(index));
            </code>
            </remarks>
            <param name="index">
            Property index.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofUpdater.#ctor(Tangosol.IO.Pof.Reflection.IPofNavigator)">
            <summary>
            Constructs a <b>PofUpdater</b> based on a POF navigator.
            </summary>
            <param name="navigator">
            POF navigator.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofUpdater.Update(System.Object,System.Object)">
            <summary>
            Update the passed target object using the specified value.
            </summary>
            <remarks>
            This method will always throw a <see cref="T:System.NotSupportedException"/>
            if called directly by the .NET client application, as its execution
            is only meaningful within the cluster.
            <p/>
            It is expected that this extractor will only be used against 
            POF-encoded binary entries within a remote partitioned cache.
            </remarks>
            <param name="oTarget">
            The object to update.
            </param>
            <param name="oValue">
            The new value to update the target's property with.
            </param>
            <exception cref="T:System.NotSupportedException">
            Always, as it is expected that this extractor will only be 
            executed within the cluster.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofUpdater.Equals(System.Object)">
            <summary>
            Compare the PofUpdater with another object to determine
            equality.
            </summary>
            <param name="o">
            Object to compare with
            </param>
            <returns>
            <b>true</b> iff this PofUpdater and the passed object are
            equivalent
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofUpdater.GetHashCode">
            <summary>
            Determine a hash value for the PofUpdater object.
            </summary>
            <returns>
            An integer hash value for this PofUpdater object
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofUpdater.ToString">
            <summary>
            Return a human-readable description for this PofUpdater.
            </summary>
            <returns>
            String description of the PofUpdater
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofUpdater.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.PofUpdater.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Extractor.PofUpdater.m_navigator">
            <summary>
            POF navigator.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Filter.FilterTrigger">
            <summary>
            A generic Filter-based <see cref="T:Tangosol.Net.Cache.ICacheTrigger"/> implementation.
            </summary>
            <remarks>
            If an evaluation of the <see cref="T:Tangosol.Net.Cache.ICacheTriggerEntry"/> object
            representing a pending change fails (returns <b>false</b>), then one
            of the following actions is taken:
            <list type="bullet">
            <item>
            <see cref="F:Tangosol.Util.Filter.FilterTrigger.ActionCode.Rollback"/> - an
            <see cref="T:System.ArgumentException"/> is thrown by the trigger to reject
            the operation that would result in this change (default);
            </item>
            <item>
            <see cref="F:Tangosol.Util.Filter.FilterTrigger.ActionCode.Ignore"/> - the change is ignored and the
            entry's value is reset to the original value returned by the
            <see cref="P:Tangosol.Net.Cache.ICacheTriggerEntry.OriginalValue"/>;
            </item>
            <item>
            <see cref="F:Tangosol.Util.Filter.FilterTrigger.ActionCode.Remove"/> - the entry is removed from the
            underlying backing cache using the
            <see cref="M:Tangosol.Net.Cache.IInvocableCacheEntry.Remove(System.Boolean)"/> call.
            </item>
            </list>
            Note: This trigger never prevents entries from being removed.
            </remarks>
            <author>Gene Gleyzer  2008.03.11</author>
            <author>Ana Cikic  2008.07.02</author>
            <since>Coherence 3.4</since>
        </member>
        <member name="M:Tangosol.Util.Filter.FilterTrigger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.FilterTrigger.#ctor(Tangosol.Util.IFilter)">
            <summary>
            Construct a FilterTrigger based on the specified
            <see cref="T:Tangosol.Util.IFilter"/> object and
            <see cref="F:Tangosol.Util.Filter.FilterTrigger.ActionCode.Rollback"/>.
            </summary>
            <param name="filter">
            The underlying <b>IFilter</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.FilterTrigger.#ctor(Tangosol.Util.IFilter,Tangosol.Util.Filter.FilterTrigger.ActionCode)">
            <summary>
            Construct a FilterTrigger based on the specified
            <see cref="T:Tangosol.Util.IFilter"/> object and the action code.
            </summary>
            <param name="filter">
            The underlying <b>IFilter</b>.
            </param>
            <param name="action">
            One of the <see cref="T:Tangosol.Util.Filter.FilterTrigger.ActionCode"/> values.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.FilterTrigger.Process(Tangosol.Net.Cache.ICacheTriggerEntry)">
            <summary>
            This method is called before the result of a mutating operation
            represented by the specified entry object is committed into the
            underlying cache.
            </summary>
            <remarks>
            An implementation of this method can evaluate the change by
            analyzing the original and the new value, and can perform any of
            the following:
            <list type="bullet">
            <item>
            override the requested change by setting
            <see cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.Value"/> to a different value;
            </item>
            <item>
            undo the pending change by resetting the entry value to the
            original value obtained from
            <see cref="P:Tangosol.Net.Cache.ICacheTriggerEntry.OriginalValue"/>
            </item>
            <item>
            remove the entry from the underlying cache by calling
            <see cref="M:Tangosol.Net.Cache.IInvocableCacheEntry.Remove(System.Boolean)"/>
            </item>
            <item>
            reject the pending change by throwing an <see cref="T:System.Exception"/>,
            which will prevent any changes from being committed, and will
            result in the exception being thrown from the operation that
            attempted to modify the cache; or
            </item>
            <item>
            do nothing, thus allowing the pending change to be committed to
            the underlying cache.
            </item>
            </list>
            </remarks>
            <param name="entry">
            An <see cref="T:Tangosol.Net.Cache.ICacheTriggerEntry"/> object that represents the
            pending change to be committed to the cache, as well as the
            original state of the entry.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.FilterTrigger.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.FilterTrigger.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.FilterTrigger.Equals(System.Object)">
            <summary>
            Compare the FilterTrigger with another object to determine
            equality.
            </summary>
            <remarks>
            Two FilterTrigger objects are considered equal iff the wrapped
            filters and action codes are equal.
            </remarks>
            <param name="o">
            The <b>FilterTrigger</b> to compare to.
            </param>
            <returns>
            <b>true</b> iff this FilterTrigger and the passed object are
            equivalent FilterTrigger objects.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.FilterTrigger.GetHashCode">
            <summary>
            Determine a hash value for the FilterTrigger object according to
            the general <see cref="M:System.Object.GetHashCode"/> contract.
            </summary>
            <returns>
            An integer hash value for this FilterTrigger object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.FilterTrigger.ToString">
            <summary>
            Return a human-readable description for this FilterTrigger.
            </summary>
            <returns>
            A string description of the FilterTrigger.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Filter.FilterTrigger.m_filter">
            <summary>
            The underlying filter.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.FilterTrigger.m_action">
            <summary>
            The action code.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Filter.FilterTrigger.Filter">
            <summary>
            Obtain the underlying <see cref="T:Tangosol.Util.IFilter"/>.
            </summary>
            <value>
            The underlying <b>IFilter</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.FilterTrigger.Action">
            <summary>
            The action code for this FilterTrigger.
            </summary>
            <value>
            One of the <see cref="T:Tangosol.Util.Filter.FilterTrigger.ActionCode"/> values.
            </value>
        </member>
        <member name="T:Tangosol.Util.Filter.FilterTrigger.ActionCode">
            <summary>
            The action taken if an evaluation of the
            <see cref="T:Tangosol.Net.Cache.ICacheTriggerEntry"/> object representing a pending
            change fails (returns <b>false</b>).
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.FilterTrigger.ActionCode.Rollback">
            <summary>
            Evaluation failure results in an
            <see cref="T:System.ArgumentException"/> thrown by the trigger.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.FilterTrigger.ActionCode.Ignore">
            <summary>
            Evaluation failure results in restoring the original entry's
            value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.FilterTrigger.ActionCode.Remove">
            <summary>
            Evaluation failure results in a removal of the entry.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Filter.IIndexAwareFilter">
            <summary>
            IIndexAwareFilter is an extension to the EntryFilter interface that 
            allows a filter to use a cache index to fully or partially evaluate 
            itself.
            </summary>
            <author>Cameron Purdy, Gene Gleyzer  2002.10.31</author>
            <author>Tom Beerbower  2009.03.06</author>
            <author>Jason Howes  2010.10.01</author>
        </member>
        <member name="T:Tangosol.Util.Filter.IEntryFilter">
            <summary>
            IEntryFilter provides an extension to <see cref="T:Tangosol.Util.IFilter"/> for those
            cases in which both a key and a value may be necessary to evaluate
            the conditional inclusion of a particular object.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.11.01</author>
            <author>Goran Milosavljevic  2006.10.20</author>
        </member>
        <member name="M:Tangosol.Util.Filter.IEntryFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.IIndexAwareFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.IIndexAwareFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.KeyFilter">
            <summary>
            EntryFilter which checks whether an entry key belongs to a set.
            </summary>
            <remarks>
            <b>Note: this filter is not serializable and intended to be used only
            internally by other composite filters to reduce the remaining key set.</b>
            As of Coherence 3.2, an equivalent functionality could be achieved using the
            InFilter as follows:
            <pre>
              new InFilter(new KeyExtractor(IdentityExtractor.INSTANCE), setKeys);
            </pre>
            </remarks>
            <author>Cameron Purdy/Gene Gleyzer  2002.11.01</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyFilter.#ctor(System.Collections.ICollection)">
            <summary>
            Construct a key  filter.
            </summary>
            <param name="keys">
            The keys that this filter will evaluate to true.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyFilter.ToString">
            <summary>
            Return a human-readable description for this
            <b>KeyAssociatedFilter</b>.
            </summary>
            <returns>
            A string description of the <b>KeyFilter</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Filter.KeyFilter.m_keys">
            <summary>
            The keys that are evaluated to true by this filter.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Gate">
            <summary>
            Use a Gate in cases that large numbers of threads can operate
            concurrently with an additional requirement that all threads be
            blocked for certain operations.
            </summary>
            <remarks>
            The algorithm is based on a gate concept, allowing threads in
            <see cref="M:Tangosol.Util.Gate.Enter(System.Int64)"/> and out <see cref="M:Tangosol.Util.Gate.Exit"/>, but occasionally
            shutting the gate <see cref="M:Tangosol.Util.Gate.Close(System.Int64)"/> such that other threads cannot
            enter and exit. However, since threads may "be inside", the gate
            cannot fully close until they leave <see cref="M:Tangosol.Util.Gate.Exit"/>. Once all
            threads are out, the gate is closed, and can be re-opened
            <see cref="M:Tangosol.Util.Gate.Open"/>.
            <p>
            Each call to <b>Enter</b> requires a corresponding call to
            <b>Exit</b>. For example, the following would ensure proper clean-up
            using a Gate:</p>
            <p>
            <pre>
            gate.Enter();
            try
            {
                ...
            }
            finally
            {
                gate.Exit();
            }
            </pre></p>
            <p>
            Similarly, each call to <b>Close</b> should be matched with a call to
            <b>Open</b>:</p>
            <p>
            <pre>
            gate.Close();
            try
            {
                ...
            }
            finally
            {
                gate.Open();
            }
            </pre></p>
            <p>
            The Enter/Exit calls can be nested; the same thread can invoke Enter
            multiple times as long as Exit is invoked a corresponding number of
            times. The Close/Open calls work in the same manner. Lastly, the
            thread that closes the gate may continue to Enter/Exit the gate even
            when it is closed since that thread has exclusive control of the
            gate.</p>
            </remarks>
            <author>Cameron Purdy  2003.05.26</author>
            <author>Mark Falco  2007.04.27</author>
            <author>Ana Cikic  2006.08.29</author>
            <since>Coherence 2.2</since>
        </member>
        <member name="M:Tangosol.Util.Gate.Close(System.Int64)">
            <summary>
            Tries to acquire the exclusive lock, the attempt is
            willing to wait up the specified millis or -1 to wait
            infinite.
            </summary>
            <param name="millis">If the value is positive the caller
            will block for this long until either the lock has been 
            acquired. If 0 an immediate attempt is made. If -1 wait an 
            infinite time for the lock to be acquired.
            </param>
            <returns>true if the lock has been acquired.</returns>
        </member>
        <member name="M:Tangosol.Util.Gate.Open">
            <summary>
            Releases the exclusive lock. If the exclusive lock has 
            no more matching Close(millis) the exclusive lock is released.
            Any Threads waiting to Enter(millis) or Close(millis) will
            continue executing.
            
            If the thread currently is also holding the non-exclusive
            lock, the thread will immediately Enter the lock. The thread
            will have to match all calls to Enter(millis) with the 
            corresponding count of Exit().
            </summary>
        </member>
        <member name="M:Tangosol.Util.Gate.Enter(System.Int64)">
            <summary>
            Tries to acquire the non-exclusive lock, the attempt is
            willing to wait up the specified millis or -1 to wait
            infinite.
            </summary>
            <param name="millis">If the value is positive the caller
            will block for this long until either the lock has been 
            acquired. If 0 an immediate attempt is made. If -1 wait an 
            infinite time for the lock to be acquired.
            </param>
            <returns>true if the lock has been acquired.</returns>
        </member>
        <member name="M:Tangosol.Util.Gate.Exit">
            <summary>
            Releases the non-exclusive lock. If the non-exclusive lock has 
            no more matching Enter(millis) from any thread the exclusive 
            lock is released so that threads wanting to Close the Gate
            can proceed.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Gate.IsEnteredByCurrentThread">
            <summary>
            Determines if the current thread has Entered, but not yet Exited 
            the Gate.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Gate.IsClosedByCurrentThread">
            <summary>
            Determines if the current thread has Closed the Gate but not yet
            Opened the Gate.
            </summary>
        </member>
        <member name="P:Tangosol.Util.GateFactory.NewGate">
            <summary>
            Construct a new <see cref="T:Tangosol.Util.Gate"/> instance.
            </summary>
        </member>
        <member name="T:Tangosol.Util.HashHelper">
            <summary>
            This static class contains helper functions for
            calculating hash code values for any group of
            c# intrinsics.
            </summary>
            <author>Harvey Raja 2011.08.30</author>
            <since>Coherence 3.7.2</since>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Boolean,System.Int32)">
            <summary>
            Calculate a running hash using the boolean value.
            </summary>
            <param name="value">
            The boolean value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Byte,System.Int32)">
            <summary>
            Calculate a running hash using the byte value.
            </summary>
            <param name="value">
            The byte value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Char,System.Int32)">
            <summary>
            Calculate a running hash using the char value.
            </summary>
            <param name="value">
            The char value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Double,System.Int32)">
            <summary>
            Calculate a running hash using the double value.
            </summary>
            <param name="value">
            The double value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Single,System.Int32)">
            <summary>
            Calculate a running hash using the float value.
            </summary>
            <param name="value">
            The float value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Int32,System.Int32)">
            <summary>
            Calculate a running hash using the int value.
            </summary>
            <param name="value">
            The int value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Int64,System.Int32)">
            <summary>
            Calculate a running hash using the long value.
            </summary>
            <param name="value">
            The long value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Int16,System.Int32)">
            <summary>
            Calculate a running hash using the short value.
            </summary>
            <param name="value">
            The short value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Object,System.Int32)">
            <summary>
            Calculate a running hash using the object value.
            </summary>
            <param name="value">
            The object value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Boolean[],System.Int32)">
            <summary>
            Calculate a running hash using the boolean array value.
            </summary>
            <param name="values">
            The boolean array value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Byte[],System.Int32)">
            <summary>
            Calculate a running hash using the byte array value.
            </summary>
            <param name="values">
            The byte array value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Char[],System.Int32)">
            <summary>
            Calculate a running hash using the char array value.
            </summary>
            <param name="values">
            The char array value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Double[],System.Int32)">
            <summary>
            Calculate a running hash using the double array value.
            </summary>
            <param name="values">
            The double array value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Single[],System.Int32)">
            <summary>
            Calculate a running hash using the float array value.
            </summary>
            <param name="values">
            The float array value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Int32[],System.Int32)">
            <summary>
            Calculate a running hash using the int array value.
            </summary>
            <param name="values">
            The int array value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Int64[],System.Int32)">
            <summary>
            Calculate a running hash using the long array value.
            </summary>
            <param name="values">
            The long array value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Int16[],System.Int32)">
            <summary>
            Calculate a running hash using the short array value.
            </summary>
            <param name="values">
            The short array value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Object[],System.Int32)">
            <summary>
            Calculate a running hash using the object array value.
            </summary>
            <param name="values">
            The object array value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Hash(System.Collections.ICollection,System.Int32)">
            <summary>
            Calculate a running hash using the Collection value.  The hash
            computed over the Collection's entries is order-independent.
            </summary>
            <param name="values">
            The ICollection value for use in the hash.
            </param>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.HashHelper.Swizzle(System.Int32)">
            <summary>
            Shift the running hash value to try and help with
            generating unique values given the same input, but
            in a different order.
            </summary>
            <param name="hash">
            The running hash value.
            </param>
            <returns>
            The resulting running hash value.
            </returns>
        </member>
        <member name="T:Tangosol.Util.ImmutableArrayList">
            <summary>
            Implementation of the IList interface in a read-only fashion based on an
            array.
            </summary>
            <author>Mark Falco  2009.09.20</author>
        </member>
        <member name="T:Tangosol.Util.ImmutableMultiList">
            <summary>
            Implementation of the IList interface in a read-only fashion based on a
            collection of arrays.
            </summary>
            <author>Mark Falco  2009.09.20</author>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.#ctor(System.Object[][])">
            <summary>
            Construct a List containing the elements of the specified array of
            Object arrays.
            </summary>
            <param name="aao">
            the array of arrays backing the MultiList
            </param>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.CopyTo(System.Array,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.Add(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.Contains(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.IndexOf(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.Insert(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.Remove(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.Equals(System.Object)">
            <summary>
            Compare this <b>IList</b> implementation with some other Object
            and determine if the caller would believe this Object to be equal
            to the other Object.
            </summary>
            <param name="that">
            Some other Object that is likely to be an <b>ICollection</b> or
            some more specific type (with its related overloaded definition
            of what it thinks that equals() means)
            </param>
            <returns>
            <b>true</b> if and only if this Object believes that it can make
            a defensible case that this Object is equal to the passed Object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.Equals(System.Collections.IList)">
            <summary>
            Determines whether the specified <b>IList</b> is equal to the
            current <b>IList</b>.
            </summary>
            <param name="that"><b>IList</b> to compare to.</param>
            <returns>
            <b>true</b> if and only if the specified list contains the same
            elements in the same order as the current one.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.Equals(System.Collections.ICollection)">
            <summary>
            Determines whether the specified <b>ICollection</b> is equal to
            the current <b>ICollection</b>.
            </summary>
            <param name="that"><b>ICollection</b> to compare to.</param>
            <returns>
            <b>true</b> if the specified collection have the same size and
            contains elements 
            </returns>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.CalculateTotalLength(System.Object[][])">
            <summary>
            Calculate the total number of element in the array of arrays.
            </summary>
            <param name="aao">
            An array of arrays.
            </param>
            <returns>
            The total number of elements.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ImmutableMultiList.Flatten(System.Object[][],System.Int32,System.Array,System.Int32)">
            <summary>
            Create a single dimensional array containing all elements of the
            specified array of arrays.
            </summary>
            <param name="aaoFrom">
            An array of arrays to copy from.
            </param>
            <param name="cTotal">
            The total length of the flattened array; pass -1 for it to be
            calculated.
            </param>
            <param name="aoTo">
            An array to copy the elements into (optional).
            </param>
            <param name="iTo">
            The position into aoTo at which to start copying.
            </param>
            <returns>
            An array containing all the elements of the array of arrays.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the total length parameter was not sufficient to hold the
            flattened array.
            </exception>
        </member>
        <member name="F:Tangosol.Util.ImmutableMultiList.m_aao">
            <summary>
            The array of Object arrays.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ImmutableMultiList.m_set">
            <summary>
            A fully realized Dictionary of this collections contents (as keys).
            This is inflated and used for doing set based operations if it is
            detected that this collection is large and being accessed as a set.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ImmutableMultiList.m_total">
            <summary>
            The total number of items.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ImmutableMultiList.Count">
            <inheritdoc/>
        </member>
        <member name="P:Tangosol.Util.ImmutableMultiList.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:Tangosol.Util.ImmutableMultiList.IsSynchronized">
            <inheritdoc/>
        </member>
        <member name="P:Tangosol.Util.ImmutableMultiList.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Tangosol.Util.ImmutableMultiList.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Tangosol.Util.ImmutableMultiList.IsFixedSize">
            <inheritdoc/>
        </member>
        <member name="T:Tangosol.Util.ImmutableMultiList.MultiEnumerator">
            <summary>
            Enumerator implementation based on the ImmutableMultiList.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ImmutableArrayList.#ctor(System.Object[])">
            <summary>
            Construct a List containing the elements of the specified array.
            </summary>
            <param name="ao">
            the array backing the list
            </param>
        </member>
        <member name="T:Tangosol.Util.IQueryRecord">
            <summary>
            The IQueryRecord object carries a record of the estimated or actual
            execution cost for a query operation.
            </summary>
            <author>tb 2011.05.26</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="P:Tangosol.Util.IQueryRecord.RecordType">
            <summary>
            The <see cref="P:Tangosol.Util.IQueryRecord.RecordType"/> that was specified when this query record 
            was created.
            </summary>
        </member>
        <member name="P:Tangosol.Util.IQueryRecord.Results">
            <summary>
            The list of partial results for this query record.
            </summary>
        </member>
        <member name="T:Tangosol.Util.IPartialResult">
            <summary>
            An <b>IQueryRecord.PartialResult</b> is a partial query record that contains
            recorded costs for a query operation.  Partial results are collected
            in a query record by a <see cref="T:Tangosol.Util.Aggregator.QueryRecorder"/>.
            </summary>
        </member>
        <member name="P:Tangosol.Util.IPartialResult.Steps">
            <summary>
            The list of steps for this query record partial result in the
            order that they occurred.
            </summary>
        </member>
        <member name="P:Tangosol.Util.IPartialResult.Partitions">
            <summary>
            The set of partitions associated with this partial result.
            </summary>
        </member>
        <member name="T:Tangosol.Util.IStep">
            <summary>
            A <b>IQueryRecord.Step</b> carries the recorded cost of evaluating a filter
            as part of a query operation.  This cost may be the estimated or
            actual execution cost depending on the <see cref="P:Tangosol.Util.IQueryRecord.RecordType"/> of the recorder 
            in use when the step was created.
            </summary>
        </member>
        <member name="P:Tangosol.Util.IStep.FilterDescription">
            <summary>
            A description of the filter that was associated with this
            step during its creation.
            </summary>                         
        </member>
        <member name="P:Tangosol.Util.IStep.IndexLookupRecords">
            <summary>
            The recorded information about the index lookups performed 
            during filter evaluation as part of a query record.
            </summary>           
        </member>
        <member name="P:Tangosol.Util.IStep.Efficiency">
            <summary>
            The calculated cost of applying the filter as defined by 
            IIndexAwareFilter.CalculateEffectiveness(IDictionary, ICollection).
            </summary>
        </member>
        <member name="P:Tangosol.Util.IStep.PreFilterKeySetSize">
            <summary>
            The size of the key set prior to evaluating the filter or applying an index.  
            This value can be used together with <see cref="P:Tangosol.Util.IStep.PostFilterKeySetSize"/> to 
            calculate an actual effectiveness (reduction of the key set) for this filter 
            step.
            </summary>              
        </member>
        <member name="P:Tangosol.Util.IStep.PostFilterKeySetSize">
            <summary>
            The size of the key set remaining after evaluating the
            filter or applying an index.  This value can be used together
            with <see cref="P:Tangosol.Util.IStep.PreFilterKeySetSize"/> to calculate an actual
            effectiveness (reduction of the key set) for this filter step.
            </summary>
        </member>
        <member name="P:Tangosol.Util.IStep.Duration">
            <summary>
            The amount of time (in ms) spent evaluating the filter or
            applying an index for this query plan step.
            </summary>
        </member>
        <member name="P:Tangosol.Util.IStep.Steps">
            <summary>
            The inner nested steps, may be null if not nested.
            </summary>
        </member>
        <member name="T:Tangosol.Util.IIndexLookupRecord">
            <summary>
             An <b>IIndexLookupRecord</b> holds the recorded information about an index 
             lookup performed during filter evaluation as part of a query record.
             
            An <B>IIndexLookupRecord</B> is created each time that RecordExtractor(ValueExtractor)
            is called on a query record step.
            </summary>
        </member>
        <member name="P:Tangosol.Util.IIndexLookupRecord.ExtractorDescription">
            <summary>
            A description of the extractor that was used for the index lookup.
            </summary>
        </member>
        <member name="P:Tangosol.Util.IIndexLookupRecord.IndexDescription">
            <summary>
            A description of the associated index.
            </summary>
        </member>
        <member name="P:Tangosol.Util.IIndexLookupRecord.IsOrdered">
            <summary>
            Indicates whether or not the associated index is ordered.
            </summary>
        </member>
        <member name="T:Tangosol.Util.LicenseException">
            <summary>
            Signals that an operation has failed due to a licensing error, such
            as a missing license or license limit being exceeded.
            </summary>
            <author>Jason Howes  2006.09.27</author>
            <author>Ana Cikic  2008.07.14</author>
        </member>
        <member name="M:Tangosol.Util.LicenseException.#ctor">
            <summary>
            Construct a new LicenseException.
            </summary>
        </member>
        <member name="M:Tangosol.Util.LicenseException.#ctor(System.String)">
            <summary>
            Construct a LicenseException with the given detail message.
            </summary>
            <param name="message">
            A detail message.
            </param>
        </member>
        <member name="M:Tangosol.Util.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct a LicenseException class with serialized data.
            </summary>
            <param name="info">
            The <b>SerializationInfo</b> that holds the serialized object
            data about the exception being thrown.
            </param>
            <param name="context">
            The <b>StreamingContext</b> that contains contextual information
            about the source or destination.
            </param>
        </member>
        <member name="T:Tangosol.Util.Optional">
            <summary>
            .NET port of java.util.Optional, a container object which may or may not contain
            a non-null value. If a value is present, IsPresent() will return true and Get()
            will return the value.
            </summary>
            <author>as, lh  2015.06.09</author>
            <since>Coherence 12.2.1</since>
        </member>
        <member name="M:Tangosol.Util.Optional.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Optional.#ctor(System.Object)">
            <summary>
            Constructs an instance with the value present.
            </summary>
            <param name="value"> the non-null value to be present
            </param>
            <exception>
            throws ArgumentNullException if value is null
            </exception>
        </member>
        <member name="M:Tangosol.Util.Optional.Empty">
            <summary>
            Returns a Optional instance with null object value.
            </summary>
            <returns>
            An instance of Optional object with null value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Optional.Of(System.Object)">
            <summary>
            Returns an Optional instance with the given object value.
            </summary>
            <param name="value">Object to wrap.</param>
            <returns>
            An instance of Optional with the given object value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Optional.OfNullable(System.Object)">
            <summary>
            Returns an <see cref="T:Tangosol.Util.Optional"/> describing the specified value, if non-null,
            otherwise returns an empty <see cref="T:Tangosol.Util.Optional"/>.
            </summary>
            <param name="value">
            The possibly-null value to describe.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.Optional"/> with a present value if the specified value
            is non-null, otherwise an empty <see cref="T:Tangosol.Util.Optional"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Optional.OrElse(System.Object)">
            <summary>
            Returns value if present, otherwise, return the given object.
            </summary>
            <param name="o">The default object to return.</param>
            <returns>
            Returns value if present, otherwise, return the given object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Optional.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
        </member>
        <member name="M:Tangosol.Util.Optional.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
        </member>
        <member name="M:Tangosol.Util.Optional.ToString">
            <summary>
            Returns a non-empty string representation of this Optional suitable
            for debugging. The exact presentation format is unspecified and may
            vary between implementations and versions.
            </summary>
            <remarks>
            If a value is present the result must include its string
            representation in the result. Empty and present Optionals must be
            unambiguously differentiable.
            </remarks>
            <returns>
            The string representation of this instance.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Optional.GetHashCode">
            <summary>
            Returns a hash code value for this object.
            </summary>
            <returns>
            A hash code value for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Optional.Equals(System.Object)">
            <summary>
            Compares this object with another object for equality.
            </summary>
            <param name="o">
            An object reference or <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the passed object reference is of the same class
            and has the same state as this object.
            </returns>
        </member>
        <member name="P:Tangosol.Util.Optional.Value">
            <summary>
            The value of the Optional object; can be null.
            </summary>
            <value>
            The value of the Optional object.
            </value>
        </member>
        <member name="P:Tangosol.Util.Optional.IsPresent">
            <summary>
            Whether there is a value present.
            </summary>
            <value>
            True if there is a value present, otherwise false.
            </value>
        </member>
        <member name="T:Tangosol.Util.SafeClock">
             <summary>
             SafeClock maintains a "safe" time in milliseconds.
             </summary>
             <remarks>
             This clock guarantees that the time never "goes back". More
             specifically, when queried twice on the same thread, the second query
             will never return a value that is less then the value returned by the
             first.
             
             If we detect the system clock moving backward, an attempt will be made
             to gradually compensate the safe clock (by slowing it down), so in the
             long run the safe time is the same as the system time.
            
             The SafeClock supports the concept of "clock jitter", which is a small
             time interval that the system clock could fluctuate by without a
             corresponding passage of wall time.
             </remarks>
             <author>mf  2009.12.09</author>
        </member>
        <member name="M:Tangosol.Util.SafeClock.#ctor(System.Int64)">
            <summary>
            Create a new SafeClock with the default maximum expected jitter.
            </summary>
            <param name="ldtUnsafe">
            The current unsafe time
            </param>
        </member>
        <member name="M:Tangosol.Util.SafeClock.#ctor(System.Int64,System.Int64)">
            <summary>
            Create a new SafeClock with the specified jitter threshold.
            </summary>
            <param name="ldtUnsafe">
            The current unsafe time
            </param>
            <param name="lJitter">
            The maximum expected jitter in the underlying system clock
            </param>
        </member>
        <member name="M:Tangosol.Util.SafeClock.GetSafeTimeMillis(System.Int64)">
            <summary>
            Returns a "safe" current time in milliseconds.
            </summary>
            <param name="ldtUnsafe">
            The current unsafe time
            </param>
            <returns>
            The difference, measured in milliseconds, between the corrected
            current time and midnight, January 1, 0001.
            </returns>
        </member>
        <member name="M:Tangosol.Util.SafeClock.GetLastSafeTimeMillis">
            <summary>
            Returns the last "safe" time as computed by a previous call to the
            GetSafeTimeMillis method.
            Note: Since the underlying field is non-volatile, the returned
            value is only guaranteed to be no less than the last value returned
            by GetSafeTimeMillis() call on the same thread.
            </summary>
            <returns>
            The last "safe" time in milliseconds.
            </returns>
        </member>
        <member name="M:Tangosol.Util.SafeClock.UpdateSafeTimeMillis(System.Int64)">
            <summary>
            Updates and returns a "safe" current time in milliseconds based on
            the "unsafe" time.
            </summary>
            <param name="ldtUnsafe">
            The unsafe current time in milliseconds.
            </param>
            <returns>
            The corrected safe time.
            </returns>
        </member>
        <member name="F:Tangosol.Util.SafeClock.m_ldtLastSafe">
            <summary>
            The last known safe time value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SafeClock.m_ldtLastUnsafe">
            <summary>
            The last recorded unsafe time value.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SafeClock.m_lJitter">
            <summary>
            The maximum expected jitter exposed by the underlying unsafe clock.
            </summary>c
        </member>
        <member name="F:Tangosol.Util.SafeClock.DEFAULT_JITTER_THRESHOLD">
            <summary>
            The default jitter threshold.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Processor.AbstractClusterProcessor">
            <summary>
            Base class for entry processors that may only be executed 
            within the cluster.
            </summary>
            <author>Aleksandar Seovic  2009.09.21</author>
            <since>Coherence 3.6</since>
        </member>
        <member name="M:Tangosol.Util.Processor.AbstractClusterProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.AbstractClusterProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.AbstractClusterProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="T:Tangosol.Util.ShieldedStream">
            <summary>
            Proxy stream that prevents the underlying stream from being
            closed.
            </summary>
            <author>Goran Milosavljevic  2008.08.13</author>
        </member>
        <member name="M:Tangosol.Util.ShieldedStream.#ctor(System.IO.Stream)">
            <summary>
            Constructs a wrapper around underlying stream that should
            be shielded.
            </summary>
            <param name="stream">
            Underlying stream.
            </param>
        </member>
        <member name="M:Tangosol.Util.ShieldedStream.Close">
            <summary>
            Overriden method that prevents underlying stream from being
            closed.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ShieldedStream.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete.
            </summary>
            <param name="asyncResult">
            The reference to the pending asynchronous request to finish.
            </param>
            <value>
            The number of bytes read from the stream, between zero (0) and
            the number of bytes you requested. Streams return zero (0) only
            at the end of the stream, otherwise, they should block until at
            least one byte is available.
            </value>
            <returns>
            The number of bytes read from the stream or 0 if end of the stream
            is reached.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ShieldedStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">
            A reference to the outstanding asynchronous I/O request.
            </param>
        </member>
        <member name="M:Tangosol.Util.ShieldedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <param name="buffer">
            The buffer to read the data into.
            </param>
            <param name="offset">
            The byte offset in buffer at which to begin writing data read
            from the stream.
            </param>
            <param name="count">
            The maximum number of bytes to read.
            </param>
            <param name="callback">
            An optional asynchronous callback, to be called when the read is
            complete.
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular
            asynchronous read request from other requests.
            </param>
            <value>
            An <see cref="T:System.IAsyncResult"/> that represents the
            asynchronous read, which could still be pending.
            </value>
            <returns>
            An <b>IAsyncResult</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ShieldedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <param name="buffer">
            The buffer to write data from.
            </param>
            <param name="offset">
            The byte offset in buffer from which to begin writing.
            </param>
            <param name="count">
            The maximum number of bytes to write.
            </param>
            <param name="callback">
            An optional asynchronous callback, to be called when the write
            is complete.
            </param>
            <param name="state">
            A user-provided object that distinguishes this particular
            asynchronous write request from other requests.
            </param>
            <value>
            An <b>IAsyncResult</b> that represents the asynchronous write,
            which could still be pending.
            </value>
            <returns>
            An <b>IAsyncResult</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ShieldedStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this
            stream and causes any buffered data to be written to the
            underlying device.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ShieldedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances
            the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains
            the specified byte array with the values between offset and
            (offset + count - 1) replaced by the bytes read from the current
            source.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing
            the data read from the current stream.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the current stream.
            </param>
            <value>
            The total number of bytes read into the buffer. This can be less
            than the number of bytes requested if that many bytes are not
            currently available, or zero (0) if the end of the stream has
            been reached.
            </value>
            <returns>
            The number of bytes read from the stream or 0 if end of the stream
            is reached.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ShieldedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">
            A byte offset relative to the origin parameter.
            </param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the
            reference point used to obtain the new position.
            </param>
            <returns>
            The new position within the current stream.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ShieldedStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the
            stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>
            The unsigned byte cast to an Int32, or -1 if at the end of the
            stream.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ShieldedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">
            The desired length of the current stream in bytes.
            </param>
        </member>
        <member name="M:Tangosol.Util.ShieldedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the
            current position within this stream by the number of bytes
            written.
            </summary>
            <param name="buffer">
            An array of bytes. This method copies count bytes from buffer to
            the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin copying
            bytes to the current stream.
            </param>
            <param name="count">
            The number of bytes to be written to the current stream.
            </param>
        </member>
        <member name="M:Tangosol.Util.ShieldedStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances
            the position within the stream by one byte.
            </summary>
            <param name="value">
            The byte to write to the stream.
            </param>
        </member>
        <member name="F:Tangosol.Util.ShieldedStream.m_stream">
            <summary>
            Underlying stream.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ShieldedStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value>
            A long value representing the length of the stream in bytes.
            </value>
        </member>
        <member name="P:Tangosol.Util.ShieldedStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value>
            The current position within the stream.
            </value>
        </member>
        <member name="P:Tangosol.Util.ShieldedStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports
            reading.
            </summary>
            <value>
            <b>true</b> if the stream supports reading; otherwise,
            <b>false</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.ShieldedStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports
            seeking.
            </summary>
            <value>
            <b>true</b> if the stream supports seeking; otherwise,
            <b>false</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.ShieldedStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports
            writing.
            </summary>
            <value>
            <b>true</b> if the stream supports writing; otherwise,
            <b>false</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.SimpleQueryRecord">
            <summary>
            Simple QueryRecord implementation.
            </summary>
            <author>tb 2011.05.26</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.#ctor">
            <summary>
            Default constructor (necessary for IPortableObject interface).
            </summary>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.#ctor(Tangosol.Util.Aggregator.QueryRecorder.RecordType,System.Collections.ICollection)">
            <summary>
            Construct a <b>SimpleQueryRecord</b> from the given collection of partial
            results.
            </summary>
            <param name="type">
            The record type.
            </param>
            <param name="colResults">
            The collection of partial results.
            </param>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.MergeResults(System.Collections.ICollection)">
            <summary>
            Merge the partial results from the associated record.  Matching
            partial results are merged into a single result for the report.
            </summary>
            <param name="colResults">
            The collection of partial results.
            </param>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.ToString">
            <summary>
            Returns a string representation of this <b>SimpleQueryRecord</b>.
            </summary>
            <returns>
            A string representation of this <b>SimpleQueryRecord</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.m_type">
            <summary>
            This record type.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.m_listResults">
            <summary>
            The list of partial results.
            </summary>
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.RecordType">
            <summary>
            The RecordType that was specified when this query record 
            was created.
            </summary>
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.Results">
            <summary>
            The list of partial results for this query record.
            </summary>
        </member>
        <member name="T:Tangosol.Util.SimpleQueryRecord.PartialResult">
            <summary>
            Simple <see cref="T:Tangosol.Util.IPartialResult"/> implementation.
            </summary>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.#ctor">
            <summary>
            Default constructor (necessary for IPortableObject interface).
            </summary>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.#ctor(Tangosol.Util.IPartialResult)">
            <summary>
            Copy constructor for a <b>IPartialResult</b>.
            </summary>
            <param name="colResult">
            The <b>IPartialResult</b> to copy.
            </param>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.Merge(Tangosol.Util.IPartialResult)">
            <summary>
            Merge the given result with this one.
            </summary>
            <param name="result">
            The result to merge.
            </param>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.IsMatching(Tangosol.Util.IPartialResult)">
            <summary>
            Determine whether or not the given result is capable of being
            placed in one-to-one correspondence with this result.  Results are
            matching if their owned lists of steps have the same size, and
            all pairs of steps in the two lists are matching.
            </summary>
            <param name="result">
            The result to be checked.
            </param>
            <returns>
            True iff the given result matches with this result.
            </returns>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.PartialResult.m_listSteps">
            <summary>
            The map of steps.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.PartialResult.m_partMask">
            <summary>
            The partitions.
            </summary>
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.PartialResult.Steps">
            <summary>
            The list of steps for this query record partial result in the
            order that they occurred.
            </summary>
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.PartialResult.Partitions">
            <summary>
            The set of partitions associated with this partial result.
            </summary>
        </member>
        <member name="T:Tangosol.Util.SimpleQueryRecord.PartialResult.Step">
            <summary>
            Simple <b>IQueryRecord.IPartialResult.IStep</b> implementation.
            </summary>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.#ctor">
            <summary>
            Default constructor (necessary for IPortableObject interface).
            </summary>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.#ctor(Tangosol.Util.IStep)">
            <summary>
            Copy constructor for an <b>IStep</b>.
            </summary>
            <param name="step">
            The step to copy.
            </param>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.IsMatching(Tangosol.Util.IStep)">
            <summary>
            Determine whether or not the given step is capable of being
            placed in one-to-one correspondence with this step.  Steps are
            defined to be matching if both steps have equivalent name,
            index lookup records and owned lists of sub-steps.
            </summary>
            <param name="step">
            The <b>IStep</b> to be checked.
            </param>
            <returns>
            True iff the given step matches with this step.
            </returns>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.Merge(Tangosol.Util.IStep)">
            <summary>
            Merge the given step with this one.  This method assumes that
            the given step matches with this one.
            </summary>
            <param name="step">
            The <b>IStep</b> to merge.
            </param>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.m_sFilter">
            <summary>
            The filter description.
            </summary> 
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.m_nEfficiency">
            <summary>
            The estimated cost.
            </summary> 
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.m_nSizeIn">
            <summary>
            The pre-execution key set size.
            </summary> 
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.m_nSizeOut">
            <summary>
            The post-execution key set size.
            </summary> 
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.m_cMillis">
            <summary>
            The execution time in milliseconds.
            </summary> 
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.m_setIndexLookupRecords">
            <summary>
            The set of index lookup records.
            </summary> 
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.m_listSubSteps">
            <summary>
            The list of child steps.
            </summary> 
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.FilterDescription">
            <summary>
            A description of the filter that was associated with this
            step during its creation.
            </summary>     
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.IndexLookupRecords">
            <summary>
            The recorded information about the index lookups performed 
            during filter evaluation as part of an <b>IQueryRecord</b>.
            </summary>  
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.Efficiency">
            <summary>
            The calculated cost of applying the filter as defined by 
            IIndexAwareFilter.CalculateEffectiveness(IDictionary, ICollection).
            </summary>
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.PreFilterKeySetSize">
            <summary>
            The size of the key set prior to evaluating the filter or applying an index.  
            This value can be used together with <see cref="P:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.PostFilterKeySetSize"/> to calculate 
            an actual effectiveness (reduction of the key set) for this filter step.
            </summary> 
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.PostFilterKeySetSize">
            <summary>
            The size of the key set remaining after evaluating the
            filter or applying an index.  This value can be used together
            with <see cref="P:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.PreFilterKeySetSize"/> to calculate an actual
            effectiveness (reduction of the key set) for this filter step.
            </summary>
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.Duration">
            <summary>
            The amount of time (in ms) spent evaluating the filter or
            applying an index for this query plan step.
            </summary>
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.PartialResult.Step.Steps">
            <summary>
            The inner nested steps, may be null if not nested.
            </summary>
        </member>
        <member name="T:Tangosol.Util.SimpleQueryRecord.PartialResult.IndexLookupRecord">
            <summary>
            Simple <b>IQueryRecord.IPartialResult.IIndexLookupRecord</b> implementation.
            </summary>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.IndexLookupRecord.#ctor">
            <summary>
            Default constructor (necessary for IPortableObject interface).
            </summary>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.IndexLookupRecord.#ctor(Tangosol.Util.IIndexLookupRecord)">
            <summary>
            Copy constructor for an IndexLookupRecord.
            </summary>
            <param name="record">
            The record to copy.
            </param>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.IndexLookupRecord.GetHashCode">
            <summary>
            Generates hash code for this <b>CacheEntry.</b>
            </summary>
            <returns>
            A hash code for this <b>CacheEntry.</b>
            </returns>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.IndexLookupRecord.Equals(System.Object)">
            <summary>
            Checks two cache entries for equality.
            </summary>
            <param name="obj">
            The <b>IndexLookupRecord</b> to compare to.
            </param>
            <returns>
            <b>true</b> if this <b>IndexLookupRecord</b> and the passed object are
            equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.IndexLookupRecord.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecord.PartialResult.IndexLookupRecord.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.PartialResult.IndexLookupRecord.m_sExtractor">
            <summary>
            The extractor description.
            </summary> 
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.PartialResult.IndexLookupRecord.m_sIndex">
            <summary>
            The index description.
            </summary> 
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecord.PartialResult.IndexLookupRecord.m_fOrdered">
            <summary>
            Indicates whether or not the associated index is ordered.
            </summary> 
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.PartialResult.IndexLookupRecord.ExtractorDescription">
            <summary>
            A description of the extractor that was used for the index lookup.
            </summary>
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.PartialResult.IndexLookupRecord.IndexDescription">
            <summary>
            A description of the associated index.
            </summary>
        </member>
        <member name="P:Tangosol.Util.SimpleQueryRecord.PartialResult.IndexLookupRecord.IsOrdered">
            <summary>
            Indicates whether or not the associated index is ordered.
            </summary>
        </member>
        <member name="T:Tangosol.Util.SimpleQueryRecordReporter">
            <summary>
            Simple query record reporter used to obtain a string representation of 
            <see cref="T:Tangosol.Util.IQueryRecord"/> object.
            </summary>
            <author>tb 2011.05.26</author>
            <since>Coherence 3.7.1</since>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecordReporter.Report(Tangosol.Util.IQueryRecord)">
            <summary>
            Return a report for the given query record.
            </summary>
            <param name="record">
            The record.
            </param>
            <returns>
            A report for the given query record.
            </returns>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecordReporter.ReportResult(Tangosol.Util.IPartialResult,Tangosol.Util.Aggregator.QueryRecorder.RecordType,System.Collections.IList,System.Boolean)">
            <summary>
            Report the given result.
            </summary>
            <param name="result">
            The result.
            </param>
            <param name="type">
            The record type.
            </param>
            <param name="listIndexLookups">
            The list of lookup ids.
            </param>
            <param name="fReportPartition">
            Indicates whether or not to report partitions.
            </param>
            <returns>
            A report for the given result.
            </returns>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecordReporter.ReportIndexLookUps(System.Collections.IList)">
            <summary>
            Report the index look ups.
            </summary>
            <param name="listIndexLookups">
            The list of lookup ids.
            </param>
            <returns>
            A report for the index look ups.
            </returns>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecordReporter.ReportStep(Tangosol.Util.IStep,Tangosol.Util.Aggregator.QueryRecorder.RecordType,System.Collections.IList,System.Int32)">
            <summary>
            Report the given step.
            </summary>
            <param name="step">
            The step.
            </param>
            <param name="type">
            The record type.
            </param>
            <param name="listIndexLookups">
            The list of lookup ids.
            </param>
            <param name="nLevel">
            The indent level.
            </param>
            <returns>
            A report line for the given step.
            </returns>
        </member>
        <member name="M:Tangosol.Util.SimpleQueryRecordReporter.ReportIndexLookupRecord(System.Int32,Tangosol.Util.IIndexLookupRecord)">
            <summary>
            Report the given index lookup record with the given id.
            </summary>
            <param name="nIndexLookupId">
            The index lookup id.
            </param>
            <param name="record">
            The index lookup record.
            </param>
            <returns>
            A report line for the given index lookup.
            </returns>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecordReporter.REPORT_DIVIDER">
            <summary>
            Report divider format string.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecordReporter.REPORT_NA">
            <summary>
            Report no-info available string.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecordReporter.REPORT_NO_INDEX">
            <summary>
            Report no-index string.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecordReporter.REPORT_PARTITION_FORMAT">
            <summary>
            Report partition group string.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecordReporter.REPORT_TRACE_HEADER_FORMAT">
            <summary>
            Report trace header string.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecordReporter.REPORT_EXPLAIN_HEADER_FORMAT">
            <summary>
            Report explain header string.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecordReporter.REPORT_INDEX_HEADER_FORMAT">
            <summary>
            Report index lookup header string.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecordReporter.REPORT_TRACE_STEP_FORMAT">
            <summary>
            Report trace step format string.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecordReporter.REPORT_EXPLAIN_STEP_FORMAT">
            <summary>
            Report explain step format string.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleQueryRecordReporter.REPORT_INDEX_LOOKUP_FORMAT">
            <summary>
            Report index lookup format string.
            </summary>
        </member>
        <member name="T:Tangosol.Util.ThreadGateSlim">
            <summary>
            ThreadGateSlim exposes a ReaderWriterLockSlim through the 
            Gate interface.
            </summary>
            <author>Charlie Helin 2010.09.10</author>
        </member>
        <member name="M:Tangosol.Util.ThreadGateSlim.Close(System.Int64)">
            <summary>
            Tries to acquire the exclusive lock, the attempt is
            willing to wait up the specified millis or -1 to wait
            infinite.
            </summary>
            <param name="millis">If the value is positive the caller
            will block for this long until either the lock has been 
            acquired. If 0 an immediate attempt is made. If -1 wait an 
            infinite time for the lock to be acquired.
            </param>
            <returns>true if the lock has been acquired.</returns>
        </member>
        <member name="M:Tangosol.Util.ThreadGateSlim.Open">
            <summary>
            Releases the exclusive lock. If the exclusive lock has 
            no more matching Close(millis) the exclusive lock is released.
            Any Threads waiting to Enter(millis) or Close(millis) will
            continue executing.
            
            If the thread currently is also holding the non-exclusive
            lock, the thread will immediately Enter the lock. The thread
            will have to match all calls to Enter(millis) with the 
            corresponding count of Exit().
            </summary>
        </member>
        <member name="M:Tangosol.Util.ThreadGateSlim.Enter(System.Int64)">
            <summary>
            Tries to acquire the non-exclusive lock, the attempt is
            willing to wait up the specified millis or -1 to wait
            infinite.
            </summary>
            <param name="millis">If the value is positive the caller
            will block for this long until either the lock has been 
            acquired. If 0 an immediate attempt is made. If -1 wait an 
            infinite time for the lock to be acquired.
            </param>
            <returns>true if the lock has been acquired.</returns>
        </member>
        <member name="M:Tangosol.Util.ThreadGateSlim.Exit">
            <summary>
            Releases the non-exclusive lock. If the non-exclusive lock has 
            no more matching Enter(millis) from any thread the exclusive 
            lock is released so that threads wanting to Close the Gate
            can proceed.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGateSlim.m_lock">
            <summary>
            The actual read lock implementation.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ThreadGateSlim.IsEnteredByCurrentThread">
            <summary>
            Determines if the current thread has Entered, but not yet Exited 
            the Gate.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ThreadGateSlim.IsClosedByCurrentThread">
            <summary>
            Determines if the current thread has Closed the Gate but not yet
            Opened the Gate.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Transformer.ExtractorEventTransformer">
            <summary>
            <b>ExtractorEventTransformer</b> is a special purpose
            <see cref="T:Tangosol.Net.Cache.ICacheEventTransformer"/> implementation that transforms
            emitted events, extracting one or more properties from either the
            "OldValue" or the "NewValue".
            </summary>
            <remarks>
            This transformation will generally result in the change of the
            values' data type.
            <p/>
            Example: the following code will register a listener to receive
            events only if the value of the "AccountBalance" property changes.
            The transformed event's "NewValue" will be a <b>IList</b> containing
            the "LastTransactionTime" and "AccountBalance" properties. The
            "OldValue" will always be <c>null</c>.
            <code>
            IFilter filter = new ValueChangeEventFilter("AccountBalance");
            IValueExtractor extractor = new MultiExtractor("LastTransactionTime,AccountBalance");
            ICacheEventTransformer transformer = new ExtractorEventTransformer(null, extractor);
            
            cache.AddCacheListener(listener,
                                   new CacheEventTransformerFilter(filter,
                                                                   transformer),
                                   false);
            </code>
            </remarks>
            <author>Gene Gleyzer  2008.06.01</author>
            <author>Goran Milosavljevic  2008.07.02</author>
            <since> Coherence 3.4</since>
        </member>
        <member name="M:Tangosol.Util.Transformer.ExtractorEventTransformer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Transformer.ExtractorEventTransformer.#ctor(Tangosol.Util.IValueExtractor)">
            <summary> 
            Construct a <b>ExtractorEventTransformer</b> that transforms
            <b>CacheEventArgs</b> values based on the specified extractor.
            </summary>
            <remarks>
            <p/>
            Note: The specified extractor will be applied to both old and new
            values.
            </remarks>
            <param name="extractor"> 
            <b>IValueExtractor</b> to extract <b>CacheEventArgs</b> values.
            </param>
        </member>
        <member name="M:Tangosol.Util.Transformer.ExtractorEventTransformer.#ctor(System.String)">
            <summary> 
            Construct a <b>ExtractorEventTransformer</b> that transforms
            <b>CacheEventArgs</b>'s values based on the specified method name.
            </summary>
            <remarks>
            The name could be a comma-delimited sequence of method names
            which will result in a <see cref="T:Tangosol.Util.Extractor.MultiExtractor"/> that is based
            on a corresponding array of <b>IValueExtractor</b> objects;
            individual array elements will be either
            <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/> or
            <see cref="T:Tangosol.Util.Extractor.ChainedExtractor"/> objects.
            <p/>
            Note: The specified extractor will be applied to both old and new values.
            </remarks>
            <param name="methodName"> 
            The name of the method to invoke via reflection.
            </param>
        </member>
        <member name="M:Tangosol.Util.Transformer.ExtractorEventTransformer.#ctor(Tangosol.Util.IValueExtractor,Tangosol.Util.IValueExtractor)">
            <summary> 
            Construct a <b>ExtractorEventTransformer</b> that transforms
            <b>CacheEventArgs</b> values based on the specified extractors.
            </summary>
            <remarks>
            Passing <c>null</c> indicates that the corresponding values
            should be skipped completely.
            </remarks>
            <param name="extractorOld"> 
            Extractor to extract the OldValue property(s).
            </param>
            <param name="extractorNew">
            Extractor to extract the NewValue property(s).
            </param>
        </member>
        <member name="M:Tangosol.Util.Transformer.ExtractorEventTransformer.Transform(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Transform the specified <b>CacheEventArgs</b> using the
            corresponding extractors.
            </summary>
            <param name="eventArgs">
            <b>CacheEventArgs</b> object to transform.
            </param>
            <returns>
            A modified <b>CacheEventArgs</b> object that contains extracted
            values.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Transformer.ExtractorEventTransformer.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Transformer.ExtractorEventTransformer.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Transformer.ExtractorEventTransformer.Equals(Tangosol.Util.Transformer.ExtractorEventTransformer)">
            <summary>
            Compare the <b>ExtractorEventTransformer</b> with another object
            to determine equality.
            </summary>
            <param name="that">
            The object to compare with the current object.
            </param>
            <returns>
            <b>true</b> if this <b>ExtractorEventTransformer</b> and the
            passed object are equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Transformer.ExtractorEventTransformer.Equals(System.Object)">
            <summary>
            Compare the <b>ExtractorEventTransformer</b> with another object
            to determine equality.
            </summary>
            <param name="o">
            The object to compare with the current object.
            </param>
            <returns>
            <b>true</b> if this <b>ExtractorEventTransformer</b> and the
            passed object are equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Transformer.ExtractorEventTransformer.GetHashCode">
            <summary>
            Determine a hash value for the <b>ExtractorEventTransformer</b>
            object according to the general <b>Object.GetHashCode</b>
            contract.
            </summary>
            <returns>
            An integer hash value for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Transformer.ExtractorEventTransformer.ToString">
            <summary>
            Provide a human-readable representation of this object. 
            </summary>
            <returns>
            A String whose contents represent the value of this object.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Transformer.ExtractorEventTransformer.m_extractorOld">
            <summary>
            The <b>OldValue</b> extractor.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Transformer.ExtractorEventTransformer.m_extractorNew">
            <summary>
            The <b>NewValue</b> extractor.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Transformer.ExtractorEventTransformer.OldValueExtractor">
            <summary>
            Return a <b>IValueExtractor</b> used to transfrom the event's
            OldValue.
            </summary>
            <returns>
            An extractor from the OldValue.
            </returns>
        </member>
        <member name="P:Tangosol.Util.Transformer.ExtractorEventTransformer.NewValueExtractor">
            <summary>
            Return a <b>IValueExtractor</b> used to transfrom the event's
            NewValue.
            </summary>
            <returns>
            An extractor from the NewValue.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Extractor.IdentityExtractor">
            <summary>
            Trivial <see cref="T:Tangosol.Util.IValueExtractor"/> implementation that does not
            actually extract anything from the passed value, but returns the
            value itself.
            </summary>
            <author>Jason Howes  2006.03.26</author>
            <author>Gene Gleyzer  2006.03.26</author>
            <author>Ivan Cikic  2006.10.20</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Extractor.IdentityExtractor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Extractor.IdentityExtractor.Extract(System.Object)">
            <summary>
            Simply return the passed object.
            </summary>
            <param name="target">
            An object to retrieve the value from.
            </param>
            <returns>
            The extracted value as an object; <c>null</c> is an acceptable
            value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.IdentityExtractor.Equals(System.Object)">
            <summary>
            Compare the <b>IdentityExtractor</b> with another object to
            determine equality.
             </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff the passed object is an <b>IdentityExtractor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.IdentityExtractor.GetHashCode">
            <summary>
            Determine a hash value for the <b>IdentityExtractor</b> object
            according to the general <b>Object.GetHashCode()</b> contract.
            </summary>
            <returns>
            An integer hash value for this <b>IdentityExtractor</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.IdentityExtractor.ToString">
            <summary>
            Provide a human-readable description of this
            <b>IdentityExtractor</b> object.
            </summary>
            <returns>
            A human-readable description of this <b>IdentityExtractor</b>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.IdentityExtractor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.IdentityExtractor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Extractor.IdentityExtractor.Instance">
            <summary>
            An instance of the IdentityExtractor.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Extractor.KeyExtractor">
            <summary>
            The KeyExtractor is a special purpose <see cref="T:Tangosol.Util.IValueExtractor"/>
            implementation that serves as an indicator that a query should be run
            against the key objects rather than the values.
            </summary>
            <remarks>
            <p>
            The major difference between the KeyExtractor and a standard
            <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/> is that when used in various
            <see cref="T:Tangosol.Util.IFilter"/> implementations it forces the evaluation of
            entry keys rather than entry values.</p>
            <p>
            For example, consider a key object that consists of two properties:
            "FirstName" and "LastName". To retrieve all keys that have a value of
            the "LastName" property equal to "Smith", the following query could
            be used:</p>
            <pre>
            IValueExtractor extractor = new KeyExtractor("LastName");
            ICollection keys = cache.GetKeys(new EqualsFilter(extractor, "Smith"));
            </pre>
            As of Coherence 3.5, the same effect can be achieved for subclasses 
            of the AbstractExtractor, for example:
            <pre>
            IValueExtractor extractor = new ReflectionExtractor("LastName", 
            null,AbstractExtractor.KEY);
            ICollection keys = cache.GetKeys(new EqualsFilter(extractor, "Smith"));
            </pre>
            </remarks>
            <author>Gene Gleyzer  2006.06.12</author>
            <author>Ana Cikic  2006.09.12</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Extractor.KeyExtractor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Extractor.KeyExtractor.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a KeyExtractor based on a specified
            <see cref="T:Tangosol.Util.IValueExtractor"/>.
            </summary>
            <param name="extractor">
            The underlying <b>IValueExtractor</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.KeyExtractor.#ctor(System.String)">
            <summary>
            Construct a KeyExtractor for a specified member name.
            </summary>
            <param name="member">
            A member name to construct an underlying
            <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/> for; this parameter can also be
            a dot-delimited sequence of member names which would result in a
            KeyExtractor based on the <see cref="T:Tangosol.Util.Extractor.ChainedExtractor"/> that is
            based on an array of corresponding <b>ReflectionExtractor</b>
            objects.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.KeyExtractor.Extract(System.Object)">
            <summary>
            Extract the value from the passed object.
            </summary>
            <remarks>
            The returned value may be <c>null</c>.
            </remarks>
            <param name="obj">
            An object to retrieve the value from.
            </param>
            <returns>
            The extracted value as an object; <c>null</c> is an acceptable
            value.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If this IValueExtractor is incompatible with the passed object to
            extract a value from and the implementation <b>requires</b> the
            passed object to be of a certain type.
            </exception>
            <exception cref="T:System.ArgumentException">
            If this AbstractExtractor cannot handle the passed object for any
            other reason; an implementor should include a descriptive
            message.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.KeyExtractor.Equals(System.Object)">
            <summary>
            Compare the KeyExtractor with another object to determine
            equality.
            </summary>
            <remarks>
            Two KeyExtractor objects are considered equal if their underlying
            <b>IValueExtractors</b> are equal.
            </remarks>
            <param name="o">
            The reference object with which to compare.
            </param>
            <returns>
            <b>true</b> if this KeyExtractor and the passed object are
            equivalent.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.KeyExtractor.GetHashCode">
            <summary>
            Determine a hash value for the KeyExtractor object according
            to the general <b>Object.GetHashCode</b> contract.
            </summary>
            <returns>
            An integer hash value for this IValueExtractor object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.KeyExtractor.ToString">
            <summary>
            Provide a human-readable description of this KeyExtractor
            object.
            </summary>
            <returns>
            A human-readable description of this KeyExtractor object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.KeyExtractor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.KeyExtractor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Extractor.KeyExtractor.m_extractor">
            <summary>
            The underlying IValueExtractor.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Extractor.KeyExtractor.Extractor">
            <summary>
            The underlying <see cref="T:Tangosol.Util.IValueExtractor"/>.
            </summary>
            <value>
            The underlying <b>IValueExtractor</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.Extractor.MultiExtractor">
            <summary>
            Composite <see cref="T:Tangosol.Util.IValueExtractor"/> implementation based on an
            array of extractors.
            </summary>
            <remarks>
            <p>
            All extractors in the array are applied to the same target object and
            the result of the extraction is an <b>IList</b> of extracted values.
            </p>
            <p>
            Common scenarios for using the <b>MultiExtractor</b> involve the
            <see cref="T:Tangosol.Util.Aggregator.DistinctValues"/> or <see cref="T:Tangosol.Util.Aggregator.GroupAggregator"/>
            aggregators, that allow clients to collect all distinct combinations
            of a given set of attributes or collect and run additional
            aggregation against the corresponding groups of entries.</p>
            </remarks>
            <author>Gene Gleyzer 2006.02.08</author>
            <author>Ivan Cikic 2006.10.20</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Extractor.MultiExtractor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Extractor.MultiExtractor.#ctor(Tangosol.Util.IValueExtractor[])">
            <summary>
            Construct a <b>MultiExtractor</b>.
            </summary>
            <param name="extractors">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> array.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.MultiExtractor.#ctor(System.String)">
            <summary>
            Construct a <b>MultiExtractor</b> for a specified member name
            list.
            </summary>
            <param name="memberNames">
            A comma-delimited sequence of member names which results in a
            <b>MultiExtractor</b> that is based on a corresponding array of
            <see cref="T:Tangosol.Util.IValueExtractor"/> objects; individual array elements
            will be either <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/> or
            <see cref="T:Tangosol.Util.Extractor.ChainedExtractor"/> objects
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.MultiExtractor.Extract(System.Object)">
            <summary>
            Extract a collection of values from the passed object using the
            underlying array of <see cref="T:Tangosol.Util.IValueExtractor"/> objects.
            </summary>
            <remarks>
            Note that each individual value could be an object of a standard
            wrapper type (for intrinsic types) or <c>null</c>.
            </remarks>
            <param name="target">
            An <b>Object</b> to retrieve the collection of values from.
            </param>
            <returns>
            A List containing the extracted values or <c>null</c> if the target
            object itself is <c>null</c>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.MultiExtractor.ExtractFromEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Extract a collection of values from the passed entry using the
            underlying array of <b>IValueExtractor</b> objects.
            </summary>
            <param name="entry">
            An entry to retrieve the collection of values from
            </param>
            <returns>
            An array containing extracted values
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.MultiExtractor.CompareEntries(Tangosol.Net.Cache.IQueryCacheEntry,Tangosol.Net.Cache.IQueryCacheEntry)">
            <summary>
            Compare two entries based on the rules specified by
            <b>IComparer</b>.
            </summary>
            <remarks>
            <p>
            If possible, use the <see cref="M:Tangosol.Net.Cache.IQueryCacheEntry.Extract(Tangosol.Util.IValueExtractor)"/>
            method to optimize the value extraction process.</p>
            <p>
            This method is expected to be implemented by <b>IComparer</b>
            wrappers, which simply pass on this invocation to the wrapped
            <b>IComparer</b> objects if they too implement this interface, or
            to invoke their default compare method passing the actual objects
            (not the extracted values) obtained from the extractor using the
            passed entries.</p>
            <p>
            This interface is also expected to be implemented by
            <see cref="T:Tangosol.Util.IValueExtractor"/> implementations that implement the
            <b>IComparer</b> interface. It is expected that in most cases,
            the <b>IComparer</b> wrappers will eventually terminate at (i.e.
            delegate to) <b>IValueExtractors</b> that also implement this
            interface.</p>
            </remarks>
            <param name="entry1">
            The first entry to compare values from; read-only.
            </param>
            <param name="entry2">
            The second entry to compare values from; read-only.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as the first
            entry denotes a value that is is less than, equal to, or greater
            than the value denoted by the second entry.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the arguments' types prevent them from being compared by this
            <b>IComparer</b>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the extractor cannot handle the passed objects for any other
            reason; an implementor should include a descriptive message.
            </exception>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Extractor.MultiExtractor.CreateExtractors(System.String)">
            <summary>
            Parse a comma-delimited sequence of method names and instantiate
            a corresponding array of <see cref="T:Tangosol.Util.IValueExtractor"/> objects.
            </summary>
            <remarks>
            Individual array elements will be either
            <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/> or
            <see cref="T:Tangosol.Util.Extractor.ChainedExtractor"/> objects.
            </remarks>
            <param name="names">
            A comma-delimited sequence of method names
            </param>
            <returns>
            An array of <see cref="T:Tangosol.Util.IValueExtractor"/> objects.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Extractor.ReflectionExtractor">
            <summary>
            Reflection-based <see cref="T:Tangosol.Util.IValueExtractor"/> implementation.
            </summary>
            <author>Cameron Purdy  2002.11.01</author>
            <author>Gene Gleyzer  2002.11.01</author>
            <author>Ivan Cikic  2006.10.20</author>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionExtractor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionExtractor.#ctor(System.String)">
            <summary>
            Construct a <b>ReflectionExtractor</b> based on a member name.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionExtractor.#ctor(System.String,System.Object[])">
            <summary>
            Construct a <b>ReflectionExtractor</b>.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="parameters">
            The array of arguments to be used in the method invocation;
            may be <c>null</c>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionExtractor.#ctor(System.String,System.Object[],System.Int32)">
            <summary>
            Construct a <b>ReflectionExtractor</b> based on a method name,
            optional parameters and the entry extraction target.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="parameters">
            The array of arguments to be used in the method invocation;
            may be <c>null</c>.
            </param>
            <param name="target">
            One of the <see cref="F:Tangosol.Util.Extractor.AbstractExtractor.VALUE"/> or
            <see cref="F:Tangosol.Util.Extractor.AbstractExtractor.KEY"/> values
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionExtractor.Extract(System.Object)">
            <summary>
            Extract the value from the passed object.
            </summary>
            <remarks>
            The returned value may be <c>null</c>.
            </remarks>
            <param name="target">
            An object to retrieve the value from.
            </param>
            <returns>
            The extracted value as an object; <c>null</c> is an acceptable
            value.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If this IValueExtractor is incompatible with the passed object to
            extract a value from and the implementation <b>requires</b> the
            passed object to be of a certain type.
            </exception>
            <exception cref="T:System.ArgumentException">
            If this IValueExtractor cannot handle the passed object for any
            other reason; an implementor should include a descriptive
            message.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionExtractor.Equals(System.Object)">
            <summary>
            Compare the <see cref="T:Tangosol.Util.IValueExtractor"/> with another object to
            determine equality.
            </summary>
            <remarks>
             Two <b>IValueExtractor</b> objects, <i>ve1</i> and <i>ve2</i>
            are considered equal iff <tt>ve1.Extract(o)</tt> equals
            <tt>ve2.Extract(o)</tt> for all values of <tt>o</tt>.
            </remarks>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <see cref="T:Tangosol.Util.IValueExtractor"/> and the passed
            object are quivalent <b>IValueExtractor</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionExtractor.GetHashCode">
            <summary>
            Determine a hash value for the <see cref="T:Tangosol.Util.IValueExtractor"/>
            object according to the general <b>object.GetHashCode</b>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>IValueExtractor</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionExtractor.ToString">
            <summary>
            Provide a human-readable description of this
            <see cref="T:Tangosol.Util.IValueExtractor"/> object.
            </summary>
            <returns>
            A human-readable description of this <b>IValueExtractor</b>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionExtractor.SuggestExtractFailureCause(System.Type,System.String)">
            <summary>
            Return a message suggesting a possible cause for a failure to
            extract a value.
            </summary>
            <param name="targetType">
            The target object's type.
            </param>
            <param name="memberName">
            The method name.
            </param>
            <returns>
            A message suggesting a possible cause for a failure.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionExtractor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionExtractor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Extractor.ReflectionExtractor.m_memberName">
            <summary>
            The name of the member to invoke.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ReflectionExtractor.m_parameters">
            <summary>
            The parameter array.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ReflectionExtractor.m_prevType">
            <summary>
            The type of the object that the cached reflection member is
            from.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ReflectionExtractor.m_prevMember">
            <summary>
            A cached reflection member (to avoid repeated look-ups).
            </summary>
        </member>
        <member name="P:Tangosol.Util.Extractor.ReflectionExtractor.MemberName">
            <summary>
            Determine the name of the member that this extractor is
            configured to invoke.
            </summary>
            <value>
            The name of the member to invoke using reflection.
            </value>
        </member>
        <member name="P:Tangosol.Util.Extractor.ReflectionExtractor.Parameters">
            <summary>
            Gets the array of arguments used to invoke the method.
            </summary>
            <value>
            The array of arguments used to invoke the method.
            </value>
        </member>
        <member name="T:Tangosol.Util.Extractor.ReflectionUpdater">
            <summary>
            Reflection-based <see cref="T:Tangosol.Util.IValueUpdater"/> implementation.
            </summary>
            <author>Gene Gleyzer  2005.10.27</author>
            <author>Ivan Cikic  2006.10.20</author>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionUpdater.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionUpdater.#ctor(System.String)">
            <summary>
            Construct a <b>ReflectionUpdater</b> for a given method name.
            </summary>
            <remarks>
            This implementation assumes that the corresponding types will
            have one and only one member with a specified name and, in the
            case this member is method, it will have exactly one parameter.
            </remarks>
            <param name="memberName">
            The name of the method to invoke via reflection.
            </param>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionUpdater.Update(System.Object,System.Object)">
            <summary>
            Update the state of the passed target object using the passed
            value.
            </summary>
            <param name="target">
            The object to update the state of.
            </param>
            <param name="value">
            The new value to update the state with.
            </param>
            <exception cref="T:System.InvalidCastException">
            If this IValueUpdater is incompatible with the passed target
            object or the value and the implementation <b>requires</b> the
            passed object or the value to be of a certain type.
            </exception>
            <exception cref="T:System.ArgumentException">
            If this IValueUpdater cannot handle the passed target object or
            value for any other reason; an implementor should include a
            descriptive message.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionUpdater.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionUpdater.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionUpdater.Equals(System.Object)">
            <summary>
            Compare the <see cref="T:Tangosol.Util.IValueUpdater"/> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <see cref="T:Tangosol.Util.IValueUpdater"/> and the passed
            object are quivalent <b>IValueUpdater</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionUpdater.GetHashCode">
            <summary>
            Determine a hash value for the <see cref="T:Tangosol.Util.IValueUpdater"/>
            object according to the general <b>object.GetHashCode</b>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>IValueUpdater</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Extractor.ReflectionUpdater.ToString">
            <summary>
            Provide a human-readable description of this
            <see cref="T:Tangosol.Util.IValueUpdater"/> object.
            </summary>
            <returns>
            A human-readable description of this <b>IValueUpdater</b>
            object.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Extractor.ReflectionUpdater.m_memberName">
            <summary>
            The name of the member to invoke.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ReflectionUpdater.m_prevType">
            <summary>
            The class of the object that the cached reflection method is
            from.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Extractor.ReflectionUpdater.m_prevMember">
            <summary>
            A cached reflection member (to avoid repeated look-ups).
            </summary>
        </member>
        <member name="P:Tangosol.Util.Extractor.ReflectionUpdater.MemberName">
            <summary>
            Determine the name of the member that this extractor is
            configured to invoke.
            </summary>
            <value>
            The name of the member to invoke using reflection.
            </value>
        </member>
        <member name="T:Tangosol.Util.FilterEnumerator">
            <summary>
            Provide a generic implementation of an enumerator which can enumerate
            items based on an inclusion test.
            </summary>
            <author>Cameron Purdy  1997.09.05</author>
            <author>Goran Milosavljevic  2006.11.28</author>
        </member>
        <member name="M:Tangosol.Util.FilterEnumerator.#ctor(System.Collections.IEnumerator,Tangosol.Util.IFilter)">
            <summary>
            Construct the FilterEnumerator based on an <b>IEnumerator</b>.
            </summary>
            <param name="enumerator">
            <b>IEnumerator</b> of objects to filter.
            </param>
            <param name="test">
            An inclusion test.
            </param>
        </member>
        <member name="M:Tangosol.Util.FilterEnumerator.#ctor(System.Object[],Tangosol.Util.IFilter)">
            <summary>
            Construct the FilterEnumerator based on an array of objects.
            </summary>
            <param name="items">
            Array of objects to enumerate.
            </param>
            <param name="test">
            An inclusion test.
            </param>
        </member>
        <member name="M:Tangosol.Util.FilterEnumerator.HasNext">
            <summary>
            Tests if this <b>IEnumerator</b> contains more elements.
            </summary>
            <returns>
            <b>true</b> if the <b>IEnumerator</b> contains more elements,
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.FilterEnumerator.EvaluateEntry(Tangosol.Util.IFilter,System.Object)">
            <summary>
            Evaluates entry provided against the filter parameter.
            </summary>
            <param name="filter">
            An inclusion test.
            </param>
            <param name="entry">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.FilterEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to the
            next element; <b>false</b> if the enumerator has passed the end
            of the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.FilterEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before
            the first element in the collection.
            </summary>
        </member>
        <member name="F:Tangosol.Util.FilterEnumerator.m_enum">
            <summary>
            Objects to filter/enumerate.
            </summary>
        </member>
        <member name="F:Tangosol.Util.FilterEnumerator.m_test">
            <summary>
            Test to perform on each item.
            </summary>
        </member>
        <member name="F:Tangosol.Util.FilterEnumerator.m_hasNext">
            <summary>
            Is there a next item which passed the test?
            </summary>
        </member>
        <member name="F:Tangosol.Util.FilterEnumerator.m_hasPrev">
            <summary>
            Is there a previous item which passed the test and can be
            removed?
            </summary>
        </member>
        <member name="F:Tangosol.Util.FilterEnumerator.m_next">
            <summary>
            The next item which passed the test.
            </summary>
        </member>
        <member name="P:Tangosol.Util.FilterEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.AllFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which returns the logical "and" of a filter
            array.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.11.01</author>
            <author>Goran Milosavljevic  2006.10.20</author>
        </member>
        <member name="T:Tangosol.Util.Filter.ArrayFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which is a logical operator of a filter array.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.11.01</author>
            <author>Goran Milosavljevic  2006.10.20</author>
            <author>Tom Beerbower  2009.03.06</author>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.#ctor(Tangosol.Util.IFilter[])">
            <summary>
            Construct a logical filter that applies a binary operator to a
            filter array.
            </summary>
            <remarks>
            The result is defined as:
            <code>
            filters[0] &lt;op&gt; filters[1] ... &lt;op&gt; filters[n]
            </code>
            </remarks>
            <param name="filters">
            The filter array.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.HonorOrder">
            <summary>
            Ensure that the order of underlying filters is preserved by the
            <see cref="M:Tangosol.Util.Filter.ArrayFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)"/> and
            <see cref="M:Tangosol.Util.Filter.ArrayFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)"/> implementations.
            </summary>
            <since>Coherence 12.2.1</since>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.ApplyFilter(Tangosol.Util.Filter.IIndexAwareFilter,System.Collections.IDictionary,System.Collections.ICollection)">
             <summary>
             Apply the specified IndexAwareFilter to the specified keySet.
             </summary>
             <param name="filter">
             The IndexAwareFilter to apply an index to.
             </param>
             <param name="indexes">
             The available MapIndex objects keyed by the related 
             IValueExtractor; read-only.
             </param>
             <param name="keys">
             The mutable set of keys that remain to be filtered.
             </param>
             <returns>
             A Filter object that can be used to process the remaining
             keys, or null if no additional filter processing is necessary
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.OptimizeFilterOrder(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Sort all the participating filters according to their effectiveness.
            </summary>
            <param name="indexes">
            The available ICacheIndex objects keyed by the related 
            <b>IValueExtractor</b>; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only
            </param>
            <since>Coherence 12.2.1</since>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.Equals(System.Object)">
            <summary>
            Compare the <b>ArrayFilter</b> with another object to determine
            equality.
            </summary>
            <remarks>
            Two <b>ArrayFilter</b> objects are considered equal if they are
            of same type and their filter arrays are equal.
            </remarks>
            <param name="o">
            The <b>ArrayFilter</b> to compare to.
            </param>
            <returns>
            <b>true</b> if this <b>ArrayFilter</b> and the passed object are
            equivalent <b>ArrayFilter</b> objects.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.GetHashCode">
            <summary>
            Determine a hash value for the <b>ArrayFilter</b> object
            according to the general <b>object.GetHashCode()</b> contract.
            </summary>
            <returns>
            An integer hash value for this <b>ArrayFilter</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.ToString">
            <summary>
            Return a human-readable description for this <b>ArrayFilter</b>.
            </summary>
            <returns>
            A string description of the <b>ArrayFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Filter.ArrayFilter.EMPTY_FILTER_ARRAY">
            <summary>
            A zero-length array of IFilter objects.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.ArrayFilter.m_filters">
            <summary>
            The IFilter array.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.ArrayFilter.m_preserveOrder">
            <summary>
            Flag indicating whether or not the filter order should be preserved.
            </summary>
            <since>Coherence 12.2.1</since>
        </member>
        <member name="P:Tangosol.Util.Filter.ArrayFilter.Filters">
            <summary>
            Obtain the <see cref="T:Tangosol.Util.IFilter"/> array.
            </summary>
            <value>
            The <b>IFilter</b> array.
            </value>
        </member>
        <member name="T:Tangosol.Util.Filter.ArrayFilter.WeightedFilter">
            <summary>
            A thin wrapper around a Filter allowing for sorting the filters
            according to their effectiveness.        
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.WeightedFilter.#ctor(Tangosol.Util.IFilter,System.Int32)">
            <summary>
             Construct the WeightedFilter.
            </summary>
            <param name="filter">
            The wrapped filter.
            </param>
            <param name="effect">
            The filter's effectiveness.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ArrayFilter.WeightedFilter.CompareTo(System.Object)">
            <summary>
            Compares this WeightedFilter with the specified WeightedFilter
            for order.  Returns a negative integer, zero, or a positive 
            integer as this WeightedFilter's effectiveness is less than, 
            equal to, or greater than the effectiveness of the specified 
            WeightedFilter object.
            </summary>
            <param name="obj">
            The Object to be compared
            </param>
            <returns>
            A 32-bit signed integer that indicates the relative order of 
            the objects being compared. The return value has these meanings: 
            Value Meaning Less than zero This instance is less than obj. 
            Zero This instance is equal to obj. Greater than zero This 
            instance is greater than obj.
            </returns>
            <exception>
            System.ArgumentException: obj is not the same type as this 
            instance.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Filter.ArrayFilter.WeightedFilter.m_filter">
            <summary>
            The wrapped filter.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.ArrayFilter.WeightedFilter.m_effect">
            <summary>
            The effectiveness of the wrapped filter.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Filter.ArrayFilter.WeightedFilter.Filter">
            <summary>
             Get the wrapped filter.
            </summary>
            <returns>
            The wrapped filter
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.AllFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.AllFilter.#ctor(Tangosol.Util.IFilter[])">
            <summary>
            Construct an "all" filter.
            </summary>
            <remarks>
            The result is defined as:
            <code>
            filters[0] &amp;&amp; filters[1] ... &amp;&amp; filters[n]
            </code>
            </remarks>
            <param name="filters">
            An array of filters.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.AllFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.AllFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.AllFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.AllFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.AlwaysFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which always evaluates to <b>true</b>.
            </summary>
            <author>Gene Gleyzer  2003.09.18</author>
            <author>Goran Milosavljevic  2006.10.20</author>
        </member>
        <member name="M:Tangosol.Util.Filter.AlwaysFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.AlwaysFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.AlwaysFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.AlwaysFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.AlwaysFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.AlwaysFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.AlwaysFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.AlwaysFilter.Equals(System.Object)">
            <summary>
            Compare the <b>AlwaysFilter</b> with another object to determine
            equality.
            </summary>
            <param name="o">
            The <b>AlwaysFilter</b> to compare to.
            </param>
            <returns>
            <b>true</b> if this <b>AlwaysFilter</b> and the passed object are
            equivalent <b>AlwaysFilter</b> objects.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.AlwaysFilter.GetHashCode">
            <summary>
            Determine a hash value for the <b>AlwaysFilter</b> object
            according to the general <b>object.GetHashCode()</b> contract.
            </summary>
            <returns>
            An integer hash value for this <b>AlwaysFilter</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.AlwaysFilter.ToString">
            <summary>
            Return a human-readable description for this
            <b>AlwaysFilter</b>.
            </summary>
            <returns>
            A string description of the <b>AlwaysFilter</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Filter.AlwaysFilter.Instance">
            <summary>
            An instance of the AlwaysFilter.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Filter.AndFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which returns the logical "and" of two other
            filters.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.26</author>
            <author>Goran Milosavljevic  2006.10.20</author>
        </member>
        <member name="M:Tangosol.Util.Filter.AndFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.AndFilter.#ctor(Tangosol.Util.IFilter,Tangosol.Util.IFilter)">
            <summary>
            Construct an "and" filter.
            </summary>
            <remarks>
            The result is defined as:
            <p>
            <pre>
            filterLeft &amp;&amp; filterRight
            </pre></p>
            </remarks>
            <param name="filterLeft">
            The "left" filter.
            </param>
            <param name="filterRight">
            The "right" filter.
            </param>
        </member>
        <member name="T:Tangosol.Util.Filter.AnyFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which returns the logical "or" of a filter
            array.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.11.01</author>
            <author>Goran Milosavljevic  2006.10.20</author>
            <author>Tom Beerbower  2009.03.06</author>
        </member>
        <member name="M:Tangosol.Util.Filter.AnyFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.AnyFilter.#ctor(Tangosol.Util.IFilter[])">
            <summary>
            Construct an "any" filter.
            </summary>
            <remarks>
            The result is defined as:
            <code>
            filters[0] || filters[1] ... || filters[n]
            </code>
            </remarks>
            <param name="filters">
            An array of filters.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.AnyFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.AnyFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.AnyFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.AnyFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.BetweenFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which compares the result of a member
            invocation with a value for "Between" condition.
            </summary>
            <remarks>
            We use the standard ISO/IEC 9075:1992 semantic,
            according to which "X between Y and Z" is equivalent to
            "X &gt;= Y &amp;&amp; X &lt;= Z".
            In a case when either result of a member invocation or a value to
            compare are equal to <c>null</c>, the <b>Evaluate</b> test yields
            <b>false</b>.
            This approach is equivalent to the way the <c>null</c> values are
            handled by SQL.
            </remarks>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.29</author>
            <author>Goran Milosavljevic  2006.10.20</author>
            <author>Jonathan Knight  2014.04.28</author>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.#ctor(System.String,System.IComparable,System.IComparable)">
            <summary>
            Construct a BetweenFilter for testing "Between" condition.
            </summary>
            <param name="method">
            The name of the method to invoke via reflection.
            </param>
            <param name="from">
            The object to compare the "Greater or Equals" boundary
            with.
            </param>
            <param name="to">
            The object to compare the "Less or Equals" boundary
            with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.#ctor(Tangosol.Util.IValueExtractor,System.IComparable,System.IComparable)">
            <summary>
            Construct a BetweenFilter for testing "Between" condition.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> to use by this filter.
            </param>
            <param name="from">
            The object to compare the "Greater or Equals"
            boundary with.
            </param>
            <param name="to">
            The object to compare the "Less or Equals" boundary
            with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Construct a BetweenFilter for testing "Between" condition.
            </summary>
            <param name="method">
            The name of the method to invoke via reflection.
            </param>
            <param name="from">
            The integer value to compare the "Greater or Equals"
            boundary with.
            </param>
            <param name="to">
            The integer value to compare the "Less or Equals"
            boundary with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Construct a BetweenFilter for testing "Between" condition.
            </summary>
            <param name="method">
            The name of the method to invoke via reflection.
            </param>
            <param name="from">
            The long value to compare the "Greater or Equals"
            boundary with.
            </param>
            <param name="to">
            The long value to compare the "Less or Equals" boundary
            with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Construct a BetweenFilter for testing "Between" condition.
            </summary>
            <param name="method">
            The name of the method to invoke via reflection.
            </param>
            <param name="from">
            The float value to compare the "Greater or Equals"
            boundary with.
            </param>
            <param name="to">
            The float value to compare the "Less or Equals"
            boundary with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Construct a BetweenFilter for testing "Between" condition.
            </summary>
            <param name="method">
            The name of the member to invoke via reflection.
            </param>
            <param name="from">
            The double value to compare the "Greater or Equals"
            boundary with.
            </param>
            <param name="to">
            The double value to compare the "Less or Equals"
            boundary with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.#ctor(System.String,System.IComparable,System.IComparable,System.Boolean,System.Boolean)">
            <summary>
            Construct a BetweenFilter for testing "Between" condition.
            </summary>
            <param name="method">The name of the member to invoke via reflection.</param>
            <param name="lower">The lower bound of the range of values that evaluate to true</param>
            <param name="upper">The upper bound of the range of values that evaluate to true</param>
            <param name="includeLower">A flag indicating whether values matching the lower bound 
            of the range evaluate to true</param>
            <param name="includeUpper">A flag indicating whether values matching the upper bound
            of the range evaluate to true</param>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.#ctor(Tangosol.Util.IValueExtractor,System.IComparable,System.IComparable,System.Boolean,System.Boolean)">
            <summary>
            Construct a BetweenFilter for testing "Between" condition.
            </summary>
            <param name="extractor">The IValueExtractor to use to extract values from the entry to evaluate</param>
            <param name="lower">The lower bound of the range of values that evaluate to true</param>
            <param name="upper">The upper bound of the range of values that evaluate to true</param>
            <param name="includeLower">A flag indicating whether values matching the lower bound 
            of the range evaluate to true</param>
            <param name="includeUpper">A flag indicating whether values matching the upper bound 
            of the range evaluate to true</param>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.BetweenFilter.ToString">
            <summary>
            Return a human-readable description for this <b>ArrayFilter</b>.
            </summary>
            <returns>
            A string description of the <b>ArrayFilter</b>.
            </returns>
        </member>
        <member name="P:Tangosol.Util.Filter.BetweenFilter.ValueExtractor">
            <summary>
            Obtain the <see cref="T:Tangosol.Util.IValueExtractor"/> used by this filter.
            </summary>
            <value>
            The <b>IValueExtractor</b> used by this filter.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.BetweenFilter.LowerBound">
            <summary>
            Gets the object to representing the lower bound of the range
            of values that evaluate to true
            </summary>
            <value>
            The lower bound of the range of values to compare the extraction result with.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.BetweenFilter.UpperBound">
            <summary>
            Gets the object to representing the upper bound of the range
            of values that evaluate to true
            </summary>
            <value>
            The upper bound of the range of values to compare the extraction result with.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.BetweenFilter.IsLowerBoundInclusive">
            <summary>
            Returns true if extracted values equal to the lower bound of the range evaluate to true.
            </summary>
            <value>
            True if extracted values equal to the lower bound of the range evaluate to true.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.BetweenFilter.IsUpperBoundInclusive">
            <summary>
            Returns true if extracted values equal to the upper bound of the range evaluate to true.
            </summary>
            <value>
            True if extracted values equal to the upper bound of the range evaluate to true.
            </value>
        </member>
        <member name="T:Tangosol.Util.Filter.CacheEventFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which evaluates the content of a
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> object according to the specified
            criteria.
            </summary>
            <remarks>
            This filter is intended to be used by various
            <see cref="T:Tangosol.Net.Cache.IObservableCache"/> listeners that are interested in
            particular subsets of <b>CacheEvent</b> notifications emitted by
            the cache.
            <p/>
            Usage examples:
            <list type="bullet">
            <item>
            <description>
            a filter that evaluates to <b>true</b> if an Employee object is
            inserted into a cache with a value of IsMarried property set to
            <b>true</b>.
            <code>
            new CacheEventFilter(CacheEventMask.Inserted,
            new EqualsFilter("IsMarried", true));
            </code>
            </description>
            </item>
            <item>
            <description>
            a filter that evaluates to <b>true</b> if any object is removed from
            a cache.
            <code>
            new CacheEventFilter(CacheEventMask.Deleted);
            </code>
            </description>
            </item>
            <item>
            <description>
            a filter that evaluates to <b>true</b> if there is an update to an
            Employee object where either an old or new value of LastName property
            equals to "Smith".
            <code>
            new CacheEventFilter(CacheEventMask.Updated,
            new EqualsFilter("LastName", "Smith"));
            </code>
            </description>
            </item>
            <item>
            <description>
            a filter that is used to keep a cached keys collection result based
            on some cache filter up-to-date.
            <code>
            ICollection keys = new ArrayList();
            IFilter filterEvt = new CacheEventFilter(filterCache);
            ICacheListener listener = new TestListener();
            cache.AddCacheListener(listener, filterEvt, true);
            keys.AddAll(cache.GetKeys(filterCache));
            </code>
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="T:Tangosol.Util.Filter.ValueChangeEventFilter"/>
            <author>Gene Gleyzer  2003.09.22</author>
            <author>Goran Milosavljevic  2006.10.24</author>
            <since>Coherence 2.3</since>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventFilter.#ctor(Tangosol.Util.Filter.CacheEventFilter.CacheEventMask)">
            <summary>
            Construct a <b>CacheEventFilter</b> that evaluates
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects based on the specified
            combination of event types.
            </summary>
            <remarks>
            Using this constructor is equivalent to:
            <code>
            new CacheEventFilter(mask, null, CacheEventSyntheticMask.All);
            </code>
            </remarks>
            <param name="mask">
            Any combination of <see cref="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.Inserted"/>,
            <see cref="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.Updated"/> and
            <see cref="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.Deleted"/>,
            <see cref="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.UpdatedEntered"/>,
            <see cref="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.UpdatedWithin"/>,
            <see cref="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.UpdatedLeft"/>.
            </param>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventFilter.#ctor(Tangosol.Util.IFilter)">
            <summary>
            Construct a <b>CacheEventFilter</b> that evaluates
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects that would affect the
            results of a keys collection filter issued by a previous call to
            <see cref="P:System.Collections.IDictionary.Keys"/>.
            </summary>
            <remarks>
            It is possible to easily implement <i>continuous query</i>
            functionality.
            <p/>
            Using this constructor is equivalent to:
            <code>
            new CacheEventFilter(CacheEventMask.Keys, filter, CacheEventSyntheticMask.All);
            </code>
            </remarks>
            <param name="filter">
            The filter passed previously to a Keys query property.
            </param>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventFilter.#ctor(Tangosol.Util.Filter.CacheEventFilter.CacheEventMask,Tangosol.Util.IFilter)">
            <summary>
            Construct a <b>CacheEventFilter</b> that evaluates
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects based on the specified
            combination of event types.
            </summary>
            <param name="mask">
            Combination of any of the <see cref="T:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask"/>
            values.
            </param>
            <param name="filter">
            Optional filter used for evaluating event values.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventFilter.#ctor(Tangosol.Util.Filter.CacheEventFilter.CacheEventMask,Tangosol.Util.Filter.CacheEventFilter.CacheEventSyntheticMask)">
            <summary>
            Construct a <b>CacheEventFilter</b> that evaluates
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects based on the specified
            combination of event types.
            </summary>
            <param name="mask">
            Combination of any of the <see cref="T:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask"/>
            values.
            </param>
            <param name="maskSynth">
            Combination of any of the <see cref="T:Tangosol.Util.Filter.CacheEventFilter.CacheEventSyntheticMask"/>
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventFilter.#ctor(Tangosol.Util.Filter.CacheEventFilter.CacheEventMask,Tangosol.Util.IFilter,Tangosol.Util.Filter.CacheEventFilter.CacheEventSyntheticMask)">
            <summary>
            Construct a <b>CacheEventFilter</b> that evaluates
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects based on the specified
            combination of event types.
            </summary>
            <param name="mask">
            Combination of any of the <see cref="T:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask"/>
            values.
            </param>
            <param name="filter">
            Optional filter used for evaluating event values.
            </param>
            <param name="maskSynth">
            Combination of any of the <see cref="T:Tangosol.Util.Filter.CacheEventFilter.CacheEventSyntheticMask"/>
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventFilter.#cctor">
            <summary>
            Initialize event type to event mask translation array.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventFilter.Equals(System.Object)">
            <summary>
            Compare the <b>CacheEventFilter</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The <b>CacheEventFilter</b> to compare to.
            </param>
            <returns>
            <b>true</b> if this <b>CacheEventFilter</b> and the passed object
            are equivalent <b>CacheEventFilter</b> objects.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventFilter.GetHashCode">
            <summary>
            Determine a hash value for the <b>CacheEventFilter</b> object
            according to the general <b>object.GetHashCode()</b> contract.
            </summary>
            <returns>
            An integer hash value for this <b>CacheEventFilter</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventFilter.ToString">
            <summary>
            Return a human-readable description for this
            <b>CacheEventFilter</b>.
            </summary>
            <returns>
            A string description of the <b>CacheEventFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.m_mask">
            <summary>
            The event mask.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.m_maskSynth">
            <summary>
            The synthetic mask.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.m_filter">
            <summary>
            The event value(s) filter.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.MASK">
            <summary>
            Event type to event mask translation array.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Filter.CacheEventFilter.EventMask">
            <summary>
            Obtain the event mask.
            </summary>
            <remarks>
            The mask value is concatenation of any of the
            <see cref="T:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask"/> values.
            </remarks>
            <value>
            The event mask.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.CacheEventFilter.Filter">
            <summary>
            Obtain the <see cref="T:Tangosol.Util.IFilter"/> object used to evaluate the
            event value(s).
            </summary>
            <value>
            The filter used to evaluate the event value(s).
            </value>
        </member>
        <member name="T:Tangosol.Util.Filter.CacheEventFilter.CacheEventSyntheticMask">
            <summary>
            Event natural/synthetic mask enum.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventSyntheticMask.Synthetic">
            <summary>
            This value indicates that synthetic events should be evaluated.
            </summary>
            <remarks>
            A synthetic event is emitted as a result of internal processing
            such as expiration, eviction, or read-through.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventSyntheticMask.Natural">
            <summary>
            This value indicates that natural events should be evaluated.
            </summary>
            <remarks>
            A natural event is emitted as a result of a cache mutation.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventSyntheticMask.All">
            <summary>
            This value indicates that both synthetic and natural events
             should be evaluated.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask">
            <summary>
            Event mask enum.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.Inserted">
            <summary>
            This value indicates that
            <see cref="F:Tangosol.Net.Cache.CacheEventType.Inserted"/> events should be
            evaluated.
            </summary>
            <remarks>
            The event will be fired if there is no filter specified or
            the filter evaluates to <b>true</b> for a new value.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.Updated">
            <summary>
            This value indicates that
            <see cref="F:Tangosol.Net.Cache.CacheEventType.Updated"/> events should be
            evaluated.
            </summary>
            <remarks>
            The event will be fired if there is no filter specified or
            the filter evaluates to <b>true</b> when applied to either
            old or new value.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.Deleted">
            <summary>
            This value indicates that
            <see cref="F:Tangosol.Net.Cache.CacheEventType.Deleted"/> events should be
            evaluated.
            </summary>
            <remarks>
            The event will be fired if there is no filter specified or
            the filter evaluates evaluates to <b>true</b> for an old
            value.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.UpdatedEntered">
            <summary>
            This value indicates that
            <see cref="F:Tangosol.Net.Cache.CacheEventType.Updated"/> events should be
            evaluated, but only if filter evaluation is <b>false</b> for
            the old value and <b>true</b> for the new value.
            </summary>
            <remarks>
            This corresponds to an item that was not in a Keys filter
            result changing such that it would now be in that Keys filter
            result.
            </remarks>
            <since>Coherence 3.1</since>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.UpdatedLeft">
            <summary>
            This value indicates that
            <see cref="F:Tangosol.Net.Cache.CacheEventType.Updated"/> events should be
            evaluated, but only if filter evaluation is <b>true</b> for
            the old value and <b>false</b> for the new value.
            </summary>
            <remarks>
            This corresponds to an item that was in a Keys filter result
            changing such that it would no longer be in that Keys filter
            result.
            </remarks>
            <since>Coherence 3.1</since>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.UpdatedWithin">
            <summary>
            This value indicates that
            <see cref="F:Tangosol.Net.Cache.CacheEventType.Updated"/> events should be
            evaluated, but only if filter evaluation is <b>true</b> for
            both the old and the new value.
            </summary>
            <remarks>
            This corresponds to an item that was in a Keys filter result
            changing but not leaving the Keys filter result.
            </remarks>
            <since>Coherence 3.1</since>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.All">
            <summary>
            This value indicates that all events should be evaluated.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventFilter.CacheEventMask.Keys">
            <summary>
            This value indicates that all events that would affect the
            result of an <b>ICache.Keys</b> query should be evaluated.
            </summary>
            <since>Coherence 3.1</since>
        </member>
        <member name="T:Tangosol.Util.Filter.CacheEventTransformerFilter">
            <summary>
            CacheEventTransformerFilter is a generic multiplexing wrapper that
            combines two implementations: an <see cref="T:Tangosol.Util.IFilter"/> (most commonly
            a <see cref="T:Tangosol.Util.Filter.CacheEventFilter"/>) and an
            <see cref="T:Tangosol.Net.Cache.ICacheEventTransformer"/> and is used to register event
            listeners that allow to change the content of a
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </summary>
            <author>Gene Gleyzer/Jason Howes  2008.05.01</author>
            <author>Ana Cikic  2008.06.17</author>
            <since>Coherence 3.4</since>
            <seealso cref="T:Tangosol.Util.Transformer.SemiLiteEventTransformer"/>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventTransformerFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventTransformerFilter.#ctor(Tangosol.Util.IFilter,Tangosol.Net.Cache.ICacheEventTransformer)">
            <summary>
            Construct a CacheEventTransformerFilter based on the specified
            <see cref="T:Tangosol.Util.IFilter"/> and <see cref="T:Tangosol.Net.Cache.ICacheEventTransformer"/>.
            </summary>
            <param name="filter">
            The underlying <b>IFilter</b> (e.g.
            <see cref="T:Tangosol.Util.Filter.CacheEventFilter"/>) used to evaluate original
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects (optional).
            </param>
            <param name="transformer">
            The underlying <b>ICacheEventTransformer</b> used to transform
            original <b>CacheEventArgs</b> objects.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventTransformerFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventTransformerFilter.Transform(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Transform the specified <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </summary>
            <remarks>
            The values contained by the returned <b>CacheEventArgs</b> object
            will be the ones given (sent) to the corresponding listener.
            </remarks>
            <param name="evt">
            The original <b>CacheEventArgs</b> object.
            </param>
            <returns>
            Modified <b>CacheEventArgs</b> object or <c>null</c> to discard
            the event.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventTransformerFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventTransformerFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventTransformerFilter.GetHashCode">
            <summary>
            Determine a hash value for this object.
            </summary>
            <returns>
            An integer hash value for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventTransformerFilter.Equals(System.Object)">
            <summary>
            Compare this object with another object to determine equality.
            </summary>
            <param name="o">
            The object to compare with current object.
            </param>
            <returns>
            <b>true</b> if this object and the passed object are equivalent
            objects.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.CacheEventTransformerFilter.ToString">
            <summary>
            Return a human-readable description for this object.
            </summary>
            <returns>
            A string description of the object.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventTransformerFilter.m_filter">
            <summary>
            The underlying IFilter to evaluate CacheEventArgs with.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.CacheEventTransformerFilter.m_transformer">
            <summary>
            The underlying transformer.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Filter.ComparisonFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which compares the result of a member
            invocation with a value.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.27</author>
            <author>Goran Milosavljevic  2006.10.20</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="T:Tangosol.Util.Filter.ExtractorFilter">
            <summary>
            Base <see cref="T:Tangosol.Util.IFilter"/> implementation for doing extractor-based
            processing.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.11.01</author>
            <author>Goran Milosavljevic  2006.10.20</author>
        </member>
        <member name="M:Tangosol.Util.Filter.ExtractorFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.ExtractorFilter.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a ExtractorFilter for a given
            <see cref="T:Tangosol.Util.IValueExtractor"/>.
            </summary>
            <param name="extractor">
            The <b>IValueExtractor</b> to use by this filter.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ExtractorFilter.#ctor(System.String)">
            <summary>
            Construct an ExtractorFilter for a given member name.
            </summary>
            <param name="member">
            A member name to make a <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/> for;
            this parameter can also be a dot-delimited sequence of member
            names which would result in an ExtractorFilter based on the
            <see cref="T:Tangosol.Util.Extractor.ChainedExtractor"/> that is based on an array of
            corresponding <b>ReflectionExtractor</b> objects.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ExtractorFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ExtractorFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ExtractorFilter.EvaluateExtracted(System.Object)">
            <summary>
            Evaluate the specified extracted value.
            </summary>
            <param name="extracted">
            An extracted value to evaluate.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ExtractorFilter.Extract(System.Object)">
            <summary>
            Gets the result of <see cref="T:Tangosol.Util.IValueExtractor"/> invocation.
            </summary>
            <param name="o">
            The object on which to invoke the <b>IValueExtractor</b>;
            must not be <c>null</c>.
            </param>
            <returns>
            The result of the method invocation.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ExtractorFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.ExtractorFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Filter.ExtractorFilter.EVAL_COST">
            <summary>
            The evaluation cost as a factor to the single index access operation.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.ExtractorFilter.m_extractor">
            <summary>
            The ValueExtractor used by this filter.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Filter.ExtractorFilter.ValueExtractor">
            <summary>
            Obtain the <see cref="T:Tangosol.Util.IValueExtractor"/> used by this filter.
            </summary>
            <value>
            The <b>IValueExtractor</b> used by this filter.
            </value>
        </member>
        <member name="M:Tangosol.Util.Filter.ComparisonFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.ComparisonFilter.#ctor(Tangosol.Util.IValueExtractor,System.Object)">
            <summary>
            Construct a ComparisonFilter.
            </summary>
            <param name="extractor">
            The <b>IValueExtractor</b> to use by this filter.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ComparisonFilter.#ctor(System.String,System.Object)">
            <summary>
            Construct a ComparisonFilter.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ComparisonFilter.Equals(System.Object)">
            <summary>
            Compare the <b>ComparisonFilter</b> with another object to
            determine equality.
            </summary>
            <remarks>
            Two <b>ComparisonFilter</b> objects are considered equal if they
            are of the same type and their Extractor and Value are equal.
            </remarks>
            <param name="o">
            The <b>ComparisonFilter</b> to compare to.
            </param>
            <returns>
            <b>true</b> if this <b>ComparisonFilter</b> and the passed object
            are equivalent <b>ComparisonFilter</b> objects.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ComparisonFilter.GetHashCode">
            <summary>
            Determine a hash value for the <b>ComparisonFilter</b> object
            according to the general <b>object.GetHashCode()</b> contract.
            </summary>
            <returns>
            An integer hash value for this <b>ComparisonFilter</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ComparisonFilter.ToString">
            <summary>
            Return a human-readable description for this
            <b>ComparisonFilter</b>.
            </summary>
            <returns>
            A string description of the <b>ComparisonFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ComparisonFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.ComparisonFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.ComparisonFilter.CalculateMatchEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Helper method to calculate effectiveness for ComparisonFilters that 
            need no more than a single index match in order to retrieve all 
            necessary keys to perform the applyIndex() operation.
            Such filters are: Contains, Equals, NotEquals.
            </summary>
            <param name="indexes">
            The available MapIndex objects keyed by the related IValueExtractor; 
            read-only
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the
            specified indexes to filter the specified keys
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ComparisonFilter.CalculateRangeEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Helper method to calculate effectiveness for ComparisonFilters that 
            need a range of values from an index in order to retrieve all 
            necessary keys to perform the applyIndex() operation.
            Such filters are: Less, LessEquals, Greater, GreaterEquals.
            </summary>
            <param name="indexes">
            The available MapIndex objects keyed by the related IValueExtractor; 
            read-only
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the
            specified indexes to filter the specified keys
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ComparisonFilter.CalculateIteratorEffectiveness(System.Int32)">
            <summary>
            Helper method to calculate effectiveness (or rather ineffectiveness) of
            a simple iteration against a key set that has to be performed due to an
            absence of corresponding index.
            </summary>
            <param name="cKeys">
            The number of keys to iterate through.
            </param>
            <returns>
            The cost of the iteration.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Filter.ComparisonFilter.m_value">
            <summary>
            The value to compare to.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Filter.ComparisonFilter.Value">
            <summary>
            Gets the object to compare the extraction result with.
            </summary>
            <value>
            The object to compare the extraction result with.
            </value>
        </member>
        <member name="T:Tangosol.Util.Filter.ContainsAllFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which tests an <b>ICollection</b> or object
            array value returned from a member invocation for containment of all
            values in an collection.
            </summary>
            <author>Jason Howes  2005.06.08</author>
            <author>Goran Milosavljevic  2006.10.23</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsAllFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsAllFilter.#ctor(Tangosol.Util.IValueExtractor,System.Collections.ICollection)">
            <summary>
            Construct an <b>ContainsAllFilter</b> for testing containment of
            the given collection of values.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> used by this filter.
            </param>
            <param name="values">
            The ICollection of values that a collection or object array is
            tested to contain.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsAllFilter.#ctor(System.String,System.Collections.ICollection)">
            <summary>
            Construct an <b>ContainsAllFilter</b> for testing containment of
            the given collection of values.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="values">
            The ICollection of values that a collection or object array is
            tested to contain.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsAllFilter.EvaluateExtracted(System.Object)">
            <summary>
            Evaluate the specified extracted value.
            </summary>
            <param name="extracted">
            An extracted value to evaluate.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsAllFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsAllFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.ContainsAnyFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which tests an <b>ICollection</b> or object
            array value returned from a method invocation for containment of any
            value in a collection.
            </summary>
            <author>Jason Howes  2005.06.08</author>
            <author>Goran Milosavljevic  2006.10.23</author>
            <author>Tom Beerbower  2009.03.10</author>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsAnyFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsAnyFilter.#ctor(Tangosol.Util.IValueExtractor,System.Collections.ICollection)">
            <summary>
            Construct an <b>ContainsAnyFilter</b> for testing containment of
            any value in the given <b>ICollection</b>.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> used by this filter.
            </param>
            <param name="values">
            The <b>ICollection</b> of values that a collection or object
            array is tested to contain.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsAnyFilter.#ctor(System.String,System.Collections.ICollection)">
            <summary>
            Construct an <b>ContainsAnyFilter</b> for testing containment of
            any value in the given <b>ICollection</b>.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="values">
            The <b>ICollection</b> of values that a collection or object
            array is tested to contain.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsAnyFilter.EvaluateExtracted(System.Object)">
            <summary>
            Evaluate the specified extracted value.
            </summary>
            <param name="extracted">
            An extracted value to evaluate.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsAnyFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsAnyFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.ContainsFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which tests an <b>ICollection</b> or object
            array value returned from a method invocation for containment of a
            given value.
            </summary>
            <author>Jason Howes  2005.06.06</author>
            <author>Goran Milosavljevic  2006.10.23</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsFilter.#ctor(Tangosol.Util.IValueExtractor,System.Object)">
            <summary>
            Construct an <b>ContainsFilter</b> for testing containment of the
            given object.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> used by this filter.
            </param>
            <param name="value">
            The object that a collection or object array is tested to
            contain.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsFilter.#ctor(System.String,System.Object)">
            <summary>
            Construct an <b>ContainsFilter</b> for testing containment of
            the given object.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The object that a collection or object array is tested to
            contain.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsFilter.EvaluateExtracted(System.Object)">
            <summary>
            Evaluate the specified extracted value.
            </summary>
            <param name="extracted">
            An extracted value to evaluate.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ContainsFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.EqualsFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which compares the result of a member
            invocation with a value for equality.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.27</author>
            <author>Goran Milosavljevic  2006.10.23</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.EqualsFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.EqualsFilter.#ctor(Tangosol.Util.IValueExtractor,System.Object)">
            <summary>
            Construct an EqualsFilter for testing equality.
            </summary>
            <param name="extractor">
            The <b>IValueExtractor</b> to use by this filter.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.EqualsFilter.#ctor(System.String,System.Object)">
            <summary>
            Construct an EqualsFilter for testing equality.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.EqualsFilter.#ctor(System.String,System.Int32)">
            <summary>
            Construct an EqualsFilter for testing equality.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The integer value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.EqualsFilter.#ctor(System.String,System.Int64)">
            <summary>
            Construct an EqualsFilter for testing equality.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The long value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.EqualsFilter.#ctor(System.String,System.Single)">
            <summary>
            Construct an EqualsFilter for testing equality.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The float value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.EqualsFilter.#ctor(System.String,System.Double)">
            <summary>
            Construct an EqualsFilter for testing equality.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The double value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.EqualsFilter.EvaluateExtracted(System.Object)">
            <summary>
            Evaluate the specified extracted value.
            </summary>
            <param name="extracted">
            An extracted value to evaluate.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.EqualsFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.EqualsFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.GreaterEqualsFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which compares the result of a member
            invocation with a value for "Greater or Equal" condition.
            </summary>
            <remarks>
            In a case when either result of a member invocation or a value to
            compare are equal to <c>null</c>, the <b>Evaluate</b> test yields
            <b>false</b>. This approach is equivalent to the way the <c>null</c>
            values are handled by SQL.
            </remarks>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.29</author>
            <author>Goran Milosavljevic  2006.10.23</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterEqualsFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterEqualsFilter.#ctor(Tangosol.Util.IValueExtractor,System.IComparable)">
            <summary>
            Construct a GreaterEqualFilter for testing "Greater or Equal"
            condition.
            </summary>
            <param name="extractor">
            The <b>IValueExtractor</b> to use by this filter.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterEqualsFilter.#ctor(System.String,System.IComparable)">
            <summary>
            Construct a GreaterEqualFilter for testing "Greater or Equal"
            condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterEqualsFilter.#ctor(System.String,System.Int32)">
            <summary>
            Construct a GreaterEqualsFilter for testing "Greater or Equals"
            condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The integer value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterEqualsFilter.#ctor(System.String,System.Int64)">
            <summary>
            Construct a GreaterEqualsFilter for testing "Greater or Equals"
            condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The long value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterEqualsFilter.#ctor(System.String,System.Single)">
            <summary>
            Construct a GreaterEqualsFilter for testing "Greater or Equals"
            condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The float value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterEqualsFilter.#ctor(System.String,System.Double)">
            <summary>
            Construct a GreaterEqualsFilter for testing "Greater or Equals"
            condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The double value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterEqualsFilter.EvaluateExtracted(System.Object)">
            <summary>
            Evaluate the specified extracted value.
            </summary>
            <param name="extracted">
            An extracted value to evaluate.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterEqualsFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterEqualsFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.GreaterFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which compares the result of a member
            invocation with a value for "Greater" condition.
            </summary>
            <remarks>
            In a case when either result of a member invocation or a value to
            compare are equal to <c>null</c>, the <b>Evaluate</b> test yields
            <b>false</b>. This approach is equivalent to the way the <c>null</c>
            values are handled by SQL.
            </remarks>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.29</author>
            <author>Goran Milosavljevic  2006.10.23</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterFilter.#ctor(Tangosol.Util.IValueExtractor,System.IComparable)">
            <summary>
            Construct a <b>GreaterFilter</b> for testing "Greater" condition.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> to use by this filter.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterFilter.#ctor(System.String,System.IComparable)">
            <summary>
            Construct a <b>GreaterFilter</b> for testing "Greater" condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterFilter.#ctor(System.String,System.Int32)">
            <summary>
            Construct a <b>GreaterFilter</b> for testing "Greater" condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The integer value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterFilter.#ctor(System.String,System.Int64)">
            <summary>
            Construct a <b>GreaterFilter</b> for testing "Greater" condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The long value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterFilter.#ctor(System.String,System.Single)">
            <summary>
            Construct a <b>GreaterFilter</b> for testing "Greater" condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The float value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterFilter.#ctor(System.String,System.Double)">
            <summary>
            Construct a <b>GreaterFilter</b> for testing "Greater" condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The double value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterFilter.EvaluateExtracted(System.Object)">
            <summary>
            Evaluate the specified extracted value.
            </summary>
            <param name="extracted">
            An extracted value to evaluate.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.GreaterFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.InFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which checks whether the result of a member
            invocation belongs to a predefined collection of values.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.11.08</author>
            <author>Goran Milosavljevic  2006.10.23</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.InFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.InFilter.#ctor(Tangosol.Util.IValueExtractor,System.Collections.ICollection)">
            <summary>
            Construct an InFilter for testing "In" condition.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> to use by this filter.
            </param>
            <param name="values">
            The collection of values to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.InFilter.#ctor(System.String,System.Collections.ICollection)">
            <summary>
            Construct an <b>InFilter</b> for testing "In" condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="values">
            The collection of values to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.InFilter.EvaluateExtracted(System.Object)">
            <summary>
            Evaluate the specified extracted value.
            </summary>
            <param name="extracted">
            An extracted value to evaluate.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.InFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.InFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.InFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.InFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.InKeySetFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> that limits the underlying filter evaluation
            only to the specified collection of keys.
            </summary>
            <author>Gene Gleyzer  2006.06.12</author>
            <author>Goran Milosavljevic  2006.10.24</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.InKeySetFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.InKeySetFilter.#ctor(Tangosol.Util.IFilter,System.Collections.ICollection)">
            <summary>
            Construct an InKeySetFilter.
            </summary>
            <param name="filter">
            The underlying filter.
            </param>
            <param name="keys">
            The collection of keys to limit the filter evaluation to.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.InKeySetFilter.EnsureConverted(Tangosol.Util.IConverter)">
            <summary>
            Ensure that the underlying keys are converted using the specified converter.
            </summary>
            <param name="converter">
            The Converter to use to convert the keys.
            </param>
            <since>12.2.1</since>
        </member>
        <member name="M:Tangosol.Util.Filter.InKeySetFilter.ToString">
            <summary>
            Return a human-readable description for this
            <b>InKeySetFilter</b>.
            </summary>
            <returns>
            A string description of the <b>InKeySetFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.InKeySetFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.InKeySetFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.InKeySetFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.InKeySetFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.InKeySetFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.InKeySetFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Filter.InKeySetFilter.m_filter">
            <summary>
            The underlying IFilter.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.InKeySetFilter.m_keys">
            <summary>
            The underlying collection of keys.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.InKeySetFilter.m_isConverted">
            <summary>
            A flag that indicates that the key set has been converted to internal form.
            </summary>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Util.Filter.InKeySetFilter.Filter">
            <summary>
            Obtain the underying <see cref="T:Tangosol.Util.IFilter"/>.
            </summary>
            <value>
            The underlying filter.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.InKeySetFilter.Keys">
            <summary>
            Obtain the underlying collection of keys.
            </summary>
            <value>
            The underlying key set.
            </value>
            <since>12.2.1</since>
        </member>
        <member name="P:Tangosol.Util.Filter.InKeySetFilter.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <b>InKeySetFilter</b>.
            </summary>
            <value>
            An object that can be used to synchronize access to the
            <b>InKeySetFilter</b>.
            </value>
            <since>12.2.1</since>
        </member>
        <member name="T:Tangosol.Util.Filter.IsNotNullFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which tests the result of a member invocation
            for inequality to <c>null</c>.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.27</author>
            <author>Goran Milosavljevic  2006.10.24</author>
        </member>
        <member name="T:Tangosol.Util.Filter.NotEqualsFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which compares the result of a member
            invocation with a value for inequality.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.27</author>
            <author>Goran Milosavljevic  2006.10.24</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.NotEqualsFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.NotEqualsFilter.#ctor(Tangosol.Util.IValueExtractor,System.Object)">
            <summary>
            Construct a <b>NotEqualsFilter</b> for testing inequality.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> to use by this filter.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.NotEqualsFilter.#ctor(System.String,System.Object)">
            <summary>
            Construct a <b>NotEqualsFilter</b> for testing inequality.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.NotEqualsFilter.#ctor(System.String,System.Int32)">
            <summary>
            Construct a <b>NotEqualsFilter</b> for testing inequality.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The integer value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.NotEqualsFilter.#ctor(System.String,System.Int64)">
            <summary>
            Construct a <b>NotEqualsFilter</b> for testing inequality.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The long value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.NotEqualsFilter.#ctor(System.String,System.Single)">
            <summary>
            Construct a <b>NotEqualsFilter</b> for testing inequality.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The float value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.NotEqualsFilter.#ctor(System.String,System.Double)">
            <summary>
            Construct a <b>NotEqualsFilter</b> for testing inequality.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The double value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.NotEqualsFilter.EvaluateExtracted(System.Object)">
            <summary>
            Evaluate the specified extracted value.
            </summary>
            <param name="extracted">
            An extracted value to evaluate.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NotEqualsFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NotEqualsFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.IsNotNullFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.IsNotNullFilter.#ctor(System.String)">
            <summary>
            Construct an <b>IsNotNullFilter</b> for testing inequality to
            <c>null</c>.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
        </member>
        <member name="T:Tangosol.Util.Filter.IsNullFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which compares the result of a member
            invocation with <c>null</c>.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.27</author>
            <author>Goran Milosavljevic  2006.10.24</author>
        </member>
        <member name="M:Tangosol.Util.Filter.IsNullFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.IsNullFilter.#ctor(System.String)">
            <summary>
            Construct an <b>IsNullFilter</b> for testing equality to
            <c>null</c>.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
        </member>
        <member name="T:Tangosol.Util.Filter.KeyAssociatedFilter">
             <summary>
             <see cref="T:Tangosol.Util.IFilter"/> which limits the scope of another filter
             according to the key association information.
             </summary>
             <remarks>
             <p/>
             This filter is intended to be used to optimize queries for
             partitioned caches that utilize any of the key association
             algorithms (by implementing either <b>KeyAssociator</b> or
             <b>KeyAssociation</b>) to ensure placement of all associated
             entries in the same distributed cache partition (and therefore
             in the same storage-enabled cluster node). Using the
             <b>KeyAssociatedFilter</b> will instruct the distributed cache
             to apply the wrapped filter only to the entries stored at the
             cache service node that owns the specified host key.
             <p/>
             <b>Note 1:</b> This filter must be the outermost filter and cannot
             be used as a part of any composite filter
             (<see cref="T:Tangosol.Util.Filter.AndFilter"/>, <see cref="T:Tangosol.Util.Filter.OrFilter"/>, etc.)
             <p/>
             <b>Note 2:</b> This filter is intended to be processed only on the
             client side of the partitioned cache service.
             <p/>
             For example, consider two classes called <i>Parent</i> and
             <i>Child</i> that are stored in separate caches using
             <i>ParentKey</i> and <i>ChildKey</i> objects respectively.
             The Parent and Child classes have a <i>Id</i> property that returns
             a Long value that uniquely identifies the object. Similarly, the
             ParentKey and ChildKey classes have a <i>Id</i> property that
             uniquely identifies the corresponding cached object. Futhermore, the
             Child and ChildKey classes include a <i>ParentId</i> property that
             returns the Long identifier of the Parent object.
             <p/>
             There are two ways to ensure that Child objects are collocated with
             their Parent objects (in the same storage-enabled cluster node).
             <list type="number">
             <item>
             <description>
             Make the ChildKey class implement <b>KeyAssociation</b> as follows:
             <code>
             public Object AssociatedKey
             {
                 get { return ParentId; }
             }
             </code>
             and the ParentKey class implement <b>KeyAssociation</b> as follows:
             <code>
             public Object AssociatedKey
             {
                 get { return Id; }
             }
             </code>
             </description>
             </item>
             <item>
             <description>
             Implement a custom <b>KeyAssociator</b> as follows:
             <code>
             public object GetAssociatedKey(object key)
             {
                 if (key is ChildKey)
                 {
                     return ((ChildKey) key).ParentId;
                 }
                 else if (key is ParentKey)
                 {
                     return ((ParentKey) key).Id;
                 }
                 else
                 {
                 return null;
                 }
             }
             </code>
             </description>
             </item>
             </list>
             The first approach requires a trivial change to the ChildKey and
             ParentKey classes, whereas the second requires a new class and a
             configuration change, but no changes to existing classes.
             <p/>
             Now, to retrieve all the Child objects of a given Parent using an
             optimized query you would do the following:
             <code>
             ParentKey parentKey = new ParentKey(...);
             Long      parentId  = parentKey.Id;
            
             // this Filter will be applied to all Child objects in order to fetch
             // those for which ParentId returns the specified Parent identifier
             IFilter filterEq = new EqualsFilter("ParentId", parentId);
            
             // this Filter will direct the query to the cluster node that
             // currently owns the Parent object with the given identifier
             IFilter filterAsc = new KeyAssociatedFilter(filterEq, parentId);
            
             // run the optimized query to get the ChildKey objects
             ICollection colChildKeys = cacheChildren.Keys(filterAsc);
            
             // get all the Child objects at once
             ICollection colChildren = cacheChildren.GetAll(colChildKeys);
             </code>
             To remove the Child objects you would then do the following:
             <code>cacheChildren.Keys.RemoveAll(colChildKeys);</code>
             </remarks>
             <author>Gene Gleyzer  2005.06.09</author>
             <author>Jason Howes  2005.11.02</author>
             <author>Goran Milosavljevic  2006.10.24</author>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyAssociatedFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyAssociatedFilter.#ctor(Tangosol.Util.IFilter,System.Object)">
            <summary>
            Construct a key associated filter.
            </summary>
            <param name="filter">
            The underlying (wrapped) filter.
            </param>
            <param name="hostKey">
            The host key that serves as an associated key for all keys that
            the wrapped filter will be applied to.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyAssociatedFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyAssociatedFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyAssociatedFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyAssociatedFilter.Equals(System.Object)">
            <summary>
            Compare the <b>KeyAssociatedFilter</b> with another object to
            determine equality.
            </summary>
            <remarks>
            Two <b>KeyAssociatedFilter</b> objects are considered equal if
            the wrapped filters and host keys are equal.
            </remarks>
            <param name="obj">
            The <b>KeyAssociatedFilter</b> to compare to.
            </param>
            <returns>
            <b>true</b> if this <b>KeyAssociatedFilter</b> and the passed
            object are equivalent <b>KeyAssociatedFilter</b> objects.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyAssociatedFilter.GetHashCode">
            <summary>
            Determine a hash value for the <b>KeyAssociatedFilter</b> object
            according to the general <b>object.GetHashCode()</b> contract.
            </summary>
            <returns>
            An integer hash value for this <b>KeyAssociatedFilter</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.KeyAssociatedFilter.ToString">
            <summary>
            Return a human-readable description for this
            <b>KeyAssociatedFilter</b>.
            </summary>
            <returns>
            A string description of the <b>KeyAssociatedFilter</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Filter.KeyAssociatedFilter.m_filter">
            <summary>
            The underlying filter.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.KeyAssociatedFilter.m_hostKey">
            <summary>
            The association host key.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Filter.KeyAssociatedFilter.HostKey">
            <summary>
            Obtain the host key that serves as an associated key for all keys
            that the wrapped filter will be applied to.
            </summary>
            <value>
            The host key.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.KeyAssociatedFilter.Filter">
            <summary>
            Obtain the wrapped <see cref="T:Tangosol.Util.IFilter"/>.
            </summary>
            <value>
            The wrapped filter object.
            </value>
        </member>
        <member name="T:Tangosol.Util.Filter.LessEqualsFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which compares the result of a member
            invocation with a value for "Less or Equals" condition.
            </summary>
            <remarks>
            In a case when either result of a member invocation or a value to
            compare are equal to <c>null</c>, the <b>Evaluate</b> test yields
            <b>false</b>. This approach is equivalent to the way the <c>null</c>
            values are handled by SQL.
            </remarks>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.29</author>
            <author>Goran Milosavljevic  2006.10.23</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.LessEqualsFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.LessEqualsFilter.#ctor(Tangosol.Util.IValueExtractor,System.IComparable)">
            <summary>
            Construct a LessEqualsFilter for testing "Less or Equals"
            condition.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> to use by this filter.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LessEqualsFilter.#ctor(System.String,System.IComparable)">
            <summary>
            Construct a LessEqualsFilter for testing "Less or Equals"
            condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LessEqualsFilter.#ctor(System.String,System.Int32)">
            <summary>
            Construct a LessEqualsFilter for testing "Less or Equals"
            condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The integer value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LessEqualsFilter.#ctor(System.String,System.Int64)">
            <summary>
            Construct a LessEqualsFilter for testing "Less or Equals"
            condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The long value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LessEqualsFilter.#ctor(System.String,System.Single)">
            <summary>
            Construct a LessEqualsFilter for testing "Less or Equals"
            condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The float value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LessEqualsFilter.#ctor(System.String,System.Double)">
            <summary>
            Construct a LessEqualsFilter for testing "Less or Equals"
            condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The double value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LessEqualsFilter.EvaluateExtracted(System.Object)">
            <summary>
            Evaluate the specified extracted value.
            </summary>
            <param name="extracted">
            An extracted value to evaluate.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LessEqualsFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LessEqualsFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.LessFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which compares the result of a member
            invocation with a value for "Less" condition.
            </summary>
            <remarks>
            In a case when either result of a member invocation or a value to
            compare are equal to <c>null</c>, the <b>Evaluate</b> test yields
            <b>false</b>. This approach is equivalent to the way the <c>null</c>
            values are handled by SQL.
            </remarks>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.29</author>
            <author>Goran Milosavljevic  2006.10.24</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.LessFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.LessFilter.#ctor(Tangosol.Util.IValueExtractor,System.IComparable)">
            <summary>
            Construct a <b>LessFilter</b> for testing "Less" condition.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> to use by this filter.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LessFilter.#ctor(System.String,System.IComparable)">
            <summary>
            Construct a <b>LessFilter</b> for testing "Less" condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The object to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LessFilter.#ctor(System.String,System.Int32)">
            <summary>
            Construct a <b>LessFilter</b> for testing "Less" condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The integer value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LessFilter.#ctor(System.String,System.Int64)">
            <summary>
            Construct a <b>LessFilter</b> for testing "Less" condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            Te long value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LessFilter.#ctor(System.String,System.Single)">
            <summary>
            Construct a <b>LessFilter</b> for testing "Less" condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The float value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LessFilter.#ctor(System.String,System.Double)">
            <summary>
            Construct a <b>LessFilter</b> for testing "Less" condition.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="value">
            The double value to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LessFilter.EvaluateExtracted(System.Object)">
            <summary>
            Evaluate the specified extracted value.
            </summary>
            <param name="extracted">
            An extracted value to evaluate.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LessFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LessFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.LikeFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which compares the result of a member
            invocation with a value for pattern match.
            </summary>
            <remarks>
            A pattern can include regular characters and wildcard
            characters '_' and '%'.
            <p/>
            During pattern matching, regular characters must exactly match the
            characters in an evaluated string. Wildcard character '_'
            (underscore) can be matched with any single character, and wildcard
            character '%' can be matched with any string fragment of zero or more
            characters.
            </remarks>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.27</author>
            <author>Goran Milosavljevic  2006.10.24</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.#ctor(System.String,System.String)">
            <summary>
            Construct a <b>LikeFilter</b> for pattern match.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="pattern">
            The string pattern to compare the result with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Construct a <b>LikeFilter</b> for pattern match.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="pattern">
            The string pattern to compare the result with.
            </param>
            <param name="ignoreCase">
            <b>true</b> to be case-insensitive.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.#ctor(System.String,System.String,System.Char,System.Boolean)">
            <summary>
            Construct a <b>LikeFilter</b> for pattern match.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
            <param name="pattern">
            The string pattern to compare the result with.
            </param>
            <param name="escape">
            The escape character for escaping '%' and '_'.
            </param>
            <param name="ignoreCase">
            <b>true</b> to be case-insensitive.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.#ctor(Tangosol.Util.IValueExtractor,System.String,System.Char,System.Boolean)">
            <summary>
            Construct a <b>LikeFilter</b> for pattern match.
            </summary>
            <param name="extractor">
            The <see cref="T:Tangosol.Util.IValueExtractor"/> to use by this filter.
            </param>
            <param name="pattern">
            The string pattern to compare the result with.
            </param>
            <param name="escape">
            The escape character for escaping '%' and '_'.
            </param>
            <param name="ignoreCase">
            <b>true</b> to be case-insensitive.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.Init(System.Char,System.Boolean)">
            <summary>
            Initialize this filter.
            </summary>
            <param name="escape">
            The escape character for escaping '%' and '_'.
            </param>
            <param name="ignoreCase">
            <b>true</b> to be case-insensitive.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.IsMatch(System.String)">
            <summary>
            Check the passed string value to see if it matches the pattern
            that this filter was constructed with.
            </summary>
            <param name="value">
            The <b>string</b> value to match against this filter's pattern.
            </param>
            <returns>
            <b>true</b> if the passed <b>string</b> value is LIKE this
            filter's pattern.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.BuildPlan">
            <summary>
            Build a plan for processing the LIKE functionality.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.EvaluateExtracted(System.Object)">
            <summary>
            Evaluate the specified extracted value.
            </summary>
            <param name="extracted">
            An extracted value to evaluate.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.ANY">
            <summary>
            A special object that represents a "match any" ('%') portion of a
            pattern while building a processing plan.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.m_escape">
            <summary>
            The escape character for escaping '_' and '%' in the pattern.
            The value zero is reserved to mean "no escape".
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.m_ignoreCase">
            <summary>
            The option to ignore case sensitivity. <b>true</b> means that
            the filter will match using the same logic that is used by the
            <b>String.EqualsIgnoreCase</b> method.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.m_plan">
            <summary>
            Optimization plan number. Zero means default iterative evalution
            is necessary.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.m_partChar">
            <summary>
            Used by single-character matching optimization plans.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.m_part">
            <summary>
            Used by string-character matching optimization plans.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.m_stepFront">
            <summary>
            The "front" matching step used by the iterative processing;
            <c>null</c> if the pattern starts with '%'.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.m_stepBack">
            <summary>
            The "back" matching step used by the iterative processing;
            <c>null</c> if the pattern ends with '%'.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.m_isTrailingTextAllowed">
            <summary>
            For iterative plans with a null "back" matching step,
            is trailing data permitted.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.m_stepsMiddle">
            <summary>
            The array of "middle" matching steps used by the iterative
            processing; may be <c>null</c> if none.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Filter.LikeFilter.Pattern">
            <summary>
            Obtain the filter's pattern string.
            </summary>
            <value>
            The pattern string.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.LikeFilter.IsIgnoreCase">
            <summary>
            Check whether or not the filter is case incensitive.
            </summary>
            <value>
            <b>true</b> if case insensitivity is specifically enabled.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.LikeFilter.IgnoreCase">
            <summary>
            Check whether or not the filter is case incensitive.
            </summary>
            <value>
            <b>true</b> if case insensitivity is specifically enabled.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.LikeFilter.EscapeChar">
            <summary>
            Obtain the escape character that is used for escaping '%' and
            '_' in the pattern or zero if there is no escape.
            </summary>
            <value>
            The escape character.
            </value>
        </member>
        <member name="T:Tangosol.Util.Filter.LikeFilter.MatchStep">
            <summary>
            Handles one matching step for a literal or a character-by-
            character (literal and/or '_' matching).
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.MatchStep.#ctor(Tangosol.Util.Filter.LikeFilter,System.Text.StringBuilder,System.Collections.BitArray)">
            <summary>
            Construct a MatchStep object.
            </summary>
            <param name="enclosingInstance">
            <b>LikeFilter</b> instance.
            </param>
            <param name="sb">
            The StringBuffer of characters to match in this step.
            </param>
            <param name="bits">
            Corresponding to each character, true if any character is
            allowed ('_').
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.MatchStep.ToString">
            <summary>
            Return a human-readable description for this object.
            </summary>
            <returns>
            A human-readable description of this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LikeFilter.MatchStep.IndexOf(System.Char[],System.Int32,System.Int32)">
            <summary>
            Find the first index of this match step in the passed
            character array starting at the passed offset and within the
            specified number of characters.
            </summary>
            <param name="chars">
            The array of characters within which to find a match.
            </param>
            <param name="offsetBegin">
            The starting offset in character array to start looking for a
            match.
            </param>
            <param name="offsetEnd">
            The first offset in the character array which is beyond the
            region that this operation is allowed to search through to
            find a match.
            </param>
            <returns>
            The first index at which the match is made, or -1 if the
            match cannot be made in the designated range of offsets.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.MatchStep.m_match">
            <summary>
            The match pattern, as a string.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.MatchStep.m_matchCharsUpper">
            <summary>
            The match pattern, as an array of char values.
            </summary>
            <remarks>
            If the filter is case insensitive, then this is the
            uppercase form of the char values.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.MatchStep.m_matchCharsLower">
            <summary>
            The match pattern for a case insensitive like filter,
            as an array of lowercase char values.
            </summary>
            <remarks>
            For case sensitive filters, this is <c>null</c>.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.MatchStep.m_any">
            <summary>
            For each character, <b>true</b> if the character is a
            wildcard ('_'), or <c>null</c> if there are no wildcards.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.MatchStep.m_skipFront">
            <summary>
            Number of leading wildcards.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.MatchStep.m_skipBack">
            <summary>
            Number of trailing wildcards.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.MatchStep.m_isMiddleWilds">
            <summary>
            <b>true</b> if there are any wildcards in the middle.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.MatchStep.m_filter">
            <summary>
            Parent LikeFilter instance.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Filter.LikeFilter.MatchStep.String">
            <summary>
            The match pattern.
            </summary>
            <value>
            The match pattern as a String.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.LikeFilter.MatchStep.Length">
            <summary>
            The length of the match pattern.
            </summary>
            <value>
            The length of the match pattern.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.LikeFilter.MatchStep.IsLiteral">
            <summary>
            Determines if there are wildcards in the match pattern.
            </summary>
            <value>
            <b>true</b> if there are no wildcards ('_') in the match
            pattern.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.LikeFilter.MatchStep.Filter">
            <summary>
            Parent <b>LikeFilter</b>.
            </summary>
            <value>
            Parent <b>LikeFilter</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.Filter.LikeFilter.OptimizationPlan">
            <summary>
            Optimization plan enum values.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.OptimizationPlan.IterativeEval">
            <summary>
            Non-optimized plan with support for trailing data.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.OptimizationPlan.StartsWithChar">
            <summary>
            Optimized plan: The pattern is anything that starts with a
            specific character ("x%").
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.OptimizationPlan.StartsWithString">
            <summary>
            Optimized plan: The pattern is anything that starts with a
            specific string ("xyz%").
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.OptimizationPlan.StartsWithInsens">
            <summary>
            Optimized plan: The pattern is anything that starts with a
            specific (but case-insensitive) string ("xyz%").
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.OptimizationPlan.EndsWithChar">
            <summary>
            Optimized plan: The pattern is anything that ends with a
            specific character ("%x").
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.OptimizationPlan.EndsWithString">
            <summary>
            Optimized plan: The pattern is anything that ends with a
            specific string ("%xyz").
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.OptimizationPlan.EndsWithInsens">
            <summary>
            Optimized plan: The pattern is anything that ends with a
            specific (but case-insensitive) string ("%xyz").
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.OptimizationPlan.ContainsChar">
            <summary>
            Optimized plan: The pattern is anything that contains a
            specific character ("%x%").
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.OptimizationPlan.ContainsString">
            <summary>
            Optimized plan: The pattern is anything that contains a
            specific string ("%xyz%").
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.OptimizationPlan.AlwaysTrue">
            <summary>
            Optimized plan: Everyting matches ("%").
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.OptimizationPlan.AlwaysFalse">
            <summary>
            Optimized plan: Nothing matches (null).
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.OptimizationPlan.ExactMatch">
            <summary>
            Optimized plan: Exact match ("xyz").
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LikeFilter.OptimizationPlan.InsensMatch">
            <summary>
            Optimized plan: Exact case-insensitive match ("xyz").
            </summary>
        </member>
        <member name="T:Tangosol.Util.Filter.LimitFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which truncates the results of another filter.
            </summary>
            <remarks>
            This filter is a mutable object that is modified by the query
            processor. Clients are supposed to hold a reference to this filter
            and repetitively pass it to query methods after setting a desired
            page context.
            </remarks>
            <author>Gene Gleyzer  2002.12.06</author>
            <author>Goran Milosavljevic  2006.10.24</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.#ctor(Tangosol.Util.IFilter,System.Int32)">
            <summary>
            Construct a limit filter.
            </summary>
            <param name="filter">
            The filter whose results this filter truncates.
            </param>
            <param name="pageSize">
            Page size.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.ToString">
            <summary>
            Return a human-readable description for this
            <b>LimitFilter</b>.
            </summary>
            <returns>
            A string description of the <b>LimitFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.NextPage">
            <summary>
            Switch to the next page.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.PreviousPage">
            <summary>
            Switch to the previous page.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.ExtractPage(System.Object[])">
            <summary>
            Extract a subset of the specified array to fit the filter's
            parameters (i.e. page size and page number).
            </summary>
            <remarks>
            If this filter has a comparator, the specified array is presumed
            to be sorted accordingly.
            <p />
            The returned array is guaranteed to iterate exactly in the same
            order as the original array.
            </remarks>
            <param name="entries">
            An original array of entries.
            </param>
            <returns>
            An array of entries extracted accordingly to the filter
            parameters.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.ExtractPage(System.Collections.ICollection)">
            <summary>
            Extract a subset of the specified set to fit the filter's
            parameters (i.e. page size and page number).
            </summary>
            <remarks>
            If this filter has a comparator, the specified <b>ICollection</b>
            is presumed to be sorted accordingly.
            <p />
            The returned set is guaranteed to iterate exactly in the same
            order as the original set.
            </remarks>
            <param name="entries">
            An original set of entries.
            </param>
            <returns>
            A set of entries extracted accordingly to the filter
            parameters.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.ExtractPage(System.Collections.IEnumerator)">
            <summary>
            Extract a subset of the specified iterator to fit the filter's
            parameters (i.e. page size and page number).
            </summary>
            <remarks>
            The returned array is guaranteed to iterate exactly in the same
            order as the original iterator.
            </remarks>
            <param name="iter">
            An original entry iterator.
            </param>
            <returns>
            An array of entries extracted accordingly to the filter
            parameters
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.LimitFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Filter.LimitFilter.m_filter">
            <summary>
            The IFilter whose results are truncated by this filter.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LimitFilter.m_pageSize">
            <summary>
            The number of entries per page.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LimitFilter.m_page">
            <summary>
            The page number.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LimitFilter.m_comparer">
            <summary>
            The IComparer used to partition the entry values into pages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LimitFilter.m_anchorTop">
            <summary>
            The top anchor object (the last object on a previous page).
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LimitFilter.m_anchorBottom">
            <summary>
            The bottom anchor object (the last object on the current page).
            </summary>
        </member>
        <member name="F:Tangosol.Util.Filter.LimitFilter.m_cookie">
            <summary>
            The cookie object used by the query processors to store a
            transient state of the request (on a client side).
            </summary>
        </member>
        <member name="P:Tangosol.Util.Filter.LimitFilter.Filter">
            <summary>
            Gets the <see cref="T:Tangosol.Util.IFilter"/> whose results are truncated by
            this filter.
            </summary>
            <value>
            The filter whose results are truncated by this filter.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.LimitFilter.PageSize">
            <summary>
            Gets or sets the page size (expressed as a number of entries per
            page).
            </summary>
            <value>
            The page size.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.LimitFilter.Page">
            <summary>
            Gets or sets current page number (zero-based).
            </summary>
            <value>
            The current page number.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.LimitFilter.Comparer">
            <summary>
            Gets or sets the <b>IComparer</b> used to partition the entry
            values into pages.
            </summary>
            <remarks>
            This method is intended to be used only by query processors.
            Clients should not modify the content of this property.
            </remarks>
            <value>
            The <b>IComparer</b> object.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.LimitFilter.TopAnchor">
            <summary>
            Gets or sets the top anchor object, which is the last value
            object on a previous page.
            </summary>
            <remarks>
            This method is intended to be used only by query processors.
            Clients should not modify the content of this property.
            </remarks>
            <value>
            Top anchor object.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.LimitFilter.BottomAnchor">
            <summary>
            Gets or sets the bottom anchor object, which is the last value
            object on the current page.
            </summary>
            <remarks>
            This method is intended to be used only by query processors.
            Clients should not modify the content of this property.
            </remarks>
            <value>
            Bottom anchor object.
            </value>
        </member>
        <member name="P:Tangosol.Util.Filter.LimitFilter.Cookie">
            <summary>
            Gets or sets the cookie object.
            </summary>
            <remarks>
            This method is intended to be used only by query processors.
            Clients should not modify the content of this property.
            </remarks>
            <value>
            Cookie object.
            </value>
        </member>
        <member name="T:Tangosol.Util.Filter.NeverFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which always evaluates to <b>false</b>.
            </summary>
            <author>Gene Gleyzer  2003.09.18</author>
            <author>Goran Milosavljevic  2006.10.24</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.NeverFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.NeverFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NeverFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NeverFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NeverFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NeverFilter.Equals(System.Object)">
            <summary>
            Compare the <b>NeverFilter</b> with another object to determine
            equality.
            </summary>
            <param name="o">
            The <b>NeverFilter</b> to compare to.
            </param>
            <returns>
            <b>true</b> if this <b>NeverFilter</b> and the passed object are
            equivalent <b>NeverFilter</b> objects.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NeverFilter.GetHashCode">
            <summary>
            Determine a hash value for the <b>NeverFilter</b> object
            according to the general <b>Object.GetHashCode()</b> contract.
            </summary>
            <returns>
            An integer hash value for this <b>NeverFilter</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NeverFilter.ToString">
            <summary>
            Return a human-readable description for this <b>NeverFilter</b>.
            </summary>
            <returns>
            A string description of the <b>NeverFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NeverFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.NeverFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Filter.NeverFilter.Instance">
            <summary>
            An instance of the NeverFilter.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Filter.NotFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which negates the results of another filter.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.26</author>
            <author>Goran Milosavljevic  2006.10.24</author>
            <author>Tom Beerbower  2009.03.09</author>
        </member>
        <member name="M:Tangosol.Util.Filter.NotFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.NotFilter.#ctor(Tangosol.Util.IFilter)">
            <summary>
            Construct a negation filter.
            </summary>
            <param name="filter">
            The filter whose results this <b>IFilter</b> negates.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.NotFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NotFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NotFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NotFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NotFilter.GetNonPartialIndexes(System.Collections.IDictionary)">
            <summary>
            Get an IDictionary of the available non-partial indexes from the
            given IDictionary of all available indexes.
            </summary>
            <param name="indexes">The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/>
            objects keyed by the related IValueExtractor; read-only.</param>
            <returns>An IDictionary of the available non-partial
            <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects.</returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NotFilter.Equals(System.Object)">
            <summary>
            Compare the <b>NotFilter</b> with another object to determine
            equality.
            </summary>
            <param name="o">
            The <b>NotFilter</b> to compare to.
            </param>
            <returns>
            <b>true</b> if this <b>NotFilter</b> and the passed object are
            equivalent <b>NotFilter</b> objects.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NotFilter.GetHashCode">
            <summary>
            Determine a hash value for the <b>NotFilter</b> object according
            to the general <b>object.GetHashCode()</b> contract.
            </summary>
            <returns>
            An integer hash value for this <b>NotFilter</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NotFilter.ToString">
            <summary>
            Return a human-readable description for this <b>NotFilter</b>.
            </summary>
            <returns>
            A string description of the <b>NotFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.NotFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.NotFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Filter.NotFilter.m_filter">
            <summary>
            The IFilter whose results are negated by this filter.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Filter.NotFilter.Filter">
            <summary>
            Obtain the <b>IFilter</b> whose results are negated by this
            filter.
            </summary>
            <value>
            The filter whose results are negated by this filter.
            </value>
        </member>
        <member name="T:Tangosol.Util.Filter.OrFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which returns the logical "or" of two other
            filters.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.27</author>
            <author>Goran Milosavljevic  2006.10.24</author>
        </member>
        <member name="M:Tangosol.Util.Filter.OrFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.OrFilter.#ctor(Tangosol.Util.IFilter,Tangosol.Util.IFilter)">
            <summary>
            Construct an "or" filter.
            </summary>
            <remarks>
            The result is defined as:
            <code>
            filterLeft || filterRight
            </code>
            </remarks>
            <param name="filterLeft">
            The "left" filter.
            </param>
            <param name="filterRight">
            The "right" filter.
            </param>
        </member>
        <member name="T:Tangosol.Util.Filter.PresentFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which returns <b>true</b> for
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> objects that currently exist
            in an <see cref="T:Tangosol.Net.Cache.ICache"/>.
            </summary>
            <remarks>
            This filter is intended to be used solely in combination with a
             <see cref="T:Tangosol.Util.Processor.ConditionalProcessor"/> and is unnecessary for standard
            <see cref="T:Tangosol.Net.Cache.IQueryCache"/> operations.
            </remarks>
            <author>Jason Howes  2005.12.16</author>
            <author>Goran Milosavljevic  2006.10.24</author>
            <author>Tom Beerbower  2009.03.10</author>
            <seealso cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.IsPresent"/>
        </member>
        <member name="M:Tangosol.Util.Filter.PresentFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.PresentFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.PresentFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.PresentFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.PresentFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.PresentFilter.Equals(System.Object)">
            <summary>
            Compare the <b>PresentFilter</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The <b>PresentFilter</b> to compare to.
            </param>
            <returns>
            <b>true</b> if this <b>PresentFilter</b> and the passed object
            are equivalent <b>PresentFilter</b> objects.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.PresentFilter.GetHashCode">
            <summary>
            Determine a hash value for the <b>PresentFilter</b> object
            according to the general <b>object.GetHashCode()</b> contract.
            </summary>
            <returns>
            An integer hash value for this <b>PresentFilter</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.PresentFilter.ToString">
            <summary>
            Return a human-readable description for this
            <b>PresentFilter</b>.
            </summary>
            <returns>
            A string description of the <b>PresentFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.PresentFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.PresentFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Filter.PresentFilter.Instance">
            <summary>
            An instance of the PresentFilter.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Filter.PriorityFilter">
            <summary>
            PriorityFilter is used to explicitly control the scheduling priority
            and timeouts for execution of filter-based methods.
            </summary>
            <remarks>
            For example, let's assume that there is a cache that belongs to a
            partitioned cache service configured with a <i>request-timeout</i>
            and <i>task-timeout</i> of 5 seconds. Also assume that we are willing
            to wait longer for a particular rarely executed parallel query that
            does not employ any indexes. Then we could override the default
            timeout values by using the PriorityFilter as follows:
            <code>
            LikeFilter     filterStandard = new LikeFilter("GetComments", "%fail%");
            PriorityFilter filterPriority = new PriorityFilter(filterStandard);
            filterPriority.ExecutionTimeoutMillis = PriorityTaskTimeout.None;
            filterPriority.RequestTimeoutMillis   = PriorityTaskTimeout.None;
            ICollection entries = cache.GetEntries(filterPriority);
            </code>
            This is an advanced feature which should be used judiciously.
            </remarks>
            <author>Gene Gleyzer  2007.03.20</author>
            <author>Tom Beerbower  2009.03.10</author>
            <since>Coherence 3.3</since>
        </member>
        <member name="M:Tangosol.Util.Filter.PriorityFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.PriorityFilter.#ctor(Tangosol.Util.Filter.IIndexAwareFilter)">
            <summary>
            Construct a PriorityFilter.
            </summary>
            <param name="filter">
            The <see cref="T:Tangosol.Util.Filter.IIndexAwareFilter"/> wrapped by this PriorityFilter.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.PriorityFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.PriorityFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.PriorityFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.PriorityFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.PriorityFilter.ToString">
            <summary>
            Return a human-readable description for this
            <b>PriorityFilter</b>.
            </summary>
            <returns>
            A string description of the <b>PriorityFilter</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.PriorityFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            This implementation reserves property index 10.
            </remarks>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Filter.PriorityFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            This implementation reserves property index 10.
            </remarks>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Filter.PriorityFilter.m_filter">
            <summary>
            The wrapped IIndexAwareFilter.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Filter.PriorityFilter.Filter">
            <summary>
            Obtain the underlying filter.
            </summary>
            <value>
            The filter wrapped by this PriorityFilter.
            </value>
        </member>
        <member name="T:Tangosol.Util.Filter.ValueChangeEventFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which evaluates the content of a
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> values based on the specified value
            extractor.
            </summary>
            <remarks>
            This filter evaluates to <b>true</b> only for update events that
            change the value of an extracted attribute.
            <p/>
            Example: a filter that evaluates to <b>true</b> if there is an update
            to an Employee object that changes a value of the LastName property.
            <code>
            new ValueChangeEventFilter("LastName");
            </code>
            </remarks>
            <seealso cref="T:Tangosol.Util.Filter.CacheEventFilter"/>
            <author>Gene Gleyzer  2003.09.30</author>
            <author>Goran Milosavljevic  2006.10.24</author>
            <since>Coherence 2.3</since>
        </member>
        <member name="M:Tangosol.Util.Filter.ValueChangeEventFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.ValueChangeEventFilter.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct a <b>ValueChangeEventFilter</b> that evaluates
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> values based on the specified
            extractor.
            </summary>
            <param name="extractor">
            <see cref="T:Tangosol.Util.IValueExtractor"/> to extract <b>CacheEvent</b>
            values.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ValueChangeEventFilter.#ctor(System.String)">
            <summary>
            Construct a <b>ValueChangeEventFilter</b> that evaluates
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> values based on the specified
            member name.
            </summary>
            <param name="member">
            The name of the member to invoke via reflection.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.ValueChangeEventFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ValueChangeEventFilter.EvaluateExtracted(System.Object)">
            <summary>
            Evaluate the specified extracted value.
            </summary>
            <param name="extracted">
            An extracted value to evaluate.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ValueChangeEventFilter.Equals(System.Object)">
            <summary>
            Compare the <b>ValueChangeEventFilter</b> with another object
            to determine equality.
            </summary>
            <param name="o">
            The <b>ValueChangeEventFilter</b> to compare to.
            </param>
            <returns>
            <b>true</b> if this <b>ValueChangeEventFilter</b> and the passed
            object are equivalent filters.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ValueChangeEventFilter.GetHashCode">
            <summary>
            Determine a hash value for the <b>ValueChangeEventFilter</b>
            object according to the general <b>object.GetHashCode()</b>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>ValueChangeEventFilter</b>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.ValueChangeEventFilter.ToString">
            <summary>
            Return a human-readable description for this
            <b>ValueChangeEventFilter</b>.
            </summary>
            <returns>
            A String description of the <b>ValueChangeEventFilter</b>.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Filter.XorFilter">
            <summary>
            <see cref="T:Tangosol.Util.IFilter"/> which returns the logical exclusive or ("xor")
            of two other filters.
            </summary>
            <author>Cameron Purdy/Gene Gleyzer  2002.10.27</author>
            <author>Goran Milosavljevic  2006.10.24</author>
            <author>Tom Beerbower 2009.03.08</author>
        </member>
        <member name="M:Tangosol.Util.Filter.XorFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Filter.XorFilter.#ctor(Tangosol.Util.IFilter,Tangosol.Util.IFilter)">
            <summary>
            Construct a "xor" filter.
            </summary>
            <remarks>
            The result is defined as:
            <code>
            filterLeft ^ filterRight
            </code>
            </remarks>
            <param name="filterLeft">
            The "left" filter.
            </param>
            <param name="filterRight">
            The "right" filter.
            </param>
        </member>
        <member name="M:Tangosol.Util.Filter.XorFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.XorFilter.EvaluateEntry(Tangosol.Net.Cache.ICacheEntry)">
            <summary>
            Apply the test to an <see cref="T:Tangosol.Net.Cache.ICacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>ICacheEntry</b> to evaluate; never <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.XorFilter.CalculateEffectiveness(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Given an IDictionary of available indexes, determine if this 
            IIndexAwareFilter can use any of the indexes to assist in its 
            processing, and if so, determine how effective the use of that 
            index would be.
            </summary>
            <remarks>
            <p>
            The returned value is an effectiveness estimate of how well this 
            filter can use the specified indexes to filter the specified 
            keys. An operation that requires no more than a single access to 
            the index content (i.e. Equals, NotEquals) has an effectiveness of 
            <b>one</b>. Evaluation of a single entry is assumed to have an 
            effectiveness that depends on the index implementation and is 
            usually measured as a constant number of the single operations.  
            This number is referred to as <i>evaluation cost</i>.
            </p>
            <p>
            If the effectiveness of a filter evaluates to a number larger 
            than the keys.size() then a user could avoid using the index and 
            iterate through the keys calling <tt>Evaluate</tt> rather than 
            <tt>ApplyIndex</tt>.
            </p>
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The set of keys that will be filtered; read-only.
            </param>
            <returns>
            An effectiveness estimate of how well this filter can use the 
            specified indexes to filter the specified keys.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Filter.XorFilter.ApplyIndex(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Filter remaining keys using an IDictionary of available indexes.
            </summary>
            <remarks>
            The filter is responsible for removing all keys from the passed 
            set of keys that the applicable indexes can prove should be 
            filtered. If the filter does not fully evaluate the remaining 
            keys using just the index information, it must return a filter
            (which may be an <see cref="T:Tangosol.Util.Filter.IEntryFilter"/>) that can complete the 
            task using an iterating implementation. If, on the other hand, the
            filter does fully evaluate the remaining keys using just the index
            information, then it should return <c>null</c> to indicate that no 
            further filtering is necessary.
            </remarks>
            <param name="indexes">
            The available <see cref="T:Tangosol.Net.Cache.ICacheIndex"/> objects keyed by the 
            related IValueExtractor; read-only.
            </param>
            <param name="keys">
            The mutable set of keys that remain to be filtered.
            </param>
            <returns>
            An <see cref="T:Tangosol.Util.IFilter"/> object that can be used to process the 
            remaining keys, or <c>null</c> if no additional filter processing 
            is necessary.
            </returns>
        </member>
        <member name="T:Tangosol.Util.IEventListener">
            <summary>
            Marker interface that all event listener interfaces should extend.
            </summary>
            <author>Ivan Cikic  2006.09.12</author>
        </member>
        <member name="T:Tangosol.Util.ILongArray">
            <summary>
            An interface, similar in its methods to <b>IList</b>, and similar in
            its purpose to an array, designed for sparse storage and indexed by
            long values.
            </summary>
            <remarks>
            Unlike the <b>IList</b> interface, the ILongArray interface assumes
            that every valid index (i.e. greater than or equal to zero) can be
            accessed and has storage available.
            </remarks>
            <author>Cameron Purdy</author>
            <author>Ana Cikic  2006.09.08</author>
        </member>
        <member name="M:Tangosol.Util.ILongArray.Add(System.Object)">
            <summary>
            Add the passed element value to the ILongArray and return the
            index at which the element value was stored.
            </summary>
            <param name="value">
            The object to add to the ILongArray.
            </param>
            <returns>
            The long index value at which the element value was stored.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ILongArray.Exists(System.Int64)">
            <summary>
            Determine if the specified index is in use.
            </summary>
            <param name="index">
            A long index value.
            </param>
            <returns>
            <b>true</b> if a value (including <c>null</c>) is stored at the
            specified index, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ILongArray.Remove(System.Int64)">
            <summary>
            Remove the specified index from the ILongArray, returning its
            associated value.
            </summary>
            <param name="index">
            The index into the ILongArray.
            </param>
            <returns>
            The associated value (which can be <c>null</c>) or <c>null</c> if
            the specified index is not in the ILongArray.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ILongArray.Contains(System.Object)">
            <summary>
            Determine if the ILongArray contains the specified element.
            </summary>
            <remarks>
            More formally, returns <b>true</b> if and only if this ILongArray
            contains at least one element <b>e</b> such that
            <b>(o==null ? e==null : o.Equals(e))</b>.
            </remarks>
            <param name="value">
            Element whose presence in this list is to be tested.
            </param>
            <returns>
            <b>true</b> if this list contains the specified element.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ILongArray.Clear">
            <summary>
            Remove all elements from the ILongArray.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ILongArray.ToString">
            <summary>
            Provide a string representation of the ILongArray.
            </summary>
            <returns>
            A human-readable string value describing the ILongArray instance.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ILongArray.Equals(System.Object)">
            <summary>
            Test for ILongArray equality.
            </summary>
            <param name="o">
            An Object to compare to this ILongArray for equality.
            </param>
            <returns>
            <b>true</b> if the passed Object is an ILongArray containing the
            same indexes and whose elements at those indexes are equal.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ILongArray.GetEnumerator">
            <summary>
            Obtain an IEnumerator of the contents of the ILongArray.
            </summary>
            <returns>
            An instance of IEnumerator.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ILongArray.GetEnumerator(System.Int64)">
            <summary>
            Obtain an IEnumerator of the contents of the ILongArray,
            starting at a particular index such that the first call to
            <b>MoveNext</b> will set the location of the enumerator at the
            first existent index that is greater than or equal to the
            specified index, or will throw an <b>IndexOutOfRangeException</b>
            if there is no such existent index.
            </summary>
            <param name="index">
            The ILongArray index to iterate from.
            </param>
            <returns>
            An instance of IEnumerator.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            If index greater than or equal to the specified index does not
            exist.
            </exception>
        </member>
        <member name="P:Tangosol.Util.ILongArray.Item(System.Int64)">
            <summary>
            The value stored at the specified index.
            </summary>
            <param name="index">
            A long index value.
            </param>
            <value>
            The object stored at the specified index, or <c>null</c>.
            </value>
        </member>
        <member name="P:Tangosol.Util.ILongArray.IsEmpty">
            <summary>
            Determine if ILongArray is empty.
            </summary>
            <value>
            <b>true</b> if ILongArray has no elements.
            </value>
        </member>
        <member name="P:Tangosol.Util.ILongArray.Count">
            <summary>
            Determine the size of the ILongArray.
            </summary>
            <value>
            The number of elements in the ILongArray.
            </value>
        </member>
        <member name="P:Tangosol.Util.ILongArray.FirstIndex">
            <summary>
            Determine the first index that exists in the ILongArray.
            </summary>
            <value>
            The lowest long value, 0 &lt;= n &lt;= Int64.MaxValue, that
            exists in this ILongArray, or -1 if the ILongArray is empty.
            </value>
        </member>
        <member name="P:Tangosol.Util.ILongArray.LastIndex">
            <summary>
            Determine the last index that exists in the ILongArray.
            </summary>
            <value>
            The highest long value, 0 &lt;= n &lt;= Int64.MaxValue, that
            exists in this ILongArray, or -1 if the ILongArray is empty.
            </value>
        </member>
        <member name="P:Tangosol.Util.ILongArray.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to this
            ILongArray.
            </summary>
            <value>
            Object used to synchronize access to this ILongArray.
            </value>
        </member>
        <member name="T:Tangosol.Util.ILongArrayEnumerator">
            <summary>
            An IEnumerator for ILongArray.
            </summary>
            <author>Ana Cikic  2006.09.08</author>
        </member>
        <member name="M:Tangosol.Util.ILongArrayEnumerator.GetValue">
            <summary>
            Returns the current value, which is the same value returned by
            the most recent call to the <b>MoveNext</b> method, or the most
            recent value passed to <b>SetValue</b> if <b>SetValue</b> were
            called after the <b>MoveNext</b> method.
            </summary>
            <returns>
            The current value.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the <b>MoveNext</b> method has not yet been called, or the
            <b>Remove</b> method has already been called after the last call
            to the <b>MoveNext</b> method.
            </exception>
        </member>
        <member name="M:Tangosol.Util.ILongArrayEnumerator.SetValue(System.Object)">
            <summary>
            Stores a new value at the current value index, returning the
            value that was replaced. The index of the current value is
            obtainable by reading the <b>Index</b> property.
            </summary>
            <param name="value">
            The new value to store.
            </param>
            <returns>
            The replaced value.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the <b>MoveNext</b> method has not yet been called, or the
            <b>Remove</b> method has already been called after the last call
            to the <b>MoveNext</b> method.
            </exception>
        </member>
        <member name="P:Tangosol.Util.ILongArrayEnumerator.Index">
            <summary>
            Returns the index of the current value, which is the value
            returned by the most recent call to the <b>MoveNext</b> method.
            </summary>
            <returns>
            The index of the current value.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If the <b>MoveNext</b> method has not yet been called, or the
            <b>remove</b> method has already been called after the last call
            to the <b>MoveNext</b> method.
            </exception>
        </member>
        <member name="T:Tangosol.Util.InterlockedCounter">
            <summary>
            Implementation of <see cref="T:Tangosol.Util.AtomicCounter"/> based on .NET
            <b>System.Threading.Interlocked</b> class.
            </summary>
            <author>Ana Cikic  2006.08.23</author>
            <seealso cref="T:Tangosol.Util.AtomicCounter"/>
        </member>
        <member name="M:Tangosol.Util.InterlockedCounter.GetCount">
            <summary>
            Return the current value of the counter.
            </summary>
            <returns>
            The current value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.InterlockedCounter.SetCount(System.Int64,System.Int64)">
            <summary>
            Update the current value, only if it is equal to the assumed
            value.
            </summary>
            <param name="assumedValue">
            The assumed old value.
            </param>
            <param name="newValue">
            The new value.
            </param>
            <returns>
            <b>true</b> if the value was updated, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.InterlockedCounter.SetCount(System.Int64)">
            <summary>
            Update the current value, and return the previous value.
            </summary>
            <param name="newValue">
            The new value.
            </param>
            <returns>
            The previous value just before the update went through.
            </returns>
        </member>
        <member name="M:Tangosol.Util.InterlockedCounter.Adjust(System.Int64)">
            <summary>
            Adjust the value of the counter by the specified amount, and
            return the new value.
            </summary>
            <param name="c">
            The amount to adjust the counter by.
            </param>
            <returns>
            The new value, after the adjustment has been made.
            </returns>
        </member>
        <member name="M:Tangosol.Util.InterlockedCounter.PostAdjust(System.Int64)">
            <summary>
            Adjust the value of the counter by the specified amount, and
            return the old value.
            </summary>
            <param name="c">
            The amount to adjust the counter by.
            </param>
            <returns>
            The old value, prior to the adjustment having been made.
            </returns>
        </member>
        <member name="F:Tangosol.Util.InterlockedCounter.m_counter">
            <summary>
            The actual counter value.
            </summary>
        </member>
        <member name="T:Tangosol.Util.ServiceEventHandler">
            <summary>
            Represents the method that will handle service event.
            </summary>
            <param name="sender">
            <see cref="T:Tangosol.Util.IService"/> that raised an event.
            </param>
            <param name="args">
            Event arguments.
            </param>
        </member>
        <member name="T:Tangosol.Util.IValueManipulator">
            <summary>
            IValueManipulator represents a composition of
            <see cref="T:Tangosol.Util.IValueExtractor"/> and <see cref="T:Tangosol.Util.IValueUpdater"/>
            implementations.
            </summary>
            <author>Gene Gleyzer  2005.10.31</author>
            <author>Goran Milosavljevic  2006.10.20</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="P:Tangosol.Util.IValueManipulator.Extractor">
            <summary>
            Retreive the underlying <see cref="T:Tangosol.Util.IValueExtractor"/> reference.
            </summary>
            <value>
            The <b>IValueExtractor</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.IValueManipulator.Updater">
            <summary>
            Retreive the underlying <see cref="T:Tangosol.Util.IValueUpdater"/> reference.
            </summary>
            <value>
            The <b>IValueUpdater</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.IVersionable">
            <summary>
            An interface for versionable data.
            </summary>
            <author>Cameron Purdy  2000.10.20</author>
            <author>Ivan Cikic  2006.10.24</author>
        </member>
        <member name="M:Tangosol.Util.IVersionable.IncrementVersion">
            <summary>
            Update the version to the next logical version indicator.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the object is immutable or if the object does not know how to
            increment its own version indicator.
            </exception>
        </member>
        <member name="P:Tangosol.Util.IVersionable.VersionIndicator">
            <summary>
             Get the version indicator for this object.
            </summary>
            <remarks>
            The version indicator should be an immutable object or one
            treated as an immutable, which is to say that after the version
            is incremented, the previous version's indicator reference will
            never be returned again.
            </remarks>
            <value>
            A non-<c>null</c> version value that implements the
            <see cref="T:System.IComparable"/> interface.
            </value>
        </member>
        <member name="T:Tangosol.Util.Listeners">
            <summary>
            Provide a simple, efficient, and thread-safe implementation of a list
            of event listeners.
            </summary>
            <remarks>
            <p>
            The implementation is optimized based on the assumption that
            listeners are added and removed relatively rarely, and that the list
            of listeners is requested relatively often.</p>
            <p>
            Thread safety is implemented by synchronizing on all methods that
            modify any data member of the class. Read-only methods are not
            synchronized.</p>
            </remarks>
            <author>Cameron Purdy  1997.16.11</author>
            <author>Ivan Cikic  2006.09.11</author>
        </member>
        <member name="M:Tangosol.Util.Listeners.Add(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Add a listener.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
        </member>
        <member name="M:Tangosol.Util.Listeners.Remove(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a listener.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
        </member>
        <member name="M:Tangosol.Util.Listeners.AddAll(Tangosol.Util.Listeners)">
            <summary>
            Add all listeners from another <b>Listeners</b> object.
            </summary>
            <param name="listeners">
            The <b>Listeners</b> to add.
            </param>
        </member>
        <member name="M:Tangosol.Util.Listeners.RemoveAll">
            <summary>
            Remove all listeners.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Listeners.Contains(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Check if a listener is in the list of listeners.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to search for.
            </param>
            <returns>
            <b>true</b> if the listener is in the list of listeners.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Listeners.IndexOf(Tangosol.Net.Cache.ICacheListener[],Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Locate a listener is in the list of listeners.
            </summary>
            <param name="listenerArray">
            The array of listeners to sarch
            </param>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to search for.
            </param>
            <returns>
            The index of the listener in the list of listeners.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Listeners.Union(Tangosol.Net.Cache.ICacheListener[],Tangosol.Net.Cache.ICacheListener[])">
            <summary>
            Return an array containing the union of the specified lists.
            </summary>
            <param name="listeners1">
            Array of listeners
            </param>
            <param name="listeners2">
            Array of listeners
            </param>
            <returns>
            The union of the two arrays of listeners
            </returns>
        </member>
        <member name="M:Tangosol.Util.Listeners.GetListenerListFor(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Return the array of listeners (sync or async) that corresponds to
            the specified listener
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to find an array for
            </param>
            <returns>
            The array of listeners corresponding to the specified listener
            </returns>
        </member>
        <member name="M:Tangosol.Util.Listeners.SetListenerListFor(Tangosol.Net.Cache.ICacheListener,Tangosol.Net.Cache.ICacheListener[])">
            <summary>
            Set the array of listeners (sync or async) that corresponds to the
            specified listener.  For example, if the specified listener is a
            SynchronousListener, set the synchronous listener array to the specified
            listener list.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to ser the array for
            </param>
            <param name="listenerArray">
            The array of listeners
            </param>
        </member>
        <member name="M:Tangosol.Util.Listeners.ToString">
            <summary>
            Return a string representation of the <b>Listeners</b> object.
            </summary>
            <returns>
            A string representation of the <b>Listeners</b> object.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Listeners.BLANKLIST">
            <summary>
            A blank list of listeners.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Listeners.m_asyncListeners">
            <summary>
            The registered asynchronous listeners.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Listeners.m_syncListeners">
            <summary>
            The registred synchronous listeners.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Listeners.m_filters">
            <summary>
            An optional array of filters associated with this Listeners object.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Listeners.ListenersArray">
            <summary>
            Get the list of listeners.
            </summary>
            <remarks>
            The contents of this array are immutable; to add or remove
            listeners, a copy of this array is made and the new array
            replaces the old.
            </remarks>
            <value>
            The list of listeners.
            </value>
        </member>
        <member name="P:Tangosol.Util.Listeners.FiltersArray">
            <summary>
            Get the filters for this listener.
            </summary>
            <value>
            The list of filters.
            </value>
            <since>Coherence 3.7.1.8</since>
        </member>
        <member name="P:Tangosol.Util.Listeners.IsEmpty">
            <summary>
            Check if there are no listeners.
            </summary>
            <value>
            <b>true</b> if there are no listeners.
            </value>>
        </member>
        <member name="P:Tangosol.Util.Listeners.AsynchronousListeners">
            <summary>
            Get the list of asynchronous listeners.
            </summary>
            <remarks>
            The contents of this array are immutable; to add or remove
            listeners, a copy of this array is made and the new array
            replaces the old.
            </remarks>
            <value>
            The list of asynchronous listeners.
            </value>
        </member>
        <member name="P:Tangosol.Util.Listeners.SynchronousListeners">
            <summary>
            Get the list of synchronous listeners.
            </summary>
            <remarks>
            The contents of this array are immutable; to add or remove
            listeners, a copy of this array is made and the new array
            replaces the old.
            </remarks>
            <value>
            The list of synchronous listeners.
            </value>
        </member>
        <member name="T:Tangosol.Util.LiteDictionary">
            <summary>
            An implementation of <b>IDictionary</b> that is optimal (in terms of
            both size and speed) for very small sets of data but still works
            excellently with large sets of data.
            </summary>
            <remarks>
            <p>
            This implementation is not thread-safe.</p>
            <p>
            The LiteDictionary implementation switches at runtime between several
            different sub-implementations for storing the <b>IDictionary</b> of
            objects, described here:</p>
            <p>
            <list type="number">
            <item>
            "empty dictionary" - a dictionary that contains no data;
            </item>
            <item>
            "single entry" - a reference directly to a single dictionary entry;
            </item>
            <item>
            "object[]" - a reference to an array of entries; the item limit for
            this implementation is determined by the <see cref="F:Tangosol.Util.LiteDictionary.THRESHOLD"/>
            constant;
            </item>
            <item>
            "delegation" - for more than <see cref="F:Tangosol.Util.LiteDictionary.THRESHOLD"/> items, a
            dictionary is created to delegate the dictionary management to;
            sub-classes can override the default delegation class
            <b>Hashtable</b> by overriding the factory method
            <see cref="M:Tangosol.Util.LiteDictionary.InstantiateDictionary"/>.
            </item>
            </list></p>
            <p>
            The LiteDictionary implementation supports the <c>null</c> key value.
            </p>
            </remarks>
            <author>Cameron Purdy  1999.06.29</author>
            <author>Goran Milosavljevic  2006.09.11</author>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.THRESHOLD">
            <summary>
            The default point above which the LiteDictionary delegates to
            another dictionary implementation.
            </summary>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.#ctor">
            <summary>
            Constructs a LiteDictionary.
            </summary>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.#ctor(System.Collections.IDictionary)">
            <summary>
            Construct a LiteDictionary with the same mappings as the given
            dictionary.
            </summary>
            <param name="dictionary">
            The dictionary whose mappings are to be placed in this
            dictionary.
            </param>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.Clear">
            <summary>
            Removes all elements from the dictionary.
            </summary>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.Contains(System.Object)">
            <summary>
            Returns <b>true</b> if this dictionary contains a mapping for the
            specified key.
            </summary>
            <returns>
            <b>true</b> if this dictionary contains a mapping for the
            specified key, <b>false</b> otherwise.
            </returns>
            <param name="key">
            The key to locate in the dictionary.
            </param>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the
            <b>IDictionary</b> object.
            </summary>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            <param name="key">
            The object to use as the key of the element to add.
            </param>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.Remove(System.Object)">
            <summary>
            Removes the mapping for this key from this dictionary if present.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.GetEnumerator">
            <summary>
            Returns an <b>IEnumerator</b> object for this LiteDictionary.
            </summary>
            <returns>
            An <b>IEnumerator</b> object for this LiteDictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <b>IDictionaryEnumerator</b> object for this
            LiteDictionary.
            </summary>
            <returns>
            An <b>IDictionaryEnumerator</b> object for this LiteDictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <b>ICollection</b> to an <b>Array</b>,
            starting at a particular index.
            </summary>
            <param name="array">
            The one-dimensional <b>Array</b> that is the destination of the
            elements copied from <b>ICollection</b>.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.IndexOf(System.Collections.DictionaryEntry[],System.Int32,System.Object)">
            <summary>
            Scan up to the first <b>searchCount</b> elements of the passed
            Entry array looking for the specified key.
            </summary>
            If it is found, return its position <i>i</i> in the array
            such that <b>(0 &lt;= i &lt; searchCount)</b>. If it is not found,
            return <b>-1</b>.
            <param name="entries">
            The array of objects to search.
            </param>
            <param name="searchCount">
            The number of Entry objects in the array to search.
            </param>
            <param name="key">
            The key to look for.
            </param>
            <returns>
            The index of the object, if found; otherwise -1.
            </returns>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.CheckShrinkFromOther">
            <summary>
            After a mutation operation has reduced the size of an underlying
            dictionary, check if the delegation model should be replaced with
            a more size-efficient storage approach, and switch accordingly.
            </summary>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.InstantiateEntry(System.Object,System.Object)">
            <summary>
            Instantiate a <b>DictionaryEntry</b>.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            An instance of <b>DictionaryEntry</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.InstantiateDictionary">
            <summary>
            Instantiate an <b>IDictionary</b> object to store entries in once
            the "lite" threshold has been exceeded.
            </summary>
            <returns>
            An instance of <b>IDictionary</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.LiteDictionary.RemoveEx(System.Object)">
            <summary>
            Removes the mapping for this key from this map if present.
            </summary>
            <remarks>
            Expensive: updates both the underlying cache and the local cache.
            </remarks>
            <param name="key">
            The key of the element to remove.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the dictionary previously associated <c>null</c>
            with the specified key, if the implementation supports
            <c>null</c> values.
            </returns>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.NO_OBJECTS">
            <summary>
            A constant array of zero size.
            </summary>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.m_contents">
            <summary>
            The dictionary contents, based on the implementation being used.
            </summary>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.m_implType">
            <summary>
            Implementation, one of LiteDictionaryType enum values.
            </summary>
        </member>
        <member name="P:Tangosol.Util.LiteDictionary.Count">
            <summary>
            Gets the number of elements contained in this dictionary.
            </summary>
            <value>
            The number of elements contained in this dictionary.
            </value>
        </member>
        <member name="P:Tangosol.Util.LiteDictionary.IsEmpty">
            <summary>
            Gets <b>true</b> if this dictionary contains no key-value
            mappings.
            </summary>
            <value>
            <b>true</b> if this dictionary contains no key-value
            mappings.
            </value>
        </member>
        <member name="P:Tangosol.Util.LiteDictionary.Item(System.Object)">
            <summary>
            Returns the value to which this dictionary maps the specified
            key.
            </summary>
            <returns>
            The value to which this dictionary maps the specified key, or
            <c>null</c> if the dictionary contains no mapping for this key.
            </returns>
            <param name="key">
            The key of the element to get or set.
            </param>
        </member>
        <member name="P:Tangosol.Util.LiteDictionary.Keys">
            <summary>
            Gets a collection containing the keys of the LiteDictionary.
            </summary>
            <returns>
            A collection containing the keys of the LiteDictionary.
            </returns>
        </member>
        <member name="P:Tangosol.Util.LiteDictionary.Values">
            <summary>
            Gets a collection containing the values in the LiteDictionary.
            </summary>
            <returns>
            A collection containing the values in the LiteDictionary.
            </returns>
        </member>
        <member name="P:Tangosol.Util.LiteDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object is
            read-only.
            </summary>
            <value>
            Always <b>false</b> for LiteDictionary.
            </value>
        </member>
        <member name="P:Tangosol.Util.LiteDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the <b>IDictionary</b> object has
            a fixed size.
            </summary>
            <value>
            Always <b>false</b> for LiteDictionary.
            </value>
        </member>
        <member name="P:Tangosol.Util.LiteDictionary.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <b>ICollection</b>.
            </summary>
            <value>
            An object that can be used to synchronize access to the
            <b>ICollection"></b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.LiteDictionary.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <b>ICollection</b>
            is synchronized (thread safe).
            </summary>
            <value>
            Always <b>false</b> for LiteDictionary.
            </value>
        </member>
        <member name="T:Tangosol.Util.LiteDictionary.LiteDictionaryType">
            <summary>
            LiteDictionary type enum values.
            </summary>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.LiteDictionaryType.Empty">
            <summary>
            Implementation: Empty dictionary.
            </summary>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.LiteDictionaryType.Single">
            <summary>
            Implementation: Single-item dictionary.
            </summary>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.LiteDictionaryType.Array1">
            <summary>
            Implementation: Array dictionary of 1 item.
            </summary>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.LiteDictionaryType.Array2">
            <summary>
            Implementation: Array dictionary of 2 items.
            </summary>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.LiteDictionaryType.Array3">
            <summary>
            Implementation: Array dictionary of 3 items.
            </summary>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.LiteDictionaryType.Array4">
            <summary>
            Implementation: Array dictionary of 4 items.
            </summary>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.LiteDictionaryType.Array5">
            <summary>
            Implementation: Array dictionary of 5 items.
            </summary>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.LiteDictionaryType.Array6">
            <summary>
            Implementation: Array dictionary of 6 items.
            </summary>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.LiteDictionaryType.Array7">
            <summary>
            Implementation: Array dictionary of 7 items.
            </summary>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.LiteDictionaryType.Array8">
            <summary>
            Implementation: Array dictionary of 8 items.
            </summary>
        </member>
        <member name="F:Tangosol.Util.LiteDictionary.LiteDictionaryType.Other">
            <summary>
            Implementation: Delegation.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Logging.CommonLoggingLogger">
            <summary>
            Concrete <see cref="T:Tangosol.Util.Logging.LogOutput"/> extension that logs messages using
            the Common.Logging logging library.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Logging.LogOutput">
             <summary>
             Abstract component used to log formatted messages to an underlying
             logging mechanism.
             </summary>
             <remarks>
             Concrete subclasses must implement the three abstract Log methods:
            
             Log(Object level, String message, Exception exception)
             Log(Object level, String message)
             Log(Object level, Exception exception)
            
             Additionally, a concrete LogOutput must be able to translate between
             internal Logger Log levels (see the Logger class for details on
             the various levels) and equivalent Log level objects appropriate for
             the underlying logging mechanism.
             See the <see cref="M:Tangosol.Util.Logging.LogOutput.TranslateLevel(System.Int32)"/> method for additional details.
             </remarks>
             <author>Goran Milosavljevic  2006.09.19</author>
        </member>
        <member name="M:Tangosol.Util.Logging.LogOutput.Configure(Tangosol.Net.IOperationalContext)">
            <summary>
            Configure a newly created LogOutput instance using the supplied
            OperationalContext.
            </summary>
            <param name="operationalContext">
            Operational context used to configure this LogOutput object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.LogOutput.Close">
            <summary>
            Close the LogOutput and release any resources held
            by the LogOutput.
            </summary>
            <remarks>
            <p/>
            This method has no effect if the LogOutput has already been
            closed. Closing a LogOutput makes it unusable. Any attempt to
            use a closed LogOutput may result in an exception.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Logging.LogOutput.Log(System.Int32,System.String)">
            <summary>
            Log the given message with the specified Logger Log level (in
            Int32 form).
            </summary>
            <param name="level">
            Logging level.
            </param>
            <param name="message">
            Message to log.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.LogOutput.Log(System.Int32,System.Exception)">
            <summary>
            Log the given Exception with the specified Logger Log level (in
            Int32 form).
            </summary>
            <param name="level">
            Logging level.
            </param>
            <param name="exception">
            Exception to log.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.LogOutput.Log(System.Int32,System.Exception,System.String)">
            <summary>
            Log the given Exception and associated message with the
            specified Logger Log level (in Int32 form).
            </summary>
            <param name="level">
            Logging level.
            </param>
            <param name="exception">
            Exception to log.
            </param>
            <param name="message">
            Message to log.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.LogOutput.Log(System.Object,System.String)">
            <summary>
            Log the given message with the specified Log level (specific to
            the underlying logging mechanism).
            </summary>
            <param name="level">
            Logging level.
            </param>
            <param name="message">
            Message to log.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.LogOutput.Log(System.Object,System.Exception)">
            <summary>
            Log the given Exception with the specified Log level (specific to
            the underlying logging mechanism).
            </summary>
            <param name="level">
            Logging level.
            </param>
            <param name="exception">
            Exception to log.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.LogOutput.Log(System.Object,System.Exception,System.String)">
            <summary>
            Log the given Exception and associated message with the
            specified Log level (specific to the underlying logging
            mechanism).
            </summary>
            <param name="level">
            Logging level.
            </param>
            <param name="exception">
            Exception to log.
            </param>
            <param name="message">
            Message to log.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.LogOutput.TranslateLevel(System.Int32)">
            <summary>
            Translate the given Logger level to an equivalent object
            appropriate for the underlying logging mechanism.
            </summary>
            <param name="level">
            Logger log level.
            </param>
            <returns>
            Logging level specific to the underlying logging mechanism that
            corresponds to the Logger log level.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Logging.CommonLoggingLogger.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Logging.CommonLoggingLogger.InitStatic">
            <summary>
            Initialization of Levels supported by underlying logging
            mechanism.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Logging.CommonLoggingLogger.Configure(Tangosol.Net.IOperationalContext)">
            <summary>
            Configure a newly created LogOutput instance using the supplied
            XML configuration.
            </summary>
            <param name="operationalContext">
            Operational context used to configure this LogOutput object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.CommonLoggingLogger.Log(System.Object,System.String)">
            <summary>
            Log the given message with the specified log level (specific to
            the underlying logging mechanism).
            </summary>
            <param name="level">
            Level of the message.
            </param>
            <param name="message">
            Message to log.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.CommonLoggingLogger.Log(System.Object,System.Exception)">
            <summary>
            Log the given message with the specified log level (specific to
            the underlying logging mechanism).
            </summary>
            <param name="level">
            Level of the message.
            </param>
            <param name="exception">
            Exception to log.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.CommonLoggingLogger.Log(System.Object,System.Exception,System.String)">
            <summary>
            Log the given message with the specified log level (specific to
            the underlying logging mechanism).
            </summary>
            <param name="level">
            Level of the message.
            </param>
            <param name="exception">
            Exception to log.
            </param>
            <param name="message">
            Message to log.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.CommonLoggingLogger.TranslateLevel(System.Int32)">
            <summary>
            Translate the given Logger level to an equivalent object
            appropriate for the underlying logging mechanism.
            </summary>
            <param name="level">
            Logger log level.
            </param>
            <returns>
            Logging level specific to the underlying logging mechanism that
            corresponds to the Logger log level.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Logging.CommonLoggingLogger.GetLevel(System.Int32)">
            <summary>
            Gets a Level from a cache of frequently used Common Logging Level
            objects.
            </summary>
            <param name="index">
            Position to get level from.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.CommonLoggingLogger.LogInternal(System.Object,System.Exception,System.String)">
            <summary>
            Log the given message with the specified log level.
            </summary>
            <param name="level">
            Level of the message.
            </param>
            <param name="exception">
            Exception to log.
            </param>
            <param name="message">
            Message to log.
            </param>
        </member>
        <member name="P:Tangosol.Util.Logging.CommonLoggingLogger.Level">
            <summary>
            Gets or sets a cache of frequently used Common Logging Level
            objects.
            </summary>
            <value>
            An array of Common Logging Level objects representing cache of
            frequently used logging level values.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.CommonLoggingLogger.Logger">
            <summary>
            Gets or sets the underlying Common.Logging Logger used to log all
            messages.
            </summary>
            <value>
            Underlying Common.Logging logger used to log all messages.
            </value>
        </member>
        <member name="T:Tangosol.Util.Logging.Logger">
             <summary>
             A Logger class is used to to asynchronously log messages for a
             specific system or application component.
             </summary>
             <remarks>
             <p/>
             Each Logger instance has an associated logging level. Only Log
             messages that meet or exceed this level are logged. Currently, the
             Logger defines 10 logging levels (from highest to lowest level):
            
             LEVEL_INTERNAL (All messages without a Log level)
             LEVEL_ERROR    (Error messages)
             LEVEL_WARNING  (Warning messages)
             LEVEL_INFO     (Informational messages)
             LEVEL_D4       (Debug messages)
             LEVEL_D5
             LEVEL_D6
             LEVEL_D7
             LEVEL_D8
             LEVEL_D9
            
             Additionally, the Logger defines two "psuedo" levels that instruct
             the Logger to either log all messages or to not log any messages:
            
             LEVEL_ALL
             LEVEL_NONE
            
             Log messages are logged using the Log() method. There are several
             versions of the Log() method that allow both string messages and
             Exception stack traces to be logged. The Logger uses a string
             template to format the Log message before it is logged using the
             underlying logging mechanism. The template may contain the following
             parameterizable strings:
            
             {date}    -the date and time that the message was logged
             {level}   -the level of the Log message
             {thread}  -the thread that logged the message
             {text}    -the text of the message
             {product} -the executing assembly product
             {version} -the executing assembly version
            
             Subclasses of the Logger are free to define additional parameters.
            
             The Logger class uses a <see cref="P:Tangosol.Util.Logging.Logger.LogOutput"/> to log messages to an
             underlying logging mechanism, such as Out, Error, a file. See the
             Configure() method for additional detail.
             </remarks>
             <author>Goran Milosavljevic  2006.09.19</author>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.LEVEL_INTERNAL">
            <summary>
            Logging level associated with internal Log messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.LEVEL_ERROR">
            <summary>
            Logging level associated with error messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.LEVEL_WARNING">
            <summary>
            Logging level associated with warning messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.LEVEL_INFO">
            <summary>
            Logging level associated with informational messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.LEVEL_D4">
            <summary>
            Logging level associated with debug messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.LEVEL_D5">
            <summary>
            Logging level associated with debug messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.LEVEL_D6">
            <summary>
            Logging level associated with debug messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.LEVEL_D7">
            <summary>
            Logging level associated with debug messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.LEVEL_D8">
            <summary>
            Logging level associated with debug messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.LEVEL_D9">
            <summary>
            Logging level associated with debug messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.LEVEL_ALL">
            <summary>
            Logging level that instructs the Logger to log all messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.LEVEL_NONE">
            <summary>
            Logging level that instructs the Logger to not log any messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.TIME_PATTERN">
            <summary>
            Time pattern to use when printing log messages.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.Init">
            <summary>
            Initializing state and thread priority.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.InitStatic">
            <summary>
            Initialization of static array of Log levels.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.IsEnabled(System.Int32)">
            <summary>
            Return <b>true</b> if the Logger would log a message with the
            given log level.
            </summary>
            <param name="level">
            The log level.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.Configure(Tangosol.Net.IOperationalContext)">
            <summary>
            Configure a newly created Logger instance using the supplied
            OperationalContext.
            </summary>
            <remarks>
            destination
            -specifies the output device used by the logging system; can be
            one of Error, Out, a file name
            <p/>
            severity-level
            -specifies which logged messages are to be displayed
            <p/>
            message-format
            -specifies how messages that have a logging level specified will
            be formatted in the Log
            <p/>
            character-limit
            -specifies the maximum number of characters that the logger
            daemon will process from the message queue before discarding all
            remaining messages in the queue
            <p/>
            See the coherence.xsd for additional documentation for each of
            these parameters.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.CreateLogger(Tangosol.Run.Xml.IXmlElement)">
            <summary>
            Create and initialize a new Logger instance using the supplied
            XML configuration:
            <p/>
            destination
            -specifies the output device used by the logging system; can be
            one of Error, Out or a file name
            <p/>
            severity-level
            -specifies which logged messages are to be displayed
            <p/>
            message-format
            -specifies how messages that have a logging level specified will
            be formatted in the Log
            <p/>
            character-limit
            -specifies the maximum number of characters that the logger
            daemon will process from the message queue before discarding all
            remaining messages in the queue
            <p/>
            See the coherence.xsd for additional documentation for each of
            these parameters.
            </summary>
            <param name="xmlConfig">
            <b>IXmlElement</b> with configuration information.
            </param>
            <returns>
            New Logger instance configured using supplied xml configuration.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.CreateMessage(System.Int32,System.Exception,System.String,System.Object[])">
             <summary>
             Create a new Log message.
             </summary>
             <remarks>
             The Log message has the following structure:
            
             new Object[]
             {
             [Timestamp],
             [Level],
             [Thread],
             [Throwable],
             [Message],
             [Parameter Value]*
             };
             </remarks>
             <param name="level">
             Logging level.
             </param>
             <param name="exception">
             Exception to log.
             </param>
             <param name="message">
             Message to log.
             </param>
             <param name="parameterValues">
             An array of parameter values to be used when formatting message.
             </param>
             <returns>
             An array of objects representing log message.
             </returns>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.FormatMessage(System.Object[])">
             <summary>
             Format the given Log message by parameterizing the message
             format string with the values contained in the given message.
             </summary>
             <remarks>
             Log messages must be in the form of an Object array with the
             following structure:
            
             new Object[]
             {
             [Timestamp],
             [Level],
             [Thread],
             [Throwable],
             [Message],
             [Parameter Value]*
             };
             </remarks>
             <param name="message">
             Log message to format.
             </param>
             <returns>
             Formatted message text.
             </returns>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.FormatParameter(System.String,System.Object)">
            <summary>
            Format the given parameter with the given name for output to the
            underlying logger.
            </summary>
            <param name="name">
            Parameter name.
            </param>
            <param name="value">
            Parameter value.
            </param>
            <returns>
            Formatted parameter.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.GetInteger(System.Int32)">
            <summary>
            Returns value from a cache of frequently used Integer objects
            that represent logging levels.
            </summary>
            <param name="index">
            Logging level.
            </param>
            <returns>
            Logging level value between <see cref="F:Tangosol.Util.Logging.Logger.LEVEL_INTERNAL"/> and
            <see cref="F:Tangosol.Util.Logging.Logger.LEVEL_D9"/>.
            </returns>
            <seealso cref="P:Tangosol.Util.Logging.Logger.Integer"/>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.Log(System.Int32,System.String,System.Object[])">
            <summary>
            Log the given message with the specified Log level.
            </summary>
            <remarks>
            The supplied object array will be used to format the Log message.
            </remarks>
            <param name="level">
            Logging level.
            </param>
            <param name="message">
            Message text.
            </param>
            <param name="parameters">
            Parameters used for message formatting.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.Log(System.Int32,System.Exception,System.Object[])">
            <summary>
            Log the given Exception with the specified Log level.
            </summary>
            <remarks>
            The supplied object array will be used to format the Log message.
            </remarks>
            <param name="level">
            Logging level.
            </param>
            <param name="exception">
            Exception to log.
            </param>
            <param name="parameters">
            Parameters used for message formatting.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.Log(System.Int32,System.Exception,System.String,System.Object[])">
            <summary>
            Log the given Exception and associated message with the specified
            Log level.
            </summary>
            <remarks>
            The supplied object array will be used to format the Log message.
            </remarks>
            <param name="level">
            Logging level.
            </param>
            <param name="exception">
            Exception to log.
            </param>
            <param name="message">
            Message text to log.
            </param>
            <param name="parameters">
            Parameters used to format message.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.OnException(System.Exception)">
            <summary>
            This event occurs when an exception is thrown from OnEnter,
            OnWait, OnNotify and onExit.
            </summary>
            <remarks>
            <p/>
            If the exception should terminate the daemon, call
            <see cref="M:Tangosol.Util.Daemon.Daemon.Stop"/>. The default
            implementation prints debugging information and terminates the
            daemon.
            </remarks>
            <param name="e">
            The Exception object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.OnLog">
            <summary>
            Called immediately before a Log message is logged to the
            underlying LogOutput.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.OnNotify">
            <summary>
            Event notification to perform a regular daemon activity.
            </summary>
            <remarks>
            To get it called, another thread has to set
            <see cref="P:Tangosol.Util.Daemon.Daemon.IsNotification"/> to <b>true</b>:
            <code>daemon.IsNotification = true;</code>
            </remarks>
            <seealso cref="M:Tangosol.Util.Daemon.Daemon.OnWait"/>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.SetInteger(System.Int32,System.Int32@)">
            <summary>
            A cache of frequently used Integer objects that represent logging
            levels.
            </summary>
            <param name="index">
            Index of specified <paramref name="integer"/> in the cache.
            </param>
            <param name="integer">
            Value to be set.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.Logger.Shutdown">
            <summary>
            Stop the Logger and release any resources held by the Logger.
            </summary>
            <remarks>
            This method has no effect if the Logger has already been stopped.
            Stopping a Logger makes it unusable. Any attempt to use a stopped
            Logger may result in an exception.
            </remarks>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.THREAD_NAME_DELIM">
            <summary>
            A delimiter used to decorate service thread names with
            information useful for a thread dump analysis.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.s_defaultParameters">
            <summary>
            The default set of parameterizable strings that may appear in
            formatted Log messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.m_destination">
            <summary>
            The logging destination.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.m_format">
            <summary>
            The Log message format template.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.s_integer">
            <summary>
            A cache of frequently used Integer objects that represent logging
            levels.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.m_level">
            <summary>
            The logging level.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.LEVEL_TEXT">
            <summary>
            A String array containing descriptions of each of the supported
            logging levels indexed by the level.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.m_limit">
            <summary>
            The logging character limit.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.m_logOutput">
            <summary>
            The LogOutput used to log all formatted Log messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.m_parameters">
            <summary>
            The set of parameterizable strings that may appear in formatted
            Log messages.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.m_product">
            <summary>
            The assembly product.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.m_version">
            <summary>
            The assembly version.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.m_buildInfo">
            <summary>
            The assembly build info.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.m_buildTarget">
            <summary>
            The assembly build target.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.m_copyright">
            <summary>
            The assembly copyright.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Logging.Logger.m_edition">
            <summary>
            The product edition.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.Integer">
            <summary>
            Gets or sets a cache of frequently used Integer objects that
            represent logging levels.
            </summary>
            <value>
            An array of integers representing cache of frequently used
            logging levels.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.DefaultDestination">
            <summary>
            Gets the virtual constant DefaultDestination.
            </summary>
            <value>
            The default logging destination.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.DefaultFormat">
            <summary>
            Gets the virtual constant DefaultFormat.
            </summary>
            <value>
            Default log message format template.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.DefaultLevel">
            <summary>
            Gets the virtual constant DefaultLevel.
            </summary>
            <value>
            Default logging level.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.DefaultLimit">
            <summary>
            Gets the virtual constant DefaultLimit.
            </summary>
            <value>
            The default logging character limit.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.DefaultName">
            <summary>
            Gets the virtual constant DefaultName.
            </summary>
            <value>
            The default logger name.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.DefaultParameters">
            <summary>
            Gets the virtual constant DefaultParameters.
            </summary>
            <value>
            An array of default parameterizable strings that may appear in
            formatted log messages.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.Format">
            <summary>
            Gets or sets the Log message format template.
            </summary>
            <value>
            Log message format template.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.Level">
            <summary>
            Gets or sets the logging level.
            </summary>
            <value>
            Logging level.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.Limit">
            <summary>
            Gets or sets the logging character limit.
            </summary>
            <value>
            The logging character limit.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.LogOutput">
            <summary>
            Gets or sets the <see cref="P:Tangosol.Util.Logging.Logger.LogOutput"/> used to log all
            formatted Log messages.
            </summary>
            <value>
            <b>LogOutput</b> used to log all log messages.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.Parameters">
            <summary>
            Gets or sets the set of parameterizable strings that may appear
            in formatted Log messages.
            </summary>
            <value>
            An array of parameterizable strings that may appear in formatted
            log messages.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.Destination">
            <summary>
            Gets or sets the logging destination.
            </summary>
            <remarks>
            Can be one of Error, Out, or a file name.
            </remarks>
            <value>
            The logging destination.
            </value>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.Product">
            <summary>
            Gets or sets the assembly product.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.Version">
            <summary>
            Gets or sets the assembly version.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.BuildInfo">
            <summary>
            Gets or sets the assembly build info.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.BuildType">
            <summary>
            Gets or sets the assembly build type.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.Copyright">
            <summary>
            Gets or sets the assembly copyright.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Logging.Logger.Edition">
            <summary>
            Gets or sets the product edition.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Logging.Standard">
             <summary>
             Concrete <see cref="T:Tangosol.Util.Logging.LogOutput"/> extension that logs messages to
             either <b>Error</b>, <b>Out</b>, or a file via a <b>TextWriter</b>.
             </summary>
             <remarks>
             The DefaultLogOutput takes the following configuration parameters:
            
             destination
                 - specifies the output device used by the logging system; can be
                   one of Error, Out, or a file name
            
             See the coherence.xsd for additional documentation for each of these
             parameters.
             </remarks>
        </member>
        <member name="M:Tangosol.Util.Logging.Standard.Close">
            <summary>
            Close the LogOutput and release any resources held by the
            LogOutput.
            </summary>
            <remarks>
            <p/>
            This method has no effect if the LogOutput has already been
            closed. Closing a LogOutput makes it unusable. Any attempt to use
            a closed LogOutput may result in an exception.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.Logging.Standard.Configure(Tangosol.Net.IOperationalContext)">
            <summary>
            Configure a newly created LogOutput instance using the supplied
            OperationalContext.
            </summary>
            <param name="operationalContext">
            Operational context used to configure this LogOutput object.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.Standard.Log(System.Object,System.String)">
            <summary>
            Log the given message with the specified Log level (specific to
            the underlying logging mechanism).
            </summary>
            <param name="level">
            Logging level.
            </param>
            <param name="message">
            Message to log.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.Standard.Log(System.Object,System.Exception)">
            <summary>
            Log the given Exception with the specified Log level (specific to
            the underlying logging mechanism).
            </summary>
            <param name="level">
            Logging level.
            </param>
            <param name="exception">
            Exception to log.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.Standard.Log(System.Object,System.Exception,System.String)">
            <summary>
            Log the given Exception and associated message with the
            specified Log level (specific to the underlying logging
            mechanism).
            </summary>
            <param name="level">
            Logging level.
            </param>
            <param name="exception">
            Exception to log.
            </param>
            <param name="message">
            Message to log.
            </param>
        </member>
        <member name="M:Tangosol.Util.Logging.Standard.TranslateLevel(System.Int32)">
            <summary>
            Translate the given Logger level to an equivalent object
            appropriate for the underlying logging mechanism.
            </summary>
            <param name="level">
            Logger log level.
            </param>
            <returns>
            Logging level specific to the underlying logging mechanism that
            corresponds to the Logger log level.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Logging.Standard.m_printStream">
            <summary>
            The TextWriter used to output log messages.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Logging.Standard.PrintStream">
            <summary>
            Gets or sets the <b>TextWriter</b> used to output log messages.
            </summary>
            <value>
            <b>TextWriter</b> used to output log messages.
            </value>
        </member>
        <member name="T:Tangosol.Util.LongSortedList">
            <summary>
            A data structure resembling an array keyed by .NET long values.
            </summary>
            <remarks>
            LongSortedList structure is based on
            <b>System.Collections.SortedList</b> collection.
            </remarks>
            <author>Ivan Cikic  2006.09.08</author>
        </member>
        <member name="M:Tangosol.Util.LongSortedList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.LongSortedList.Add(System.Object)">
            <summary>
            Add the passed element value to the ILongArray and return the
            index at which the element value was stored.
            </summary>
            <param name="value">
            The object to add to the ILongArray.
            </param>
            <returns>
            The long index value at which the element value was stored.
            </returns>
        </member>
        <member name="M:Tangosol.Util.LongSortedList.Exists(System.Int64)">
            <summary>
            Determine if the specified index is in use.
            </summary>
            <param name="index">
            A long index value.
            </param>
            <returns>
            <b>true</b> if a value (including <c>null</c>) is stored at the
            specified index, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.LongSortedList.Remove(System.Int64)">
            <summary>
            Remove the specified index from the ILongArray, returning its
            associated value.
            </summary>
            <param name="index">
            The index into the ILongArray.
            </param>
            <returns>
            The associated value (which can be <c>null</c>) or <c>null</c> if
            the specified index is not in the ILongArray.
            </returns>
        </member>
        <member name="M:Tangosol.Util.LongSortedList.Contains(System.Object)">
            <summary>
            Determine if the ILongArray contains the specified element.
            </summary>
            <remarks>
            More formally, returns <b>true</b> if and only if this ILongArray
            contains at least one element <b>e</b> such that
            <b>(o==null ? e==null : o.Equals(e))</b>.
            </remarks>
            <param name="value">
            Element whose presence in this list is to be tested.
            </param>
            <returns>
            <b>true</b> if this list contains the specified element.
            </returns>
        </member>
        <member name="M:Tangosol.Util.LongSortedList.Clear">
            <summary>
            Remove all elements from the ILongArray.
            </summary>
        </member>
        <member name="M:Tangosol.Util.LongSortedList.GetEnumerator">
            <summary>
            Obtain an IEnumerator of the contents of the ILongArray.
            </summary>
            <returns>
            An instance of IEnumerator.
            </returns>
        </member>
        <member name="M:Tangosol.Util.LongSortedList.GetEnumerator(System.Int64)">
            <summary>
            Obtain an IEnumerator of the contents of the ILongArray,
            starting at a particular index such that the first call to
            <b>MoveNext</b> will set the location of the enumerator at the
            first existent index that is greater than or equal to the
            specified index, or will throw an <b>IndexOutOfRangeException</b>
            if there is no such existent index.
            </summary>
            <param name="index">
            The ILongArray index to iterate from.
            </param>
            <returns>
            An instance of IEnumerator.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            If index greater than or equal to the specified index does not
            exist.
            </exception>
        </member>
        <member name="F:Tangosol.Util.LongSortedList.m_innerList">
            <summary>
            A <b>SortedList</b> used for storing sorted key/value objects.
            </summary>
        </member>
        <member name="P:Tangosol.Util.LongSortedList.Item(System.Int64)">
            <summary>
            The value stored at the specified index.
            </summary>
            <param name="index">
            A long index value.
            </param>
            <value>
            The object stored at the specified index, or <c>null</c>.
            </value>
        </member>
        <member name="P:Tangosol.Util.LongSortedList.IsEmpty">
            <summary>
            Determine if ILongArray is empty.
            </summary>
            <value>
            <b>true</b> if ILongArray has no elements.
            </value>
        </member>
        <member name="P:Tangosol.Util.LongSortedList.Count">
            <summary>
            Determine the size of the ILongArray.
            </summary>
            <value>
            The number of elements in the ILongArray.
            </value>
        </member>
        <member name="P:Tangosol.Util.LongSortedList.FirstIndex">
            <summary>
            Determine the first index that exists in the ILongArray.
            </summary>
            <value>
            The lowest long value, 0 &lt;= n &lt;= Int64.MaxValue, that
            exists in this ILongArray, or -1 if the ILongArray is empty.
            </value>
        </member>
        <member name="P:Tangosol.Util.LongSortedList.LastIndex">
            <summary>
            Determine the last index that exists in the ILongArray.
            </summary>
            <value>
            The highest long value, 0 &lt;= n &lt;= Int64.MaxValue, that
            exists in this ILongArray, or -1 if the ILongArray is empty.
            </value>
        </member>
        <member name="P:Tangosol.Util.LongSortedList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to this
            ILongArray.
            </summary>
            <value>
            Object used to synchronize access to this ILongArray.
            </value>
        </member>
        <member name="T:Tangosol.Util.NetworkUtils">
            <summary>
            Miscellaneuos utility methods for network related objects.
            </summary>
            <author>Ana Cikic  2006.08.29</author>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.#cctor">
            <summary>
            Static initializer, specify the default address family.
            </summary>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.GetLocalHostAddress">
            <summary>
            Returns the local host IP address.
            </summary>
            <returns>
            The local host IP address.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.VerifyIpAddress(System.Net.IPAddress)">
            <summary>
            Check if the specified IPAddress is usable.
            </summary>
            <param name="ipAddress">The IPAddress to check</param>
            <returns>True if the IPAddress is usable</returns>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.GetHostAddress(System.String)">
            <summary>
            Returns first available IP address for the specified
            host name.
            </summary>
            <param name="hostName">
            The name of the host.
            </param>
            <returns>
            A first available IP address for the specified
            host name.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.GetAllAddresses(System.String)">
            <summary>
            Returns all available IP addresses for the specified
            host name.
            </summary>
            <param name="hostName">
            The name of the host.
            </param>
            <returns>
            An array of type IPAddress.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.IsLoopbackAddress(System.Net.IPAddress)">
            <summary>
            Determines if <b>IPAddress</b> is loopback address.
            </summary>
            <param name="address">
            An <b>IPAddress.</b>
            </param>
            <returns>
            <b>true</b> if <paramref name="address"/> is the loopback
            address; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.IsAnyLocalAddress(System.Net.IPAddress)">
            <summary>
            Determines if <b>IPAddress</b> is "Any" address.
            </summary>
            <remarks>
            The "Any" field is equivalent to 0.0.0.0 in dotted-quad notation.
            </remarks>
            <param name="address">
            An <b>IPAddress.</b>
            </param>
            <returns>
            <b>true</b> if <paramref name="address"/> is equal to "Any"
            address; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.IsLinkLocalAddress(System.Net.IPAddress)">
            <summary>
            Determines if <b>IPAddress</b> is link local address.
            </summary>
            <param name="address">
            An <b>IPAddress.</b>
            </param>
            <returns>
            <b>true</b> if <paramref name="address"/> is link local address;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.IsSiteLocalAddress(System.Net.IPAddress)">
            <summary>
            Determines if <b>IPAddress</b> is site local address.
            </summary>
            <param name="address">
            An <b>IPAddress.</b>
            </param>
            <returns>
            <b>true</b> if <paramref name="address"/> is site local address;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.GetAllLocalAddresses">
            <summary>
            Returns the list of all local addresses ofor all network interfaces 
            on the local computer.
            </summary>
            <returns>
            The list of all addresses for all network interfaces on the local computer.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.ToString(System.Net.IPEndPoint)">
            <summary>
            Utility method that prints out an <b>IPEndPoint</b> in a user-
            friendly manner.
            </summary>
            <param name="addr">
            <b>IPEndPoint</b> to print out.
            </param>
            <returns>
            The value in format ADDRESS:PORT.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.ToString(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Utility method that prints out an <b>IPEndPoint</b> with 
            optional subport in a user-friendly manner.
            </summary>
            <param name="addr">
            <b>IPEndPoint</b> to print out.
            </param>
            <param name="subport">
            Subport, -1 if there is none.
            </param>
            <returns>
            The value in format ADDRESS:BASEPORT.SUBPORT.
            </returns>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.WriteSubport(System.IO.Stream,System.Int32)">
            <summary>
            Write out the 8 byte multiplexed protocol header which consists 
            of two 4-byte words: first is the protocol ID 0x05AC1E000,
            second is the subport number.
            </summary>
            <param name="stream">
            The output stream to write to.
            </param>
            <param name="subport">
            The subport number.
            </param>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.SetLingerTime(System.Net.Sockets.TcpClient,System.Int32)">
            <summary>
            Configure the linger time of the given <b>Socket</b>.
            </summary>
            <param name="client">
            Target <b>Socket</b> object.
            </param>
            <param name="secs">
            The linger time in seconds (-1 to disable linger).
            </param>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.SetKeepAlive(System.Net.Sockets.TcpClient,System.Boolean)">
            <summary>
            Configure the <b>KeepAlive</b> option of the given <b>Socket</b> object.
            </summary>
            <param name="client">
            Target <b>Socket</b> object.
            </param>
            <param name="keepAlive">
            Boolean parameter that represents the new <b>KeepAlive</b> value.
            </param>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.SetReuseAddress(System.Net.Sockets.TcpClient,System.Boolean)">
            <summary>
            Configure the <b>ReuseAddress</b> option of the given <b>Socket</b> object.
            </summary>
            <param name="client">
            Target <b>Socket</b> object.
            </param>
            <param name="reuseAddress">
            Boolean parameter that represents the new <b>ReuseAddress</b> value.
            </param>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.SetReceiveBufferSize(System.Net.Sockets.TcpClient,System.Int32)">
            <summary>
            Configure the <b>ReceiveBuffer</b> option of the given <b>Socket</b> object.
            </summary>
            <param name="client">
            Target <b>Socket</b> object.
            </param>
            <param name="bufferSize">
            Integer parameter that represents the new <b>ReceiveBuffer</b> value.
            </param>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.SetSendBufferSize(System.Net.Sockets.TcpClient,System.Int32)">
            <summary>
            Configure the <b>SendBuffer</b> option of the given <b>Socket</b> object.
            </summary>
            <param name="client">
            Target <b>Socket</b> object.
            </param>
            <param name="bufferSize">
            Integer parameter that represents the new <b>SendBuffer</b> value.
            </param>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.SetTcpNoDelay(System.Net.Sockets.TcpClient,System.Boolean)">
            <summary>
            Configure the <b>NoDelay</b> option of the given <b>Socket</b> object.
            </summary>
            <param name="client">
            Target <b>Socket</b> object.
            </param>
            <param name="noDelay">
            Boolean parameter that represents the new <b>NoDelay</b> value.
            </param>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.Close(System.Net.Sockets.TcpClient)">
            <summary>
            Closes the given <b>TcpClient</b> object.
            </summary>
            <param name="client">
            The <b>Socket</b> object to close.
            </param>
            <returns>
            Returns <b>true</b> if the operation was successful; <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.SetSocketOption(System.Net.Sockets.TcpClient,System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)">
            <summary>
            Configure the value of the specified boolean <b>Socket</b> option.
            </summary>
            <param name="client">
            Target <b>TcpClient</b> object.
            </param>
            <param name="level">
            The <b>SocketOptionLevel</b> of the target Socket option.
            </param>
            <param name="name">
            The <b>SocketOptionName</b> of the target Socket option.
            </param>
            <param name="value">
            The desired value of the target <b>TcpClient</b> option.
            </param>
            <returns>
            Returns the new value of the target <b>TcpClient</b> option.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.SetSocketOption(System.Net.Sockets.TcpClient,System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>
            Configure the value of the specified integer <b>Socket</b> option.
            </summary>
            <param name="client">
            Target <b>TcpClient</b> object.
            </param>
            <param name="level">
            The <b>SocketOptionLevel</b> of the target Socket option.
            </param>
            <param name="name">
            The <b>SocketOptionName</b> of the target Socket option.
            </param>
            <param name="value">
            The desired value of the target <b>Socket</b> option.
            </param>
            <returns>
            Returns the new value of the target <b>Socket</b> option.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NetworkUtils.ValidateBufferSize(System.Boolean,System.Int32,System.Int32)">
            <summary>
            BufferSize validation method.
            </summary>
            <param name="isReceiveBuffer">
            Boolean flag that represents whether a receive or send buffer
            was configured; <b>true</b> represents a receive buffer;
            <b>false</b> represents a send buffer.
            </param>
            <param name="actual">
            Actual buffer size.
            </param>
            <param name="requested">
            Requested buffer size.
            </param>
        </member>
        <member name="P:Tangosol.Util.NetworkUtils.PreferredAddressFamily">
            <summary>
            Gets or sets the preferred AddressFamily. 
            </summary>
        </member>
        <member name="T:Tangosol.Util.Port32">
            <summary>
             Utility struct to compute baseport and subport from the 32 bit port 
             number.
            </summary>
             <since>Coherence 12.1.2</since>
        </member>
        <member name="F:Tangosol.Util.Port32.Baseport">
            <summary>
            The baseport number.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Port32.Subport">
            <summary>
            The subport number.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Port32.#ctor(System.Int32)">
            <summary>
            Construct a Port32 struct with the 32 bit port number.
            </summary>
            <param name="port">
            The 32 bit port number.
            </param>
        </member>
        <member name="T:Tangosol.Util.WellKnownSubPorts">
            <summary>
            Well known subport.
            </summary>
            <since>Coherence 12.1.2</since>
        </member>
        <member name="F:Tangosol.Util.WellKnownSubPorts.NameService">
            <summary>
            The name service subport.
            </summary>
        </member>
        <member name="T:Tangosol.Util.NullFilter">
            <summary>
            Filter which discards null references.
            </summary>
            <author>Cameron Purdy  1998.08.17</author>
            <author>Ana Cikic  2007.09.13</author>
        </member>
        <member name="M:Tangosol.Util.NullFilter.Evaluate(System.Object)">
            <summary>
            Apply the test to the object.
            </summary>
            <param name="o">
            An object to which the test is applied.
            </param>
            <returns>
            <b>true</b> if the test passes, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullFilter.Equals(System.Object)">
            <summary>
            Compares this object with another object for equality.
            </summary>
            <param name="o">
            An object reference or <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the passed object reference is of the same class
            and has the same state as this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullFilter.GetHashCode">
            <summary>
            Returns a hash code value for this object.
            </summary>
            <returns>
            A hash code value for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullFilter.ToString">
            <summary>
            Provide a human-readable representation of this object.
            </summary>
            <returns>
            A string whose contents represent the value of this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullFilter.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullFilter.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="T:Tangosol.Util.NullImplementation">
            <summary>
            A collection of classes that do nothing.
            </summary>
            <remarks>
            For each class implemented, a factory method will exist following the
            naming convention "Get" plus the class or interface name.
            </remarks>
            <author>Cameron Purdy  2000.08.02</author>
            <authro>Ana Cikic  2007.09.12</authro>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.GetEnumerator">
            <summary>
            Returns an instance of the <see cref="T:Tangosol.Util.NullImplementation.NullEnumerator"/>.
            </summary>
            <returns>
            An <b>IEnumerator</b> instance with no values to enumerate.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.GetCollection">
            <summary>
            Returns an instance of the <see cref="T:Tangosol.Util.NullImplementation.NullCollection"/>.
            </summary>
            <returns>
            An empty immutable collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.GetDictionary">
            <summary>
            Returns an instance of the <see cref="T:Tangosol.Util.NullImplementation.NullDictionary"/>.
            </summary>
            <returns>
            An empty immutable dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.GetCache">
            <summary>
            Returns an instance of the <see cref="T:Tangosol.Util.NullImplementation.NullCache"/>.
            </summary>
            <returns>
            An empty <see cref="T:Tangosol.Net.Cache.ICache"/> that does nothing.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.GetObservableCache">
            <summary>
            Returns an instance of the <see cref="T:Tangosol.Util.NullImplementation.NullObservableCache"/>.
            </summary>
            <returns>
            An empty <see cref="T:Tangosol.Net.Cache.IObservableCache"/> that does nothing.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.GetValueExtractor">
            <summary>
            Returns an instance of the <see cref="T:Tangosol.Util.NullImplementation.NullValueExtractor"/>.
            </summary>
            <returns>
            An <see cref="T:Tangosol.Util.IValueExtractor"/> that does not actually extract
            anything from the passed value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.GetConverter">
            <summary>
            Obtain a null implementation of a <see cref="T:Tangosol.Util.IConverter"/>.
            </summary>
            <returns>
            A conforming implementation of <b>IConverter</b> that does as
            little as possible.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.GetPofContext">
            <summary>
            Obtain a null implementation of a <see cref="T:Tangosol.IO.Pof.IPofContext"/>.
            </summary>
            <returns>
            A conforming implementation of <b>IPofContext</b> that does as
            little as possible.
            </returns>
        </member>
        <member name="T:Tangosol.Util.NullImplementation.NullEnumerator">
            <summary>
            An empty enumerator.
            </summary>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullEnumerator.#ctor">
            <summary>
            No public constructor.
            </summary>
            <remarks>
            The whole point of this class is to minimize allocations in
            cases where there is nothing to enumerate.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the
            collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to
            the next element; <b>false</b> if the enumerator has passed
            the end of the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before
            the first element in the collection.
            </summary>
        </member>
        <member name="F:Tangosol.Util.NullImplementation.NullEnumerator.Instance">
            <summary>
            Since the enumerator contains no information, only one ever
            has to exist.
            </summary>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The enumerator is positioned before the first element of the
            collection or after the last element.
            </exception>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullEnumerator.Tangosol#Net#Cache#ICacheEnumerator#Entry">
            <summary>
            Gets both the key and the value of the current cache entry.
            </summary>
            <value>
            An <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> containing both the key and
            the value of the current cache entry.
            </value>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            <returns>
            The key of the current element of the enumeration.
            </returns>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
            <returns>
            The value of the current element of the enumeration.
            </returns>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary
            entry.
            </summary>
            <returns>
            A <b>DictionaryEntry</b> containing both the key and the
            value of the current dictionary entry.
            </returns>
        </member>
        <member name="T:Tangosol.Util.NullImplementation.NullCollection">
            <summary>
            An immutable collection which contains nothing.
            </summary>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an <b>Array</b>,
            starting at a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the
            elements copied from the collection. The array must have
            zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <b>IEnumerator</b> object that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCollection.Equals(System.Object)">
            <summary>
            Compares this object with another object for equality.
            </summary>
            <param name="o">
            An object reference or <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the passed object reference is of the same
            class and has the same state as this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCollection.GetHashCode">
            <summary>
            Returns a hash code value for this object.
            </summary>
            <returns>
            A hash code value for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCollection.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCollection.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.NullImplementation.NullCollection.Instance">
            <summary>
            Since the collection contains no information, only one ever
            has to exist.
            </summary>
        </member>
        <member name="F:Tangosol.Util.NullImplementation.NullCollection.EMPTY_ENUMERATOR">
            <summary>
            Since the collection contains no information, only one
            enumerator has to exist.
            </summary>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value>
            The number of elements contained in the collection.
            </value>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            collection.
            </summary>
            <value>
            An object that can be used to synchronize access to the
            collection.
            </value>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is
            synchronized (thread safe).
            </summary>
            <value>
            <b>true</b> if access to the collection is synchronized
            (thread safe); otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.NullImplementation.NullDictionary">
            <summary>
            A dictionary that contains nothing and does nothing.
            </summary>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullDictionary.Contains(System.Object)">
            <summary>
            Determines whether the dictionary object contains an element
            with the specified key.
            </summary>
            <returns>
            <b>true</b> if the dictionary contains an element with the
            key; otherwise, <b>false</b>.
            </returns>
            <param name="key">
            The key to locate in the dictionary.
            </param>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullDictionary.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the
            dictionary.
            </summary>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            <param name="key">
            The object to use as the key of the element to add.
            </param>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullDictionary.Clear">
            <summary>
            Removes all elements from the dictionary.
            </summary>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullDictionary.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <b>IDictionaryEnumerator</b> object for the
            dictionary.
            </summary>
            <returns>
            An <b>IDictionaryEnumerator</b> object for the dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullDictionary.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            dictionary.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullDictionary.Equals(System.Object)">
            <summary>
            Compares this object with another object for equality.
            </summary>
            <param name="o">
            An object reference or <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the passed object reference is of the same
            class and has the same state as this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullDictionary.GetHashCode">
            <summary>
            Returns a hash code value for this object.
            </summary>
            <returns>
            A hash code value for this object.
            </returns>
        </member>
        <member name="F:Tangosol.Util.NullImplementation.NullDictionary.Instance">
            <summary>
            Since the dictionary contains no information, only one ever
            has to exist.
            </summary>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullDictionary.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">
            The key of the element to get or set.
            </param>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullDictionary.Keys">
            <summary>
            Gets an <b>ICollection</b> object containing the keys of the
            dictionary.
            </summary>
            <returns>
            An <b>ICollection</b> object containing the keys of the
            dictionary.
            </returns>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullDictionary.Values">
            <summary>
            Gets an <b>ICollection</b> object containing the values in the
            dictionary.
            </summary>
            <returns>
            An <b>ICollection</b> object containing the values in the
            dictionary.
            </returns>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the dictionary object is
            read-only.
            </summary>
            <returns>
            <b>true</b> if the dictionary object is read-only; otherwise,
            <b>false</b>.
            </returns>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the dictionary object has a
            fixed size.
            </summary>
            <returns>
            <b>true</b> if the dictionary object has a fixed size;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:Tangosol.Util.NullImplementation.NullCache">
            <summary>
            A <b>ICache</b> that contains nothing and does nothing.
            </summary>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCache.GetAll(System.Collections.ICollection)">
            <summary>
            Get the values for all the specified keys, if they are in the
            cache.
            </summary>
            <remarks>
            <p>
            For each key that is in the cache, that key and its corresponding
            value will be placed in the dictionary that is returned by this
            method. The absence of a key in the returned dictionary indicates
            that it was not in the cache, which may imply (for caches that
            can load behind the scenes) that the requested data could not be
            loaded.</p>
            <p>
            The result of this method is defined to be semantically the same
            as the following implementation, without regards to threading
            issues:</p>
            <pre>
            IDictionary dict = new AnyDictionary();
            // could be a Hashtable (but does not have to)
            foreach (object key in colKeys)
            {
                object value = this[key];
                if (value != null || Contains(key))
                {
                    dict[key] = value;
                }
            }
            return dict;
            </pre>
            </remarks>
            <param name="keys">
            A collection of keys that may be in the named cache.
            </param>
            <returns>
            A dictionary of keys to values for the specified keys passed in
            <paramref name="keys"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCache.Insert(System.Object,System.Object)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            <p>
            Invoking this method is equivalent to the following call:
            <pre>
            Insert(key, value, CacheExpiration.Default);
            </pre></p>
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the dictionary previously associated <c>null</c>
            with the specified key, if the implementation supports
            <c>null</c> values.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCache.Insert(System.Object,System.Object,System.Int64)">
            <summary>
            Associates the specified value with the specified key in this
            cache.
            </summary>
            <remarks>
            <p>
            If the cache previously contained a mapping for this key, the old
            value is replaced.</p>
            This variation of the <see cref="M:Tangosol.Util.NullImplementation.NullCache.Insert(System.Object,System.Object)"/>
            method allows the caller to specify an expiry (or "time to live")
            for the cache entry.
            </remarks>
            <param name="key">
            Key with which the specified value is to be associated.
            </param>
            <param name="value">
            Value to be associated with the specified key.
            </param>
            <param name="millis">
            The number of milliseconds until the cache entry will expire,
            also referred to as the entry's "time to live"; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.DEFAULT"/> to use the cache's
            default time-to-live setting; pass
            <see cref="F:Tangosol.Net.Cache.CacheExpiration.NEVER"/> to indicate that the
            cache entry should never expire; this milliseconds value is
            <b>not</b> a date/time value, but the amount of time object will
            be kept in the cache.
            </param>
            <returns>
            Previous value associated with specified key, or <c>null</c> if
            there was no mapping for key. A <c>null</c> return can also
            indicate that the cache previously associated <c>null</c> with
            the specified key, if the implementation supports <c>null</c>
            values.
            </returns>
            <exception cref="T:System.NotSupportedException">
            If the requested expiry is a positive value and the
            implementation does not support expiry of cache entries.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCache.InsertAll(System.Collections.IDictionary)">
            <summary>
            Copies all of the mappings from the specified dictionary to this
            cache (optional operation).
            </summary>
            <remarks>
            These mappings will replace any mappings that this cache had for
            any of the keys currently in the specified dictionary.
            </remarks>
            <param name="dictionary">
            Mappings to be stored in this cache.
             </param>
            <exception cref="T:System.InvalidCastException">
            If the class of a key or value in the specified dictionary
            prevents it from being stored in this cache.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the lock could not be succesfully obtained for some key.
            </exception>
            <exception cref="T:System.NullReferenceException">
            This cache does not permit <c>null</c> keys or values, and the
            specified key or value is <c>null</c>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCache.Tangosol#Net#Cache#ICache#GetEnumerator">
            <summary>
            Returns an <see cref="T:Tangosol.Net.Cache.ICacheEnumerator"/> object for the
            <b>ICache</b> instance.
            </summary>
            <returns>An <b>ICacheEnumerator</b> object for the
            <b>ICache</b> instance.</returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCache.Contains(System.Object)">
            <summary>
            Determines whether the dictionary object contains an element
            with the specified key.
            </summary>
            <returns>
            <b>true</b> if the dictionary contains an element with the
            key; otherwise, <b>false</b>.
            </returns>
            <param name="key">
            The key to locate in the dictionary.
            </param>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCache.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the
            dictionary.
            </summary>
            <param name="value">
            The object to use as the value of the element to add.
            </param>
            <param name="key">
            The object to use as the key of the element to add.
            </param>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCache.Clear">
            <summary>
            Removes all elements from the dictionary.
            </summary>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCache.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <b>IDictionaryEnumerator</b> object for the
            dictionary.
            </summary>
            <returns>
            An <b>IDictionaryEnumerator</b> object for the dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullCache.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the
            dictionary.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
        </member>
        <member name="F:Tangosol.Util.NullImplementation.NullCache.Instance">
            <summary>
            Since the cache contains no information, only one ever has to
            exist.
            </summary>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullCache.Entries">
            <summary>
            Gets a collection of <see cref="T:Tangosol.Net.Cache.ICacheEntry"/> instances
            within the cache.
            </summary>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullCache.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">
            The key of the element to get or set.
            </param>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullCache.Keys">
            <summary>
            Gets an <b>ICollection</b> object containing the keys of the
            dictionary.
            </summary>
            <returns>
            An <b>ICollection</b> object containing the keys of the
            dictionary.
            </returns>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullCache.Values">
            <summary>
            Gets an <b>ICollection</b> object containing the values in the
            dictionary.
            </summary>
            <returns>
            An <b>ICollection</b> object containing the values in the
            dictionary.
            </returns>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullCache.IsReadOnly">
            <summary>
            Gets a value indicating whether the dictionary object is
            read-only.
            </summary>
            <returns>
            <b>true</b> if the dictionary object is read-only; otherwise,
            <b>false</b>.
            </returns>
        </member>
        <member name="P:Tangosol.Util.NullImplementation.NullCache.IsFixedSize">
            <summary>
            Gets a value indicating whether the dictionary object has a
            fixed size.
            </summary>
            <returns>
            <b>true</b> if the dictionary object has a fixed size;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:Tangosol.Util.NullImplementation.NullObservableCache">
            <summary>
            An immutable <b>IObservableCache</b> which contains nothing.
            </summary>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullObservableCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Add a standard cache listener that will receive all events
            (inserts, updates, deletes) that occur against the cache, with
            the key, old-value and new-value included.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            AddCacheListener(listener, (IFilter) null, false);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener)">
            <summary>
            Remove a standard cache listener that previously signed up for
            all events.
            </summary>
            <remarks>
            This has the same result as the following call:
            <pre>
            RemoveCacheListener(listener, (IFilter) null);
            </pre>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullObservableCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object,System.Boolean)">
            <summary>
            Add a cache listener for a specific key.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.OldValue"/> and
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.NewValue"/> properties.</p>
            <p>
            To unregister the ICacheListener, use the
            <see cref="M:Tangosol.Util.NullImplementation.NullObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,System.Object)">
            <summary>
            Remove a cache listener that previously signed up for events
            about a specific key.
            </summary>
            <param name="listener">
            The listener to remove.
            </param>
            <param name="key">
            The key that identifies the entry for which to raise events.
            </param>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullObservableCache.AddCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Add a cache listener that receives events based on a filter
            evaluation.
            </summary>
            <remarks>
            <p>
            The listeners will receive <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> objects,
            but if <paramref name="isLite"/> is passed as <b>true</b>, they
            <i>might</i> not contain the <b>OldValue</b> and <b>NewValue</b>
            properties.</p>
            <p>
            To unregister the <see cref="T:Tangosol.Net.Cache.ICacheListener"/>, use the
            <see cref="M:Tangosol.Util.NullImplementation.NullObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)"/>
            method.</p>
            </remarks>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to add.</param>
            <param name="filter">
            A filter that will be passed <b>CacheEventArgs</b> objects to
            select from; a <b>CacheEventArgs</b> will be delivered to the
            listener only if the filter evaluates to <b>true</b> for that
            <b>CacheEventArgs</b>; <c>null</c> is equivalent to a filter
            that alway returns <b>true</b>.
            </param>
            <param name="isLite">
            <b>true</b> to indicate that the <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>
            objects do not have to include the <b>OldValue</b> and
            <b>NewValue</b> property values in order to allow optimizations.
            </param>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullObservableCache.RemoveCacheListener(Tangosol.Net.Cache.ICacheListener,Tangosol.Util.IFilter)">
            <summary>
            Remove a cache listener that previously signed up for events
            based on a filter evaluation.
            </summary>
            <param name="listener">
            The <see cref="T:Tangosol.Net.Cache.ICacheListener"/> to remove.
            </param>
            <param name="filter">
            A filter used to evaluate events; <c>null</c> is equivalent to a
            filter that alway returns <b>true</b>.
            </param>
        </member>
        <member name="F:Tangosol.Util.NullImplementation.NullObservableCache.Instance">
            <summary>
            Since the cache contains no information, only one ever has to
            exist.
            </summary>
        </member>
        <member name="T:Tangosol.Util.NullImplementation.NullValueExtractor">
            <summary>
            An <b>IValueExtractor</b> that always results in the passed-in
            value.
            </summary>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullValueExtractor.Extract(System.Object)">
            <summary>
            Extract the value from the passed object.
            </summary>
            <remarks>
            The returned value may be <c>null</c>.
            </remarks>
            <param name="target">
            An object to retrieve the value from.
            </param>
            <returns>
            The extracted value as an object; <c>null</c> is an
            acceptable value.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If this IValueExtractor is incompatible with the passed
            object to extract a value from and the implementation
            <b>requires</b> the passed object to be of a certain type.
            </exception>
            <exception cref="T:System.ArgumentException">
            If this IValueExtractor cannot handle the passed object for
            any other reason; an implementor should include a descriptive
            message.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullValueExtractor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullValueExtractor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullValueExtractor.Equals(System.Object)">
            <summary>
            Compares this object with another object for equality.
            </summary>
            <param name="o">
            An object reference or <c>null</c>.
            </param>
            <returns>
            <b>true</b> if the passed object reference is of the same
            class and has the same state as this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullValueExtractor.GetHashCode">
            <summary>
            Returns a hash code value for this object.
            </summary>
            <returns>
            A hash code value for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullValueExtractor.ToString">
            <summary>
            Provide a human-readable representation of this object.
            </summary>
            <returns>
            A string whose contents represent the value of this object.
            </returns>
        </member>
        <member name="F:Tangosol.Util.NullImplementation.NullValueExtractor.Instance">
            <summary>
            Since the <b>IValueExtractor</b> contains no information,
            only one ever has to exist.
            </summary>
        </member>
        <member name="T:Tangosol.Util.NullImplementation.NullConverter">
            <summary>
            An <see cref="T:Tangosol.Util.IConverter"/> that does nothing.
            </summary>
            <author>Cameron Purdy  2002.02.08</author>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullConverter.#ctor">
            <summary>
            Off-limits constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullConverter.Convert(System.Object)">
            <summary>
            Convert the passed object to another object.
            </summary>
            <param name="o">
            Object to be converted.
            </param>
            <returns>
            The new, converted object.
            </returns>
        </member>
        <member name="F:Tangosol.Util.NullImplementation.NullConverter.Instance">
            <summary>
            Since the <see cref="T:Tangosol.Util.IConverter"/> contains no information,
            only one ever has to exist.
            </summary>
        </member>
        <member name="T:Tangosol.Util.NullImplementation.NullPofContext">
            <summary>
            An implementation of IPofContext that does nothing.
            </summary>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullPofContext.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullPofContext.GetPofSerializer(System.Int32)">
            <summary>
            Return an <see cref="T:Tangosol.IO.Pof.IPofSerializer"/> that can be used to
            serialize and deserialize an object of the specified user type to
            and from a POF stream.
            </summary>
            <param name="typeId">
            The type identifier of the user type that can be serialized and
            deserialized using the returned <b>IPofSerializer</b>; must be
            non-negative.
            </param>
            <returns>
            An <b>IPofSerializer</b> for the specified user type.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullPofContext.GetUserTypeIdentifier(System.Object)">
            <summary>
            Determine the user type identifier associated with the given
            object.
            </summary>
            <param name="o">
            An instance of a user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            object.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given object is unknown to
            this <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullPofContext.GetUserTypeIdentifier(System.Type)">
            <summary>
            Determine the user type identifier associated with the given
            type.
            </summary>
            <param name="type">
            A user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given type is unknown to
            this <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullPofContext.GetUserTypeIdentifier(System.String)">
            <summary>
            Determine the user type identifier associated with the given type
            name.
            </summary>
            <param name="typeName">
            The name of a user type; must not be <c>null</c>.
            </param>
            <returns>
            The type identifier of the user type associated with the given
            type name.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the user type associated with the given type name is unknown
            to this <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullPofContext.GetTypeName(System.Int32)">
            <summary>
            Determine the name of the type associated with a user type
            identifier.
            </summary>
            <param name="typeId">
            The user type identifier; must be non-negative.
            </param>
            <returns>
            The name of the type associated with the specified user type
            identifier.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullPofContext.GetType(System.Int32)">
            <summary>
            Determine the type associated with the given user type
            identifier.
            </summary>
            <param name="typeId">
            The user type identifier; must be non-negative.
            </param>
            <returns>
            The type associated with the specified user type identifier.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the specified user type is negative or unknown to this
            <b>IPofContext</b>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullPofContext.IsUserType(System.Object)">
            <summary>
            Determine if the given object is of a user type known to this
            <b>IPofContext</b>.
            </summary>
            <param name="o">
            The object to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the specified object is of a valid user type.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullPofContext.IsUserType(System.Type)">
            <summary>
            Determine if the given type is a user type known to this
            <b>IPofContext</b>.
            </summary>
            <param name="type">
            The type to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the specified type is a valid user type.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullPofContext.IsUserType(System.String)">
            <summary>
            Determine if the type with the given name is a user type known to
            this <b>IPofContext</b>.
            </summary>
            <param name="typeName">
            The name of the type to test; must not be <c>null</c>.
            </param>
            <returns>
            <b>true</b> iff the type with the specified name is a valid user
            type.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullPofContext.Serialize(Tangosol.IO.DataWriter,System.Object)">
            <summary>
            Serialize an object to a stream by writing its state using the
            specified <see cref="T:Tangosol.IO.DataWriter"/> object.
            </summary>
            <param name="writer">
            The <b>DataWriter</b> with which to write the object's state.
            </param>
            <param name="o">
            The object to serialize.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.NullImplementation.NullPofContext.Deserialize(Tangosol.IO.DataReader)">
            <summary>
            Deserialize an object from a stream by reading its state using
            the specified <see cref="T:Tangosol.IO.DataReader"/> object.
            </summary>
            <param name="reader">
            The <b>DataReader</b> with which to read the object's state.
            </param>
            <returns>
            The deserialized user type instance.
            </returns>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.NullImplementation.NullPofContext.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Tangosol.Util.NumberUtils">
            <summary>
            Miscellaneuos utility methods for numbers manipulation.
            </summary>
            <author>Aleksandar Seovic  2006.08.09</author>
            <author>Ivan Cikic  2006.09.13</author>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number.
            </summary>
            <param name="number">
            Number to operate on.
            </param>
            <param name="bits">
            Ammount of bits to shift.
            </param>
            <returns>
            The resulting number from the shift operation.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number.
            </summary>
            <param name="number">
            Number to operate on.
            </param>
            <param name="bits">
            Ammount of bits to shift.
            </param>
            <returns>
            The resulting number from the shift operation.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.GetUnscaledValue(System.Decimal)">
            <summary>
            Gets the unscaled value of <b>Decimal</b> value.
            </summary>
            <param name="value">
            The <b>Decimal</b> value to get scale from.
            </param>
            <returns>
            Decimal which is unscaled value of a <b>Decimal</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.GetScale(System.Decimal)">
            <summary>
            Gets a scale of <b>Decimal</b> value.
            </summary>
            <param name="value">
            The <b>Decimal</b> value to get scale from.
            </param>
            <returns>
            Scale of a <b>Decimal</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.DecimalToRawInt128(System.Decimal)">
            <summary>
            Converts <b>Decimal</b> to unscaled <b>RawInt128</b>
            representation - compatible with Java BigInteger type.
            </summary>
            <param name="value">
            Decimal value to convert.
            </param>
            <returns>
            Signed-byte array representing unscaled <b>RawInt128</b> value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.EncodeDecimalBits(Tangosol.IO.Pof.RawInt128)">
            <summary>
            Encode <b>RawInt128</b> value provided to array of int values
            representing <b>Decimal</b> unscaled value bits.
            </summary>
            <param name="int128">
            <b>RawInt128</b> value.
            </param>
            <returns>
            Decimal unscaled value bits as array of int.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.SingleToInt32Bits(System.Single)">
            <summary>
            Converts <b>Single</b> to its bits, which are stored in a
            <b>Int32</b> instance.
            </summary>
            <param name="value">
            Value to convert to bits.
            </param>
            <returns>
            Bits packed within an <b>Int32</b> instance.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts bits which are stored in an <b>Int32</b> instance into
            the <b>Single</b> object.
            </summary>
            <param name="value">
            Bits packed within an <b>Int32</b> instance.
            </param>
            <returns>
            <b>Single</b> value represented by the bits in
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts <b>Double</b> to its bits, which are stored in a
            <b>Int64</b> instance.
            </summary>
            <param name="value">
            Value to convert to bits.
            </param>
            <returns>
            Bits packed within an <b>Int64</b> instance.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts bits which are stored in an <b>Int64</b> instance into
            the <b>Double</b> object.
            </summary>
            <param name="value">
            Bits packed within an <b>Int64</b> instance.
            </param>
            <returns>
            <b>Double</b> value represented by the bits in
            <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.IntToByteArray(System.Int32)">
            <summary>
            Converts <b>Int32</b> to its byte array.
            </summary>
            <param name="number">
            Value to convert to byte array.
            </param>
            <returns>
            Number packed within a <b>Byte</b> array.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ChangeEndian(System.Int16)">
            <summary>
            Changes the endian of <b>Int16</b> value.
            </summary>
            <param name="value">
            Value for which endian is being changed.
            </param>
            <returns>
            Value with changed endian.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ChangeEndian(System.UInt16)">
            <summary>
            Changes the endian of <b>UInt16</b> value.
            </summary>
            <param name="value">
            Value for which endian is being changed.
            </param>
            <returns>
            Value with changed endian.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ChangeEndian(System.Int32)">
            <summary>
            Changes the endian of <b>Int32</b> value.
            </summary>
            <param name="value">
            Value for which endian is being changed.
            </param>
            <returns>
            Value with changed endian.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ChangeEndian(System.UInt32)">
            <summary>
            Changes the endian of <b>UInt32</b> value.
            </summary>
            <param name="value">
            Value for which endian is being changed.
            </param>
            <returns>
            Value with changed endian.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ChangeEndian(System.Int64)">
            <summary>
            Changes the endian of <b>Int64</b> value.
            </summary>
            <param name="value">
            Value for which endian is being changed.
            </param>
            <returns>
            Value with changed endian.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ChangeEndian(System.UInt64)">
            <summary>
            Changes the endian of <b>UInt64</b> value.
            </summary>
            <param name="value">
            Value for which endian is being changed.
            </param>
            <returns>
            Value with changed endian.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ParseHex(System.String)">
            <summary>
            Parse the passed string of hexidecimal characters into a binary
            value.
            </summary>
            <remarks>
            This implementation allows the passed string to be prefixed with
            "0x".
            </remarks>
            <param name="s">
            The hex string to evaluate.
            </param>
            <returns>
            The byte array value of the passed hex string.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ParseHex(System.Char)">
            <summary>
            Return the integer value of a hexidecimal digit.
            </summary>
            <param name="ch">
            The hex character to evaluate.
            </param>
            <returns>
            The integer value of the passed hex character.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ToHex(System.Int32)">
            <summary>
            Convert a byte to the hex sequence of 2 hex digits.
            </summary>
            <param name="b">
            The byte.
            </param>
            <returns>
            The hex sequence.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ToHexEscape(System.Byte)">
            <summary>
            Convert a byte to a hex sequence of '0' + 'x' + 2 hex digits.
            </summary>
            <param name="b">
            The byte.
            </param>
            <returns>
            The hex sequence.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ToHexEscape(System.Byte[])">
            <summary>
            Convert a byte array to a hex sequence of '0' + 'x' + 2 hex
            digits per byte.
            </summary>
            <param name="bytes">
            The byte array.
            </param>
            <returns>
            The hex sequence.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ToHexEscape(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a byte array to a hex sequence of '0' + 'x' + 2 hex
            digits per byte.
            </summary>
            <param name="bytes">
            The byte array.
            </param>
            <param name="offset">
            The offset into array.
            </param>
            <param name="bytesCount">
            The number of bytes to convert.
            </param>
            <returns>
            The hex sequence.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.GetRandom">
            <summary>
            Obtain a <b>Random</b> object that can be used to get random
            values.
            </summary>
            <returns>
            A random number generator.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.IsNumber(System.Object)">
            <summary>
            Returns <b>true</b> if specified object is one of .NET supported
            numeric types:
            <list type="bullet">
            <item>byte</item>
            <item>short</item>
            <item>int</item>
            <item>long</item>
            <item>double</item>
            <item>float</item>
            <item>decimal</item>
            </list>
            </summary>
            <param name="num">
            An object being tested.
            </param>
            <returns>
            <b>true</b> if <paramref name="num"/> is numeric, <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ToCrc(System.Byte[])">
            <summary>
            Calculate a CRC32 value from a byte array.
            </summary>
            <param name="ab">
            An array of bytes.
            </param>
            <returns>
            The 32-bit CRC value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ToCrc(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculate a CRC32 value from a portion of a byte array.
            </summary>
            <param name="ab">
            An array of bytes.
            </param>
            <param name="of">
            The offset into the array.
            </param>
            <param name="cb">
            The number of bytes to evaluate.
            </param>
            <returns>
            The 32-bit CRC value.
            </returns>
        </member>
        <member name="M:Tangosol.Util.NumberUtils.ToCrc(System.Byte[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Continue to calculate a CRC32 value from a portion of a byte
            array.
            </summary>
            <param name="ab">
            An array of bytes.
            </param>
            <param name="of">
            The offset into the array.
            </param>
            <param name="cb">
            The number of bytes to evaluate.
            </param>
            <param name="crc">
            The previous CRC value.
            </param>
            <returns>
            The 32-bit CRC value.
            </returns>
        </member>
        <member name="T:Tangosol.Util.ObjectUtils">
            <summary>
            Miscellaneuos utility methods for object manipulation.
            </summary>
            <author>Aleksandar Seovic  2007.07.31</author>
        </member>
        <member name="M:Tangosol.Util.ObjectUtils.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates object instance using constructor that matches
            specified parameters.
            </summary>
            <param name="objectType">
            Type of object to create.
            </param>
            <param name="parameters">
            Serializer parameters.
            </param>
            <returns>
            An instance of the specified <paramref name="objectType"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ObjectUtils.CreateInstanceSafe(System.Type,System.Object[])">
            <summary>
            Creates object instance using constructor that matches
            specified parameters.
            </summary>
            <remarks>
            Returns null rather than throwing an exception, if the 
            specified constructor doesn't exist or fails to be invoked.
            </remarks>
            <param name="objectType">
            Type of object to create.
            </param>
            <param name="parameters">
            Serializer parameters.
            </param>
            <returns>
            An instance of the specified <paramref name="objectType"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ObjectUtils.IsImmutable(System.Object)">
            <summary>
            Return <c>true</c> if the specified object is immutable, 
            <c>false</c> otherwise.
            </summary>
            <param name="obj">Object to check for immutability.</param>
            <returns>
            <c>true</c> if the specified object is immutable, 
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ObjectUtils.GetTypes(System.Object[])">
            <summary>
            Return an array of types of specified objects.
            </summary>
            <param name="parameters">
            paramters
            </param>
            <returns>
            An array of types
            </returns>
        </member>
        <member name="F:Tangosol.Util.ObjectUtils.IMMUTABLE_TYPES">
            <summary>
            An array of BCL immutable types.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ObjectUtils.NO_VALUE">
            <summary>
            Constant that allows one to differentiate between a non-existent
            value and <c>null</c>.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Processor.CompositeProcessor">
            <summary>
            The <b>CompositeProcessor</b> represents a collection of entry
            processors that are invoked sequentially against the same entry.
            </summary>
            <author>Gene Gleyzer  2005.10.31</author>
            <author>Jason Howes  2005.10.31</author>
            <author>Ivan Cikic  2005.10.25</author>
        </member>
        <member name="M:Tangosol.Util.Processor.CompositeProcessor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.CompositeProcessor.#ctor(Tangosol.Net.Cache.IEntryProcessor[])">
            <summary>
            Construct a <b>CompositeProcessor</b> for the specified array of
            individual entry processors.
            </summary>
            <remarks>
            The result of the <b>CompositeProcessor</b> execution is an array
            of results returned by the individual
            <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> invocations.
            </remarks>
            <param name="processors">
            An array of <b>IEntryProcessor</b> objects.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.CompositeProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.CompositeProcessor.Equals(System.Object)">
            <summary>
            Compare the <b>CompositeProcessor</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <b>CompositeProcessor</b> and the passed
            object are equivalent <b>CompositeProcessor</b>s.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.CompositeProcessor.GetHashCode">
            <summary>
            Determine a hash value for the <b>CompositeProcessor</b> object
            according to the general <b>object.GetHashCode()</b> contract.
            </summary>
            <returns>
            An integer hash value for this <b>ConditionalProcessor</b>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.CompositeProcessor.ToString">
            <summary>
            Return a human-readable description for this
            <b>ConditionalProcessor</b>.
            </summary>
            <returns>
            A <b>String</b> description of the <b>ConditionalProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.CompositeProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.CompositeProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Processor.CompositeProcessor.EMPTY_PROCESSOR_ARRAY">
            <summary>
            An empty array of <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> objects.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.CompositeProcessor.m_processors">
            <summary>
             The underlying entry processor array.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Processor.ConditionalProcessor">
            <summary>
            Conditional entry processor represents a processor that is invoked
            conditionally based on the result of an entry evaluation.
            </summary>
            <remarks>
            If the underlying filter expects to evaluate existent entries only
            (i.e. entries for which
            <see cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.IsPresent"/> is <b>true</b>, it
            should be combined with a <see cref="T:Tangosol.Util.Filter.PresentFilter"/> as follows:
            <pre>
            IFilter filterPresent = new AndFilter(new PresentFilter(), filter);
            </pre>
            </remarks>
            <author>Gene Gleyzer  2005.10.31</author>
            <author>Jason Howes  2005.10.31</author>
            <author>Ivan Cikic  2006.10.23</author>
            <seealso cref="T:Tangosol.Util.Filter.PresentFilter"/>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalProcessor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalProcessor.#ctor(Tangosol.Util.IFilter,Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Construct a <b>ConditionalProcessor</b> for the specified filter
            and the processor.
            </summary>
            <remarks>
            The specified entry processor gets invoked if and only if the
            filter applied to the <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>
            evaluates to <b>true</b>; otherwize the result of the
            <see cref="M:Tangosol.Util.Processor.ConditionalProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)"/> invocation will return <c>null</c>.
            </remarks>
            <param name="filter">
            The filter.
            </param>
            <param name="processor">
            The entry processor.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalProcessor.ProcessAll(System.Collections.ICollection)">
            <summary>
            Process a collection of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>
            objects.
            </summary>
            <param name="entries">
            A read-only collection of <b>IInvocableCacheEntry</b>
            objects to process.
            </param>
            <returns>
            A dictionary containing the results of the processing, up to one
            entry for each <b>IInvocableCacheEntry</b> that was
            processed, keyed by the keys of the dictionary that were
            processed, with a corresponding value being the result of the
            processing for each key.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalProcessor.Equals(System.Object)">
            <summary>
            Compare the <b>ConditionalProcessor</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <b>ConditionalProcessor</b> and the passed
            object are equivalent <b>ConditionalProcessors</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalProcessor.GetHashCode">
            <summary>
            Determine a hash value for the <b>ConditionalProcessor</b> object
            according to the general <see cref="M:System.Object.GetHashCode"/>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>ConditionalProcessor</b>
            object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalProcessor.ToString">
            <summary>
            Return a human-readable description for this
            <b>ConditionalProcessor</b>.
            </summary>
            <returns>
            A <b>String</b> description of the <b>ConditionalProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Processor.ConditionalProcessor.m_filter">
            <summary>
            The underlying filter.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.ConditionalProcessor.m_processor">
            <summary>
            The underlying entry processor.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Processor.ConditionalPut">
            <summary>
            <b>ConditionalPut</b> is an <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> that
            sets <see cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.Value"/>if the specified
            condition is satisfied.
            </summary>
            <remarks>
            <p>
            While the <b>ConditionalPut</b> processing could be implemented via
            direct key-based <see cref="T:Tangosol.Net.Cache.IQueryCache"/> operations, it is
            more efficient and enforces concurrency control without explicit
            locking.</p>
            <p>
            <pre>
            <table>
            <tr>
            <th>IInvocableCache</th>
            <th>IConcurrentCache</th>
            </tr>
            <tr>
            <td>filter = PresentFilter.Instance;
            cache.Invoke(key, new ConditionalPut(filter, value));</td>
            <td>cache.Replace(key, value);</td>
            </tr>
            <tr>
            <td>filter = new NotFilter(PresentFilter.Instance);
            cache.Invoke(key, new ConditionalPut(filter, value));</td>
            <td>cache.PutIfAbsent(key, value);</td>
            </tr>
            <tr>
            <td>filter = new EqualsFilter(IdentityExtractor.Instance, valueOld);
            cache.Invoke(key, new ConditionalPut(filter, valueNew));</td>
            <td>cache.Replace(key, valueOld, valueNew);</td>
            </tr>
            </table>
            </pre>
            </p>
            <p>
            Obviously, using more specific, fine-tuned filters (rather than ones
            based on the <see cref="T:Tangosol.Util.Extractor.IdentityExtractor"/> may provide additional
            flexibility and efficiency allowing the put operation to be performed
            conditionally on values of specific attributes (or even calculations)
            instead of the entire object.</p>
            </remarks>
            <author>Gene Gleyzer  2006.03.15</author>
            <author>Ivan Cikic  2006.10.23</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPut.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPut.#ctor(Tangosol.Util.IFilter,System.Object)">
            <summary>
            Construct a <b>ConditionalPut</b> that updates an entry with a
            new value if and only if the filter applied to the entry
            evaluates to <b>true</b>.
            </summary>
            <remarks>
            The result of the <see cref="M:Tangosol.Util.Processor.ConditionalPut.Process(Tangosol.Net.Cache.IInvocableCacheEntry)"/> invocation does not
            return any result.
            </remarks>
            <param name="filter">
            The filter to evaluate an entry.
            </param>
            <param name="value">
            A value to update an entry with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPut.#ctor(Tangosol.Util.IFilter,System.Object,System.Boolean)">
            <summary>
            Construct a <b>ConditionalPut</b> that updates an entry with a
            new value if and only if the filter applied to the entry
            evaluates to <b>true</b>.
            </summary>
            <remarks>
            This processor optionally returns the current value as a result
            of the invocation if it has not been updated (the filter
            evaluated to <b>false</b>).
            </remarks>
            <param name="filter">
            The filter to evaluate an entry.
            </param>
            <param name="value">
            A value to update an entry with.
            </param>
            <param name="ret">
            Specifies whether or not the processor should return the current
            value in case it has not been updated.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPut.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPut.ProcessAll(System.Collections.ICollection)">
            <summary>
            Process a collection of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>
            objects.
            </summary>
            <param name="entries">
            A read-only collection of <b>IInvocableCacheEntry</b>
            objects to process.
            </param>
            <returns>
            A dictionary containing the results of the processing, up to one
            entry for each <b>IInvocableCacheEntry</b> that was
            processed, keyed by the keys of the dictionary that were
            processed, with a corresponding value being the result of the
            processing for each key.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPut.Equals(System.Object)">
            <summary>
            Compare the <b>ConditionalPut</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <b>ConditionalPut</b> and the passed object
            are equivalent <b>ConditionalPut</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPut.GetHashCode">
            <summary>
            Determine a hash value for the <b>ConditionalPut</b> object
            according to the general <see cref="M:System.Object.GetHashCode"/>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>ConditionalPut</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPut.ToString">
            <summary>
            Return a human-readable description for this
            <b>ConditionalPut</b>.
            </summary>
            <returns>
            A <b>String</b> description of the <b>ConditionalPut</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPut.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPut.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Processor.ConditionalPut.m_filter">
            <summary>
            The underlying filter.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.ConditionalPut.m_value">
            <summary>
            Specifies the new value to update an entry with.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.ConditionalPut.m_return">
            <summary>
            Specifies whether or not a return value is required.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Processor.ConditionalPutAll">
            <summary>
            <b>ConditionalPutAll</b> is an <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> that
            sets <see cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.Value"/> for multiple
            entries that satisfy the specified condition.
            </summary>
            <remarks>
            Obviously, using more specific, fine-tuned filters may provide
            additional flexibility and efficiency allowing the multi-put
            operations to be performed conditionally on values of specific
            attributes (or even calculations) instead of a simple existence
            check.
            </remarks>
            <author>Gene Gleyzer  2006.04.28</author>
            <author>Ivan Cikic  2006.10.23</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPutAll.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPutAll.#ctor(Tangosol.Util.IFilter,System.Collections.IDictionary)">
            <summary>
            Construct a <b>ConditionalPutAll</b> processor that updates an
            entry with a new value if and only if the filter applied to the
            entry evaluates to <b>true</b>.
            </summary>
            <remarks>
            The new value is extracted from the specified map based on the
            entry's key.
            </remarks>
            <param name="filter">
            The filter to evaluate all supplied entries.
            </param>
            <param name="dictionary">
            A dictionary of values to update entries with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPutAll.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPutAll.ProcessAll(System.Collections.ICollection)">
            <summary>
            Process a collection of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>
            objects.
            </summary>
            <param name="entries">
            A read-only collection of <b>IInvocableCacheEntry</b>
            objects to process.
            </param>
            <returns>
            An empty, immutable dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPutAll.Equals(System.Object)">
            <summary>
            Compare the <b>ConditionalPutAll</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <b>ConditionalPutAll</b> and the passed
            object are equivalent <b>ConditionalPutAll</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPutAll.GetHashCode">
            <summary>
            Determine a hash value for the <b>ConditionalPut</b> object
            according to the general <see cref="M:System.Object.GetHashCode"/>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>ConditionalPutAll</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPutAll.ToString">
            <summary>
            Return a human-readable description for this
            <b>ConditionalPutAll</b>.
            </summary>
            <returns>
            A <b>String</b> description of the <b>ConditionalPutAll</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPutAll.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalPutAll.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Processor.ConditionalPutAll.m_filter">
            <summary>
            The underlying filter.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.ConditionalPutAll.m_dictionary">
            <summary>
            Specifies the map of new values.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Processor.ConditionalRemove">
            <summary>
            <b>ConditionalRemove</b> is an <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> that
            performs an <see cref="M:Tangosol.Net.Cache.IInvocableCacheEntry.Remove(System.Boolean)"/>
            operation if the specified condition is satisfied.
            </summary>
            <remarks>
            <p>
            While the <b>ConditionalRemove</b> processing could be implemented via
            direct key-based <see cref="T:Tangosol.Net.Cache.IQueryCache"/> operations, it is
            more efficient and enforces concurrency control without explicit
            locking.</p>
            <p>
            For example, the following operations are functionally similar, but
            the <b>IInvocableDictionary</b> versions (a) perform significantly
            better for partitioned caches; (b) provide all necessary concurrency
            control (which is ommited from the <b>IQueryCache</b> examples):
            </p>
            <pre>
            <table>
            <tr>
            <th>IInvocableCache</th>
            <th>IQueryCache</th>
            </tr>
            <tr>
            <td>cache.invoke(key, new ConditionalRemove(filter));</td>
            <td>if (filter.Evaluate(cache[key]) cache.Remove(key);</td>
            </tr>
            <tr>
            <td>cache.InvokeAll(colKeys, new ConditionalRemove(filter));</td>
            <td>foreach (object key in colKeys)
                if (filter.Evaluate(cache.[key])
                    cache.Remove(key);</td>
            </tr>
            <tr>
            <td>cache.InvokeAll(filter1, new ConditionalRemove(filter2);</td>
            <td>foreach (object key in cache.GetKeys(filter1))
                if (filter2.Evaluate(cache[key])
                    cache.Remove(key);</td>
            </tr>
            <tr>
            <td>cache.InvokeAll(filter, new
                            ConditionalRemove(AlwaysFilter.INSTANCE));</td>
            <td>ICollection colKeys = cache.GetKeys(filter);
                cache.Keys.RemoveAll(colKeys);</td>
            </tr>
            </table>
            </pre>
            </remarks>
            <author>Gene Gleyzer  2006.03.15</author>
            <author>Ivan Cikic  2006.10.23</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalRemove.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalRemove.#ctor(Tangosol.Util.IFilter)">
            <summary>
            Construct a <b>ConditionalRemove</b> processor that removes an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> if and only if the filter
            applied to the entry evaluates to <b>true</b>.
            </summary>
            <remarks>
            The result of the <see cref="M:Tangosol.Util.Processor.ConditionalRemove.Process(Tangosol.Net.Cache.IInvocableCacheEntry)"/> invocation
            does not return any result.
            </remarks>
            <param name="filter">
            The filter to evaluate an entry.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalRemove.#ctor(Tangosol.Util.IFilter,System.Boolean)">
            <summary>
            Construct a <b>ConditionalRemove</b> processor that removes an
            <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/> if and only if the filter
            applied to the entry evaluates to <b>true</b>.
            </summary>
            <remarks>
            This processor may optionally return the current value as a
            result of the invocation if it has not been removed (the filter
            evaluated to <b>false</b>).
            </remarks>
            <param name="filter">
            The filter to evaluate an entry.
            </param>
            <param name="ret">
            Specifies whether or not the processor should return the
            current value if it has not been removed.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalRemove.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalRemove.ProcessAll(System.Collections.ICollection)">
            <summary>
            Process a collection of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>
            objects.
            </summary>
            <param name="entries">
            A read-only collection of <b>IInvocableCacheEntry</b>
            objects to process.
            </param>
            <returns>
            A dictionary containing the results of the processing, up to one
            entry for each <b>IInvocableCacheEntry</b> that was
            processed, keyed by the keys of the dictionary that were
            processed, with a corresponding value being the result of the
            processing for each key.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalRemove.Equals(System.Object)">
            <summary>
            Compare the <b>ConditionalRemove</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <b>ConditionalRemove</b> and the passed object
            are equivalent <b>ConditionalRemove</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalRemove.GetHashCode">
            <summary>
            Determine a hash value for the <b>ConditionalRemove</b> object
            according to the general <see cref="M:System.Object.GetHashCode"/>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>ConditionalRemove</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalRemove.ToString">
            <summary>
            Return a human-readable description for this
            <b>ConditionalRemove</b>.
            </summary>
            <returns>
            A <b>String</b> description of the <b>ConditionalRemove</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalRemove.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.ConditionalRemove.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Processor.ConditionalRemove.m_filter">
            <summary>
            The underlying filter.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.ConditionalRemove.m_return">
            <summary>
            Specifies whether or not a return value is required.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Processor.ExtractorProcessor">
            <summary>
            <b>ExtractorProcessor</b> is an <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/>
            implementations that extracts a value from an object cached in an
            <see cref="T:Tangosol.Net.Cache.IInvocableCache"/>.
            </summary>
            <remarks>
            A common usage pattern is:
            <pre>
            cache.Invoke(key, new ExtractorProcessor(extractor));
            </pre>
            which is functionally equivalent to the following operation:
            <pre>
            extractor.Extract(cache[key]);
            </pre>
            </remarks>
            <author>Gene Gleyzer  2005.11.30</author>
            <author>Ivan Cikic  2006.10.23</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Processor.ExtractorProcessor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.ExtractorProcessor.#ctor(Tangosol.Util.IValueExtractor)">
            <summary>
            Construct an <b>ExtractorProcessor</b> based on the specified
            <see cref="T:Tangosol.Util.IValueExtractor"/>.
            </summary>
            <param name="extractor">
            An <see cref="T:Tangosol.Util.IValueExtractor"/> object; passing <c>null</c> is
            equivalent to using the <see cref="T:Tangosol.Util.Extractor.IdentityExtractor"/>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.ExtractorProcessor.#ctor(System.String)">
            <summary>
            Construct an <b>ExtractorProcessor</b> for a given member name.
            </summary>
            <param name="member">
            A member name to make a  <see cref="T:Tangosol.Util.Extractor.ReflectionExtractor"/> for;
            this parameter can also be a dot-delimited sequence of member
            names which would result in an <b>ExtractorProcessor</b> based on
            the <see cref="T:Tangosol.Util.Extractor.ChainedExtractor"/> that is based on an array of
            corresponding <b>ReflectionExtractor</b> objects.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.ExtractorProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ExtractorProcessor.Equals(System.Object)">
            <summary>
            Compare the <b>PropertyProcessor</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <b>PropertyProcessor</b> and the passed object
            are equivalent <b>PropertyProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ExtractorProcessor.GetHashCode">
            <summary>
            Determine a hash value for the <b>PropertyProcessor</b> object
            according to the general <see cref="M:System.Object.GetHashCode"/>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>PropertyProcessor</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ExtractorProcessor.ToString">
            <summary>
            Return a human-readable description for this
            <b>PropertyProcessor</b>.
            </summary>
            <returns>
            A <b>String</b> description of the <b>PropertyProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.ExtractorProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.ExtractorProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Processor.ExtractorProcessor.m_extractor">
            <summary>
            The underlying value extractor.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Processor.NumberIncrementor">
            <summary>
            The <b>NumberIncrementor</b> entry processor is used to increment a
            property value of a Byte, Int16, Int32, Int64, Single, Double and
            Decimal type.
            </summary>
            <author>Gene Gleyzer  2005.10.31</author>
            <author>Ivan Cikic  2006.10.24</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="T:Tangosol.Util.Processor.PropertyProcessor">
             <summary>
             <b>PropertyProcessor</b> is a base class for
             <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> implementations that depend on a
             <see cref="T:Tangosol.Util.Processor.PropertyManipulator"/>.
             </summary>
             <remarks>
             A typical concrete subclass would implement the
             <see cref="M:Tangosol.Net.Cache.IEntryProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)"/> method using the following
             pattern:
             <pre>
             public Object Process(IInvocableDictonaryEntry entry)
             {
                 // retrieve an old property value
                 Object oldValue = entry;
            
                 ... // calculate a new value and the process result
                 ... // based on the old value and the processor's attributes
            
                 if (!newValue.Equals(oldValue))
                 {
                     // set the new property value
                     entry = newValue;
                 }
            
                 // return the process result
                 return oResult;
             }
             </pre>
             </remarks>
             <author>Gene Gleyzer  2005.10.31</author>
             <author>Ivan Cikic  2006.10.21</author>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyProcessor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyProcessor.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Tangosol.Util.Processor.PropertyProcessor"/> for the specified
            property name.
            </summary>
            <param name="name">
            A property name.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyProcessor.#ctor(System.String,System.Boolean)">
            <summary>
            Construct a <see cref="T:Tangosol.Util.Processor.PropertyProcessor"/> for the specified
            property name.
            </summary>
            <param name="name">
            A property name.
            </param>
            <param name="useIs">
            If <b>true</b>, the getter method will be prefixed with "Is".
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyProcessor.#ctor(Tangosol.Util.Processor.PropertyManipulator)">
            <summary>
            Construct a <b>PropertyProcessor</b> based for the specified
            <see cref="T:Tangosol.Util.Processor.PropertyManipulator"/>.
            </summary>
            <param name="manipulator">
            A <b>PropertyManipulator</b>; could be <c>null</c>.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyProcessor.Get(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Get the property value from the passed entry object.
            </summary>
            <param name="entry">
            The Entry object.
            </param>
            <returns>
            The property value.
            </returns>
            <seealso cref="M:Tangosol.Util.IValueExtractor.Extract(System.Object)"/>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyProcessor.Set(Tangosol.Net.Cache.IInvocableCacheEntry,System.Object)">
            <summary>
            Set the property value into the passed entry object.
            </summary>
            <param name="entry">
            The entry object.
            </param>
            <param name="value">
            A new property value.
            </param>
            <seealso cref="M:Tangosol.Util.IValueUpdater.Update(System.Object,System.Object)"/>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyProcessor.Equals(System.Object)">
            <summary>
            Compare the <b>PropertyProcessor</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <b>PropertyProcessor</b> and the passed object
            are equivalent <b>PropertyProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyProcessor.GetHashCode">
            <summary>
            Determine a hash value for the <b>PropertyProcessor</b> object
            according to the general <see cref="M:System.Object.GetHashCode"/>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>PropertyProcessor</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyProcessor.ToString">
            <summary>
            Return a human-readable description for this
            <b>PropertyProcessor</b>.
            </summary>
            <returns>
            A <b>String</b> description of the <b>PropertyProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Processor.PropertyProcessor.m_manipulator">
            <summary>
            The property value manipulator.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Processor.PropertyProcessor.Description">
            <summary>
             Returns this <b>PropertyProcessor</b>'s description.
            </summary>
            <returns>
            This <b>PropertyProcessor</b>'s description.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.NumberIncrementor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.NumberIncrementor.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Construct an <b>NumberIncrementor</b> processor that will
            increment a property value by a specified amount, returning
            either the old or the new value as specified.
            </summary>
            <remarks>
            The .NET type of the <paramref name="numInc"/> parameter will
            dictate the .NET type of the original and the new value.
            </remarks>
            <param name="name">
            The property name.
            </param>
            <param name="numInc">
            The object representing the magnitude and sign of the increment.
            </param>
            <param name="postIncrement">
            Pass <b>true</b> to return the value as it was before it was
            incremented, or pass <b>false</b> to return the value as it is
            after it is incremented.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.NumberIncrementor.#ctor(Tangosol.Util.Processor.PropertyManipulator,System.Object,System.Boolean)">
            <summary>
            Construct an <b>NumberIncrementor</b> processor that will
            increment a property value by a specified amount, returning
            either the old or the new value as specified.
            </summary>
            <remarks>
            The .NET type of the numInc parameter will dictate the .NET type
            of the original and the new value.
            </remarks>
            <param name="manipulator">
            The <see cref="T:Tangosol.Util.Processor.PropertyManipulator"/>; could be <c>null</c>.
            </param>
            <param name="numInc">
            The object representing the magnitude and sign of the increment.
            </param>
            <param name="postIncrement">
            Pass <b>true</b> to return the value as it was before it was
            incremented, or pass <b>false</b> to return the value as it is
            after it is incremented.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.NumberIncrementor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.NumberIncrementor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.NumberIncrementor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Processor.NumberIncrementor.m_numInc">
            <summary>
            The number to increment by.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.NumberIncrementor.m_postInc">
            <summary>
            Whether to return the value before it was incremented
            ("post-increment") or after it is incremented ("pre-increment").
            </summary>
        </member>
        <member name="P:Tangosol.Util.Processor.NumberIncrementor.Description">
            <summary>
             Returns this <b>PropertyProcessor</b>'s description.
            </summary>
            <returns>
            This <b>PropertyProcessor</b>'s description.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Processor.NumberMultiplier">
            <summary>
            The <b>NumberMultiplier</b> entry processor is used to multiply a
            property value of a Byte, Int16, Int32, Int64, Single, Double,
            BigInteger and BigDecimal type.
            </summary>
            <author>Gene Gleyzer  2005.10.31</author>
            <author>Ivan Cikic  2006.10.24</author>
            <since>Coherence 3.1</since>
        </member>
        <member name="M:Tangosol.Util.Processor.NumberMultiplier.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.NumberMultiplier.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Construct an <b>NumberMultiplier</b> processor that will
            multiply a property value by a specified factor, returning
            either the old or the new value as specified.
            </summary>
            <remarks>
            <p>
            The .NET type of the original property value will dictate the way
            the specified factor is interpreted. For example, applying a
            factor of Double(0.5) to a property value of Int32(4) will
            result in a new property value of Int32(2).</p>
            <p>
            If the original property value is <c>null</c>, the .NET type of
            the numFactor parameter will dictate the .NET type of the new
            value.</p>
            </remarks>
            <param name="name">
            The property name.
            </param>
            <param name="numInc">
            The object representing the magnitude and sign of the multiplier.
            </param>
            <param name="postIncrement">
            Pass <b>true</b> to return the value as it was before it was
            multiplied, or pass <b>false</b> to return the value as it is
            after it is multiplied.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.NumberMultiplier.#ctor(Tangosol.Util.Processor.PropertyManipulator,System.Object,System.Boolean)">
            <summary>
            Construct an <b>NumberMultiplier</b> processor that will
            increment a property value by a specified amount, returning
            either the old or the new value as specified.
            </summary>
            <remarks>
            <p>
            The .NET type of the original property value will dictate the way
            the specified factor is interpreted. For example, applying a
            factor of Double(0.5) to a property value of Int32(4) will
            result in a new property value of Int32(2).</p>
            <p>
            If the original property value is <c>null</c>, the .NET type of
            the numFactor parameter will dictate the .NET type of the new
            value.</p>
            </remarks>
            <param name="manipulator">
            The <see cref="T:Tangosol.Util.Processor.PropertyManipulator"/>; could be <c>null</c>.
            </param>
            <param name="numInc">
            The object representing the magnitude and sign of the multiplier.
            </param>
            <param name="postIncrement">
            Pass <b>true</b> to return the value as it was before it was
            multiplied, or pass <b>false</b> to return the value as it is
            after it is multiplied.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.NumberMultiplier.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.NumberMultiplier.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.NumberMultiplier.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Processor.NumberMultiplier.m_numFactor">
            <summary>
            The number to multiply by.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.NumberMultiplier.m_postFactor">
            <summary>
            Whether to return the value before it was multiplied
            ("post-increment") or after it is multiplied ("pre-increment").
            </summary>
        </member>
        <member name="P:Tangosol.Util.Processor.NumberMultiplier.Description">
            <summary>
             Returns this <b>PropertyProcessor</b>'s description.
            </summary>
            <returns>
            This <b>PropertyProcessor</b>'s description.
            </returns>
        </member>
        <member name="T:Tangosol.Util.Processor.PreloadRequest">
            <summary>
            <b>PreloadRequest</b> is a simple <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> that
            gets an <see cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.Value"/> property.
            </summary>
            <remarks>
            <p>
            No results are reported back to the caller.</p>
            <p>
            The <b>PreloadRequest</b> process provides a means to "pre-load" an
            entry or a collection of entries into the cache using the cache's
            loader without incurring the cost of sending the value(s) over the
            network. If the corresponding entry (or entries) already exists in
            the cache, or if the cache does not have a loader, then invoking this
            <b>IEntryProcessor</b> has no effect.</p>
            </remarks>
            <author>Gene Gleyzer  2006.04.28</author>
            <author>Ivan Cikic  2006.10.24</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Processor.PreloadRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.PreloadRequest.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.PreloadRequest.ProcessAll(System.Collections.ICollection)">
            <summary>
            Process a collection of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>
            objects.
            </summary>
            <param name="entries">
            A read-only collection of <b>IInvocableCacheEntry</b>
            objects to process.
            </param>
            <returns>
            An empty, immutable dictionary.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.PreloadRequest.Equals(System.Object)">
            <summary>
            Compare the <b>PreloadRequest</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <b>PreloadRequest</b> and the passed object
            are equivalent <b>PreloadRequest</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.PreloadRequest.GetHashCode">
            <summary>
            Determine a hash value for the <b>PreloadRequest</b> object
            according to the general <see cref="M:System.Object.GetHashCode"/>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>PreloadRequest</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.PreloadRequest.ToString">
            <summary>
            Return a human-readable description for this
            <b>PreloadRequest</b>.
            </summary>
            <returns>
            A <b>String</b> description of the <b>PreloadRequest</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.PreloadRequest.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.PreloadRequest.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Processor.PreloadRequest.Instance">
            <summary>
            An instance of the PreloadRequest processor.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Processor.PriorityProcessor">
            <summary>
            PriorityProcessor is used to explicitly control the scheduling
            priority and timeouts for execution of <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/>
            -based methods.
            </summary>
            <remarks>
            For example, let's assume that there is a cache that belongs to a
            partitioned cache service configured with a <i>task-timeout</i> of 5
            seconds. Also assume that there is a particular
            <see cref="T:Tangosol.Util.Processor.PreloadRequest"/> processor that could take much longer to
            complete due to a large amount of database related processing. Then
            we could override the default task timeout value by using the
            PriorityProcessor as follows:
            <code>
            PreloadRequest     procStandard = PreloadRequest.Instance;
            PriorityProcessor  procPriority = new PriorityProcessor(procStandard);
            procPriority.ExecutionTimeoutMillis = PriorityTaskTimeout.None;
            cache.ProcessAll(keys, procPriority);
            </code>
            This is an advanced feature which should be used judiciously.
            </remarks>
            <author>Gene Gleyzer  2007.03.20</author>
            <since>Coherence 3.3</since>
        </member>
        <member name="M:Tangosol.Util.Processor.PriorityProcessor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.PriorityProcessor.#ctor(Tangosol.Net.Cache.IEntryProcessor)">
            <summary>
            Construct a PriorityProcessor.
            </summary>
            <param name="processor">
            The processor wrapped by this PriorityProcessor.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.PriorityProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.PriorityProcessor.ProcessAll(System.Collections.ICollection)">
            <summary>
            Process a collection of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>
            objects.
            </summary>
            <remarks>
            This method is semantically equivalent to:
            <pre>
            IDictionary results = new Hashtable();
            foreach (IInvocableCacheEntry entry in entries)
            {
                results[entry.Key] = Process(entry);
            }
            return results;
            </pre>
            </remarks>
            <param name="entries">
            A read-only collection of <b>IInvocableCacheEntry</b>
            objects to process.
            </param>
            <returns>
            A dictionary containing the results of the processing, up to one
            entry for each <b>IInvocableCacheEntry</b> that was processed,
            keyed by the keys of the dictionary that were processed, with a
            corresponding value being the result of the processing for each
            key.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.PriorityProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <remarks>
            This implementation reserves property index 10.
            </remarks>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.PriorityProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <remarks>
            This implementation reserves property index 10.
            </remarks>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.PriorityProcessor.ToString">
            <summary>
            Return a human-readable description for this
            <b>PriorityProcessor</b>.
            </summary>
            <returns>
            A string description of the <b>PriorityProcessor</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Processor.PriorityProcessor.m_processor">
            <summary>
            The wrapped IEntryProcessor.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Processor.PriorityProcessor.Processor">
            <summary>
            Obtain the underlying processor.
            </summary>
            <value>
            The processor wrapped by this PriorityProcessor.
            </value>
        </member>
        <member name="T:Tangosol.Util.Processor.PropertyManipulator">
            <summary>
            PropertyManipulator is a reflection based
            <see cref="T:Tangosol.Util.IValueManipulator"/> implementation.
            </summary>
            <author>Gene Gleyzer  2005.10.31</author>
            <author>Ivan Cikic  2006.10.25</author>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyManipulator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyManipulator.#ctor(System.String)">
            <summary>
            Construct a <b>PropertyManipulator</b> for the specified property
            name.
            </summary>
            <param name="name">
            A property name.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyManipulator.#ctor(System.String,System.Boolean)">
            <summary>
            Construct a <b>PropertyManipulator</b> for the specified property
            name.
            </summary>
            <param name="name">
            A property name.
            </param>
            <param name="useIs">
            If <b>true</b>, the getter method will be prefixed with "Is".
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyManipulator.Init">
            <summary>
            Parse the property name and initialize necessary extractor and
            updater.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyManipulator.Equals(System.Object)">
            <summary>
            Compare the <b>PropertyManipulator</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <b>PropertyManipulator</b> and the passed
            object are equivalent <b>PropertyManipulator</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyManipulator.GetHashCode">
            <summary>
            Determine a hash value for the <b>PropertyManipulator</b> object
            according to the general <see cref="M:System.Object.GetHashCode"/>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>PropertyManipulator</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyManipulator.ToString">
            <summary>
            Return a human-readable description for this
            <b>PropertyManipulator</b>.
            </summary>
            <returns>
            A <b>String</b> description of the <b>PropertyManipulator</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyManipulator.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.PropertyManipulator.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Processor.PropertyManipulator.m_name">
            <summary>
            The property name, never <c>null</c>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.PropertyManipulator.m_useIs">
            <summary>
            The getter prefix flag.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.PropertyManipulator.m_extractorPart">
            <summary>
            A partial <see cref="T:Tangosol.Util.IValueExtractor"/> used for composite
            properties.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.PropertyManipulator.m_extractor">
            <summary>
            The underlying <see cref="T:Tangosol.Util.IValueExtractor"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.PropertyManipulator.m_updater">
            <summary>
            The underlying <see cref="T:Tangosol.Util.IValueUpdater"/>.
            </summary>
        </member>
        <member name="P:Tangosol.Util.Processor.PropertyManipulator.Extractor">
            <summary>
            Retreive the underlying <see cref="T:Tangosol.Util.IValueExtractor"/> reference.
            </summary>
            <value>
            The <b>IValueExtractor</b>.
            </value>
        </member>
        <member name="P:Tangosol.Util.Processor.PropertyManipulator.Updater">
            <summary>
            Retreive the underlying <see cref="T:Tangosol.Util.IValueUpdater"/> reference.
            </summary>
            <value>
            The <b>IValueUpdater</b>.
            </value>
        </member>
        <member name="T:Tangosol.Util.Processor.UpdaterProcessor">
            <summary>
            <b>UpdaterProcessor</b> is an <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/>
            implementations that updates an attribute of an object cached in an
            <see cref="T:Tangosol.Net.Cache.IInvocableCache"/>.
            </summary>
            <remarks>
            A common usage pattern is:
            <pre>
            cache.Invoke(Key, new UpdaterProcessor(updater, value));
            </pre>
            which is functionally equivalent to the following operation:
            <pre>
            Object target = cache.Get(Key);
            updater.update(target, value);
            cache.Put(Key, target);
            </pre>
            The major difference is that for clustered caches using the
            <see cref="T:Tangosol.Util.Processor.UpdaterProcessor"/> allows avoiding explicit concurrency
            control and could significantly reduce the amount of network traffic.
            </remarks>
            <author>Gene Gleyzer  2006.07.25</author>
            <author>Ivan Cikic  2006.10.25</author>
        </member>
        <member name="M:Tangosol.Util.Processor.UpdaterProcessor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.UpdaterProcessor.#ctor(Tangosol.Util.IValueUpdater,System.Object)">
            <summary>
            Construct an <b>UpdaterProcessor</b> based on the specified
            <see cref="T:Tangosol.Util.IValueUpdater"/>.
            </summary>
            <param name="updater">
            An <b>IValueUpdater</b> object; passing <c>null</c> will simpy
            replace the entry's value with the specified one instead of
            updating it.
            </param>
            <param name="value">
            The value to update the target entry with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.UpdaterProcessor.#ctor(System.String,System.Object)">
            <summary>
            Construct an <b>UpdaterProcessor</b> for a given member name.
            </summary>
            <remarks>
            The member must have a single parameter of a .NET type
            compatible with the specified value type.
            </remarks>
            <param name="member">
            A member name to make a <see cref="T:Tangosol.Util.Extractor.ReflectionUpdater"/> for;
            this parameter can also be a dot-delimited sequence of member
            names which would result in using a
            <see cref="T:Tangosol.Util.Extractor.CompositeUpdater"/>.
            </param>
            <param name="value">
            The value to update the target entry with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.UpdaterProcessor.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.UpdaterProcessor.Equals(System.Object)">
            <summary>
            Compare the <b>UpdaterProcessor</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <b>UpdaterProcessor</b> and the passed object
            are equivalent <b>UpdaterProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.UpdaterProcessor.GetHashCode">
            <summary>
            Determine a hash value for the <b>UpdaterProcessor</b> object
            according to the general <see cref="M:System.Object.GetHashCode"/>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>UpdaterProcessor</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.UpdaterProcessor.ToString">
            <summary>
            Return a human-readable description for this
            <b>UpdaterProcessor</b>.
            </summary>
            <returns>
            A <b>String</b> description of the <b>UpdaterProcessor</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.UpdaterProcessor.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.UpdaterProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.Processor.UpdaterProcessor.m_updater">
            <summary>
            The underlying <see cref="T:Tangosol.Util.IValueUpdater"/>.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.UpdaterProcessor.m_value">
            <summary>
            A value to update the entry's value with.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Processor.VersionedPut">
            <summary>
            <b>VersionedPut</b> is an <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> that assumes
            that entry values implement <see cref="T:Tangosol.Util.IVersionable"/> interface and
            sets an <see cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.Value"/> property
            if and only if the version of the specified value matches to the
            version of the current value.
            </summary>
            <remarks>
            In case of the match, the <b>VersionedPut</b> will increment the
            version indicator before the value is updated.
            </remarks>
            <seealso cref="T:Tangosol.Util.Processor.ConditionalPut"/>
            <author>Gene Gleyzer  2006.05.07</author>
            <author>Ivan Cikic  2006.10.23</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPut.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPut.#ctor(Tangosol.Util.IVersionable)">
            <summary>
            Construct a <b>VersionedPut</b> that updates an entry with a new
            value if and only if the version of the new value matches to the
            version of the current entry's value (which must exist).
            </summary>
            <remarks>
            The result of the <see cref="M:Tangosol.Util.Processor.VersionedPut.Process(Tangosol.Net.Cache.IInvocableCacheEntry)"/> invocation does not
            return any result.
            </remarks>
            <param name="value">
            An <see cref="T:Tangosol.Util.IVersionable"/> value to update an entry with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPut.#ctor(Tangosol.Util.IVersionable,System.Boolean,System.Boolean)">
            <summary>
            Construct a <b>VersionedPut</b> that updates an entry with a new
            value if and only if the version of the new value matches to the
            version of the current entry's value.
            </summary>
            <remarks>
            This processor optionally returns the current value as a result
            of the invocation if it has not been updated (the versions did
            not match).
            </remarks>
            <param name="value">
            An <see cref="T:Tangosol.Util.IVersionable"/> value to update an entry with.
            </param>
            <param name="allowInsert">
            Specifies whether or not an insert should be allowed (no
            currently existing value).
            </param>
            <param name="ret">
            Specifies whether or not the processor should return the current
            value in case it has not been updated.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPut.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPut.ProcessAll(System.Collections.ICollection)">
            <summary>
            Process a collection of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>
            objects.
            </summary>
            <param name="entries">
            A read-only collection of <b>IInvocableCacheEntry</b>
            objects to process.
            </param>
            <returns>
            A dictionary containing the results of the processing, up to one
            entry for each <b>IInvocableCacheEntry</b> that was
            processed, keyed by the keys of the dictionary that were
            processed, with a corresponding value being the result of the
            processing for each key.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPut.Equals(System.Object)">
            <summary>
            Compare the <b>VersionedPut</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <b>VersionedPut</b> and the passed object
            are equivalent <b>VersionedPut</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPut.GetHashCode">
            <summary>
            Determine a hash value for the <b>VersionedPut</b> object
            according to the general <see cref="M:System.Object.GetHashCode"/>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>VersionedPut</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPut.ToString">
            <summary>
            Return a human-readable description for this
            <b>VersionedPut</b>.
            </summary>
            <returns>
            A <b>String</b> description of the <b>VersionedPut</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPut.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPut.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPut.processEntry(Tangosol.Net.Cache.IInvocableCacheEntry,Tangosol.Util.IVersionable,System.Boolean,System.Boolean)">
            <summary>
            Process the given entry.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <param name="valueNew">
            The new value to update an entry with.
            </param>
            <param name="insert">
            Specifies whether or not an insert is allowed.
            </param>
            <param name="ret">
            Specifies whether or not a return value is required.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Processor.VersionedPut.NO_RESULT">
            <summary>
            Used internally to differentiate between "no result" and null result.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.VersionedPut.m_value">
            <summary>
            Specifies the new value to update an entry with.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.VersionedPut.m_insert">
            <summary>
            Specifies whether or not an insert is allowed.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.VersionedPut.m_return">
            <summary>
            Specifies whether or not a return value is required.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Processor.VersionedPutAll">
            <summary>
            <b>VersionedPutAll</b> is an <see cref="T:Tangosol.Net.Cache.IEntryProcessor"/> that
            assumes that entry values implement <see cref="T:Tangosol.Util.IVersionable"/>
            interface and sets an <see cref="P:Tangosol.Net.Cache.IInvocableCacheEntry.Value"/>
            proprty only for entries whose versions match to versions of the
            corresponding current values.
            </summary>
            <remarks>
            In case of the match, the <b>VersionedPutAll</b> will
            increment the version indicator before each value is
            updated.
            </remarks>
            <seealso cref="T:Tangosol.Util.Processor.VersionedPut"/>
            <author>Gene Gleyzer  2006.05.07</author>
            <author>Ivan Cikic  2006.10.23</author>
            <since>Coherence 3.2</since>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPutAll.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPutAll.#ctor(System.Collections.IDictionary)">
            <summary>
            Construct a <b>VersionedPutAll</b> processor that updates an
            entry with a new value if and only if the version of the new
            value matches to the version of the current entry's value (which
            must exist).
            </summary>
            <remarks>
            The result of the <see cref="M:Tangosol.Util.Processor.VersionedPutAll.Process(Tangosol.Net.Cache.IInvocableCacheEntry)"/> invocation does not
            return any result.
            </remarks>
            <param name="map">
            A dictionary of values to update entries with.
            </param>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPutAll.#ctor(System.Collections.IDictionary,System.Boolean,System.Boolean)">
            <summary>
             Construct a <b>VersionedPutAll</b> processor that updates an
             entry with a new value if and only if the version of the new
             value matches to the version of the current entry's value (which
             must exist).
             </summary>
             <remarks>
             This processor optionally returns a map of entries that have not
             been updated (the versions did not match).
             </remarks>
             <param name="map">
             A map of values to update entries with.
             </param>
             <param name="allowInsert">
             Specifies whether or not an insert should be allowed (no
             currently existing value).
             </param>
             <param name="ret">
             Specifies whether or not the processor should return the current
             value in case it has not been updated.
             </param>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPutAll.Process(Tangosol.Net.Cache.IInvocableCacheEntry)">
            <summary>
            Process an <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPutAll.ProcessAll(System.Collections.ICollection)">
            <summary>
            Process a collection of <see cref="T:Tangosol.Net.Cache.IInvocableCacheEntry"/>
            objects.
            </summary>
            <param name="entries">
            A read-only collection of <b>IInvocableCacheEntry</b>
            objects to process.
            </param>
            <returns>
            A dictionary containing the results of the processing, up to one
            entry for each <b>IInvocableCacheEntry</b> that was
            processed, keyed by the keys of the dictionary that were
            processed, with a corresponding value being the result of the
            processing for each key.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPutAll.Equals(System.Object)">
            <summary>
            Compare the <b>VersionedPutAll</b> with another object to
            determine equality.
            </summary>
            <param name="o">
            The object to compare with.
            </param>
            <returns>
            <b>true</b> iff this <b>VersionedPutAll</b> and the passed object
            are equivalent <b>VersionedPutAll</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPutAll.GetHashCode">
            <summary>
            Determine a hash value for the <b>VersionedPutAll</b> object
            according to the general <see cref="M:System.Object.GetHashCode"/>
            contract.
            </summary>
            <returns>
            An integer hash value for this <b>VersionedPutAll</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPutAll.ToString">
            <summary>
            Return a human-readable description for this
            <b>VersionedPutAll</b>.
            </summary>
            <returns>
            A <b>String</b> description of the <b>VersionedPutAll</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPutAll.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPutAll.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Processor.VersionedPutAll.processEntry(Tangosol.Net.Cache.IInvocableCacheEntry,System.Collections.IDictionary,System.Boolean,System.Boolean)">
            <summary>
            Process the given entry.
            </summary>
            <param name="entry">
            The <b>IInvocableCacheEntry</b> to process.
            </param>
            <param name="mapAll">
            The map of new values.
            </param>
            <param name="insert">
            Specifies whether or not an insert is allowed.
            </param>
            <param name="ret">
            Specifies whether or not a return value is required.
            </param>
            <returns>
            The result of the processing, if any.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Processor.VersionedPutAll.NO_RESULT">
            <summary>
            Used internally to differentiate between "no result" and null result.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.VersionedPutAll.m_map">
            <summary>
            Specifies the dictionary of new values.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.VersionedPutAll.m_insert">
            <summary>
            Specifies whether or not an insert is allowed.
            </summary>
        </member>
        <member name="F:Tangosol.Util.Processor.VersionedPutAll.m_return">
            <summary>
            Specifies whether or not a return value is required.
            </summary>
        </member>
        <member name="T:Tangosol.Util.ServiceEventArgs">
            <summary>
            An event which indicates that a <see cref="T:Tangosol.Util.IService"/> state has
            changed:
            <list type="bullet">
            <item>a service is starting</item>
            <item>a service has started</item>
            <item>a service is stopping</item>
            <item>a service has stopped</item>
            </list>
            </summary>
            <author>Jason Howes  2007.11.12</author>
            <author>Ana Cikic  2007.12.11</author>
            <seealso cref="T:Tangosol.Util.IService"/>
        </member>
        <member name="M:Tangosol.Util.ServiceEventArgs.#ctor(Tangosol.Util.IService,Tangosol.Util.ServiceEventType)">
            <summary>
            Constructs a new ServiceEventArgs.
            </summary>
            <param name="service">
            The <see cref="T:Tangosol.Util.IService"/> that fired the event.
            </param>
            <param name="eventType">
            This event's type, one of the <see cref="T:Tangosol.Util.ServiceEventType"/> enum
            values.
            </param>
        </member>
        <member name="M:Tangosol.Util.ServiceEventArgs.ToString">
            <summary>
            Returns a string representation of this ServiceEventArgs object.
            </summary>
            <returns>
            A string representation of this ServiceEventArgs object.
            </returns>
        </member>
        <member name="F:Tangosol.Util.ServiceEventArgs.m_source">
            <summary>
            IService object that fired the event.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ServiceEventArgs.m_eventType">
            <summary>
            This event's type.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ServiceEventArgs.DESCRIPTIONS">
            <summary>
            Descriptions of the various event types.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ServiceEventArgs.Service">
            <summary>
            Return the <see cref="T:Tangosol.Util.IService"/> that fired the event.
            </summary>
            <value>
            A service that fired the event.
            </value>
        </member>
        <member name="P:Tangosol.Util.ServiceEventArgs.EventType">
            <summary>
            Return this event's type.
            </summary>
            <remarks>
            The event type is one of the <see cref="T:Tangosol.Util.ServiceEventType"/>
            enumerated constants.
            </remarks>
            <value>
            An event type.
            </value>
        </member>
        <member name="T:Tangosol.Util.ServiceEventType">
            <summary>
            Service event type enumeration.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ServiceEventType.Starting">
            <summary>
            This event indicates that a service is starting.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ServiceEventType.Started">
            <summary>
            This event indicates that a service has started.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ServiceEventType.Stopping">
            <summary>
            This event indicates that a service is stopping.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ServiceEventType.Stopped">
            <summary>
            This event indicates that a service has stopped.
            </summary>
        </member>
        <member name="T:Tangosol.Util.SimpleEnumerator">
            <summary>
            Provide a generic implementation of an array enumerator.
            </summary>
            <author>Cameron Purdy  1998.08.07</author>
            <author>Ivan Cikic  2006.11.27</author>
        </member>
        <member name="M:Tangosol.Util.SimpleEnumerator.#ctor(System.Object[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Construct the simple enumerator based on an array of objects,
            making a copy of the array if specified.
            </summary>
            <param name="items">
            Array of objects to enumerate.
            </param>
            <param name="start">
            The first object position.
            </param>
            <param name="countItems">
            The number of objects to enumerate.
            </param>
            <param name="forward">
            <b>true</b> to iterate forwards, <b>false</b> to iterate from the
            end backwards to the beginning.
            </param>
            <param name="copy">
            Pass <b>true</b> to make a copy of the array or <b>false</b> if
            the array's contents will not change.
            </param>
        </member>
        <member name="M:Tangosol.Util.SimpleEnumerator.#ctor(System.Object[],System.Int32,System.Int32)">
            <summary>
            Construct the simple enumerator based on an array of objects.
            </summary>
            <param name="items">
            Array of objects to enumerate.
            </param>
            <param name="start">
            The first object position.
            </param>
            <param name="countItems">
            The number of objects to enumerate.
            </param>
        </member>
        <member name="M:Tangosol.Util.SimpleEnumerator.#ctor(System.Collections.ICollection)">
            <summary>
            Construct a simple enumerator based on a collection.
            </summary>
            <param name="col">
            The <b>ICollection</b> to enumerate.
            </param>
        </member>
        <member name="M:Tangosol.Util.SimpleEnumerator.#ctor(System.Object[])">
            <summary>
            Construct the simple enumerator based on an array of objects.
            </summary>
            <param name="items">
            Array of objects to enumerate.
            </param>
        </member>
        <member name="F:Tangosol.Util.SimpleEnumerator.m_items">
            <summary>
            Array of items to enumerate.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleEnumerator.m_index">
            <summary>
            Iterator position:  next item to return.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleEnumerator.m_limit">
            <summary>
            Iterator end position (beyond last).
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleEnumerator.m_forward">
            <summary>
            Iterator direction.
            </summary>
        </member>
        <member name="F:Tangosol.Util.SimpleEnumerator.m_startindex">
            <summary>
            Iterator start position.
            </summary>
        </member>
        <member name="M:Tangosol.Util.SimpleEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <b>true</b> if the enumerator was successfully advanced to the
            next element; <b>false</b> if the enumerator has passed the end
            of the collection.
            </returns>
        </member>
        <member name="M:Tangosol.Util.SimpleEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the
            first element in the collection.
            </summary>
        </member>
        <member name="P:Tangosol.Util.SimpleEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:Tangosol.Util.StringUtils">
            <summary>
            Miscellaneuos utility methods for string manipulation.
            </summary>
            <author>Aleksandar Seovic  2006.08.09</author>
        </member>
        <member name="M:Tangosol.Util.StringUtils.IsNullOrEmpty(System.String)">
            <summary>
            Returns <b>true</b> if specified string is <c>null</c> or empty,
            <b>false</b> otherwise.
            </summary>
            <param name="stringValue">
            Value to check.
            </param>
            <returns>
            <b>true</b> if specified string is <c>null</c> or empty,
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Util.StringUtils.Dup(System.Char,System.Int32)">
            <summary>
            Create a String of the specified length containing the specified
            character.
            </summary>
            <param name="ch">
            The character to fill the String with.
            </param>
            <param name="length">
            The length of the String.
            </param>
            <returns>
            A String containing the character <paramref name="ch"/> repeated
            <paramref name="length"/> times.
            </returns>
        </member>
        <member name="M:Tangosol.Util.StringUtils.Dup(System.String,System.Int32)">
            <summary>
            Create a String which is a duplicate of the specified number of
            the passed String.
            </summary>
            <param name="text">
            The String to fill the new String with.
            </param>
            <param name="count">
            The number of duplicates to put into the new String.
            </param>
            <returns>
            A String containing the String <paramref name="text"/> repeated
            <paramref name="count"/> times.
            </returns>
        </member>
        <member name="M:Tangosol.Util.StringUtils.ToMemorySizeString(System.Int64,System.Boolean)">
            <summary>
            Format the passed memory size (in bytes) as a String.
            </summary>
            <remarks>
            This method will possibly round the memory size for purposes of
            producing a more-easily read String value unless the
            <paramref name="isExact"/> parameter is passed as <b>true</b>.
            </remarks>
            <param name="memorySize">
            The number of bytes of memory.
            </param>
            <param name="isExact">
            <b>true</b> if the String representation must be exact, or
            <b>false</b> if it can be an approximation.
            </param>
            <returns>
            A String representation of the given memory size.
            </returns>
        </member>
        <member name="M:Tangosol.Util.StringUtils.ToBandwidthString(System.Int64,System.Boolean)">
            <summary>
            Format the passed bandwidth (in bytes per second) as a String.
            </summary>
            <remarks>
            This method will possibly round the memory size for purposes of
            producing a more-easily read String value unless the
            <paramref name="isExact"/> parameter is passed as <b>true</b>.
            </remarks>
            <param name="bps">
            The number of bytes per second.
            </param>
            <param name="isExact">
            <b>true</b> if the String representation must be exact, or
            <b>false</b> if it can be an approximation.
            </param>
            <returns>
            A String representation of the given bandwidth.
            </returns>
        </member>
        <member name="M:Tangosol.Util.StringUtils.ToDecString(System.Int32,System.Int32)">
            <summary>
            Format the passed integer as a fixed-length decimal string.
            </summary>
            <param name="n">
            The integer value.
            </param>
            <param name="digits">
            The length of the resulting decimal string.
            </param>
            <returns>
            The decimal value formated to the specified length string.
            </returns>
        </member>
        <member name="M:Tangosol.Util.StringUtils.BreakLines(System.String,System.Int32,System.String)">
            <summary>
            Breaks the specified string into a multi-line string.
            </summary>
            <param name="text">
            The string to break.
            </param>
            <param name="width">
            The max width of resulting lines (including the indent).
            </param>
            <param name="indent">
            A string used to indent each line.
            </param>
            <returns>
            The string, broken and indented.
            </returns>
        </member>
        <member name="M:Tangosol.Util.StringUtils.BreakLines(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Breaks the specified string into a multi-line string.
            </summary>
            <param name="text">
            The string to break.
            </param>
            <param name="width">
            The max width of resulting lines (including the indent).
            </param>
            <param name="indent">
            A string used to indent each line.
            </param>
            <param name="isFirstLine">
            If <b>true</b> indents all lines; otherwise indents all but the
            first.
            </param>
            <returns>
            The string, broken and indented.
            </returns>
        </member>
        <member name="M:Tangosol.Util.StringUtils.ToCharEscape(System.Char)">
            <summary>
            Format a char to a printable escape if necessary.
            </summary>
            <param name="ch">
            The char.
            </param>
            <returns>
            A printable string representing the passed char.
            </returns>
        </member>
        <member name="M:Tangosol.Util.StringUtils.Escape(System.Char,System.Char[],System.Int32)">
            <summary>
            Format a char to a printable escape if necessary, putting the
            result into the passed array.
            </summary>
            <remarks>
            The array must be large enough to accept six characters.
            </remarks>
            <param name="ch">
            The character to format.
            </param>
            <param name="ach">
            The array of characters to format into.
            </param>
            <param name="of">
            The offset in the array to format at.
            </param>
            <returns>
            The number of characters used to format the char.
            </returns>
        </member>
        <member name="M:Tangosol.Util.StringUtils.ByteArrayToHexString(System.Byte[])">
            <summary>
            Convert a byte array to a hex string of 2 hex digits per byte.
            </summary>
            <param name="array">
            The byte array to convert.
            </param>
            <returns>
            The hex string.
            </returns>
        </member>
        <member name="M:Tangosol.Util.StringUtils.HexStringToByteArray(System.String)">
            <summary>
            Convert a hex string to a byte array.
            </summary>
            <param name="hexString">
            The hex string to convert.
            </param>
            <returns>
            The byte array.
            </returns>
        </member>
        <member name="M:Tangosol.Util.StringUtils.ToOracleVersion(System.Version)">
            <summary>
            Convert a .NET Version object to an Oracle version string.
            Oracle version number can have 5 numbers (N.N.N.N.N) while .NET
            version number can only have up to 4 numbers (N.N.N.N).  So to
            represent Oracle version in .NET version format, the 4th .NET
            version number is a combination of the 4th and 5th Oracle version
            numbers as follows:
            
            4th .NET number = 4th Oracle number * 1000 + 5th Oracle number;
            
            4th Oracle number = int (4th .NET number / 1000);
            5th Oracle number = 4th .NET number - 4th Oracle number * 1000;
            
            e.g.
            12.1.2.1    (.NET) ==> 12.1.2.0.1 (Oracle)
            12.1.2.1001 (.NET) ==> 12.1.2.1.1 (Oracle)
            12.1.2      (.NET) ==> 12.1.2.0.0 (Oracle)
            </summary>
            <param name="dotnetVersion">
            The .NET Version object.
            </param>
            <returns>
            The Oracle version string.
            </returns>
        </member>
        <member name="T:Tangosol.Util.ThreadGate">
            <summary>
            Use this class in cases that large numbers of threads can operate
            concurrently with an additional requirement that all threads be
            blocked for certain operations.
            </summary>
            <remarks>
            The algorithm is based on a gate concept, allowing threads in
            <see cref="M:Tangosol.Util.ThreadGate.Enter(System.Int64)"/> and out <see cref="M:Tangosol.Util.ThreadGate.Exit"/>, but occasionally
            shutting the gate <see cref="M:Tangosol.Util.ThreadGate.Close(System.Int64)"/> such that other threads cannot
            enter and exit. However, since threads may "be inside", the gate
            cannot fully close until they leave <see cref="M:Tangosol.Util.ThreadGate.Exit"/>. Once all
            threads are out, the gate is closed, and can be re-opened
            <see cref="M:Tangosol.Util.ThreadGate.Open"/> or permanently closed <see cref="M:Tangosol.Util.ThreadGate.Destroy"/>.
            <p>
            Each call to <b>Enter</b> requires a corresponding call to
            <b>Exit</b>. For example, the following would ensure proper clean-up
            using a ThreadGate:</p>
            <p>
            <pre>
            gate.Enter();
            try
            {
                ...
            }
            finally
            {
                gate.Exit();
            }
            </pre></p>
            <p>
            Similarly, each call to <b>Close</b> should be matched with a call to
            <b>Open</b>, unless the gate is being destroyed:</p>
            <p>
            <pre>
            gate.Close();
            try
            {
                ...
            }
            finally
            {
                gate.Open();
            }
            </pre></p>
            <p>
            or:</p>
            <p>
            <pre>
            gate.Close();
            gate.Destroy();
            </pre></p>
            <p>
            The Enter/Exit calls can be nested; the same thread can invoke Enter
            multiple times as long as Exit is invoked a corresponding number of
            times. The Close/Open calls work in the same manner. Lastly, the
            thread that closes the gate may continue to Enter/Exit the gate even
            when it is closed since that thread has exclusive control of the
            gate.</p>
            </remarks>
            <author>Cameron Purdy  2003.05.26</author>
            <author>Mark Falco  2007.04.27</author>
            <author>Ana Cikic  2006.08.29</author>
            <since>Coherence 2.2</since>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.#ctor">
            <summary>
            Allocates unnamed data slots on threads to store local thread
            counter values and returns new instance of ThreadGate.
            </summary>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.ToString">
            <summary>
            Provide a human-readable representation of this ThreadGate.
            </summary>
            <returns>
            A human-readable representation of this ThreadGate.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.BarEntry(System.Int64)">
            <summary>
            Bar entry of the thread gate by other threads, but do not wait
            for the gate to close.
            </summary>
            <remarks>
            When all other threads have exited, the status of the thread gate
            will be closeable by the thread which barred entry. Each
            sucessful invocation of this method must ultimately have a
            corresponding invocation of the Open method (assuming the thread
            gate is not destroyed) even if the calling thread does not
            subsequently close the gate.
            <pre>
            gate.BarEntry(-1);
            try
            {
                // processing that does not require the gate to be closed
                // ...
            }
            finally
            {
                gate.Close(-1);
                try
                {
                    // processing that does require the gate to be closed
                    // ...
                }
                finally
                {
                    gate.Open(); // matches gate.Close()
                }
                gate.Open(); // matches gate.BarEntry()
            }
            </pre>
            </remarks>
            <param name="millis">
            Maximum number of milliseconds to wait; pass -1 for forever or 0
            for no wait.
            </param>
            <returns>
            <b>true</b> iff entry into the thread gate was successfully
            barred by the calling thread.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.Close(System.Int64)">
            <summary>
            Close the thread gate.
            </summary>
            <remarks>
            A thread uses this method to obtain exclusive access to the
            resource represented by the thread gate. Each invocation of this
            method must ultimately have a corresponding invocation of the
            Open method.
            </remarks>
            <param name="millis">
            Maximum number of milliseconds to wait; pass -1 for forever or 0
            for no wait.
            </param>
            <returns>
            <b>true</b> iff entry into the thread gate was successfully
            barred by the calling thread and no other threads remain in the
            gate.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.Destroy">
            <summary>
            Destroy the thread gate.
            </summary>
            <remarks>
            This method can only be invoked if the gate is already closed.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.Enter(System.Int64)">
            <summary>
            Enter the thread gate.
            </summary>
            <remarks>
            A thread uses this method to obtain non-exclusive access to the
            resource represented by the thread gate. Each invocation of this
            method must ultimately have a corresponding invocation of the
            Exit method.
            </remarks>
            <param name="millis">
            Maximum number of milliseconds to wait; pass -1 for forever or 0
            for no wait.
            </param>
            <returns>
            <b>true</b> iff the calling thread successfully entered the gate.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.Exit">
            <summary>
            Exit the gate.
            </summary>
            <remarks>
            A thread must invoke this method corresponding to each invocation
            of the Enter method.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.Open">
            <summary>
            After entry into the ThreadGate is restricted by a call to
            BarEntry() or Close(), it can be re-opened by calling this
            method.
            </summary>
            <remarks>
            Only the thread that called BarEntry() or Close() can call
            Open().
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If the gate is not closed or closing or if Open() is not called
            by the thread that called BarEntry() or Close().
            </exception>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.GetThreadLocalCount(System.LocalDataStoreSlot)">
            <summary>
            Obtain the long value stored in the <b>LocalDataStoreSlot</b>.
            </summary>
            <param name="slot">
            <b>LocalDataStoreSlot</b> object which provides managed thread
            local storage with dynamic data slots that are unique to a thread
            and application-domain combination.
            </param>
            <returns>
            Long value stored in the <b>LocalDataStoreSlot</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.SetThreadLocalCount(System.LocalDataStoreSlot,System.Int64)">
            <summary>
            Set the long value to be stored in the <b>LocalDataStoreSlot</b>.
            </summary>
            <param name="slot">
            <b>LocalDataStoreSlot</b> object which provides managed thread
            local storage with dynamic data slots that are unique to a thread
            and application-domain combination.
            </param>
            <param name="value">
            Long value to be stored in the <b>LocalDataStoreSlot</b>.
            </param>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.IncrementThreadLocalCount(System.LocalDataStoreSlot)">
            <summary>
            Increment the long value from the <b>LocalDataStoreSlot</b> for
            the current thread by one.
            </summary>
            <remarks>
            If the value in the <b>LocalDataStoreSlot</b> is <c>null</c>, 1
            is returned.
            </remarks>
            <param name="slot">
            <b>LocalDataStoreSlot</b> object which provides managed thread
            local storage with dynamic data slots that are unique to a thread
            and application-domain combination.
            </param>
            <returns>
            The new long value for the current thread or 1 if previous value
            was <c>null</c>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.DecrementThreadLocalCount(System.LocalDataStoreSlot)">
            <summary>
            Decrement the long value of the <b>LocalDataStoreSlot</b> for the
            current thread by one.
            </summary>
            <remarks>
            If the value in the <b>LocalDataStoreSlot</b> is <c>null</c>, -1
            is returned.
            </remarks>
            <param name="slot">
            <b>LocalDataStoreSlot</b> object which provides managed thread
            local storage with dynamic data slots that are unique to a thread
            and application-domain combination.
            </param>
            <returns>
            The new long value for the current thread or -1 if previous value
            was <c>null</c>.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.DoWait(System.Int64)">
            <summary>
            Wait up to the specified number of milliseconds for notification.
            </summary>
            <remarks>
            Caller must be synchronized.
            </remarks>
            <param name="millis">
            Number of milliseconds to wait for.
            </param>
            <returns>
            The remaining wait time in milliseconds.
            </returns>
        </member>
        <member name="M:Tangosol.Util.ThreadGate.UpdateStatus(Tangosol.Util.ThreadGateState)">
            <summary>
            Update the current thread gate status, without changing the
            active count.
            </summary>
            <remarks>
            The caller must hold synchronization on the ThreadGate.
            </remarks>
            <param name="status">
            The new status.
            </param>
            <returns>
            The old status.
            </returns>
        </member>
        <member name="F:Tangosol.Util.ThreadGate.STATUS_OFFSET">
            <summary>
            The bit offset at which the ThreadGateStatus is stored within
            m_atomicState.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGate.ACTIVE_COUNT_MASK">
            <summary>
            The bit mask covering the portion of m_atomicState used to store
            the number of unmatched enter calls.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGate.EMPTY_GATE_OPEN">
            <summary>
            EMPTY_GATE_OPEN: Threads may Enter, Exit, or Close the gates.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGate.EMPTY_GATE_CLOSING">
            <summary>
            EMPTY_GATE_CLOSING: Closing thread may close the gates, all
            entered threads have exited.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGate.EMPTY_GATE_CLOSED">
            <summary>
            EMPTY_GATE_CLOSED: Gates are closed, with no threads inside.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGate.m_atomicState">
            <summary>
            The state of the ThreadGate, including:
            <code>
            bits  0 - 59 store the number of unmatched enter calls
            bits 60 - 61 store the ThreadGateState value
            bit  62 - 63 always zero
            </code>
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGate.m_closeCount">
            <summary>
            Number of unmatched completed Close/BarEntry calls.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGate.m_threadClosing">
            <summary>
            The thread that is closing the gates.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGate.m_versionCount">
            <summary>
            An AtomicCounter that tracks the number of times the gate has
            transitioned from Closed to Open.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGate.m_slotThreadEnterCount">
            <summary>
            Unnamed LocalDataStoreSlot used to store count of unmatched Enter
            calls per thread.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGate.m_slotThreadEnterVersion">
            <summary>
            Unnamed LocalDataStoreLost used to store the version number at
            the time the thread last entered/opened the gate.
            </summary>
            <remarks>
            Comparing this version number to the m_versionCount, indicates if
            a thread entering the gate needs to flush memory to be up to date
            with the last thread which opened the gate.
            </remarks>
        </member>
        <member name="P:Tangosol.Util.ThreadGate.ActiveCount">
            <summary>
            The number of unmatched completed Enter calls.
            </summary>
            <value>
            The number of unmatched completed Enter calls.
            </value>
        </member>
        <member name="P:Tangosol.Util.ThreadGate.IsActiveThread">
            <summary>
            Determine if the current thread has entered and not exited the
            thread gate.
            </summary>
            <remarks>
            This is useful for detecting re-entrancy.
            </remarks>
            <value>
            <b>true</b> if the current thread has entered and not exited the
            thread gate.
            </value>
        </member>
        <member name="P:Tangosol.Util.ThreadGate.IsClosingThread">
            <summary>
            Determine if the current thread has closed and not opened the
            the thread gate.
            </summary>
            <remarks>
            This is useful for detecting re-entrancy.
            </remarks>
            <value>
            <b>true</b> if the current thread has closed and not opened the
            thread gate.
            </value>
        </member>
        <member name="P:Tangosol.Util.ThreadGate.IsEnteredByCurrentThread">
            <summary>
            Determine if the current thread has entered and not exited the
            thread gate.
            </summary>
            <remarks>
            This is useful for detecting re-entrancy.
            </remarks>
            <value>
            <b>true</b> if the current thread has entered and not exited the
            thread gate.
            </value>
        </member>
        <member name="P:Tangosol.Util.ThreadGate.IsClosedByCurrentThread">
            <summary>
            Determines if the current thread have Closed the gate but not yet
            Opened the Gate.
            </summary>
        </member>
        <member name="P:Tangosol.Util.ThreadGate.Version">
            <summary>
            The total number of times the gate has been fully opened.
            </summary>
            <remarks>
            When setting the value, the caller must have the gate closed.
            </remarks>
            <value>
            The total number of times the gate has been fully opened.
            </value>
        </member>
        <member name="P:Tangosol.Util.ThreadGate.CloseCount">
            <summary>
            The number of unmatched completed Close/BarEntry calls.
            </summary>
            <value>
            The number of unmatched completed Close/BarEntry calls.
            </value>
        </member>
        <member name="P:Tangosol.Util.ThreadGate.ClosingThread">
            <summary>
            The thread that is closing the gates.
            </summary>
            <remarks>
            When setting the value, the caller must be synchronized on the
            ThreadGate.
            </remarks>
            <value>
            The thread that is closing the gates.
            </value>
        </member>
        <member name="P:Tangosol.Util.ThreadGate.Status">
            <summary>
            The current thread gate status.
            </summary>
            <value>
            One of the <see cref="T:Tangosol.Util.ThreadGateState"/> values.
            </value>
        </member>
        <member name="T:Tangosol.Util.ThreadGateState">
            <summary>
            ThreadGate state enum.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGateState.Open">
            <summary>
            Threads may enter and exit the gates.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGateState.Closing">
            <summary>
            A thread is waiting to be the only thread inside the gates; other
            threads can only exit.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGateState.Closed">
            <summary>
            A single thread is inside the gates; other threads cannot enter.
            </summary>
        </member>
        <member name="F:Tangosol.Util.ThreadGateState.Destroyed">
            <summary>
            Life-cycle is complete; the object is no longer usable.
            </summary>
        </member>
        <member name="T:Tangosol.Util.Transformer.SemiLiteEventTransformer">
            <summary>
            SemiLiteEventTransformer is a special purpose
            <see cref="T:Tangosol.Net.Cache.ICacheEventTransformer"/> implementation that removes an
            <see cref="P:Tangosol.Net.Cache.CacheEventArgs.OldValue"/> from the
            <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> object for the purpose of reducing the
            amount of data that has to be sent over the network to event
            consumers.
            </summary>
            <remarks>
            Usage example:
            <code>
            cache.AddCacheListener(listener,
                new CacheEventTransformerFilter(null,
                SemiLiteEventTransformer.Instance), false);
            </code>
            </remarks>
            <author>Gene Gleyzer/Jason Howes  2008.05.01</author>
            <author>Ana Cikic  2008.06.17</author>
            <since>Coherence 3.4</since>
        </member>
        <member name="M:Tangosol.Util.Transformer.SemiLiteEventTransformer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Util.Transformer.SemiLiteEventTransformer.Transform(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Transform the specified <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/>.
            </summary>
            <remarks>
            The values contained by the returned <b>CacheEventArgs</b> object
            will be the ones given (sent) to the corresponding listener.
            </remarks>
            <param name="evt">
            The original <b>CacheEventArgs</b> object.
            </param>
            <returns>
            Modified <b>CacheEventArgs</b> object or <c>null</c> to discard
            the event.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Transformer.SemiLiteEventTransformer.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Transformer.SemiLiteEventTransformer.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.Transformer.SemiLiteEventTransformer.GetHashCode">
            <summary>
            Determine a hash value for this object.
            </summary>
            <returns>
            An integer hash value for this object.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Transformer.SemiLiteEventTransformer.Equals(System.Object)">
            <summary>
            Compare this object with another object to determine equality.
            </summary>
            <param name="o">
            The object to compare with current object.
            </param>
            <returns>
            <b>true</b> if this object and the passed object are equivalent
            objects.
            </returns>
        </member>
        <member name="M:Tangosol.Util.Transformer.SemiLiteEventTransformer.ToString">
            <summary>
            Return a human-readable description for this object.
            </summary>
            <returns>
            A string description of the object.
            </returns>
        </member>
        <member name="F:Tangosol.Util.Transformer.SemiLiteEventTransformer.Instance">
            <summary>
            The SemiLiteEventTransformer singleton.
            </summary>
        </member>
        <member name="T:Tangosol.Util.TypeResolver">
            <summary>
            Resolves a <b>System.Type</b> by name.
            </summary>
            <remarks>
            <p>
            It resolves type by either loading it directly from the
            assembly (if one is specified within a type name), or by
            iterating over all of the loaded assemblies and trying
            to find the type.</p>
            </remarks>
            <author>Aleksandar Seovic</author>
        </member>
        <member name="M:Tangosol.Util.TypeResolver.Resolve(System.String)">
            <summary>
            Gets a <b>System.Type</b> for the <paramref name="typeName"/>
            supplied as parameter.
            </summary>
            <param name="typeName">
            The name of a <b>System.Type</b> to resolve.
            </param>
            <returns>
            <b>System.Type</b> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:Tangosol.Util.TypeResolver.GetTypeFromAssembly(Tangosol.Util.TypeResolver.TypeAssemblyInfo)">
            <summary>
            Gets an <b>System.Reflection.Assembly</b> and then the
            attendant <b>System.Type</b> referred to by the
            <paramref name="typeInfo"/> parameter.
            </summary>
            <param name="typeInfo">
            The assembly to be loaded.
            </param>
            <returns>
            A <b>System.Type</b>, or <see lang="null"/>.
            </returns>
            <exception cref="T:System.Exception">
            <see cref="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)"/>
            </exception>
        </member>
        <member name="T:Tangosol.Util.TypeResolver.TypeAssemblyInfo">
            <summary>
            Internal class used to hold data about a <b>System.Type</b>
            and  its containing assembly.
            </summary>
        </member>
        <member name="M:Tangosol.Util.TypeResolver.TypeAssemblyInfo.#ctor(System.String)">
            <summary>
            Creates a new TypeAssemblyInfo class.
            </summary>
            <param name="assemblyQualifiedTypeName">
            The assembly qualified name of a <b>System.Type</b>.
            </param>
        </member>
        <member name="P:Tangosol.Util.TypeResolver.TypeAssemblyInfo.TypeName">
            <summary>
            The (unresolved) type name portion of the original type name.
            </summary>
        </member>
        <member name="P:Tangosol.Util.TypeResolver.TypeAssemblyInfo.AssemblyName">
            <summary>
            The name of the attandant assembly.
            </summary>
        </member>
        <member name="T:Tangosol.Util.UriUtils">
            <summary>
            Miscellaneuos utility methods for <b>Uri</b> manipulation.
            </summary>
            <author>Ana Cikic  2006.08.23</author>
        </member>
        <member name="M:Tangosol.Util.UriUtils.GetSchemeSpecificPart(System.Uri)">
             <summary>
             Returns the decoded scheme-specific part of the <b>Uri</b>.
             </summary>
             <remarks>
             At the highest level a URI reference in string form has the
             syntax:
            
             [scheme:]scheme-specific-part[#fragment]
            
             where square brackets [...] delineate optional components and the
             characters : and # stand for themselves.
             </remarks>
             <param name="uri">
             <b>Uri</b> object.
             </param>
             <returns>
             Scheme-specific part of the <b>Uri</b>.
             </returns>
        </member>
        <member name="T:Tangosol.Util.UUID">
            <summary>
            A UUID is a 256-bit identifier that, if it is generated, is
            statistically guaranteed to be unique.
            </summary>
            <author>Cameron Purdy  2004.06.24</author>
            <author>Goran Milosavljevic  2006.08.29</author>
        </member>
        <member name="F:Tangosol.Util.UUID.MASK_ALLFLAGS">
            <summary>
            A bit mask that represents the portion of the "port" value
            reserved for bit flags.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.MASK_GENERATED">
            <summary>
            The bit mask for the "is generated UUID" flag.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.MASK_REALADDR">
            <summary>
            The bit mask for the "is a real IP address" flag.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.MASK_IPV6ADDR">
            <summary>
            The bit mask for the "is an IPv6 address" flag.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.MASK_UNUSED">
            <summary>
            The one remaining bit for future use.
            </summary>
        </member>
        <member name="M:Tangosol.Util.UUID.#cctor">
            <summary>
            Initialize host address information.
            </summary>
        </member>
        <member name="M:Tangosol.Util.UUID.#ctor">
            <summary>
            Generate a UUID.
            </summary>
        </member>
        <member name="M:Tangosol.Util.UUID.#ctor(System.Int64,System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Build a UUID from its constituent members (advanced
            constructor).
            </summary>
            <remarks>
            It is guaranteed that a generated UUID will never equal a built
            UUID.
            </remarks>
            <param name="datetime">
            The creation date/time millis portion of the UUID.
            </param>
            <param name="address">
            The IPAddress portion of the UUID.
            </param>
            <param name="port">
            The port number portion of the UUID; a port number
            is 16 bits, but up to 28 bits of data from this value
            will be maintained by the UUID.
            </param>
            <param name="counter">
            The counter portion of the UUID.
            </param>
        </member>
        <member name="M:Tangosol.Util.UUID.#ctor(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Build a UUID from its constituent members (advanced
            constructor).
            </summary>
            <remarks>
            <p/>
            It is guaranteed that a generated UUID will never equal a
            built UUID.
            </remarks>
            <param name="datetime">
            The creation date/time millis portion of the UUID.
            </param>
            <param name="ip">
            The IPAddress portion of the UUID.
            </param>
            <param name="port">
            The port number portion of the UUID; a port number
            is 16 bits, but up to 28 bits of data from this value
            will be maintained by the UUID.
            </param>
            <param name="counter">
            The counter portion of the UUID.
            </param>
        </member>
        <member name="M:Tangosol.Util.UUID.#ctor(System.String)">
            <summary>
            Construct a UUID from a string.
            </summary>
            <param name="s">
            A string as would be returned from UUID.ToString()
            </param>
        </member>
        <member name="M:Tangosol.Util.UUID.#ctor(System.Byte[])">
            <summary>
            Construct a UUID from a byte array.
            </summary>
            <param name="array">
            A byte array as would be returned from UUID.ToByteArray()
            </param>
        </member>
        <member name="M:Tangosol.Util.UUID.ToByteArray">
            <summary>
            Convert the UUID to a byte array of 32 bytes.
            </summary>
            <returns>
            The UUID data as a byte array of 32 bytes.
            </returns>
        </member>
        <member name="M:Tangosol.Util.UUID.ToString">
            <summary>
            Convert the UUID to a printable String.
            </summary>
            <returns>
            The UUID data as a 0x-prefixed hex string.
            </returns>
        </member>
        <member name="M:Tangosol.Util.UUID.Equals(System.Object)">
            <summary>
            Determine if two UUIDs are equal.
            </summary>
            <param name="o">
            The other UUID.
            </param>
            <returns>
            <b>true</b> if the passed object is equal to this.
            </returns>
        </member>
        <member name="M:Tangosol.Util.UUID.CompareTo(System.Object)">
            <summary>
            Compares this object with the specified object for order.
            </summary>
            <remarks>
            Returns a negative integer, zero, or a positive integer as
            this object is less than, equal to, or greater than the
            specified object.
            </remarks>
            <param name="o">
            The Object to be compared.
            </param>
            <returns>
            A negative integer, zero, or a positive integer as this object
            is less than, equal to, or greater than the specified object.
            </returns>
            <exception cref="T:System.InvalidCastException">
            If the specified object's type prevents it.
            </exception>
            <summary>
            From being compared to this Object.
            </summary>
        </member>
        <member name="M:Tangosol.Util.UUID.GetHashCode">
            <summary>
            Determine a hash code for the UUID object.
            </summary>
            <returns>
            A hash code reflecting the UUID's data.
            </returns>
        </member>
        <member name="M:Tangosol.Util.UUID.EnsureConstructed">
            <summary>
            If this UUID is being used as a generated UUID but its fields
            have not yet been initialized, this method ensures that the
            initialization occurs.
            </summary>
            <remarks>
            All public methods, except for deserialization methods, must
            call this method to ensure that the UUID is properly constructed.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.UUID.InitHashcode">
            <summary>
            Finish construction or deserialization.
            </summary>
            <remarks>
            The UUID's internally cached hashcode value is zero until
            construction is completed, or until deserialization is
            completed, and never zero otherwise. Every constructor,
            except for the deserialization constructor, must call this
            method.
            </remarks>
        </member>
        <member name="M:Tangosol.Util.UUID.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Util.UUID.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Util.UUID.NO_BYTES">
            <summary>
            An empty byte array (by definition immutable).
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.s_rnd">
            <summary>
            Random number generator.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.s_lastCount">
            <summary>
            The spinning counter (which starts spinning at a random point).
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.s_isRealAddress">
            <summary>
            This is true if the host's IP address is a real IP address.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.s_isIPv6">
            <summary>
            This is true if the host's address style is known and is IPv6.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.s_addr1">
            <summary>
            The first four bytes of the IP address of the host.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.s_addr2">
            <summary>
            The second four bytes of the IP address of the host.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.s_addr3">
            <summary>
            The third four bytes of the IP address of the host.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.s_addr4">
            <summary>
            The fourth four bytes of the IP address of the host.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.LOCK">
            <summary>
            A mutex for accessing/updating s_lastCount.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.m_dateTime">
            <summary>
            System date/time value that the UUID instance was generated.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.m_addr1">
            <summary>
            Internet address of host that generated the UUID instance.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.m_addr2">
            <summary>
            The second four bytes of the IP address.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.m_addr3">
            <summary>
            The third four bytes of the IP address.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.m_addr4">
            <summary>
            The fourth four bytes of the IP address.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.m_port">
            <summary>
            The port number if the UUID is built (not generated), otherwise this
            is a random number, with the exception of the most significant
            nibble which contains the flags of the UUID.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.m_count">
            <summary>
            A rolling counter.
            </summary>
        </member>
        <member name="F:Tangosol.Util.UUID.m_hash">
            <summary>
            Cache the hash.
            </summary>
        </member>
        <member name="P:Tangosol.Util.UUID.IsGenerated">
            <summary>
            This is true if the UUID was generated, and false if it was
            built.
            </summary>
            <remarks>
            A generated UUID is universally unique. Note that the port
            number is random if the UUID is generated.
            </remarks>
            <value>
            <b>true</b> if the UUID was generated.
            </value>
        </member>
        <member name="P:Tangosol.Util.UUID.Timestamp">
            <summary>
            Determine the date/time value that the UUID instance was
            generated.
            </summary>
            <value>
            Date/time value in millis that the UUID instance was generated.
            </value>
        </member>
        <member name="P:Tangosol.Util.UUID.IsAddressIncluded">
            <summary>
            This is <b>true</b> if the IP address is a real IP address.
            </summary>
            <remarks>
            This is only <b>false</b> if two conditions are met: The UUID
            is generated, and it could not get an IP address (or one that is
            not a loopback/localhost address).
            </remarks>
            <value>
            <b>true</b> if the UUID has IP address information.
            </value>
        </member>
        <member name="P:Tangosol.Util.UUID.Address">
            <summary>
            Determine the internet address of the host that generated the
            UUID instance.
            </summary>
            <value>
            An array of bytes containing the IP address information; the
            array can be zero bytes (no address,) four bytes (IPv4) or
            16 bytes (IPv6).
            </value>
        </member>
        <member name="P:Tangosol.Util.UUID.Port">
            <summary>
            Determine the port portion of the UUID. Note that the port is
            a 28-bit value; the first nibble is always 0x0.
            </summary>
            <value>
            The port portion of the UID.
            </value>
        </member>
        <member name="P:Tangosol.Util.UUID.Count">
            <summary>
            Determine the "counter" portion of the UUID that ensures that two
            UUIDs generated at the same exact time by the same process are
            unique.
            </summary>
            <returns>
            A number that helps to make the UUID unique.
            </returns>
        </member>
        <member name="T:Tangosol.Web.CoherenceSessionStore">
            <summary>
            ASP.NET Session-State Store Provider implementation that uses a
            Coherence for .NET <see cref="T:Tangosol.Net.INamedCache"/> to store HTTP session
            state.
            </summary>
            <remarks>
            <p>
            This implementation allows you to have a truly clustered session-
            state store.
            </p>
            <p>
            The <b>CoherenceSessionStore</b> has the following conditions and
            features:
            <list type="bullet">
            <item>Objects stored within a <b>Session</b> must be serializable.</item>
            <item>The <b>Session_OnEnd</b> event <i>is</i> supported.</item>
            </list>
            </p>
            </remarks>
            <author>Aleksandar Seovic  2006.11.02</author>
            <author>Jason Howes  2007.03.29</author>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes this session-state store provider by obtaining the
            <b>INamedCache</b> used to store serialized HTTP session state.
            </summary>
            <param name="name">
            The friendly name of the provider.
            </param>
            <param name="config">
            A collection of name/value pairs containing the provider-specific
            attributes specified in the configuration for this provider.
            </param>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.Dispose">
            <summary>
            Releases all resources used by this session-state store provider.
            </summary>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.SetItemExpireCallback(System.Web.SessionState.SessionStateItemExpireCallback)">
            <summary>
            Configure the <b>Web.SessionState.SessionStateItemExpireCallback</b>
            delegate for the <b>Session_OnEnd</b> event defined in the
            Global.asax file.
            </summary>
            <param name="expireCallback">
            The <b>Web.SessionState.SessionStateItemExpireCallback</b>
            delegate for the <b>Session_OnEnd</b> event defined in the
            Global.asax file.
            </param>
            <returns>
            <b>true</b> if the session-state store provider supports calling
            the <b>Session_OnEnd</b> event; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.GetItem(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
            Returns read-only HTTP session data from the session data store.
            </summary>
            <param name="context">
            The <b>Web.HttpContext</b> for the current request.
            </param>
            <param name="id">
            The <b>Web.SessionState.HttpSessionState.SessionID</b> for the
            current request.
            </param>
            <param name="locked">
            When this method returns, contains a Boolean value that is set to
            <b>true</b> if the requested HTTP session item is locked at the
            session data store; otherwise, <b>false</b>.
            </param>
            <param name="lockAge">
            When this method returns, contains a <b>TimeSpan</b> object that
            is set to the amount of time that an item in the session data
            store has been locked.
            </param>
            <param name="lockId">
            When this method returns, contains an object that is set to the
            lock identifier for the current request. For details on the lock
            identifier, see "Locking Session-Store Data" in the
            <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase"/>
            class summary.
            </param>
            <param name="actions">
            When this method returns, contains one of the
            <b>Web.SessionState.SessionStateActions</b> values, indicating
            whether the current HTTP session is an uninitialized, cookieless
            HTTP session.
            </param>
            <returns>
            A <b>Web.SessionState.SessionStateStoreData</b> populated with HTTP
            session values and information from the session data store.
            </returns>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.GetItemExclusive(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
            Returns writeable HTTP session data from the session data store.
            </summary>
            <param name="context">
            The <b>Web.HttpContext</b> for the current request.
            </param>
            <param name="id">
            The <b>Web.SessionState.HttpSessionState.SessionID</b> for the
            current request.
            </param>
            <param name="locked">
            When this method returns, contains a Boolean value that is set to
            <b>true</b> if the requested HTTP session item is locked at the
            session data store; otherwise, <b>false</b>.
            </param>
            <param name="lockAge">
            When this method returns, contains a <b>TimeSpan</b> object that
            is set to the amount of time that an item in the session data
            store has been locked.
            </param>
            <param name="lockId">
            When this method returns, contains an object that is set to the
            lock identifier for the current request. For details on the lock
            identifier, see "Locking Session-Store Data" in the
            <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase"/>
            class summary.
            </param>
            <param name="actions">
            When this method returns, contains one of the
            <b>Web.SessionState.SessionStateActions</b> values, indicating
            whether the current HTTP session is an uninitialized, cookieless
            HTTP session.
            </param>
            <returns>
            A <b>Web.SessionState.SessionStateStoreData</b> populated with HTTP
            session values and information from the session data store.
            </returns>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.ReleaseItemExclusive(System.Web.HttpContext,System.String,System.Object)">
            <summary>
            Releases a lock on an item in the session data store.
            </summary>
            <param name="context">
            The <b>Web.HttpContext</b> for the current request.
            </param>
            <param name="id">
            The HTTP session identifier for the current request.
            </param>
            <param name="lockId">
            The lock identifier for the current request.
            </param>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.SetAndReleaseItemExclusive(System.Web.HttpContext,System.String,System.Web.SessionState.SessionStateStoreData,System.Object,System.Boolean)">
            <summary>
            Updates the session item information in the session data store
            with values from the current request, and clears the lock
            on the data.
            </summary>
            <param name="context">
            The <b>Web.HttpContext</b> for the current request.
            </param>
            <param name="id">
            The HTTP session identifier for the current request.
            </param>
            <param name="item">
            The <b>Web.SessionState.SessionStateStoreData</b> object that
            contains the current HTTP session values to be stored.
            </param>
            <param name="lockId">
            The lock identifier for the current request.
            </param>
            <param name="newItem">
            <b>true</b> to identify the session item as a new item;
            <b>false</b> to identify the session item as an existing item.
            </param>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.RemoveItem(System.Web.HttpContext,System.String,System.Object,System.Web.SessionState.SessionStateStoreData)">
            <summary>
            Deletes item data from the session data store.
            </summary>
            <param name="context">
            The <b>Web.HttpContext</b> for the current request.
            </param>
            <param name="id">
            The HTTP session identifier for the current request.
            </param>
            <param name="lockId">
            The lock identifier for the current request.
            </param>
            <param name="item">
            The <b>Web.SessionState.SessionStateStoreData</b> that represents
            the item to delete from the data store.
            </param>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.ResetItemTimeout(System.Web.HttpContext,System.String)">
            <summary>
            Updates the expiration date and time of an item in the session
            data store.
            </summary>
            <param name="context">
            The <b>Web.HttpContext</b> for the current request.
            </param>
            <param name="id">
            The HTTP session identifier for the current request.
            </param>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.CreateNewStoreData(System.Web.HttpContext,System.Int32)">
            <summary>
            Creates a new <b>Web.SessionState.SessionStateStoreData</b>
            object to be used for the current request.
            </summary>
            <param name="context">
            The <b>Web.HttpContext</b> for the current request.
            </param>
            <param name="timeout">
            The session-state <b>Web.SessionState.HttpSessionState.Timeout</b>
            value for the new <b>Web.SessionState.SessionStateStoreData</b>.
            </param>
            <returns>
            A new <b>Web.SessionState.SessionStateStoreData</b> for the
            current request.
            </returns>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.CreateUninitializedItem(System.Web.HttpContext,System.String,System.Int32)">
            <summary>
            Adds a new session-state item to the data store.
            </summary>
            <param name="context">
            The <b>Web.HttpContext</b> for the current request.
            </param>
            <param name="id">
            The <b>Web.SessionState.HttpSessionState.SessionID</b>
            for the current request.
            </param>
            <param name="timeout">
            The HTTP session <b>Web.SessionState.HttpSessionState.Timeout</b>
            for the current request.
            </param>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.InitializeRequest(System.Web.HttpContext)">
            <summary>
            Called by the <b>Web.SessionState.SessionStateModule</b>
            object for per-request initialization.
            </summary>
            <param name="context">
            The <b>Web.HttpContext</b> for the current request.
            </param>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.EndRequest(System.Web.HttpContext)">
            <summary>
            Called by the <b>Web.SessionState.SessionStateModule</b>
            object at the end of a request.
            </summary>
            <param name="context">
            The <b>Web.HttpContext</b> for the current request.
            </param>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.GetSessionKey(System.String)">
            <summary>
            Determine the key used to store the state of the HTTP session with
            the given identifier in the underlying <b>INamedCache</b>.
            </summary>
            <param name="sessionId">
            The HTTP session identifier. Cannot be null.
            </param>
            <returns>
            A unique key for the given HTTP session identifier, scoped by the
            web application.
            </returns>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.GetLockId(System.Object)">
            <summary>
            Converts lock identifier to long.
            </summary>
            <param name="lockId">Lock identifier to convert.</param>
            <returns>Lock identifier as long value.</returns>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.GetSessionStateItem(System.Boolean,System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
            Acquire and return HTTP session data from the session data store.
            </summary>
            <param name="exclusive">
            Flag specifying whether to obtain exclusive access to the specified
            session.
            </param>
            <param name="context">
            The <b>Web.HttpContext</b> for the current request.
            </param>
            <param name="id">
            The <b>Web.SessionState.HttpSessionState.SessionID</b> for the
            current request.
            </param>
            <param name="locked">
            When this method returns, contains a Boolean value that is set to
            <b>true</b> if the requested HTTP session item is locked at the
            session data store; otherwise, <b>false</b>.
            </param>
            <param name="lockAge">
            When this method returns, contains a <b>TimeSpan</b> object that
            is set to the amount of time that an item in the session data
            store has been locked.
            </param>
            <param name="lockId">
            When this method returns, contains an object that is set to the
            lock identifier for the current request. For details on the lock
            identifier, see "Locking Session-Store Data" in the
            <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase"/>
            class summary.
            </param>
            <param name="actions">
            When this method returns, contains one of the
            <b>Web.SessionState.SessionStateActions</b> values, indicating
            whether the current HTTP session is an uninitialized, cookieless
            HTTP session.
            </param>
            <returns>
            A <b>Web.SessionState.SessionStateStoreData</b> populated with HTTP
            session values and information from the session data store.
            </returns>
        </member>
        <member name="M:Tangosol.Web.CoherenceSessionStore.CreateSessionStateStoreData(System.Web.HttpContext,Tangosol.Web.ISessionModel,System.Int32)">
            <summary>
            Construct a <b>SessionStateStoreData</b> object from the serialized
            <b>ISessionStateItemCollection</b> stored in the underlying
            <b>INamedCache</b>.
            </summary>
            <param name="context">
            The <b>HttpContext</b> used to initialize the
            <b>SessionStateStoreData</b> object.
            </param>
            <param name="model">
            Session model.
            </param>
            <param name="timeout">
            Session timeout (in minutes).
            </param>
            <returns>
            A new <b>SessionStateStoreData</b> object.
            </returns>
        </member>
        <member name="F:Tangosol.Web.CoherenceSessionStore.m_timeout">
            <summary>
            The configured HTTP session timeout.
            </summary>
        </member>
        <member name="F:Tangosol.Web.CoherenceSessionStore.m_sessionEndEnabled">
            <summary>
            The flag used to enable Session_OnEnd event and listener
            registration.
            </summary>
        </member>
        <member name="F:Tangosol.Web.CoherenceSessionStore.m_applicationId">
            <summary>
            Allows users to specify application identifier explicitly, 
            in order to share session state across different ASP.NET 
            applications.
            </summary>
        </member>
        <member name="F:Tangosol.Web.CoherenceSessionStore.m_modelManager">
            <summary>
            The session model manager.
            </summary>
        </member>
        <member name="F:Tangosol.Web.CoherenceSessionStore.m_cacheName">
            <summary>
            The name of the <b>INamedCache</b> used to store serialized HTTP
            session data.
            </summary>
        </member>
        <member name="P:Tangosol.Web.CoherenceSessionStore.Timeout">
            <summary>
            The configured HTTP session timeout.
            </summary>
        </member>
        <member name="P:Tangosol.Web.CoherenceSessionStore.SessionEndEnabled">
            <summary>
            The flag used to enable Session_OnEnd event and listener
            registration.
            </summary>
        </member>
        <member name="P:Tangosol.Web.CoherenceSessionStore.ApplicationId">
            <summary>
            Allows users to specify application identifier explicitly, in order 
            to share session state across different ASP.NET applications.
            </summary>
        </member>
        <member name="P:Tangosol.Web.CoherenceSessionStore.ModelManager">
            <summary>
            The session model manager.
            </summary>
        </member>
        <member name="P:Tangosol.Web.CoherenceSessionStore.CacheName">
            <summary>
            The name of the <b>INamedCache</b> used to store serialized HTTP 
            session data.
            </summary>
        </member>
        <member name="T:Tangosol.Web.ISessionModel">
            <summary>
            Session model interface.
            </summary>
            <author>Aleksandar Seovic  2009.11.16</author>
        </member>
        <member name="M:Tangosol.Web.ISessionModel.ReadExternal(Tangosol.IO.DataReader)">
            <summary>
            Deserialize model using specified reader.
            </summary>
            <param name="reader">Reader to use.</param>
        </member>
        <member name="M:Tangosol.Web.ISessionModel.WriteExternal(Tangosol.IO.DataWriter)">
            <summary>
            Serialize model using specified writer.
            </summary>
            <param name="writer">Writer to use.</param>
        </member>
        <member name="P:Tangosol.Web.ISessionModel.SessionId">
            <summary>
            Gets or sets session key.
            </summary>
            <value>
            Session key.
            </value>
        </member>
        <member name="T:Tangosol.Web.ISessionModelManager">
            <summary>
            Defines the methods that model managers have to implement.
            </summary>
            <remarks>
            Model manager is responsible for model serialization and
            deserialization. Session provider simply delegates all the 
            calls to a configured instance of model manager.
            </remarks>
            <author>Aleksandar Seovic  2008.10.07</author>
        </member>
        <member name="M:Tangosol.Web.ISessionModelManager.CreateSessionModel">
            <summary>
            Create a new instance of an appropriate 
            <see cref="T:Tangosol.Web.ISessionModel"/> for this model manager.
            </summary>
            <returns>
            An instance of <see cref="T:Tangosol.Web.ISessionModel"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Web.ISessionModelManager.LoadSession(Tangosol.Web.SessionKey,System.Boolean)">
            <summary>
            Load session from the cache.
            </summary>
            <param name="sessionId">Session key.</param>
            <param name="exclusive">
            Flag specifying whether to obtain exclusive access to the 
            specified session.
            </param>
            <returns>
            The session loaded from the cache.
            </returns>
        </member>
        <member name="M:Tangosol.Web.ISessionModelManager.SaveSession(Tangosol.Web.SessionKey,Tangosol.Web.SessionHolder,System.Boolean)">
            <summary>
            Update session items in the cache and release the exclusive lock.
            </summary>
            <param name="sessionId">Session key.</param>
            <param name="holder">Session holder.</param>
            <param name="newSession">
            Flag specifying whether this is a new session.
            </param>
        </member>
        <member name="M:Tangosol.Web.ISessionModelManager.ReleaseSession(Tangosol.Web.SessionKey,System.Int64)">
            <summary>
            Releases a lock on the session in a data store.
            </summary>
            <param name="sessionId">
            Session key for the current request.
            </param>
            <param name="lockId">
            The lock identifier for the current request.
            </param>
        </member>
        <member name="M:Tangosol.Web.ISessionModelManager.RemoveSession(Tangosol.Web.SessionKey)">
            <summary>
            Delete session from the cache.
            </summary>
            <param name="sessionId">Session key.</param>
        </member>
        <member name="M:Tangosol.Web.ISessionModelManager.ResetSessionTimeout(Tangosol.Web.SessionKey)">
            <summary>
            Reset session timeout.
            </summary>
            <param name="sessionId">Session key.</param>
        </member>
        <member name="P:Tangosol.Web.ISessionModelManager.SessionEndCallback">
            <summary>
            The <b>SessionStateItemExpireCallback</b> delegate for the
            <b>Session_OnEnd</b> event as defined in the Global.asax file.
            </summary>
        </member>
        <member name="T:Tangosol.Web.SessionHolder">
            <summary>
            A holder object that stores model and metadata for a single session.
            </summary>
            <author>Aleksandar Seovic  2009.09.21</author>
        </member>
        <member name="M:Tangosol.Web.SessionHolder.#ctor">
            <summary>
            Deserialization constructor (for internal use only).
            </summary>
        </member>
        <member name="M:Tangosol.Web.SessionHolder.#ctor(Tangosol.Web.ISessionModel,System.Int64,System.Boolean,System.TimeSpan)">
            <summary>
            Initializes a new instance of the SessionHolder.
            </summary>
            <param name="model">
            The session model.
            </param>
            <param name="lockId">
            The lock ID.
            </param>
            <param name="initialized">
            A flag to indicated whether the session is initialized.
            </param>
            <param name="timeout">
            The session timeout value.
            </param>
        </member>
        <member name="M:Tangosol.Web.SessionHolder.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Web.SessionHolder.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="F:Tangosol.Web.SessionHolder.m_version">
            <summary>
            Object version.
            </summary>
        </member>
        <member name="F:Tangosol.Web.SessionHolder.m_lockId">
            <summary>
            Lock identifier.
            </summary>
        </member>
        <member name="F:Tangosol.Web.SessionHolder.m_lockTime">
            <summary>
            Lock time.
            </summary>
        </member>
        <member name="F:Tangosol.Web.SessionHolder.m_initialized">
            <summary>
            Flag specifying whether this session is initailized.
            </summary>
        </member>
        <member name="F:Tangosol.Web.SessionHolder.m_timeout">
            <summary>
            Session timeout.
            </summary>
        </member>
        <member name="F:Tangosol.Web.SessionHolder.m_binModel">
            <summary>
            Serialized session model.
            </summary>
        </member>
        <member name="F:Tangosol.Web.SessionHolder.m_model">
            <summary>
            Session state items.
            </summary>
        </member>
        <member name="P:Tangosol.Web.SessionHolder.Version">
            <summary>
            Object version (used for optimistic locking).
            </summary>
        </member>
        <member name="P:Tangosol.Web.SessionHolder.LockId">
            <summary>
            Lock identifier.
            </summary>
        </member>
        <member name="P:Tangosol.Web.SessionHolder.LockTime">
            <summary>
            Lock time.
            </summary>
        </member>
        <member name="P:Tangosol.Web.SessionHolder.IsLocked">
            <summary>
            True if the session is locked, false otherwise.
            </summary>
        </member>
        <member name="P:Tangosol.Web.SessionHolder.LockAge">
            <summary>
            Lock age.
            </summary>
        </member>
        <member name="P:Tangosol.Web.SessionHolder.Initialized">
            <summary>
            Flag specifying whether this session is initailized.
            </summary>
        </member>
        <member name="P:Tangosol.Web.SessionHolder.Timeout">
            <summary>
            Session timeout.
            </summary>
        </member>
        <member name="P:Tangosol.Web.SessionHolder.SerializedModel">
            <summary>
            Serialized session model.
            </summary>
        </member>
        <member name="P:Tangosol.Web.SessionHolder.Model">
            <summary>
            Session model.
            </summary>
        </member>
        <member name="T:Tangosol.Web.SessionKey">
            <summary>
            Session key.
            </summary>
            <remarks>
            Session key is a combination of user-configurable application 
            identifier and system-generated session identifier.
            </remarks>
            <author>Aleksandar Seovic  2009.09.21</author>
        </member>
        <member name="M:Tangosol.Web.SessionKey.#ctor">
            <summary>
            Deserialization constructor (for internal use only).
            </summary>
        </member>
        <member name="M:Tangosol.Web.SessionKey.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the SessionKey class.
            </summary>
            <param name="applicationId">
            The application ID.
            </param>
            <param name="sessionId">
            The session ID.
            </param>
        </member>
        <member name="M:Tangosol.Web.SessionKey.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Web.SessionKey.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Web.SessionKey.Equals(System.Object)">
            <summary>
            Test objects for equality.
            </summary>
            <param name="obj">Object to compare this object with.</param>
            <returns>
            True if this object and the specified object are equal, 
            false otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Web.SessionKey.GetHashCode">
            <summary>
            Return hash code for this object.
            </summary>
            <returns>This object's hash code.</returns>
        </member>
        <member name="M:Tangosol.Web.SessionKey.op_Equality(Tangosol.Web.SessionKey,Tangosol.Web.SessionKey)">
            <summary>
            Equality operator implementation.
            </summary>
            <param name="left">Left argument.</param>
            <param name="right">Right argument.</param>
            <returns>
            True if arguments are equal, false otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Web.SessionKey.op_Inequality(Tangosol.Web.SessionKey,Tangosol.Web.SessionKey)">
            <summary>
            Inequality operator implementation.
            </summary>
            <param name="left">Left argument.</param>
            <param name="right">Right argument.</param>
            <returns>
            True if arguments are not equal, false otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Web.SessionKey.ToString">
            <summary>
            Return string representation of this object.
            </summary>
            <returns>
            String representation of this object.
            </returns>
        </member>
        <member name="F:Tangosol.Web.SessionKey.m_applicationId">
            <summary>
            Application identifier.
            </summary>
        </member>
        <member name="F:Tangosol.Web.SessionKey.m_sessionId">
            <summary>
            Session identifier.
            </summary>
        </member>
        <member name="P:Tangosol.Web.SessionKey.ApplicationId">
            <summary>
            Application identifier.
            </summary>
        </member>
        <member name="P:Tangosol.Web.SessionKey.SessionId">
            <summary>
            Session identifier.
            </summary>
        </member>
        <member name="T:Tangosol.Web.Model.AbstractSessionModel">
            <summary>
            Abstract base class for session item collections.
            </summary>
            <author>Aleksandar Seovic  2009.10.06</author>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModel.#ctor(Tangosol.Web.Model.AbstractSessionModelManager)">
            <summary>
            Construct session model.
            </summary>
            <param name="model">Manager for this model.</param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModel.Remove(System.String)">
            <summary>
            Deletes an item from the collection.
            </summary>
            <param name="name">
            The name of the item to delete from the collection.
            </param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModel.RemoveAt(System.Int32)">
            <summary>
            Deletes an item at a specified index from the collection.
            </summary>
            <param name="index">
            The index of the item to remove from the collection.
            </param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModel.Clear">
            <summary>
            Removes all values and keys from the session-state collection.
            </summary>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModel.ReadExternal(Tangosol.IO.DataReader)">
            <summary>
            Deserializes model using specified reader.
            </summary>
            <param name="reader">Reader to use.</param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModel.WriteExternal(Tangosol.IO.DataWriter)">
            <summary>
            Serializes model using specified writer.
            </summary>
            <param name="writer">Writer to use.</param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModel.AcquireReadLock">
            <summary>
            Acquire a read lock.
            </summary>
            <remarks>
            This method will block until the read lock is acquired.
            <p/>
            Multiple threads can hold read locks at the same time, but no
            thread will be able to acquire a write lock until all read locks
            are released.
            <p/>
            This method should always be used in combination with a
            <see cref="M:Tangosol.Web.Model.AbstractSessionModel.ReleaseReadLock"/> method in the following manner:
            <code>
            model.AcquireReadLock();
            try
            {
                // access model
            }
            finally
            {
                model.ReleaseReadLock();
            }
            </code>
            This will ensure that the lock is released properly even if an
            exception is thrown by the code within the <c>try</c> block.
            </remarks>
            <seealso cref="M:Tangosol.Web.Model.AbstractSessionModel.AcquireReadLock(System.Int32)"/>
            <seealso cref="M:Tangosol.Web.Model.AbstractSessionModel.ReleaseReadLock"/>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModel.AcquireReadLock(System.Int32)">
            <summary>
            Acquire a read lock.
            </summary>
            <remarks>
            This method will attempt to acquire a read lock for up to
            <paramref name="timeout"/> milliseconds, and will return a boolean 
            value specifying whether or not the lock was acquired successfully.
            <p/>
            Multiple threads can hold read locks at the same time, but no
            thread will be able to acquire a write lock until all read locks
            are released.
            <p/>
            This method should always be used in combination with a
            <see cref="M:Tangosol.Web.Model.AbstractSessionModel.ReleaseReadLock"/> method in the following manner:
            <code>
            if (model.AcquireReadLock(timeout))
            {
                try
                {
                    // access model
                }
                finally
                {
                    model.ReleaseReadLock();
                }
            }
            </code>
            This will ensure that the dictionary is not accessed unless the 
            lock was acquired successfully, and that the lock is released 
            properly even if an exception is thrown by the code within the 
            <c>try</c> block. 
            <p/>
            It is entirely up to you how to handle the case when the 
            <c>AcquireReadLock</c> method returns <c>false</c>. For example,
            you can ignore the fact, throw an exception, or retry the 
            operation by placing the code above within a loop.
            </remarks>
            <param name="timeout">
            Timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if a lock was acquired within the specified time,
            <c>false</c> otherwise.
            </returns>
            <seealso cref="M:Tangosol.Web.Model.AbstractSessionModel.AcquireReadLock"/>
            <seealso cref="M:Tangosol.Web.Model.AbstractSessionModel.ReleaseReadLock"/>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModel.ReleaseReadLock">
            <summary>
            Release a read lock.
            </summary>
            <seealso cref="M:Tangosol.Web.Model.AbstractSessionModel.AcquireReadLock"/>
            <seealso cref="M:Tangosol.Web.Model.AbstractSessionModel.AcquireReadLock(System.Int32)"/>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModel.AcquireWriteLock">
            <summary>
            Acquire a write lock.
            </summary>
            <remarks>
            This method will block until the write lock is acquired.
            <p/>
            Only a single thread can hold the write lock at any given time, 
            and no other threads will be able to acquire either a read lock
            or a write lock until the write lock is released.
            <p/>
            This method should always be used in combination with a
            <see cref="M:Tangosol.Web.Model.AbstractSessionModel.ReleaseWriteLock"/> method in the following manner:
            <code>
            model.AcquireWriteLock();
            try
            {
                // access model
            }
            finally
            {
                model.ReleaseWriteLock();
            }
            </code>
            This will ensure that the lock is released properly even if an
            exception is thrown by the code within the <c>try</c> block.
            </remarks>
            <seealso cref="M:Tangosol.Web.Model.AbstractSessionModel.AcquireWriteLock(System.Int32)"/>
            <seealso cref="M:Tangosol.Web.Model.AbstractSessionModel.ReleaseWriteLock"/>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModel.AcquireWriteLock(System.Int32)">
            <summary>
            Acquire a write lock.
            </summary>
            <remarks>
            This method will attempt to acquire a write lock for up to
            <paramref name="timeout"/> milliseconds, and will return a boolean 
            value specifying whether or not the lock was acquired successfully.
            <p/>
            Only a single thread can hold the write lock at any given time, 
            and no other threads will be able to acquire either a read lock
            or a write lock until the write lock is released.
            <p/>
            This method should always be used in combination with a
            <see cref="M:Tangosol.Web.Model.AbstractSessionModel.ReleaseWriteLock"/> method in the following manner:
            <code>
            if (model.AcquireWriteLock(timeout))
            {
                try
                {
                    // access model
                }
                finally
                {
                    model.ReleaseWriteLock();
                }
            }
            </code>
            This will ensure that the dictionary is not accessed unless the 
            lock was acquired successfully, and that the lock is released 
            properly even if an exception is thrown by the code within the 
            <c>try</c> block. 
            <p/>
            It is entirely up to you how to handle the case when the 
            <c>AcquireWriteLock</c> method returns <c>false</c>. For example,
            you can ignore the fact, throw an exception, or retry the 
            operation by placing the code above within a loop.
            </remarks>
            <param name="timeout">
            Timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if a lock was acquired within the specified time,
            <c>false</c> otherwise.
            </returns>
            <seealso cref="M:Tangosol.Web.Model.AbstractSessionModel.AcquireWriteLock"/>
            <seealso cref="M:Tangosol.Web.Model.AbstractSessionModel.ReleaseWriteLock"/>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModel.ReleaseWriteLock">
            <summary>
            Release a write lock.
            </summary>
            <seealso cref="M:Tangosol.Web.Model.AbstractSessionModel.AcquireWriteLock"/>
            <seealso cref="M:Tangosol.Web.Model.AbstractSessionModel.AcquireWriteLock(System.Int32)"/>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModel.SetDirty">
            <summary>
            Set dirty flag.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModel.CASE_INSENSITIVE_COMPARER">
            <summary>
            Case insensitive comparer to use for key comparison.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModel.m_manager">
            <summary>
            Manager for this model.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModel.m_gate">
            <summary>
            Gate used to synchronize access to this object.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModel.m_dirty">
            <summary>
            Dirty flag.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.AbstractSessionModel.ModelManager">
            <summary>
            Get the manager for this model.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.AbstractSessionModel.Serializer">
            <summary>
            Get item serializer.
            </summary>
            <value>
            Item serializer.
            </value>
        </member>
        <member name="P:Tangosol.Web.Model.AbstractSessionModel.Dirty">
            <summary>
            Gets or sets a value indicating whether the collection has been 
            marked as changed.
            </summary>
            <returns>
            true if the contents have been changed; otherwise, false.
            </returns>
        </member>
        <member name="P:Tangosol.Web.Model.AbstractSessionModel.System#Web#SessionState#ISessionStateItemCollection#Item(System.String)">
            <summary>
            Gets or sets a value in the collection by name.
            </summary>
            <returns>
            The value in the collection with the specified name.
            </returns>
            <param name="name">
            The key name of the value in the collection.
            </param>
        </member>
        <member name="P:Tangosol.Web.Model.AbstractSessionModel.System#Web#SessionState#ISessionStateItemCollection#Item(System.Int32)">
            <summary>
            Gets or sets a value in the collection by numerical index.
            </summary>
            <returns>
            The value in the collection stored at the specified index.
            </returns>
            <param name="index">
            The numerical index of the value in the collection.
            </param>
        </member>
        <member name="P:Tangosol.Web.Model.AbstractSessionModel.SessionId">
            <summary>
            Gets or sets session key.
            </summary>
            <value>
            Session key.
            </value>
        </member>
        <member name="T:Tangosol.Web.Model.AbstractSessionModelManager">
            <summary>
            Abstract base implementation of <see cref="T:Tangosol.Web.ISessionModelManager"/>. 
            </summary>
            <author>Aleksandar Seovic  2009.09.22</author>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.SESSION_CACHE_NAME">
            <summary>
            Default session cache name.
            </summary>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.#ctor(Tangosol.IO.ISerializer)">
            <summary>
            Construct new AbstractSessionModelManager.
            </summary>
            <param name="serializer">Serializer to use.</param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.#ctor(Tangosol.IO.ISerializer,System.String)">
            <summary>
            Construct new AbstractSessionModelManager.
            </summary>
            <param name="serializer">Serializer to use.</param>
            <param name="cacheName">The cache name.</param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.CreateSessionModel">
            <summary>
            Create a new instance of an appropriate 
            <see cref="T:Tangosol.Web.ISessionModel"/> for this model manager.
            </summary>
            <returns>
            An instance of <see cref="T:Tangosol.Web.ISessionModel"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.LoadSession(Tangosol.Web.SessionKey,System.Boolean)">
            <summary>
            Load session from the cache.
            </summary>
            <param name="sessionId">Session key.</param>
            <param name="exclusive">
            Flag specifying whether to obtain exclusive access to the 
            specified session.
            </param>
            <returns>
            The <b>SessionHolder</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.SaveSession(Tangosol.Web.SessionKey,Tangosol.Web.SessionHolder,System.Boolean)">
            <summary>
            Update session items in the cache and release the exclusive lock.
            </summary>
            <param name="sessionId">Session key.</param>
            <param name="holder">Session holder.</param>
            <param name="newSession">
            Flag specifying whether this is a new session.
            </param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.ReleaseSession(Tangosol.Web.SessionKey,System.Int64)">
            <summary>
            Releases a lock on the session in a data store.
            </summary>
            <param name="sessionId">
            Session key for the current request.
            </param>
            <param name="lockId">
            The lock identifier for the current request.
            </param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.RemoveSession(Tangosol.Web.SessionKey)">
            <summary>
            Delete session from the cache.
            </summary>
            <param name="sessionId">Session key.</param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.ResetSessionTimeout(Tangosol.Web.SessionKey)">
            <summary>
            Reset session timeout.
            </summary>
            <param name="sessionId">Session key.</param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.GetSessionHolder(Tangosol.Web.SessionKey,System.Boolean)">
            <summary>
            Get session holder from the cache.
            </summary>
            <param name="key">
            Session key.
            </param>
            <param name="exclusive">
            Flag specifying whether to obtain exclusive access to the specified
            session.
            </param>
            <returns>
            The <b>SessionHolder</b> object.
            </returns>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.GetExternalAttributes(Tangosol.Web.ISessionModel)">
            <summary>
            Get external attributes.
            </summary>
            <param name="model">
            Model to get the external attributes from.
            </param>
            <returns>External attributes dictionary.</returns>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.GetObsoleteExternalAttributes(Tangosol.Web.ISessionModel)">
            <summary>
            Get obsolete external attributes.
            </summary>
            <param name="model">
            Model to get the obsolete external attributes from.
            </param>
            <returns>External attributes dictionary.</returns>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.Serialize(Tangosol.Web.ISessionModel)">
            <summary>
            Serialize specified <b>ISessionModel</b>.
            </summary>
            <param name="model">
            The <b>ISessionModel</b> to serialize.
            </param>
            <returns>
            The serialized form of the given <b>ISessionModel</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.Deserialize(Tangosol.Util.Binary)">
            <summary>
            Deserialize specified Binary into a <b>ISessionModel</b>.
            </summary>
            <param name="binModel">
            A Binary containing the serialized form of a <b>ISessionModel</b>.
            </param>
            <returns>
            The deserialized <b>ISessionModel</b>.
            </returns>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.m_sessionCache">
            <summary>
            Session cache.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.m_serializer">
            <summary>
            Serializer to use.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.m_sessionEndCallback">
            <summary>
            The <b>SessionStateItemExpireCallback</b> delegate for the
            <b>Session_OnEnd</b> event as defined in the Global.asax file.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.AbstractSessionModelManager.SessionEndCallback">
            <summary>
            The <b>SessionStateItemExpireCallback</b> delegate for the
            <b>Session_OnEnd</b> event as defined in the Global.asax file.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.AbstractSessionModelManager.SessionCache">
            <summary>
            Session cache.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.AbstractSessionModelManager.Serializer">
            <summary>
            Serializer to use.
            </summary>
        </member>
        <member name="T:Tangosol.Web.Model.AbstractSessionModelManager.AcquireSessionProcessor">
            <summary>
            Entry processor that acquires session for exclusive access.
            </summary>
        </member>
        <member name="T:Tangosol.Web.Model.AbstractSessionModelManager.ReleaseSessionProcessor">
            <summary>
            Entry processor that releases exclusive access on a session.
            </summary>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.ReleaseSessionProcessor.#ctor(System.Int64)">
            <summary>
            Construct a new instance of SessionReleaseExclusive.
            </summary>
            <param name="lockId">Lock identifier.</param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.ReleaseSessionProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Serializes this processor into a POF stream.
            </summary>
            <param name="writer">
            The POF writer.
            </param>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.ReleaseSessionProcessor.m_lockId">
            <summary>
            Lock identifier.
            </summary>
        </member>
        <member name="T:Tangosol.Web.Model.AbstractSessionModelManager.SaveSessionProcessor">
            <summary>
            Entry processor that updates session items and releases the lock.
            </summary>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.SaveSessionProcessor.#ctor(System.Int64,System.Boolean,System.Boolean,System.Int64,Tangosol.Util.Binary,System.Collections.IDictionary,System.Collections.IList)">
            <summary>
            Construct a new instance of SaveSessionProcessor.
            </summary>
            <param name="lockId">Lock identifier.</param>
            <param name="newSession">
            Flag specifying whether this is a new session.
            </param>
            <param name="initialized">
            Flag specifying whether this session is initialized.
            </param>
            <param name="timeout">Session timeout.</param>
            <param name="binModel">Serialized session model.</param>
            <param name="externalAttributes">External attributes.</param>
            <param name="obsoleteExternalAttributes">Obsolete external
            attributes.</param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.SaveSessionProcessor.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Serializes this processor into a POF stream.
            </summary>
            <param name="writer">
            The POF writer.
            </param>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.SaveSessionProcessor.m_lockId">
            <summary>
            Lock identifier.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.SaveSessionProcessor.m_newSession">
            <summary>
            Flag specifying whether this is a new session.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.SaveSessionProcessor.m_initialized">
            <summary>
            Flag specifying whether this session is initialized.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.SaveSessionProcessor.m_timeout">
            <summary>
            Session timeout.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.SaveSessionProcessor.m_binModel">
            <summary>
            Serialized session model.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.SaveSessionProcessor.m_externalAttributes">
            <summary>
            External attributes (used by Split model only).
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.SaveSessionProcessor.m_obsoleteExternalAttributes">
            <summary>
            Obsolete external attributes (used by Split model only).
            </summary>
        </member>
        <member name="T:Tangosol.Web.Model.AbstractSessionModelManager.ResetSessionTimeoutProcessor">
            <summary>
            Entry processor that resets session timeout.
            </summary>
        </member>
        <member name="T:Tangosol.Web.Model.AbstractSessionModelManager.SessionEndListener">
            <summary>
            <b>ICacheListener</b> implementation that listens for HTTP session
            deleted events and dispatches <b>Session_OnEnd</b> events to a
            <b>SessionStateItemExpireCallback</b> delegate.
            </summary>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.SessionEndListener.#ctor(Tangosol.Web.ISessionModelManager,Tangosol.Web.SessionKey)">
            <summary>
            Create a new SessionEndListener that will dispatch
            <b>Session_OnEnd</b> events when an HTTP session 
            expires from the <b>INamedCache</b>.
            </summary>
            <param name="modelManager">
            The model manager to use.
            </param>
            <param name="sessionId">
            Session identifier.
            </param>
        </member>
        <member name="M:Tangosol.Web.Model.AbstractSessionModelManager.SessionEndListener.EntryDeleted(Tangosol.Net.Cache.CacheEventArgs)">
            <summary>
            Invoked when a cache entry has been deleted.
            </summary>
            <param name="evt">
            The <see cref="T:Tangosol.Net.Cache.CacheEventArgs"/> carrying the remove
            information.
            </param>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.SessionEndListener.m_modelManager">
            <summary>
            The model manager to use.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.AbstractSessionModelManager.SessionEndListener.m_sessionId">
            <summary>
            ID of the session this listener is registered for.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.AbstractSessionModelManager.SessionEndListener.EventFilter">
            <summary>
            Return an event filter that should be used when registering
            or unregistering this listener.
            </summary>
        </member>
        <member name="T:Tangosol.Web.Model.MonolithicSessionModel">
            <summary>
            Implementation of a <see cref="T:Tangosol.Web.ISessionModel"/>
            that serializes and deserializes all session state items
            on each request.
            </summary>
            <author>Aleksandar Seovic  2009.10.06</author>
        </member>
        <member name="M:Tangosol.Web.Model.MonolithicSessionModel.#ctor(Tangosol.Web.Model.AbstractSessionModelManager)">
            <summary>
            Construct MonolithicSessionModel.
            </summary>
            <param name="manager">Manager for this model.</param>
        </member>
        <member name="M:Tangosol.Web.Model.MonolithicSessionModel.ReadExternal(Tangosol.IO.DataReader)">
            <summary>
            Deserializes model using specified reader.
            </summary>
            <param name="reader">Reader to use.</param>
        </member>
        <member name="M:Tangosol.Web.Model.MonolithicSessionModel.WriteExternal(Tangosol.IO.DataWriter)">
            <summary>
            Serializes model using specified writer.
            </summary>
            <param name="writer">Writer to use.</param>
        </member>
        <member name="T:Tangosol.Web.Model.MonolithicSessionModelManager">
            <summary>
            Implementation of <see cref="T:Tangosol.Web.ISessionModelManager"/> that serializes 
            and deserializes all session items on each request. 
            </summary>
            <author>Aleksandar Seovic  2008.11.13</author>
        </member>
        <member name="M:Tangosol.Web.Model.MonolithicSessionModelManager.#ctor(Tangosol.IO.ISerializer)">
            <summary>
            Construct instance of MonolithicSessionModelManager.
            </summary>
            <param name="serializer">Serializer to use.</param>
        </member>
        <member name="M:Tangosol.Web.Model.MonolithicSessionModelManager.#ctor(Tangosol.IO.ISerializer,System.String)">
            <summary>
            Construct instance of MonolithicSessionModelManager.
            </summary>
            <param name="serializer">Serializer to use.</param>
            <param name="cacheName">The cache name.</param>
        </member>
        <member name="M:Tangosol.Web.Model.MonolithicSessionModelManager.CreateSessionModel">
            <summary>
            Create a <see cref="T:Tangosol.Web.ISessionModel"/> instance.
            </summary>
            <returns>
            An instance of <see cref="T:Tangosol.Web.ISessionModel"/>.
            </returns>
        </member>
        <member name="T:Tangosol.Web.Model.SplitSessionModel">
            <summary>
            Implementation of a <see cref="T:Tangosol.Web.ISessionModel"/>
            that deserializes individual items on demand and stores
            attributes that exceed certain size as separate cache
            entries.
            </summary>
            <author>Aleksandar Seovic  2008.10.18</author>
        </member>
        <member name="T:Tangosol.Web.Model.TraditionalSessionModel">
            <summary>
            Implementation of a <see cref="T:Tangosol.Web.ISessionModel"/>
            that deserializes individual items on demand.
            </summary>
            <author>Aleksandar Seovic  2008.10.18</author>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.#ctor(Tangosol.Web.Model.AbstractSessionModelManager)">
            <summary>
            Construct TraditionalSessionModel.
            </summary>
            <param name="manager">Manager for this model.</param>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.#ctor(Tangosol.Web.Model.AbstractSessionModelManager,Tangosol.Util.Binary)">
            <summary>
            Construct TraditionalSessionModel instance.
            </summary>
            <param name="manager">Manager for this model.</param>
            <param name="binItems">Serialized items.</param>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.ReadExternal(Tangosol.IO.DataReader)">
            <summary>
            Deserializes item collection using specified reader.
            </summary>
            <param name="reader">Reader to use.</param>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.WriteExternal(Tangosol.IO.DataWriter)">
            <summary>
            Serializes item collection using specified writer.
            </summary>
            <param name="writer">Writer to use.</param>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.InitializeAttribute(System.String,System.Int32,System.Int32)">
            <summary>
            Initialize session attribute. 
            </summary>
            <param name="name">Attribute name.</param>
            <param name="of">Value offset within serialized items binary.</param>
            <param name="cb">The length of the serialized value in bytes.</param>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.AddAttribute(System.String)">
            <summary>
            Add new attribute to underlying name-value collection.
            </summary>
            <param name="name">Attribute name.</param>
            <returns>A holder for the added attribute.</returns>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.AddAttribute(Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder)">
            <summary>
            Add existing attribute to underlying name-value collection.
            </summary>
            <param name="attr">Attribute holder to add.</param>
            <returns>Added attribute holder.</returns>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.InstantiateAttributeHolder(System.String,Tangosol.Util.Binary,System.Int32)">
            <summary>
            Instantiate attribute holder for existing session attribute.
            </summary>
            <param name="name">Attribute name.</param>
            <param name="binValue">Serialized attribute value.</param>
            <param name="of">Attribute offset within collection buffer.</param>
            <returns>Attribute holder.</returns>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.InstantiateAttributeHolder(System.String)">
            <summary>
            Instantiate attribute holder for new session attribute.
            </summary>
            <param name="name">Attribute name.</param>
            <returns>Attribute holder.</returns>
        </member>
        <member name="F:Tangosol.Web.Model.TraditionalSessionModel.m_binItems">
            <summary>
            Serialized items.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.TraditionalSessionModel.System#Web#SessionState#ISessionStateItemCollection#Item(System.String)">
            <summary>
            Gets or sets a value in the collection by name.
            </summary>
            <param name="name">
            The key name of the value in the collection.
            </param>
            <returns>
            The value in the collection with the specified name.
            </returns>
        </member>
        <member name="P:Tangosol.Web.Model.TraditionalSessionModel.System#Web#SessionState#ISessionStateItemCollection#Item(System.Int32)">
            <summary>
            Gets or sets a value in the collection by numerical index.
            </summary>
            <param name="index">
            The numerical index of the value in the collection.
            </param>
            <returns>
            The value in the collection stored at the specified index.
            </returns>
        </member>
        <member name="T:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder">
            <summary>
            Attribute holder.
            </summary>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.#ctor(Tangosol.Web.Model.AbstractSessionModel,System.String,Tangosol.Util.Binary,System.Int32)">
            <summary>
            Construct AttributeHolder instance from a buffer.
            </summary>
            <param name="parent">
            Parent collection.</param>
            <param name="name">
            Attribute name.</param>
            <param name="binValue">
            Serialized attribute value.</param>
            <param name="of">
            Attribute offset within collection buffer.</param>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.#ctor(Tangosol.Web.Model.AbstractSessionModel,System.String)">
            <summary>
            Construct AttributeHolder instance.
            </summary>
            <param name="parent">
            Parent collection.</param>
            <param name="name">
            Attribute name.</param>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.#ctor(Tangosol.Web.Model.AbstractSessionModel,System.String,System.Object)">
            <summary>
            Construct AttributeHolder instance.
            </summary>
            <param name="parent">
            Parent collection.</param>
            <param name="name">
            Attribute name.</param>
            <param name="value">
            Attribute value.</param>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.SetDirty">
            <summary>
            Mark this attribute as dirty.
            </summary>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.WriteExternal(Tangosol.IO.DataWriter)">
            <summary>
            Serialize this attribute using specified writer.
            </summary>
            <param name="writer">Data writer to use.</param>
        </member>
        <member name="F:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.m_parent">
            <summary>
            Parent model.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.m_name">
            <summary>
            Attribute name.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.m_of">
            <summary>
            Offset of this attribute's value within serialized items buffer.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.m_value">
            <summary>
            Attribute value.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.m_binValue">
            <summary>
            Serialized (binary) attribute value.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.m_dirty">
            <summary>
            Dirty flag.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.Name">
            <summary>
            Get attribute name.
            </summary>
            <value>Attribute name.</value>
        </member>
        <member name="P:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.Value">
            <summary>
            Get or set attribute value.
            </summary>
            <value>Attribute value.</value>
        </member>
        <member name="P:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.BinaryValue">
            <summary>
            Get binary value.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.Dirty">
            <summary>
            Get the flag specifying whether this attribute is dirty.
            </summary>
            <value>
            true if this attribute is dirty, false otherwise.
            </value>
        </member>
        <member name="P:Tangosol.Web.Model.TraditionalSessionModel.AttributeHolder.Serializer">
            <summary>
            Attribute serializer.
            </summary>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.#ctor(Tangosol.Web.Model.AbstractSessionModelManager)">
            <summary>
            Construct SplitSessionModel.
            </summary>
            <param name="manager">Manager for this model.</param>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.#ctor(Tangosol.Web.Model.AbstractSessionModelManager,Tangosol.Util.Binary)">
            <summary>
            Construct SplitSessionModel.
            </summary>
            <param name="manager">Manager for this model.</param>
            <param name="binModel">Serialized model.</param>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.GetExternalAttributes">
            <summary>
            Return a map of external attributes.
            </summary>
            <returns>External attributes.</returns>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.GetObsoleteExternalAttributes">
            <summary>
            Return a map of external obsolete attributes.
            These atributes once were big so they were taken in external cache and now the size is smaller than 
            limit for going to external cache so they need to be evicted from the external cache
            </summary>
            <returns>Obsolete External attributes.</returns>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.InstantiateAttributeHolder(System.String,Tangosol.Util.Binary,System.Int32)">
            <summary>
            Instantiate attribute holder for existing session attribute.
            </summary>
            <param name="name">Attribute name.</param>
            <param name="binValue">Serialized attribute value.</param>
            <param name="of">Attribute offset within collection buffer.</param>
            <returns>Attribute holder.</returns>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.InstantiateAttributeHolder(System.String)">
            <summary>
            Instantiate attribute holder for new session attribute.
            </summary>
            <param name="name">Attribute name.</param>
            <returns>Attribute holder.</returns>
        </member>
        <member name="T:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeHolder">
            <summary>
            Attribute holder.
            </summary>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeHolder.#ctor(Tangosol.Web.Model.AbstractSessionModel,System.String,Tangosol.Util.Binary,System.Int32)">
            <summary>
            Construct AttributeHolder instance from a buffer.
            </summary>
            <param name="parent">
            Parent collection.</param>
            <param name="name">
            Attribute name.</param>
            <param name="binValue">
            Serialized attribute value.</param>
            <param name="of">
            Attribute offset within collection buffer.</param>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeHolder.#ctor(Tangosol.Web.Model.AbstractSessionModel,System.String)">
            <summary>
            Construct AttributeHolder instance.
            </summary>
            <param name="parent">
            Parent collection.</param>
            <param name="name">
            Attribute name.</param>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeHolder.#ctor(Tangosol.Web.Model.AbstractSessionModel,System.String,System.Object)">
            <summary>
            Construct AttributeHolder instance.
            </summary>
            <param name="parent">
            Parent collection.</param>
            <param name="name">
            Attribute name.</param>
            <param name="value">
            Attribute value.</param>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeHolder.LoadExternalAttributeValue">
            <summary>
            Load external attribute value.
            </summary>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeHolder.WriteExternal(Tangosol.IO.DataWriter)">
            <summary>
            Serialize this attribute using specified writer.
            </summary>
            <param name="writer">Data writer to use.</param>
        </member>
        <member name="F:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeHolder.m_external">
            <summary>
            Flag specifying whether this is external attribute.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeHolder.m_wasExternal">
            <summary>
            Flag specifying whether this attribute was serialised as external attribute.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeHolder.Value">
            <summary>
            Get or set attribute value.
            </summary>
            <value>Attribute value.</value>
        </member>
        <member name="P:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeHolder.External">
            <summary>
            True if this is external attribute.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeHolder.ExternalObsolete">
            <summary>
            True if this atribute was external and became internal
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeHolder.ModelManager">
            <summary>
            Model manager for the parent model.
            </summary>
        </member>
        <member name="T:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey">
            <summary>
            External attribute key.
            </summary>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey.#ctor(Tangosol.Web.SessionKey,System.String)">
            <summary>
            Construct ExternalAttributeKey instance.
            </summary>
            <param name="sessionKey">
            The session key.
            </param>
            <param name="attributeName">
            The attribute name.
            </param>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey.ReadExternal(Tangosol.IO.Pof.IPofReader)">
            <summary>
            Restore the contents of a user type instance by reading its state
            using the specified <see cref="T:Tangosol.IO.Pof.IPofReader"/> object.
            </summary>
            <param name="reader">
            The <b>IPofReader</b> from which to read the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey.WriteExternal(Tangosol.IO.Pof.IPofWriter)">
            <summary>
            Save the contents of a POF user type instance by writing its
            state using the specified <see cref="T:Tangosol.IO.Pof.IPofWriter"/> object.
            </summary>
            <param name="writer">
            The <b>IPofWriter</b> to which to write the object's state.
            </param>
            <exception cref="T:System.IO.IOException">
            If an I/O error occurs.
            </exception>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey.Equals(System.Object)">
            <summary>
            Test objects for equality.
            </summary>
            <param name="obj">Object to compare this object with.</param>
            <returns>
            True if this object and the specified object are equal, 
            false otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey.GetHashCode">
            <summary>
            Return hash code for this object.
            </summary>
            <returns>This object's hash code.</returns>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey.op_Equality(Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey,Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey)">
            <summary>
            Equality operator implementation.
            </summary>
            <param name="left">Left argument.</param>
            <param name="right">Right argument.</param>
            <returns>
            True if arguments are equal, false otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey.op_Inequality(Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey,Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey)">
            <summary>
            Inequality operator implementation.
            </summary>
            <param name="left">Left argument.</param>
            <param name="right">Right argument.</param>
            <returns>
            True if arguments are not equal, false otherwise.
            </returns>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey.ToString">
            <summary>
            Return string representation of this object.
            </summary>
            <returns>
            String representation of this object.
            </returns>
        </member>
        <member name="F:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey.m_sessionKey">
            <summary>
            Session key.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey.m_attributeName">
            <summary>
            Attribute name.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.SplitSessionModel.ExternalAttributeKey.AssociatedKey">
            <summary>
            Determine the key object to which this key object is associated.
            </summary>
            <remarks>
            The key object returned by this method is often referred to as a
             <i>host key</i>.
            </remarks>
            <value>
            The host key that for this key object, or <c>null</c> if this key
            has no association.
            </value>
        </member>
        <member name="T:Tangosol.Web.Model.SplitSessionModelManager">
            <summary>
            Implementation of <see cref="T:Tangosol.Web.ISessionModelManager"/> that
            stores large session attributes as separate cache entries. 
            </summary>
            <author>Aleksandar Seovic  2009.10.07</author>
        </member>
        <member name="F:Tangosol.Web.Model.SplitSessionModelManager.EXTERNAL_ATTRIBUTES_CACHE_NAME">
            <summary>
            External attributes cache name.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.SplitSessionModelManager.DEFAULT_MIN_EXT_ATTRIBUTE_SIZE">
            <summary>
            Default minimum external attribute size.
            </summary>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModelManager.#ctor(Tangosol.IO.ISerializer,System.Int32)">
            <summary>
            Construct instance of SplitSessionModelManager.
            </summary>
            <param name="serializer">Serializer to use.</param>
            <param name="minExtAttributeSize">Minimum external attribute size.</param>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModelManager.#ctor(Tangosol.IO.ISerializer,System.String,System.Int32)">
            <summary>
            Construct instance of SplitSessionModelManager.
            </summary>
            <param name="serializer">Serializer to use.</param>
            <param name="cacheName">The cache name.</param>
            <param name="minExtAttributeSize">Minimum external attribute size.</param>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModelManager.CreateSessionModel">
            <summary>
            Create a <see cref="T:Tangosol.Web.ISessionModel"/> instance.
            </summary>
            <returns>
            An instance of <see cref="T:Tangosol.Web.ISessionModel"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModelManager.Deserialize(Tangosol.Util.Binary)">
            <summary>
            Deserialize specified Binary into a <b>ISessionModel</b>.
            </summary>
            <param name="binModel">
            A Binary containing the serialized form of a <b>ISessionModel</b>.
            </param>
            <returns>
            The deserialized <b>ISessionModel</b>.
            </returns>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModelManager.GetExternalAttributes(Tangosol.Web.ISessionModel)">
            <summary>
            Get external attributes.
            </summary>
            <param name="model">
            Model to get the external attributes from.
            </param>
            <returns>External attributes dictionary.</returns>
        </member>
        <member name="M:Tangosol.Web.Model.SplitSessionModelManager.GetObsoleteExternalAttributes(Tangosol.Web.ISessionModel)">
            <summary>
            Get obsolete external attributes.
            </summary>
            <param name="model">
            Model to get the obsolete external attributes from.
            </param>
            <returns>External attributes dictionary.</returns>
        </member>
        <member name="F:Tangosol.Web.Model.SplitSessionModelManager.m_externalAttributeCache">
            <summary>
            External attribute cache.
            </summary>
        </member>
        <member name="F:Tangosol.Web.Model.SplitSessionModelManager.m_minExtAttributeSize">
            <summary>
            Minimum external attribute size.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.SplitSessionModelManager.ExternalAttributeCache">
            <summary>
            External attribute cache.
            </summary>
        </member>
        <member name="P:Tangosol.Web.Model.SplitSessionModelManager.MinExtAttributeSize">
            <summary>
            Minimum external attribute size.
            </summary>
        </member>
        <member name="T:Tangosol.Web.Model.TraditionalSessionModelManager">
            <summary>
            Implementation of <see cref="T:Tangosol.Web.ISessionModelManager"/> that
            transfers whole session state as a single entity, but
            only deserializes and serializes individual items on demand. 
            </summary>
            <author>Aleksandar Seovic  2009.10.06</author>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModelManager.#ctor(Tangosol.IO.ISerializer)">
            <summary>
            Construct instance of TraditionalSessionModelManager.
            </summary>
            <param name="serializer">Serializer to use.</param>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModelManager.#ctor(Tangosol.IO.ISerializer,System.String)">
            <summary>
            Construct instance of TraditionalSessionModelManager.
            </summary>
            <param name="serializer">Serializer to use.</param>
            <param name="cacheName">The cache name.</param>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModelManager.CreateSessionModel">
            <summary>
            Create a <see cref="T:Tangosol.Web.ISessionModel"/> instance.
            </summary>
            <returns>
            An instance of <see cref="T:Tangosol.Web.ISessionModel"/>.
            </returns>
        </member>
        <member name="M:Tangosol.Web.Model.TraditionalSessionModelManager.Deserialize(Tangosol.Util.Binary)">
            <summary>
            Deserialize specified Binary into a <b>ISessionModel</b>.
            </summary>
            <param name="binModel">
            A Binary containing the serialized form of a <b>ISessionModel</b>.
            </param>
            <returns>
            The deserialized ISessionModel.
            </returns>
        </member>
    </members>
</doc>
